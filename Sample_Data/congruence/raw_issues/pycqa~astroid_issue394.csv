"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","394","pycqa","astroid","rr-","2017-01-30 08:48:02","Crude implementation for #393 ","start issue","Add support for annotated assignment nodes"
"issue_closed","394","pycqa","astroid","PCManticore","2017-02-09 08:14:11","","closed issue","Add support for annotated assignment nodes"
"pull_request_title","394","pycqa","astroid","rr-","2017-01-30 08:48:02","Crude implementation for #393 ","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","Add support for annotated assignment nodes"
"issue_comment","394","pycqa","astroid","coveralls","2017-01-30 08:55:37","
[![Coverage Status](https://coveralls.io/builds/9900337/badge)](https://coveralls.io/builds/9900337)

Coverage decreased (-0.1%) to 89.203% when pulling **1319a00eab7833c5986ebb40173c8d63bc54d5a0 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-01-30 08:55:37","
[![Coverage Status](https://coveralls.io/builds/9900337/badge)](https://coveralls.io/builds/9900337)

Coverage decreased (-0.1%) to 89.203% when pulling **1319a00eab7833c5986ebb40173c8d63bc54d5a0 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","ceridwen","2017-01-30 20:31:09","Can you add a test for this to unittest_nodes.py?  The existing test Python35AyncTest in that file should be a good model.","",""
"issue_comment","394","pycqa","astroid","rr-","2017-01-30 21:50:03","Pushed a basic test","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-01-30 21:55:04","
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-01-30 21:55:04","
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-01-30 21:55:04","
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-01-30 21:55:04","
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-01-30 21:55:04","
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","ceridwen","2017-01-30 22:36:16","Sorry I forgot to mention this before, but you should use the _visit_or_none helper function in the rebuilder method, and it should be in TreeRebuilder3 since it's a Python 3 feature.","",""
"issue_comment","394","pycqa","astroid","rr-","2017-01-31 08:01:04","Updated~","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-01-31 08:05:30","
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-01-31 08:05:30","
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-01-31 08:05:30","
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-01-31 08:05:30","
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-01-31 08:05:30","
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","rr-","2017-02-05 13:54:18","Updated~ (made separate commit to ease the review, it's to be squashed at later time)","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-05 13:59:03","
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-05 13:59:03","
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-05 13:59:03","
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-05 13:59:03","
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-05 13:59:03","
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","ceridwen","2017-02-07 15:44:06","I'm going to merge this tomorrow or so if there are no more comments, unless someone else wants to do it.  The remaining CI failure looks like a misconfiguration of pylint somehow.","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 16:51:19","
[![Coverage Status](https://coveralls.io/builds/10036976/badge)](https://coveralls.io/builds/10036976)

Coverage increased (+0.03%) to 89.335% when pulling **5bd21c2d1caaf4783a3b07892c1690c3f8629f6c on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 16:51:19","
[![Coverage Status](https://coveralls.io/builds/10036976/badge)](https://coveralls.io/builds/10036976)

Coverage increased (+0.03%) to 89.335% when pulling **5bd21c2d1caaf4783a3b07892c1690c3f8629f6c on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 16:51:19","
[![Coverage Status](https://coveralls.io/builds/10036976/badge)](https://coveralls.io/builds/10036976)

Coverage increased (+0.03%) to 89.335% when pulling **5bd21c2d1caaf4783a3b07892c1690c3f8629f6c on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 16:54:27","
[![Coverage Status](https://coveralls.io/builds/10037020/badge)](https://coveralls.io/builds/10037020)

Coverage increased (+0.03%) to 89.335% when pulling **5bd21c2d1caaf4783a3b07892c1690c3f8629f6c on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 17:02:18","
[![Coverage Status](https://coveralls.io/builds/10037203/badge)](https://coveralls.io/builds/10037203)

Coverage increased (+0.03%) to 89.335% when pulling **f39ab6377dce29292f8e8b8867f571b1e99eb73a on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 20:45:53","
[![Coverage Status](https://coveralls.io/builds/10041540/badge)](https://coveralls.io/builds/10041540)

Coverage increased (+0.03%) to 89.335% when pulling **275ff6135e7befc807e0f6169a7c5b7b69a15d48 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 22:35:57","
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 22:35:57","
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 22:35:57","
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 22:35:58","
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 22:35:58","
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 22:38:28","
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 22:38:28","
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 22:38:28","
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 22:38:28","
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","coveralls","2017-02-07 22:38:28","
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
","",""
"issue_comment","394","pycqa","astroid","PCManticore","2017-02-09 08:14:11","I merged this manually, with a couple of small changes, such as putting ``simple`` in ``_other_fields``, instead of ``_astroid_fields``. Thank you so much @rr- for your contribution!","",""
"pull_request_commit_comment","394","pycqa","astroid","rogalski","2017-02-05 10:49:09","Please extend test suite for more complex cases found in [PEP526](https://www.python.org/dev/peps/pep-0526/):

```
primes: List[int] = []

captain: str  # Note: no initial value!

class Starship:
    stats: ClassVar[Dict[str, int]] = {}
```","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","(None, '', u'astroid/tests/unittest_nodes.py')"
"pull_request_commit_comment","394","pycqa","astroid","rogalski","2017-02-05 10:50:09","Consider using `test_utils.require_version` decorator.","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","(None, '', u'astroid/tests/unittest_nodes.py')"
"pull_request_commit_comment","394","pycqa","astroid","rogalski","2017-02-05 10:57:14","this likely should be named `target`, not `targets`. Annotated assign cannot be done anyway:

```
>>> (a, b): (int, int)
  File ""<stdin>"", line 1
SyntaxError: only single target (not tuple) can be annotated
```

Also, `help(_ast.AnnAssign)` yields:

    _fields = ('target', 'annotation', 'value', 'simple')

Astroid is supposed to be superset of `ast` and should be consistent with it. I'll recommend changing `_astroid_fields` value quoted above.

[PEP](https://www.python.org/dev/peps/pep-0526/#runtime-effects-of-type-annotations) also mentions _simple name_, but I don't think it affects us in any way.","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","(None, '', u'astroid/node_classes.py')"
"pull_request_commit_comment","394","pycqa","astroid","rogalski","2017-02-07 15:53:00","we should add `simple` and change ordering to be in conformance with built-in `ast`.

```
>>> ast.parse('a: int').body[0]._fields
('target', 'annotation', 'value', 'simple')
```","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","(None, '', u'astroid/node_classes.py')"
"pull_request_commit_comment","394","pycqa","astroid","rogalski","2017-02-07 15:54:05","maybe actually indenting it and using `textwrap.dedent` will look slightly nicer in a code.","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","(None, '', u'astroid/tests/unittest_nodes.py')"
"pull_request_commit_comment","394","pycqa","astroid","rogalski","2017-02-07 15:55:42","Just a nitpick, test cases should be correct, let's use type specification for both keys and values: `Dict[str, str]`","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","(None, '', u'astroid/tests/unittest_nodes.py')"
"pull_request_commit_comment","394","pycqa","astroid","PCManticore","2017-02-07 16:31:01","visit an*","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","(None, '', u'astroid/rebuilder.py')"
"pull_request_commit_comment","394","pycqa","astroid","rogalski","2017-02-07 21:32:11","@PCManticore just before merging it - is it correct way to do it (creation of fake Const node)?

I encountered a very similar situation during implementation of [async comprehensions] support for astroid. ","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","(None, '', u'astroid/rebuilder.py')"
"pull_request_commit_comment","394","pycqa","astroid","PCManticore","2017-02-07 21:36:45","Mm, now that you mention this, we can probably call ``visit_const`` instead of building it on our own. Thanks for finding this.","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","(None, '', u'astroid/rebuilder.py')"
"pull_request_commit_comment","394","pycqa","astroid","ceridwen","2017-02-07 21:39:53","Something I just noticed: which of these fields are optional in the standard-library ast nodes?  I'm assuming that the annotation, target, and value fields aren't, but I haven't looked at 3.6 myself.  Whatever fields aren't optional should have required arguments.  There's legacy code that requires that it be possible to build some AST nodes without having all the mandatory fields set, but this is bad practice, and we shouldn't be carrying it forward to new nodes.","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","(None, '', u'astroid/node_classes.py')"
"pull_request_commit_comment","394","pycqa","astroid","rr-","2017-02-07 21:45:18","https://docs.python.org/3/library/ast.html
```
          -- 'simple' indicates that we annotate simple name without parens
          | AnnAssign(expr target, expr annotation, expr? value, int simple)
```

Looks like only `value` is optional","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","(None, '', u'astroid/node_classes.py')"
"pull_request_commit","394","pycqa","astroid","rr-","2017-01-30 08:45:55","Add support for annotated assignment nodes","437560727e58b738c660b273c85bcea5badb4e71",""
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-05 13:53:56","review fixes","b7c88492163f36559dad3c673b81566f48ab03a2",""
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-07 16:45:20","review fixes (II)","60b384f8668b588f33cd03ef92820f06b3ba21c4",""
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-07 16:47:18","add changelog entry","5bd21c2d1caaf4783a3b07892c1690c3f8629f6c",""
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-07 16:57:06","fix indentation","f39ab6377dce29292f8e8b8867f571b1e99eb73a",""
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-07 20:41:17","fix too long line","275ff6135e7befc807e0f6169a7c5b7b69a15d48",""
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-07 22:30:59","make non-optional arguments required","462925a0942847272744b1742a6bbfc4e83d38b1",""
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-07 22:32:47","use visit_const","ddc652e44fc1c9946cf9439aecaea3d82d217ff8",""
