,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
1,issue_title,590,nilearn,nilearn,KamalakerDadi,2015-05-18 11:47:58,"trying to solve bunch and nilearn_data storage problem.
",start issue,Fix 486
2,issue_closed,590,nilearn,nilearn,AlexandreAbraham,2015-06-01 08:29:14,,closed issue,Fix 486
3,pull_request_title,590,nilearn,nilearn,KamalakerDadi,2015-05-18 11:47:58,"trying to solve bunch and nilearn_data storage problem.
",b99a0db91c492182ebc8c81c4ef4d01a58da5790,Fix 486
4,issue_comment,590,nilearn,nilearn,AlexandreAbraham,2015-05-18 11:59:13,"You don't fix all points in #486, thus you shouldn't say that you fix it because, if we merge your PR, the issue will be closed automatically.
",,
5,issue_comment,590,nilearn,nilearn,AlexandreAbraham,2015-06-01 08:29:14,"Changes integrated in #597.
",,
6,pull_request_commit_comment,590,nilearn,nilearn,AlexandreAbraham,2015-05-18 11:59:27,"This code does not belong to this PR.
",b99a0db91c492182ebc8c81c4ef4d01a58da5790,"(12, '', u'nilearn/plotting/img_plotting.py')"
7,pull_request_commit_comment,590,nilearn,nilearn,AlexandreAbraham,2015-05-18 12:00:05,"Removing features does not mean fixing them. Do not take example on @banilo!
",b99a0db91c492182ebc8c81c4ef4d01a58da5790,"(28, '', u'nilearn/datasets.py')"
8,pull_request_commit,590,nilearn,nilearn,KamalakerDadi,2015-05-16 17:48:34,Adding a 4Dplot function displaying as a contours in img_plotting using a Harvard Oxford 4D maps,2c42c8f46d9426d16b5443f33c4539ca8f93082e,
9,pull_request_commit,590,nilearn,nilearn,KamalakerDadi,2015-05-18 11:44:32,Fix the bunch and local storage problem in harvard_oxford fetcher,b99a0db91c492182ebc8c81c4ef4d01a58da5790,
0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
1,issue_title,588,nilearn,nilearn,KamalakerDadi,2015-05-15 14:27:23,"I am trying to do 4D plotting using contours. I am able to plot contours on an anatomical image MNI template using Harvard Oxford 4D atlas maps. As shown below:

``` python
import nibabel
import matplotlib.pyplot as pl
from nilearn import plotting, datasets
from nilearn.image import iter_img
import pylab as plt

atlas_img_4D, labels = datasets.fetch_harvard_oxford('cort-prob-2mm')
img = nibabel.load(atlas_img_4D)

n_colors= img.shape[3]
node_colors = [plt.cm.spectral(i / float(n_colors))
                                                for i in range(n_colors)]
display = plotting.plot_anat()
for i, cur_img in enumerate(iter_img(atlas_img_4D)):
    display.add_contours(cur_img, levels=[30], linewidths=2,      
                         colors = [node_colors[i][0:3]])

pl.show()
```

Output:
![fcontour](https://cloud.githubusercontent.com/assets/11410385/7654518/00cdd048-fb1e-11e4-965c-606916b8bc5f.png)

However, I am raising problems using a MSDL Atlas. I could not able to show contours on default MNI template in `plot_anat.py`. Any advise on how to resample each map to MNI space ?
",start issue,4D plotting resampling issue using MSDL atlas
2,issue_closed,588,nilearn,nilearn,AlexandreAbraham,2015-05-18 10:04:56,,closed issue,4D plotting resampling issue using MSDL atlas
3,issue_comment,588,nilearn,nilearn,GaelVaroquaux,2015-05-15 16:12:41,"Hi @KamalakerDadi 

You should not need to resample.

Could you do a pull request with the code that you have as a function in img_plotting and an example that produces the problem that you are having with the MSDL atlas.
",,
4,issue_comment,588,nilearn,nilearn,AlexandreAbraham,2015-05-18 10:04:56,"Change the `levels` parameter in `add_contours` to `0.1` and it will work.
",,
0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
1,issue_title,586,nilearn,nilearn,AlexandreAbraham,2015-05-13 09:22:46,"And reference it in http://en.wikipedia.org/wiki/List_of_functional_connectivity_software and in http://en.wikipedia.org/wiki/List_of_neuroimaging_software.
",start issue,Create a wikipedia page for nilearn
2,issue_closed,586,nilearn,nilearn,GaelVaroquaux,2015-05-19 07:44:31,,closed issue,Create a wikipedia page for nilearn
3,issue_comment,586,nilearn,nilearn,GaelVaroquaux,2015-05-13 09:24:04,"I am not sure it is worth creating a wikipedia page. I would just add a
reference on the pages on neuroimaging software.
",,
4,issue_comment,586,nilearn,nilearn,AlexandreAbraham,2015-05-13 09:37:32,"For me, it is a way to look more ""serious"" (even if the page is small) and it is the only way to get a link to the website.
",,
5,issue_comment,586,nilearn,nilearn,AlexandreAbraham,2015-05-19 07:41:29,"Page not created but nilearn referenced in the software lists.
",,
6,issue_comment,586,nilearn,nilearn,bthirion,2015-05-19 07:43:40,"Thx @AlexandreAbraham 
",,
7,issue_comment,586,nilearn,nilearn,GaelVaroquaux,2015-05-19 07:44:31,"Thank you! Closing the issue.
",,
8,issue_comment,586,nilearn,nilearn,AlexandreAbraham,2015-05-19 09:04:42,"No problem, I wanted to get rid of these annoying Wikipedia tabs in my browser ;).
",,
0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
1,issue_title,591,nilearn,nilearn,jlhanson5,2015-05-19 13:50:07,"Hello all, 

I was having an issue installing nilearn (potentially related to my python or OS version?). When initially trying to install nilearn with pip, I got the following output (with a few warnings)...

```
MNI-Space:Desktop jamielarshanson$ sudo pip install -U --user nilearn
Password:
The directory '/Users/jamielarshanson/Library/Logs/pip' or its parent directory is not owned by the current user and the debug log has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
The directory '/Users/jamielarshanson/Library/Caches/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
The directory '/Users/jamielarshanson/Library/Caches/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
/Library/Python/2.7/site-packages/pip-6.1.1-py2.7.egg/pip/_vendor/requests/packages/urllib3/util/ssl_.py:79: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.
  InsecurePlatformWarning
Requirement already up-to-date: nilearn in /Users/jamielarshanson/Library/Python/2.7/lib/python/site-packages
Requirement already up-to-date: nibabel>=1.1.0 in /Users/jamielarshanson/Library/Python/2.7/lib/python/site-packages (from nilearn)
```

I re-ran with sudo with a -H flag and got the following output (again some warnings)...

```
MNI-Space:Desktop jamielarshanson$ sudo -H pip install -U --user nilearn
Password:
/Library/Python/2.7/site-packages/pip-6.1.1-py2.7.egg/pip/_vendor/requests/packages/urllib3/util/ssl_.py:79: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.
  InsecurePlatformWarning
Collecting nilearn
/Library/Python/2.7/site-packages/pip-6.1.1-py2.7.egg/pip/_vendor/requests/packages/urllib3/util/ssl_.py:79: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.
  InsecurePlatformWarning
  Downloading nilearn-0.1.3-py2-none-any.whl (684kB)
    100% |████████████████████████████████| 688kB 598kB/s 
Collecting nibabel>=1.1.0 (from nilearn)
  Downloading nibabel-2.0.0-py2-none-any.whl (2.5MB)
    100% |████████████████████████████████| 2.5MB 192kB/s 
Installing collected packages: nibabel, nilearn
Successfully installed nibabel nilearn
```

I wasn't sure how important the SSL warnings were? 
Next, when I try to import nilearn in ipython, it isn't found....

```
MNI-Space:Desktop jamielarshanson$ ipython
Python 2.7.6 (default, Sep  9 2014, 15:04:36) 
Type ""copyright"", ""credits"" or ""license"" for more information.

IPython 3.1.0 -- An enhanced Interactive Python.
?         -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help      -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: import nilearn
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-1-35686bafc626> in <module>()
----> 1 import nilearn

ImportError: No module named nilearn
```

I'm rather new to python and wasn't sure how to troubleshoot. I had nilearn working previously, but that was a few months ago. Any thoughts are greatly appreciated! 
",start issue,Install issue using Mac Yosemite (10.10.3) and Python 2.7.6
2,issue_closed,591,nilearn,nilearn,AlexandreAbraham,2015-06-01 07:26:30,,closed issue,Install issue using Mac Yosemite (10.10.3) and Python 2.7.6
3,issue_comment,591,nilearn,nilearn,AlexandreAbraham,2015-05-19 14:04:20,"> sudo pip install -U --user nilearn

This is a pip related problem because root doesn't own the current directory. Doing `cd /tmp && sudo pip install -U --user nilearn` fixes the problem.

> I re-ran with sudo with a -H flag and got the following output (again some warnings)...

Obviously it works because `-H` changes your `$HOME` variable and thus pip ends up installing in root's home, which is owned by root. Note that updating pip should also fix the issue.

> I wasn't sure how important the SSL warnings were? 

Not important when it comes to downloading software.

> Next, when I try to import nilearn in ipython, it isn't found....

Seems like a configuration problem to me.
Can you try:
- `import nibabel`
- `import sys; print sys.path`
- `which pip` (in the terminal, not in ipython)
",,
4,issue_comment,591,nilearn,nilearn,jlhanson5,2015-05-19 17:42:56,"OK, I think I'm getting closer...

I can import nibabel, but am still having trouble with nilearn (various output below). Further thoughts?

```
MNI-Space:nibabel-master jamielarshanson$ python
Python 2.7.6 (default, Sep  9 2014, 15:04:36) 
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import nibabel
>>> import sys; print sys.path
['',
 '/Library/Python/2.7/site-packages/pip-6.1.1-py2.7.egg',
 '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python27.zip',
 '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7',
 '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin',
 '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac',
 '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages',
 '/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python',
 '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk',
 '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old',
 '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload',
 '/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/PyObjC',
 '/Library/Python/2.7/site-packages']
>>> exit()
```

```
MNI-Space:nibabel-master jamielarshanson$ which pip 
/usr/local/bin/pip
```

```
MNI-Space:nibabel-master jamielarshanson$ python 
Python 2.7.6 (default, Sep  9 2014, 15:04:36) 
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import nilearn
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: No module named nilearn
```
",,
5,issue_comment,591,nilearn,nilearn,lesteve,2015-05-27 07:18:18,"Have you managed to get it working eventually?
",,
6,issue_comment,591,nilearn,nilearn,AlexandreAbraham,2015-06-01 07:26:30,"Closing as non reproducible and because we have no news. Please reopen if the problem is not solved.
",,
0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
1,issue_title,595,nilearn,nilearn,grlee77,2015-05-26 16:51:17,"The plotting utilities in nilearn are pretty nice!

This is a simple pull request to add optional title and annotation kwarg dictionaries to `_plt_img_with_bg`.  This is intended to make it easier for users to edit the title and/or annotation font size, color, etc. via functions such as `plot_roi` or `plot_img`

example usage:

``` python
plotting.plot_roi(roi_nii,
                  title='roi label',
                  annotation_kwargs=dict(size=10),
                  title_kwargs=dict(size=12, color='k', bgcolor='w',
                                    weight='bold', alpha=0.))
```

If there is already another simple way to do this, please let me know.  If you are interested in this implementation, I can explicitly list these arguments in the docstrings to `plot_roi`, etc so that they are easier for users to find, instead of leaving them ""hidden"" within **kwargs as presently implemented.

Also, one minor inconsistency is that the background color argument for the title is `bgcolor`, while for the annotation it would be `bg_color`.  Is it worth changing the implementation in `plotting.displays.BaseSlicer` to make the names consistent?
",start issue,ENH: plotting: add title and annotation kwargs to _plt_img_with_bg
2,issue_closed,595,nilearn,nilearn,lesteve,2015-06-03 13:57:29,,closed issue,ENH: plotting: add title and annotation kwargs to _plt_img_with_bg
3,pull_request_title,595,nilearn,nilearn,grlee77,2015-05-26 16:51:17,"The plotting utilities in nilearn are pretty nice!

This is a simple pull request to add optional title and annotation kwarg dictionaries to `_plt_img_with_bg`.  This is intended to make it easier for users to edit the title and/or annotation font size, color, etc. via functions such as `plot_roi` or `plot_img`

example usage:

``` python
plotting.plot_roi(roi_nii,
                  title='roi label',
                  annotation_kwargs=dict(size=10),
                  title_kwargs=dict(size=12, color='k', bgcolor='w',
                                    weight='bold', alpha=0.))
```

If there is already another simple way to do this, please let me know.  If you are interested in this implementation, I can explicitly list these arguments in the docstrings to `plot_roi`, etc so that they are easier for users to find, instead of leaving them ""hidden"" within **kwargs as presently implemented.

Also, one minor inconsistency is that the background color argument for the title is `bgcolor`, while for the annotation it would be `bg_color`.  Is it worth changing the implementation in `plotting.displays.BaseSlicer` to make the names consistent?
",a7d16b31bee0a8af59affcea2823a4fa1f150e39,ENH: plotting: add title and annotation kwargs to _plt_img_with_bg
4,issue_comment,595,nilearn,nilearn,lesteve,2015-05-27 06:53:36,"Glad you find nilearn plotting useful and thanks for the PR.

One way to do what you want with the existing code is something like:

``` python

display = plotting.plot_roi(roi_nii, annotate=False)
display.title('roi_label', size=12, color='k', bgcolor='w', weight='bold', alpha=0.)
display.annotate(size=12)
```

My take on it is that we are trying to fight against adding more complexity in the plotting code but ccing @GaelVaroquaux and @AlexandreAbraham for their opinions on the matter.

The rationale is that plotting.plot_\* functions should cover the most basic use cases. If you need more tweaking it can be done via the 'display' objects that these functions return.
",,
5,issue_comment,595,nilearn,nilearn,AlexandreAbraham,2015-05-27 07:27:32,"I am in favor of using the existing system. This is the way matplotlib works and I'd like to keep the arguments of the plot functions to their strict minimum.
",,
6,issue_comment,595,nilearn,nilearn,grlee77,2015-05-27 13:03:44,"thanks @lesteve 
That looks just as easy.  I should have looked more closely to see that the object was returned and you could just set it then as in matplotlib!  

Perhaps, something along these lines could be added to one of the examples here:
http://nilearn.github.io/building_blocks/plotting.html
",,
7,issue_comment,595,nilearn,nilearn,AlexandreAbraham,2015-05-27 13:08:31,":+1: 
",,
8,pull_request_commit,595,nilearn,nilearn,grlee77,2015-05-26 16:28:44,add title_kwargs and annotation_kwargs to _plt_img_with_bg,a7d16b31bee0a8af59affcea2823a4fa1f150e39,
0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
1,issue_title,592,nilearn,nilearn,Titan-C,2015-05-20 11:50:09,"Here I update to sphinx-gallery with the backreferences solution.
So now it is possible to use an rst template to document classes and functions including at the end the link to examples using them.
A question of design. Since now this documentation generation is done with default sphinx extention autodoc. It becomes a dependency to have it in the included extensions in the conf.py file.(Not an issue since it was already used by nilearn). But because it is an automatic process all automatic documented classes will try to have the backreferences to example, which might not exist. This issues a warning to during `make`. To workaround this warning scikit-learn and now in this PR, there is an extra action in conf.py that touches non-existing backreference example files so that one does not get the include warning. Question:
- Is this the good way for the user to proceed?(I'll write documentation for this procedure in sphinx-gallery)
- Alternative: have this action as default in sphinx-gallery and require user to always have autodoc extension always loaded?

Massive renaming in files because:
Since the new naming convention for sphinx-gallery image prefix sphx-glr image references are updated.
Since naming convention for example references is to include the target dir, this references are also updated.
",start issue,[MRG+1] Backreferences template from sphinx-gallery
2,issue_closed,592,nilearn,nilearn,GaelVaroquaux,2015-11-28 10:33:15,,closed issue,[MRG+1] Backreferences template from sphinx-gallery
3,pull_request_title,592,nilearn,nilearn,Titan-C,2015-05-20 11:50:09,"Here I update to sphinx-gallery with the backreferences solution.
So now it is possible to use an rst template to document classes and functions including at the end the link to examples using them.
A question of design. Since now this documentation generation is done with default sphinx extention autodoc. It becomes a dependency to have it in the included extensions in the conf.py file.(Not an issue since it was already used by nilearn). But because it is an automatic process all automatic documented classes will try to have the backreferences to example, which might not exist. This issues a warning to during `make`. To workaround this warning scikit-learn and now in this PR, there is an extra action in conf.py that touches non-existing backreference example files so that one does not get the include warning. Question:
- Is this the good way for the user to proceed?(I'll write documentation for this procedure in sphinx-gallery)
- Alternative: have this action as default in sphinx-gallery and require user to always have autodoc extension always loaded?

Massive renaming in files because:
Since the new naming convention for sphinx-gallery image prefix sphx-glr image references are updated.
Since naming convention for example references is to include the target dir, this references are also updated.
",6c9e894c07a0b6c6fe280f0cb284551c45bea3ab,[MRG+1] Backreferences template from sphinx-gallery
4,pull_request_merged,592,nilearn,nilearn,GaelVaroquaux,2015-11-28 10:33:15,[MRG+1] Backreferences template from sphinx-gallery,a065c94d946fc88eeae91039158ceed7613b5235,Pull request merge from Titan-C/nilearn:backref_template to nilearn/nilearn:master
5,issue_comment,592,nilearn,nilearn,lesteve,2015-06-02 12:04:38,"> To workaround this warning scikit-learn and now in this PR, there is an extra action in conf.py that touches non-existing backreference example files so that one does not get the include warning

Just wondering wheter there is a way to have some logic in the jinja2 template to say that if the .examples file exists include it otherwise don't bother. Seems slightly better than creating empty .examples files. By the way I am not sure about the ordering of  gen_gallery versus the 'autodoc-process-docstring' step. Imagine you start from a clean state, are all the .examples file created empty during the 'autodoc-process-docstring' and then gen_gallery comes along and generates non-empty .examples file or is it the other way around? I think what I am trying to say is that it does seem a bit fragile.

> Since naming convention for example references is to include the target dir, this references are also updated.

That makes the naming a bit too redundant: example_auto_examples_... Just wondering whether there is an easy but generic way to remove auto_examples from the reference name.

Also you need to rebase on master and fix the merge conflicts.
",,
6,issue_comment,592,nilearn,nilearn,Titan-C,2015-06-02 12:26:34,"> . By the way I am not sure about the ordering of gen_gallery versus the 'autodoc-process-docstring' step.

Sphinx gallery does its job first creating the .example files. 'autodoc-process-docstring' is executed afterwards everytime it finds the include directive to the example file

> That makes the naming a bit too redundant: example_auto_examples_

Yes, I agree on the redundancy. At some point I tested to rename it to sphx_glr_auto_example_ or to remove completely the example_ prefix, but I could not agree with myself on which to prefer so I left it that way. I support the fact to have the full target name on the reference starting from the sphinx source folder, so to our convention the gallery sits in auto_examples_. That way is was easier to link to the images and references. To put an additional prefix to it might not be necessary anymore, example_ was used because all paths where used taken the inside of the gallery folder as reference, so having the prefix became valuable. As a generic option I would rather remove example_ prefix than the first folder auto_example
",,
7,issue_comment,592,nilearn,nilearn,Titan-C,2015-06-02 12:39:56,"rebase done
",,
8,issue_comment,592,nilearn,nilearn,Titan-C,2015-06-02 12:40:47,"rebase done
",,
9,issue_comment,592,nilearn,nilearn,lesteve,2015-06-02 13:19:24,"> As a generic option I would rather remove example_ prefix than the first folder auto_example

I am not sure, it feels like the reference name should look more like the example python file than the generated rst in auto_examples. Also it'd be good to have some consistency between the generated image name and the reference name. At the moment the two of them have grown further apart.

> Sphinx gallery does its job first creating the .example files. 'autodoc-process-docstring' is executed afterwards everytime it finds the include directive to the example file

Surely this can't be true, 'autodoc-process-docstring' doesn't know anything about example files which are sphinxgallery specific. The only way this can work if the autodoc-process-string creates all example files as empty and then sphinxgallery comes along, parses the example scripts and overrides the .examples files. Just curious, is the ordering guaranteed ? Does it depend on the ordering of `extensions` in conf.py ?

More importantly, it seems that you haven't included the backreferences.py module in this PR (i.e. sphinxext/sphinxgallery/backreferences.py) is that on purpose?
",,
10,issue_comment,592,nilearn,nilearn,Titan-C,2015-06-02 13:41:15,"> I am not sure, it feels like the reference name should look more like the example python file than the generated rst in auto_examples. Also it'd be good to have some consistency between the generated image name and the reference name. At the moment the two of them have grown further apart.

For the consistency with image names I wanted to put it as prefix sphx_glr, then the path to the python example. That way is more consistent.

> Surely this can't be true, 'autodoc-process-docstring' doesn't know anything about example files which are sphinxgallery specific. 
> 
> Just curious, is the ordering guaranteed ? Does it depend on the ordering of extensions in conf.py ?

Yes the ordering is guaranteed. As each one is assigned a different event in the sphinx build. It does not depend in the ordering of the extensions in conf.py but to which build step it was assigned. Sphinx-gallery happens when the builder is started(outputs rst files, image files, .example files), but the autodoc file touch is when rst files are parsed.
So autodoc is completely independent of sphinx-gallery, it only tries to include a matching example file to every module it has to document. If it can't find the file a warning is issued, and in our case the missing file is touched and so no warning issued.

> More importantly, it seems that you haven't included the backreferences.py module in this PR (i.e. sphinxext/sphinxgallery/backreferences.py) is that on purpose?

This is a glitch in my update script as it does not git add new files. I'll fix it
",,
11,issue_comment,592,nilearn,nilearn,lesteve,2015-06-29 07:08:27,"This needs a rebase on master actually.
",,
12,issue_comment,592,nilearn,nilearn,Titan-C,2015-11-24 18:49:59,"This one is rebased on master and has the latest release of Sphinx-Gallery.
Some examples already have the notebook style. All seem to be running now.

There is one link that is not working and I hesitate to change.

https://github.com/nilearn/nilearn/blame/master/doc/connectivity/functional_connectomes.rst#L138-L142
file `examples/manipulating_visualizing/plot_probabilistic_atlas.py` does not exist. On same folder there is one `plot_prob_atlas.py`, but since there the following figure does not match the file either nor can I find mention of the function stated before the link I'm not sure.

you can preview the website in

http://scikit-learn.byethost7.com/nilearn/
",,
13,issue_comment,592,nilearn,nilearn,Titan-C,2015-11-24 19:00:39,"Side question. How does the circleci work. Can I see the sphinx output there? the rendered documentation?
",,
14,issue_comment,592,nilearn,nilearn,KamalakerDadi,2015-11-24 19:43:24,"@Titan-C Thanks for reporting.

`examples/manipulating_visualizing/plot_probabilistic_atlas.py` does not exist since the name `plot_probabilistic_atlas` is renamed as `plot_overlay` to avoid conflicting with `plot_prob_atlas`. Both `plot_overlay` and `plot_prob_atlas` exists in Nilearn.

Could you please change this
 see the :ref:`corresponding example <example_manipulating_visualizing_plot_probabilistic_atlas.py>`

to this
see the :ref:`corresponding example <example_manipulating_visualizing_plot_overlay.py>`

Then I think it will work. Please let me know. If it doesn't ?
",,
15,issue_comment,592,nilearn,nilearn,GaelVaroquaux,2015-11-25 12:42:19,"@Titan-C : the circle-ci web interface does not give you links to artifacts unless you are administrator :(.

But here is the link to the latest build of your PR:
https://circle-artifacts.com/gh/nilearn/nilearn/733/artifacts/0/home/ubuntu/nilearn/doc/_build/html/auto_examples/index.html
",,
16,issue_comment,592,nilearn,nilearn,GaelVaroquaux,2015-11-25 13:02:13,"+1 for merge. This is simply great. Thank you very @Titan-C 

Does anyone wants to have a look, or should I merge?
",,
17,issue_comment,592,nilearn,nilearn,KamalakerDadi,2015-11-25 14:14:16,"> Does anyone wants to have a look, or should I merge?

I want to have a look. I will give my call by end of day.
",,
18,issue_comment,592,nilearn,nilearn,Titan-C,2015-11-25 14:45:04,"> @Titan-C : the circle-ci web interface does not give you links to artifacts unless you are administrator :(.
> 
> But here is the link to the latest build of your PR:
> https://circle-artifacts.com/gh/nilearn/nilearn/733/artifacts/0/home/ubuntu/nilearn/doc/_build/html/auto_examples/index.html

That's cool. Then I would need to manually upload the builds to my test website
",,
19,issue_comment,592,nilearn,nilearn,lesteve,2015-11-26 10:11:42,"@Titan-C just curious, is there an example that renders as notebook in https://circle-artifacts.com/gh/nilearn/nilearn/733/artifacts/0/home/ubuntu/nilearn/doc/_build/html/auto_examples/index.html. I haven't found any yet.
",,
20,issue_comment,592,nilearn,nilearn,GaelVaroquaux,2015-11-26 10:16:45,"@lesteve 
https://circle-artifacts.com/gh/nilearn/nilearn/733/artifacts/0/home/ubuntu/nilearn/doc/_build/html/auto_examples/decoding/plot_haxby_different_estimators.html#sphx-glr-auto-examples-decoding-plot-haxby-different-estimators-py

And actually we can see that from a layout / styling perspective, the code line and the output of the script appear as visually similar, which can be confusing for the users. We will need to change this.
",,
21,issue_comment,592,nilearn,nilearn,lesteve,2015-11-26 10:22:18,"Thanks a lot.

> And actually we can see that from a layout / styling perspective, the code line and the output of the script appear as visually similar,

There is an issue about that already https://github.com/sphinx-gallery/sphinx-gallery/issues/44
",,
22,issue_comment,592,nilearn,nilearn,GaelVaroquaux,2015-11-26 10:27:40,"> There is an issue about that already sphinx-gallery/sphinx-gallery#44

OK :)
",,
23,issue_comment,592,nilearn,nilearn,GaelVaroquaux,2015-11-26 10:40:35,"> There is an issue about that already sphinx-gallery/sphinx-gallery#44

I pushed a quick fix:
https://github.com/sphinx-gallery/sphinx-gallery/pull/72

we can backport in nilearn.
",,
24,issue_comment,592,nilearn,nilearn,GaelVaroquaux,2015-11-28 10:33:13,"Merging this guy, and backporting the latest sphinx-gallery, to have the new style.
",,
25,pull_request_commit_comment,592,nilearn,nilearn,lesteve,2015-11-23 08:34:05,"Ideally we should stick with a released version. @Titan-C any reason why this is not 0.0.11?
",6c9e894c07a0b6c6fe280f0cb284551c45bea3ab,"(None, '', u'doc/sphinxext/sphinxgallery/__init__.py')"
26,pull_request_commit_comment,592,nilearn,nilearn,GaelVaroquaux,2015-11-25 12:43:57,"Not a blocker to merge this PR, but should this be in sphinx_gallery itself? It seems that it's something that people can easily get wrong.
",6c9e894c07a0b6c6fe280f0cb284551c45bea3ab,"(41, '', u'doc/conf.py')"
27,pull_request_commit_comment,592,nilearn,nilearn,Titan-C,2015-11-25 14:36:37,"I was also thinking about it. In general you don't need this. It is only to remove some warnings of sphinx as it runs autosummary. 
",6c9e894c07a0b6c6fe280f0cb284551c45bea3ab,"(41, '', u'doc/conf.py')"
28,pull_request_commit_comment,592,nilearn,nilearn,GaelVaroquaux,2015-11-25 14:37:51,"> > +def touch_example_backreferences(app, what, name, obj, options, lines):
> 
> I was also thinking about it. In general you don't need this. It is only to
> remove some warnings of sphinx as it runs autosummary.

If it's easy to add, I think you should (though not in this PR)
",6c9e894c07a0b6c6fe280f0cb284551c45bea3ab,"(41, '', u'doc/conf.py')"
29,pull_request_commit_comment,592,nilearn,nilearn,GaelVaroquaux,2015-11-28 10:39:00,"I just realized: why was this file deleted?
",6c9e894c07a0b6c6fe280f0cb284551c45bea3ab,"(8, '', u'doc/sphinxext/copy_sphinxgallery.sh')"
30,pull_request_commit,592,nilearn,nilearn,Titan-C,2015-05-20 08:27:52,Update to sphinx-gallery release 0.0.9-dev1,6243b0c2f136c49f47e9660b390baf8d25c5b31c,
31,pull_request_commit,592,nilearn,nilearn,Titan-C,2015-05-20 08:32:26,Include example backrefences in templates,64ae4ebd9be6c8020251d5faf9015865981c7443,
32,pull_request_commit,592,nilearn,nilearn,Titan-C,2015-05-20 11:28:38,Fixes to embed template autodocs to use backreferences,9f92a784eafb081cbe2385230c8289d3addae104,
33,pull_request_commit,592,nilearn,nilearn,Titan-C,2015-05-29 08:59:22,Install sphinx-gallery v0.0.10,4816a90e4e3f715baa99cfd2251bfbd9611b997a,
34,pull_request_commit,592,nilearn,nilearn,Titan-C,2015-06-02 13:45:46,copy_sphinxgallery defaults in git adding the module folder by default,94449666965aceff55b57b3f383e293c0b34c3fb,
35,pull_request_commit,592,nilearn,nilearn,Titan-C,2015-10-23 14:44:55,"Update to Sphinx-Gallery 0.0.11 to use notebook examples

Delete copy gallery is on the release",c01587a55ea6cc8b5d5d8ec2fe5a839b8034fe31,
36,pull_request_commit,592,nilearn,nilearn,Titan-C,2015-10-23 15:50:55,Update image names with sphx_glr prefix,6b1858d385b07cb06adee41d954e005343701c8b,
37,pull_request_commit,592,nilearn,nilearn,Titan-C,2015-10-23 15:54:58,Update reference names to use sphx_glr prefix,7b5dfa2a35e5eff67b0b51369e1ca640b9961246,
38,pull_request_commit,592,nilearn,nilearn,Titan-C,2015-11-24 15:53:18,Update to public release of Sphinx-Gallery v0.0.11,cfc773b5b42125d3a21b7077148d80b770314170,
39,pull_request_commit,592,nilearn,nilearn,Titan-C,2015-11-24 15:58:20,Rename to sphinx_gallery module,83ba236c7b9157ba359bff6e40bc9e8f086f1d8b,
40,pull_request_commit,592,nilearn,nilearn,Titan-C,2015-11-24 18:35:59,Fixing links,5dcc50ab588afc75cc9360a6bfe3261968dbee71,
41,pull_request_commit,592,nilearn,nilearn,Titan-C,2015-11-24 20:10:43,Fix one more link,6c9e894c07a0b6c6fe280f0cb284551c45bea3ab,
0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
1,issue_title,594,nilearn,nilearn,mwaskom,2015-05-25 19:29:03,"Just browsing this tutorial: http://nilearn.github.io/connectivity/functional_connectomes.html#brain-parcellations

In section 3.1.1.1, the prose says ""For instance to retrieve the Yeo 2011 cortical parcelation into 17 regions, with a thick cortical model:""

but the code is

``` python
from nilearn import datasets
atlas_filename, labels = datasets.fetch_harvard_oxford('cort-maxprob-thr25-2mm')
```
",start issue,Functional connectome tutorial prose does not match code
2,issue_closed,594,nilearn,nilearn,GaelVaroquaux,2015-05-25 19:35:02,,closed issue,Functional connectome tutorial prose does not match code
3,issue_comment,594,nilearn,nilearn,GaelVaroquaux,2015-05-25 19:31:03,":). Good catch. We need to fix that. Please keep on sending anything else that you find.
",,
4,issue_comment,594,nilearn,nilearn,GaelVaroquaux,2015-05-25 19:35:09,"Fixed
",,
0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
1,issue_title,593,nilearn,nilearn,banilo,2015-05-20 18:02:47,"attempts to fix #566
",start issue,[MRG] port new_img_like to nilearn/image
2,issue_closed,593,nilearn,nilearn,GaelVaroquaux,2015-07-16 06:18:47,,closed issue,[MRG] port new_img_like to nilearn/image
3,pull_request_title,593,nilearn,nilearn,banilo,2015-05-20 18:02:47,"attempts to fix #566
",cdc1587474cfeb9a1f24be2221da7142165cb500,[MRG] port new_img_like to nilearn/image
4,pull_request_merged,593,nilearn,nilearn,GaelVaroquaux,2015-07-16 06:18:47,[MRG] port new_img_like to nilearn/image,8d298448535bc9e1f4ee2c8edd65173330a9577a,Pull request merge from banilo/nilearn:expose_new_img_like to nilearn/nilearn:master
5,issue_comment,593,nilearn,nilearn,banilo,2015-05-20 18:03:32,"Two remarks:
a) Just ported the function to image for new
b) will do the other aspects soon
",,
6,issue_comment,593,nilearn,nilearn,banilo,2015-05-22 19:34:04,"Simple exposure, as suggest by Gael, appears to work better.
",,
7,issue_comment,593,nilearn,nilearn,AlexandreAbraham,2015-05-22 23:11:31,"I don't think that introducing anti-patterns at such an early stage in a software is the way to go.
",,
8,issue_comment,593,nilearn,nilearn,GaelVaroquaux,2015-05-22 23:12:06,"> I don't think that introducing anti-patterns at such an early stage in a
> software is the way to go.

What do you mean?
",,
9,issue_comment,593,nilearn,nilearn,AlexandreAbraham,2015-05-26 11:26:35,"I don't like to import code in one module from a totally different one. In particular because it is less intuitive for developers. For me, this reveals a flow in the architecture of the software itself (hence the term anti-pattern). I would prefer to put it in a submodule of image for example.
",,
10,issue_comment,593,nilearn,nilearn,eickenberg,2015-05-26 11:29:25,"then again, the `image` module, up until now, to me, felt more like a
collection of tools to work on the voxel+affine level, e.g. smoothing,
cropping, resampling

On Tue, May 26, 2015 at 1:26 PM, Alexandre Abraham <notifications@github.com

> wrote:
> 
> I don't like to import code in one module from a totally different one. In
> particular because it is less intuitive for developers. For me, this
> reveals a flow in the architecture of the software itself (hence the term
> anti-pattern). I would prefer to put it in a submodule of image for example.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nilearn/nilearn/pull/593#issuecomment-105493668.
",,
11,issue_comment,593,nilearn,nilearn,AlexandreAbraham,2015-05-26 11:34:51,"Maybe we need to do a discussion and design the package to integrate forthcoming features (because I guess that check_niimg may also become public in a near future).
",,
12,issue_comment,593,nilearn,nilearn,banilo,2015-06-09 14:56:42,"Ok for the argument swapping.

But I am wondering about the optimal affine argument idea: Do you mean that we only checked for matching shape in case no affine is specified?
",,
13,issue_comment,593,nilearn,nilearn,AlexandreAbraham,2015-06-09 19:52:39,"> Ok for the argument swapping.

We agreed not to swap.

> Do you mean that we only checked for matching shape in case no affine is specified?

Yes, we suppose that the affine of the reference image is also the one of the resulting image. For me, it is always the case.
",,
14,issue_comment,593,nilearn,nilearn,banilo,2015-06-11 13:18:31,"Alright..
",,
15,issue_comment,593,nilearn,nilearn,AlexandreAbraham,2015-06-11 13:24:56,"Shouldn't we support niimg instead of img? User may want to do that with filenames.
",,
16,issue_comment,593,nilearn,nilearn,banilo,2015-06-12 09:09:10,"> Shouldn't we support niimg instead of img? User may want to do that with filenames

You mean add ""check_niimg_3D""?
",,
17,issue_comment,593,nilearn,nilearn,AlexandreAbraham,2015-06-12 09:18:44,"Yes, do a wrapper around the existing function and calling `check_niimg` (we don't have dimension restriction).
",,
18,issue_comment,593,nilearn,nilearn,lesteve,2015-06-12 09:25:48,"> Shouldn't we support niimg instead of img? User may want to do that with filenames.

Is it really that useful? It feels to me that you generally load the data from the file before transforming it and using new_img_like.
",,
19,issue_comment,593,nilearn,nilearn,AlexandreAbraham,2015-06-12 09:34:49,"> Is it really that useful

For us, it is not since we do proper checking before calling it so calling it again is spurious. For the users, it is a small cost and it will in particular do all proper checking regarding the type of the image. For the moment, the function clearly lacks of error handling.
",,
20,issue_comment,593,nilearn,nilearn,banilo,2015-06-24 13:55:27,"So what did we exactly agree on?
",,
21,issue_comment,593,nilearn,nilearn,banilo,2015-06-27 08:56:45,"How about now?
",,
22,issue_comment,593,nilearn,nilearn,AlexandreAbraham,2015-06-28 22:08:45,"You didn't add a wrapper but modified the original function. For some functions, we have an internal version (optimized, straight to the point) and for other we have expose version (with error handling). This is the case for `index_img` for example. I think you should not modify the original function but create another one that does `check_niimg` and calls `new_img_like`.

Anybody else to comment that choice?
",,
23,issue_comment,593,nilearn,nilearn,banilo,2015-07-14 12:01:35,"In response to Alex' comments, I restored the the original code we had that raised a circular import

``` python

---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-1-398362f15096> in <module>()
----> 1 from nilearn.image import new_img_like

/git/nilearn/nilearn/image/__init__.py in <module>()
      3 data, and an affine.
      4 """"""
----> 5 from .resampling import resample_img, reorder_img
      6 from .image import high_variance_confounds, smooth_img, crop_img, \
      7     mean_img, swap_img_hemispheres, index_img, iter_img

/git/nilearn/nilearn/image/resampling.py in <module>()
     13 from scipy import ndimage, linalg
     14 
---> 15 from .. import _utils
     16 from .._utils import new_img_like
     17 from .._utils.compat import _basestring

/git/nilearn/nilearn/_utils/__init__.py in <module>()
      1 
----> 2 from .niimg_conversions import (check_niimg, check_niimg_3d, concat_niimgs,
      3     check_niimg_4d)
      4 
      5 from .niimg import _repr_niimgs, copy_img

/git/nilearn/nilearn/_utils/niimg_conversions.py in <module>()
     12 from .cache_mixin import cache
     13 from .niimg import _safe_get_data, load_niimg
---> 14 from ..image import new_img_like
     15 from .compat import _basestring
     16 

ImportError: cannot import name new_img_like

```

The only option I see right now would be to make several imports in _utils local.
",,
24,issue_comment,593,nilearn,nilearn,AlexandreAbraham,2015-07-14 12:33:50,"The solutions I see.

Option 1 : refactoring (my favorite)
- leave `new_img_like`, `index_img` and `index_img` in `image.py`
- evacuate other functions in `image/process.py` or something since they are explictely modifying the image.

Option 2 : local import
- import `reorder_img` locally in `swap_img_hemispheres` to avoid the circular import. This is the local import option that makes most sense to me.
",,
25,issue_comment,593,nilearn,nilearn,banilo,2015-07-14 14:15:45,"I would like to do Option 2.

2015-07-14 14:33 GMT+02:00 Alexandre Abraham notifications@github.com:

> The solutions I see.
> 
> Option 1 : refactoring (my favorite)
> - leave new_img_like, index_img and index_img in image.py
> - evacuate other functions in image/process.py or something since they
>   are explictely modifying the image.
> 
> Option 2 : local import
> - import reorder_img locally in swap_img_hemispheres to avoid the
>   circular import. This is the local import option that makes most sense to
>   me.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nilearn/nilearn/pull/593#issuecomment-121225949.

## 

Viele Grüße,
Danilo
",,
26,issue_comment,593,nilearn,nilearn,AlexandreAbraham,2015-07-14 14:22:56,"That's just because I said that I prefer the first one, right?
",,
27,issue_comment,593,nilearn,nilearn,AlexandreAbraham,2015-07-14 23:13:00,"You won @banilo, I give up! I still see two options and I don't like both of them:
- leave `new_img_like` in `_utils` and import it from there
- move `new_img_like` to `image` but make all imports of `new_img_like` local in `niimg_conversion`.

Well, I would be in favor of option 1.

Sorry for wasting your time, I really thought that we could find a cleaner solution :-/.
",,
28,issue_comment,593,nilearn,nilearn,AlexandreAbraham,2015-07-15 20:01:05,"Minor remark. :+1: 
",,
29,issue_comment,593,nilearn,nilearn,lesteve,2015-07-15 15:13:23,"Wow capital letters, have you looked at the Travis build status ?
",,
30,issue_comment,593,nilearn,nilearn,banilo,2015-07-15 14:55:35,"_WORKING_
",,
31,issue_comment,593,nilearn,nilearn,banilo,2015-07-15 14:55:42,"_NOW_
",,
32,issue_comment,593,nilearn,nilearn,banilo,2015-07-16 06:06:07,"> Minor remark

Addressed! We should be ready to go now.
",,
33,pull_request_commit_comment,593,nilearn,nilearn,AlexandreAbraham,2015-05-21 11:51:37,"Too many delayed imports is a sign of bad software design. First, you should not delay the import here but delay the import of masking in the image module, since it's used only one time. You should also check if there is a way to avoid these delayed imports by refactoring some code.
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/masking.py')"
34,pull_request_commit_comment,593,nilearn,nilearn,banilo,2015-05-21 12:56:19,"I did this because there appeared to be many circular imports when directly importing at the topic in the lower level scripts.
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/masking.py')"
35,pull_request_commit_comment,593,nilearn,nilearn,AlexandreAbraham,2015-05-21 14:25:21,"My remark still holds. Too much delayed import is bad.
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/masking.py')"
36,pull_request_commit_comment,593,nilearn,nilearn,bthirion,2015-05-21 21:40:57,"Sorry if I am dumb, but why are you importing a function from this module ?
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/image/image.py')"
37,pull_request_commit_comment,593,nilearn,nilearn,banilo,2015-05-22 18:52:55,"My bad...
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/image/image.py')"
38,pull_request_commit_comment,593,nilearn,nilearn,banilo,2015-05-22 19:01:18,"if I make this import global (that is, only in masking.py), nosetests gives me 15 errors due to circular imports.
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/masking.py')"
39,pull_request_commit_comment,593,nilearn,nilearn,banilo,2015-05-22 19:11:51,"making these imports global gives 15 errors due to circular imports, too
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/image/resampling.py')"
40,pull_request_commit_comment,593,nilearn,nilearn,GaelVaroquaux,2015-05-22 19:14:52,"> > -    from .image import new_img_like
> 
> making these imports global gives 15 errors due to circular imports, too

This tells me that new_img_like should probably be defined in utils, and
imported in places where it's used (including image to expose it).

Other option is to always import it from image.image in the codebase. I
think that this might solve the circular import problems.
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/image/resampling.py')"
41,pull_request_commit_comment,593,nilearn,nilearn,banilo,2015-05-22 19:18:23,"So we stay in _utils with new_img_like, yet expose it in image/image.py on
the __init__-level?

2015-05-22 21:14 GMT+02:00 Gael Varoquaux notifications@github.com:

> In nilearn/image/resampling.py
> https://github.com/nilearn/nilearn/pull/593#discussion_r30923273:
> 
> > @@ -340,6 +339,8 @@ def resample_img(img, target_affine=None, target_shape=None,
> >      This function handles gracefully NaNs and infinite values in the input
> >      data, however they make the execution of the function much slower.
> >      """"""
> > -    from .image import new_img_like
> > - from .image import new_img_like making these imports global gives 15
> >   errors due to circular imports, too
> >   This tells me that new_img_like should probably be defined in utils, and
> >   imported in places where it's used (including image to expose it). Other
> >   option is to always import it from image.image in the codebase. I think
> >   that this might solve the circular import problems.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nilearn/nilearn/pull/593/files#r30923273.

## 

Viele Grüße,
Danilo
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/image/resampling.py')"
42,pull_request_commit_comment,593,nilearn,nilearn,GaelVaroquaux,2015-05-22 19:20:17,"> So we stay in _utils with new_img_like, 

We can try doing the internal imports from image.image to see if it
solves the problem (add a comment saying that this is to avoid circular
imports).
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/image/resampling.py')"
43,pull_request_commit_comment,593,nilearn,nilearn,lesteve,2015-06-25 07:08:53,"Shouldn't affine be None by default in the arguments?
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/_utils/niimg.py')"
44,pull_request_commit_comment,593,nilearn,nilearn,AlexandreAbraham,2015-07-13 15:52:16,"I think refactoring is better that local import. Plus, you don't use it.
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/_utils/niimg.py')"
45,pull_request_commit_comment,593,nilearn,nilearn,GaelVaroquaux,2015-07-14 07:28:52,"Can you be more explicit: what refactoring are you suggesting exactly (I am asking to make it more clear what need to be done on the PR before merging).
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/_utils/niimg.py')"
46,pull_request_commit_comment,593,nilearn,nilearn,AlexandreAbraham,2015-07-14 07:38:30,"Create one function, having one that call another is useless. Use `load_img` and not `check_niimg` (we want to load the data if it's a filename, we don't want to load list of niimgs). If it must be released, move that code to the image module. That's how I see it.
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/_utils/niimg.py')"
47,pull_request_commit_comment,593,nilearn,nilearn,AlexandreAbraham,2015-07-15 20:00:13,", optional
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/image/image.py')"
48,pull_request_commit_comment,593,nilearn,nilearn,AlexandreAbraham,2015-07-15 20:00:29,"Maybe elaborate a little bit?
",cdc1587474cfeb9a1f24be2221da7142165cb500,"(None, '', u'nilearn/image/image.py')"
49,pull_request_commit,593,nilearn,nilearn,banilo,2015-05-22 19:31:03,simple exposure of new_img_like,8392c02c806a4e488e04a3d42d612d0060332ae8,
50,pull_request_commit,593,nilearn,nilearn,banilo,2015-06-11 13:15:09,new_img_like: make affine optional,9702879c4ee2218a19c961c03fb70cca7fa039c5,
51,pull_request_commit,593,nilearn,nilearn,banilo,2015-06-27 08:56:00,new_img_like: niimg compat,f49328dbe3361efb8a5c7094bb2dde53c6bb090c,
52,pull_request_commit,593,nilearn,nilearn,banilo,2015-06-29 19:08:01,added wrapper,de2a4664ddadf76b32651c13b2b24715414bf27d,
53,pull_request_commit,593,nilearn,nilearn,banilo,2015-07-14 11:51:12,restore circular import,8a5f35ea5d2329072bfff9094aa349dd6497484a,
54,pull_request_commit,593,nilearn,nilearn,banilo,2015-07-15 11:31:32,iterm,a2b25170a91938c4e6fdb45792bf827560f6af93,
55,pull_request_commit,593,nilearn,nilearn,banilo,2015-07-15 14:46:10,fix im/exports,a368c454acca72514badfb798bc8883fef41e817,
56,pull_request_commit,593,nilearn,nilearn,banilo,2015-07-15 16:43:43,update setup.py,888ee31bdf2e9dbbb0e0d018a69cab26eb8c6d0d,
57,pull_request_commit,593,nilearn,nilearn,banilo,2015-07-15 17:02:20,add missing init file,2d99112d13f6f48115b86dd17cb9688fd93eb9ec,
58,pull_request_commit,593,nilearn,nilearn,banilo,2015-07-16 06:17:10,cosmit,cdc1587474cfeb9a1f24be2221da7142165cb500,
