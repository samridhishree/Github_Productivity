,rectype,issueid,project_owner,project_name,actor,time,text,action,title,provenance,paths,plus_1,urls,issues,userref,code,formatted_time
3789,commit_messages,,nilearn,nilearn,sb238920@is223297.intra.cea.fr,2015-09-04 18:16:59,Merge branch 'master' into tangent_classif,9f24288cbe5e3cc68ed2ab449e19ec0419342b4a,,"api.github.com,git_clone","[u'[""doc/connectivity/functional_connectomes.rst"", ""nilearn/datasets/description/msdl_atlas.rst"", ""nilearn/tests/test_datasets.py"", ""nilearn/datasets/description/power_2011.rst"", ""nilearn/datasets/tests/data/confounds_with_header.csv"", ""nilearn/datasets/__init__.py"", ""examples/manipulating_visualizing/plot_demo_glass_brain_extensive.py"", ""examples/manipulating_visualizing/plot_probabilistic_atlas.py"", ""nilearn/input_data/nifti_labels_masker.py"", ""nilearn/datasets/tests/test_atlas.py"", ""nilearn/input_data/tests/test_base_masker.py"", ""nilearn/plotting/img_plotting.py"", ""nilearn/tests/test_niimg.py"", ""nilearn/input_data/nifti_masker.py"", "".gitignore"", ""nilearn/plotting/tests/test_img_plotting.py"", ""nilearn/datasets/data/mmap.dat"", ""doc/building_blocks/manual_pipeline.rst"", ""nilearn/datasets/description/craddock_2012.rst"", ""nilearn/datasets/struct.py"", ""examples/manipulating_visualizing/plot_haxby_mass_univariate.py"", ""nilearn/signal.py"", ""nilearn/plotting/displays.py"", ""nilearn/_utils/fixes/__init__.py"", ""examples/connectivity/plot_inverse_covariance_connectome.py"", ""nilearn/datasets/data/test.mgz"", ""examples/manipulating_visualizing/plot_smooth_mean_image.py"", ""nilearn/datasets/data/avg152T1_brain.nii.gz"", ""nilearn/decoding/tests/test_graph_net.py"", ""nilearn/input_data/masker_validation.py"", ""doc/introduction.rst"", ""nilearn/decomposition/canica.py"", ""nilearn/datasets/atlas.py"", ""nilearn/decomposition/multi_pca.py"", ""nilearn/decoding/space_net_solvers.py"", ""examples/manipulating_visualizing/plot_demo_glass_brain.py"", ""nilearn/input_data/multi_nifti_masker.py"", "".travis.yml"", ""examples/decoding/plot_haxby_grid_search.py"", ""doc/manipulating_visualizing/manipulating_images.rst"", ""doc/modules/reference.rst"", ""examples/plot_nifti_simple.py"", ""examples/manipulating_visualizing/plot_atlas.py"", ""nilearn/_utils/numpy_conversions.py"", ""nilearn/input_data/tests/test_masker_validation.py"", ""Makefile"", ""examples/plot_nilearn_101.py"", ""nilearn/plotting/find_cuts.py"", ""nilearn/datasets/tests/test_struct.py"", ""nilearn/decoding/tests/test_tv.py"", ""nilearn/version.py"", ""examples/plot_localizer_simple_analysis.py"", ""doc/Makefile"", ""examples/manipulating_visualizing/plot_visualization.py"", ""nilearn/decoding/tests/test_objective_functions.py"", ""nilearn/_utils/__init__.py"", ""nilearn/tests/test_niimg_conversions.py"", ""nilearn/image/tests/test_resampling.py"", ""examples/decoding/plot_haxby_full_analysis.py"", ""nilearn/image/image.py"", ""examples/connectivity/plot_simulated_connectome.py"", ""nilearn/datasets/data/power_2011.csv"", ""nilearn/datasets/tests/data/pymvpa-exampledata.tar.bz2"", ""nilearn/datasets/func.py"", ""examples/manipulating_visualizing/plot_prob_atlas.py"", ""nilearn/_utils/testing.py"", ""nilearn/_utils/niimg.py"", ""examples/manipulating_visualizing/plot_demo_more_plotting.py"", ""nilearn/datasets/data/confounds_with_header.csv"", ""nilearn/_utils/niimg_conversions.py"", ""examples/decoding/plot_simulated_data.py"", ""nilearn/decoding/fista.py"", ""nilearn/plotting/tests/test_edge_detect.py"", ""examples/decoding/plot_haxby_different_estimators.py"", ""nilearn/tests/test_masking.py"", ""doc/decoding/estimator_choice.rst"", ""nilearn/data/__init__.py"", ""examples/manipulating_visualizing/plot_roi_extraction.py"", ""examples/manipulating_visualizing/plot_overlay.py"", ""nilearn/decoding/tests/test_sklearn_compatibility.py"", ""nilearn/masking.py"", ""examples/decoding/plot_haxby_multiclass.py"", ""nilearn/datasets/data/pymvpa-exampledata.tar.bz2"", ""nilearn/decoding/objective_functions.py"", ""nilearn/_utils/compat.py"", ""nilearn/datasets/tests/data/test.mgz"", ""examples/decoding/plot_haxby_space_net.py"", ""nilearn/input_data/tests/test_nifti_masker.py"", ""doc/themes/nilearn/static/nature.css_t"", ""nilearn/decoding/tests/simulate_graph_net_data.py"", ""nilearn/datasets/utils.py"", ""nilearn/input_data/tests/test_multi_nifti_masker.py"", ""examples/connectivity/plot_canica_resting_state.py"", ""nilearn/image/tests/data/test.mgz"", ""nilearn/datasets/description/smith_2009.rst"", ""examples/decoding/plot_oasis_vbm.py"", ""nilearn/datasets/tests/data/spm_confounds.txt"", ""nilearn/decomposition/tests/test_canica.py"", ""examples/manipulating_visualizing/plot_demo_plotting.py"", ""examples/connectivity/plot_rest_clustering.py"", ""doc/install_doc_component.html"", ""nilearn/data/avg152T1_brain.nii.gz"", ""nilearn/input_data/base_masker.py"", ""nilearn/datasets/data/spm_confounds.txt"", ""nilearn/image/tests/data/__init__.py"", ""examples/manipulating_visualizing/plot_mask_computation.py"", ""nilearn/decoding/tests/test_searchlight.py"", ""examples/connectivity/plot_multi_subject_connectome.py"", ""examples/decoding/plot_haxby_searchlight.py"", ""nilearn/data/power_2011.csv"", ""nilearn/plotting/tests/test_displays.py"", ""examples/connectivity/plot_ica_resting_state.py"", ""doc/manipulating_visualizing/plotting.rst"", ""nilearn/datasets/description/adhd.rst"", ""doc/decoding/space_net.rst"", ""nilearn/decomposition/__init__.py"", ""examples/manipulating_visualizing/plot_haxby_masks.py"", ""doc/decoding/decoding_simulated.rst"", ""doc/decoding/decoding_tutorial.rst"", ""nilearn/datasets/tests/data/__init__.py"", ""nilearn/datasets/description/miyawaki2008.rst"", ""doc/whats_new.rst"", ""nilearn/input_data/nifti_spheres_masker.py"", ""nilearn/tests/test_region.py"", ""nilearn/datasets/tests/data/mmap.dat"", ""examples/connectivity/plot_adhd_spheres.py"", ""nilearn/decoding/tests/test_operators.py"", ""circle.yml"", ""nilearn/datasets/description/yeo_2011.rst"", ""nilearn/datasets/description/nyu.rst"", ""doc/index.rst"", ""nilearn/decoding/tests/test_space_net.py"", ""nilearn/input_data/tests/test_nifti_maps_masker.py"", ""doc/decoding/index.rst"", ""nilearn/decoding/__init__.py"", ""nilearn/datasets/description/brainomics_localizer.rst"", ""nilearn/tests/test_class_inspect.py"", ""nilearn/input_data/nifti_maps_masker.py"", ""nilearn/image/__init__.py"", ""nilearn/input_data/tests/test_nifti_labels_masker.py"", ""nilearn/tests/test_logger.py"", ""nilearn/datasets/data/__init__.py"", ""nilearn/datasets/description/icbm152_2009.rst"", ""nilearn/decoding/space_net.py"", ""nilearn/image/tests/test_image.py"", ""nilearn/datasets.py"", ""nilearn/tests/test_extmath.py"", ""README.rst"", ""nilearn/plotting/glass_brain_files/plot_align_svg.py"", ""doc/themes/nilearn/layout.html"", ""doc/connectivity/connectome_extraction.rst"", ""nilearn/decoding/tests/test_same_api.py"", ""examples/decoding/plot_mixed_gambles_space_net.py"", ""nilearn/tests/data/test.mgz"", ""nilearn/datasets/tests/__init__.py"", ""doc/connectivity/resting_state_networks.rst"", ""examples/manipulating_visualizing/plot_affine_transformation.py"", ""nilearn/tests/test_group_sparse_covariance.py"", ""doc/manipulating_visualizing/data_preparation.rst"", ""nilearn/image/resampling.py"", ""nilearn/tests/test_numpy_conversions.py"", ""nilearn/datasets/tests/test_utils.py"", ""nilearn/_utils/fixes/matplotlib_backports.py"", ""nilearn/datasets/tests/test_func.py"", ""nilearn/plotting/__init__.py"", ""examples/decoding/plot_oasis_vbm_space_net.py"", ""nilearn/datasets/description/haxby2001.rst"", ""nilearn/datasets/description/aal_spm_12.rst"", ""examples/connectivity/plot_probabilistic_atlas_extraction.py"", ""nilearn/decoding/tests/test_fista.py"", ""nilearn/tests/test_cache_mixin.py"", ""nilearn/tests/test_signal.py"", ""setup.py"", ""nilearn/datasets/description/ABIDE_pcp.rst"", ""nilearn/region.py"", ""examples/decoding/plot_haxby_anova_svm.py"", ""nilearn/datasets/description/__init__.py"", ""examples/manipulating_visualizing/plot_localizer_mass_univariate_methods.py"", ""nilearn/decoding/proximal_operators.py""]']",False,[],[],[],[],2015-09-04
9366,pull_request_commit,677.0,nilearn,nilearn,sb238920@is223297.intra.cea.fr,2015-09-04 18:16:59,Merge branch 'master' into tangent_classif,9f24288cbe5e3cc68ed2ab449e19ec0419342b4a,,api.github.com,,False,[],[],[],[],2015-09-04
9697,pull_request_commit,774.0,nilearn,nilearn,GaelVaroquaux,2015-09-03 21:37:01,"ENH: faster faasta (for TV-l1)

Careful timing / profiling shows that the dual-gap of the proximal
operator is sometimes decreased too far. As a result, the proximal
operator spends a lot of time trying to reach this dual gap, for no good
increase in overall energy. Profiling the code shows that this is the
number one loss of time.

Given that with warm-restart well implemented, decreasing on the fly the
tolerance of the proximal isn't very costly, we can rely fully on the
adaptative strategy, rather than on the paper of Schmidt et al (ie
implement FAASTA as in the paper). I have done this here. Printing values
of energies on the Haxby dataset shows that energy is decreased as well.

The code seems to be around 1.5 times faster.

I am sending a PR to see how this behaves on Travis / Circle",fb3d73e4c1c626379e84f11bc860e535b14531bc,,api.github.com,,False,[],[],[],[],2015-09-03
9698,pull_request_commit,775.0,nilearn,nilearn,arthurmensch,2015-09-04 14:32:27,WIP,0e2b456289a00f3e10e5d96aec0b917d15f75999,,api.github.com,,False,[],[],[],[],2015-09-04
9699,pull_request_commit,775.0,nilearn,nilearn,arthurmensch,2015-09-04 14:34:05,Fix cache in (Multi)NiftiMasker,ed32b985c936117fd07bc98ffedbe4783e242517,,api.github.com,,False,[],[],[],[],2015-09-04
