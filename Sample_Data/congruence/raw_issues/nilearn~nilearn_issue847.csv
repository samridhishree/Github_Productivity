"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","847","nilearn","nilearn","dohmatob","2015-11-20 09:42:14","In the spirit of the mean_img, iter_img, handy functions which are now part of nilearn, It'll be nice to have the full `fslmaths`  stack of operators implemented. We do such operations all the time on niimgs.
","start issue","Implement fslmaths operators like : -add, -sub, -mul, -div, -mean, -std, etc."
"issue_comment","847","nilearn","nilearn","eickenberg","2015-11-20 10:05:57","or more generally the same underlying voxel grid

I like the idea. I am assuming people coming from fsl would really like to
see this. Has there been any demand from outside for this?

On Friday, November 20, 2015, Alexandre Abraham notifications@github.com
wrote:

> The easiest way would be to extend all numpy operators to niimg (just by
> applying them on the arrays if they have the same affine).
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nilearn/nilearn/issues/847#issuecomment-158342714.
","",""
"issue_comment","847","nilearn","nilearn","eickenberg","2015-11-20 14:09:21","and having a subset of these in `__add__`, `__mul__`, `__rmul__`, etc:
advisable or not?

On Fri, Nov 20, 2015 at 3:05 PM, Gael Varoquaux notifications@github.com
wrote:

> My proposal isn't hard to implement, and it avoids an explosion of
> functions (think that users start wanting the log, or the
> exponentional...)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nilearn/nilearn/issues/847#issuecomment-158410540.
","",""
"issue_comment","847","nilearn","nilearn","bcipolli","2015-12-07 23:24:47","I like this suggestion, but I kind of lean towards having the simple functions. They're much more readable than their `math_img` counterparts. I worry less about function bloat; they can all be contained in a subpackage. `numpy` has the same issue (function bloat), and we just use the docs.

All of the basic functions could be thin wrappers around `math_img`. It would also avoid having different interfaces for math operations on lists (e.g. individual functions, like `mean_img`) and single images (`math_img`).
","",""
"issue_comment","847","nilearn","nilearn","GaelVaroquaux","2015-12-07 23:42:04","> I worry less about function bloat; they can all be contained in a
> subpackage. numpy has the same issue (function bloat), and we just use
> the docs.

But then we need to maintain them :(.

Generating them won't be easy, because we'll have to encode the signature
of all functions. This is I guess feasible, but it won't give trivially
easy code, and will thus have a maintainance burden.
","",""
