"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","224","pycqa","astroid","pylint-bot","2015-10-25 23:27:29","Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

Python classes, functions, and modules have their own intrinsic names.  In pure Python code, it's not possible to create such an object without adding the intrinsic name to the local namespace, but some special objects can break this rule.  When constructing ASTs from these objects, there are really three possible approache when building a corresponding node: always use the name the parent object uses, always use the intrinsic name, or use an AssignName node to assign the node for the child object to the name the parent uses (if they differ) so the node is available under both names in the namespace.  Other possibilities involve imprecise heuristics that I think would be fragile, hard to understand, and unmaintainable.  What would work best for the inference? 

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/224
","start issue","Naming issues in ASTs constructed from live objects"
"issue_closed","224","pycqa","astroid","pylint-bot","2015-12-09 05:55:26","","closed issue","Naming issues in ASTs constructed from live objects"
"issue_comment","224","pycqa","astroid","pylint-bot","2015-11-03 16:34:06","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

When you say special objects, you're referring in this case to <class 'function'> and such? 
","",""
"issue_comment","224","pycqa","astroid","pylint-bot","2015-11-03 17:20:24","_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Yes.
","",""
"issue_comment","224","pycqa","astroid","pylint-bot","2015-11-04 07:47:09","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

As mentioned in issue #241, where this also comes up, let them both be discoverable. One thing that you can also do is to create a dummy `__all__` variable in the mocked builtins module, which shouldn't contain those hidden names. This might be used by pylint for instance.
","",""
"issue_comment","224","pycqa","astroid","pylint-bot","2015-11-19 04:06:16","_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Fixed in 8aca20dd1814.
","",""
