,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,398,pycqa,astroid,rogalski,2017-02-05 12:56:12,This reverts commit 3e6ef99928137a396a6ee9c75351f4194b2471e8.,start issue,"Revert ""Fix namespace population when wildcard import is used (#397)"""
1,issue_closed,398,pycqa,astroid,rogalski,2017-02-05 12:57:41,,closed issue,"Revert ""Fix namespace population when wildcard import is used (#397)"""
2,pull_request_title,398,pycqa,astroid,rogalski,2017-02-05 12:56:12,This reverts commit 3e6ef99928137a396a6ee9c75351f4194b2471e8.,2c5fca58cbebc3964b1a384faece553d01e08d9c,"Revert ""Fix namespace population when wildcard import is used (#397)"""
3,pull_request_merged,398,pycqa,astroid,rogalski,2017-02-05 12:57:41,"Revert ""Fix namespace population when wildcard import is used (#397)""",9ee1f58ba91a52148829a781f3bfcff6f659139e,Pull request merge from rogalski/astroid:master to PyCQA/astroid:master
4,issue_comment,398,pycqa,astroid,coveralls,2017-02-05 12:59:43,"
[![Coverage Status](https://coveralls.io/builds/10001335/badge)](https://coveralls.io/builds/10001335)

Coverage decreased (-0.2%) to 89.107% when pulling **2c5fca58cbebc3964b1a384faece553d01e08d9c on rogalski:master** into **3e6ef99928137a396a6ee9c75351f4194b2471e8 on PyCQA:master**.
",,
5,issue_comment,398,pycqa,astroid,coveralls,2017-02-05 12:59:43,"
[![Coverage Status](https://coveralls.io/builds/10001335/badge)](https://coveralls.io/builds/10001335)

Coverage decreased (-0.2%) to 89.107% when pulling **2c5fca58cbebc3964b1a384faece553d01e08d9c on rogalski:master** into **3e6ef99928137a396a6ee9c75351f4194b2471e8 on PyCQA:master**.
",,
6,issue_comment,398,pycqa,astroid,coveralls,2017-02-05 12:59:43,"
[![Coverage Status](https://coveralls.io/builds/10001335/badge)](https://coveralls.io/builds/10001335)

Coverage decreased (-0.2%) to 89.107% when pulling **2c5fca58cbebc3964b1a384faece553d01e08d9c on rogalski:master** into **3e6ef99928137a396a6ee9c75351f4194b2471e8 on PyCQA:master**.
",,
7,issue_comment,398,pycqa,astroid,coveralls,2017-02-05 12:59:43,"
[![Coverage Status](https://coveralls.io/builds/10001335/badge)](https://coveralls.io/builds/10001335)

Coverage decreased (-0.2%) to 89.107% when pulling **2c5fca58cbebc3964b1a384faece553d01e08d9c on rogalski:master** into **3e6ef99928137a396a6ee9c75351f4194b2471e8 on PyCQA:master**.
",,
8,pull_request_commit,398,pycqa,astroid,rogalski,2017-02-05 12:55:49,"Revert ""Fix namespace population when wildcard import is used (#397)""

This reverts commit 3e6ef99928137a396a6ee9c75351f4194b2471e8.",2c5fca58cbebc3964b1a384faece553d01e08d9c,
0,issue_title,402,pycqa,astroid,rogalski,2017-02-08 20:37:54,Needed for PyCQA/pylint#1320,start issue,Fix metaclass detection when multiple keyword arguments are used in ClassDef
1,issue_closed,402,pycqa,astroid,PCManticore,2017-02-09 07:55:59,,closed issue,Fix metaclass detection when multiple keyword arguments are used in ClassDef
2,pull_request_title,402,pycqa,astroid,rogalski,2017-02-08 20:37:54,Needed for PyCQA/pylint#1320,d7ca7e88e697c5aa94265f07cf966d48201f77d6,Fix metaclass detection when multiple keyword arguments are used in ClassDef
3,pull_request_merged,402,pycqa,astroid,PCManticore,2017-02-09 07:55:59,Fix metaclass detection when multiple keyword arguments are used in ClassDef,563031aaf13a44adc8db4f8d0ab8020d550aae00,Pull request merge from rogalski/astroid:fix_metaclass_when_multiple_keywords to PyCQA/astroid:master
4,issue_comment,402,pycqa,astroid,coveralls,2017-02-08 20:43:08,"
[![Coverage Status](https://coveralls.io/builds/10061482/badge)](https://coveralls.io/builds/10061482)

Coverage remained the same at 89.304% when pulling **d7ca7e88e697c5aa94265f07cf966d48201f77d6 on rogalski:fix_metaclass_when_multiple_keywords** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
5,issue_comment,402,pycqa,astroid,coveralls,2017-02-08 20:43:08,"
[![Coverage Status](https://coveralls.io/builds/10061482/badge)](https://coveralls.io/builds/10061482)

Coverage remained the same at 89.304% when pulling **d7ca7e88e697c5aa94265f07cf966d48201f77d6 on rogalski:fix_metaclass_when_multiple_keywords** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
6,pull_request_commit_comment,402,pycqa,astroid,PCManticore,2017-02-09 07:55:18,"Ah, wonder how the tests were passing.",d7ca7e88e697c5aa94265f07cf966d48201f77d6,"(5, '', u'astroid/rebuilder.py')"
7,pull_request_commit,402,pycqa,astroid,rogalski,2017-02-08 20:34:46,Add failing test,2f0f32abb1b7d336f1823dead2f3f94975928a81,
8,pull_request_commit,402,pycqa,astroid,rogalski,2017-02-08 20:35:49,rebuilder: fix metaclass detection when multiple keywords are used in ClassDef,74daf09a0131b31a2dda95d8ea011192cd9cd9fb,
9,pull_request_commit,402,pycqa,astroid,rogalski,2017-02-08 20:37:04,Add changeling entry,d7ca7e88e697c5aa94265f07cf966d48201f77d6,
0,issue_title,400,pycqa,astroid,rogalski,2017-02-07 21:49:58,Fixes #399.,start issue,Asynchronous comprehensions
1,issue_closed,400,pycqa,astroid,rogalski,2017-03-01 18:47:31,,closed issue,Asynchronous comprehensions
2,pull_request_title,400,pycqa,astroid,rogalski,2017-02-07 21:49:58,Fixes #399.,714abcc4758ff2120a0824533a2d075a8a57da69,Asynchronous comprehensions
3,pull_request_merged,400,pycqa,astroid,rogalski,2017-03-01 18:47:31,Asynchronous comprehensions,bf3d6876c310b39d045f6338ec8b93d2b1967072,Pull request merge from rogalski/astroid:async_comprehensions to PyCQA/astroid:master
4,issue_comment,400,pycqa,astroid,coveralls,2017-02-07 21:54:01,"
[![Coverage Status](https://coveralls.io/builds/10042723/badge)](https://coveralls.io/builds/10042723)

Coverage decreased (-2.03%) to 87.275% when pulling **edee41c6ffbc7fddbfada91b7d0b069a46b6d648 on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
5,issue_comment,400,pycqa,astroid,coveralls,2017-02-07 21:57:34,"
[![Coverage Status](https://coveralls.io/builds/10042781/badge)](https://coveralls.io/builds/10042781)

Coverage decreased (-2.03%) to 87.275% when pulling **df99e25f292aa987f6c533f461666095781e6eed on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
6,issue_comment,400,pycqa,astroid,coveralls,2017-02-07 22:01:48,"
[![Coverage Status](https://coveralls.io/builds/10042803/badge)](https://coveralls.io/builds/10042803)

Coverage increased (+0.008%) to 89.311% when pulling **df99e25f292aa987f6c533f461666095781e6eed on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
7,issue_comment,400,pycqa,astroid,coveralls,2017-02-07 22:09:01,"
[![Coverage Status](https://coveralls.io/builds/10042923/badge)](https://coveralls.io/builds/10042923)

Coverage increased (+0.008%) to 89.311% when pulling **30dad28076353d8890b6542e60117d6205fc97ba on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
8,issue_comment,400,pycqa,astroid,coveralls,2017-02-07 22:09:01,"
[![Coverage Status](https://coveralls.io/builds/10042923/badge)](https://coveralls.io/builds/10042923)

Coverage increased (+0.008%) to 89.311% when pulling **30dad28076353d8890b6542e60117d6205fc97ba on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
9,issue_comment,400,pycqa,astroid,coveralls,2017-02-07 22:09:01,"
[![Coverage Status](https://coveralls.io/builds/10042923/badge)](https://coveralls.io/builds/10042923)

Coverage increased (+0.008%) to 89.311% when pulling **30dad28076353d8890b6542e60117d6205fc97ba on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
10,issue_comment,400,pycqa,astroid,coveralls,2017-02-07 22:09:01,"
[![Coverage Status](https://coveralls.io/builds/10042923/badge)](https://coveralls.io/builds/10042923)

Coverage increased (+0.008%) to 89.311% when pulling **30dad28076353d8890b6542e60117d6205fc97ba on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
11,issue_comment,400,pycqa,astroid,rogalski,2017-02-09 18:44:30,"@PCManticore thanks for the review, see new commits for fixes",,
12,issue_comment,400,pycqa,astroid,rogalski,2017-02-14 20:38:25,"@PCManticore since dunder for async iterables is `__aiter__` and not `__iter__`, I'd expect that by default some stuff will fail. I'll try to come up with a test case, but I haven't used asyncio at all, so it may take a while.",,
13,issue_comment,400,pycqa,astroid,PCManticore,2017-03-01 09:26:59,"@rogalski I think we can merge this as is, and create a new issue for adding support for ``__aiter__`` and async comprehension's ``assigned_stmts``. ",,
14,issue_comment,400,pycqa,astroid,rogalski,2017-03-01 11:43:46,"@PCManticore agreed. I'll do a merge commit, just so all tests can complete successfully and _squash and merge_ it afterwards.",,
15,pull_request_commit_comment,400,pycqa,astroid,PCManticore,2017-02-09 08:18:36,Let's put ``is_async`` in ``_other_fields``. ``_astroid_fields`` is only for objects which are AST objects.,714abcc4758ff2120a0824533a2d075a8a57da69,"(None, '', u'astroid/node_classes.py')"
16,pull_request_commit_comment,400,pycqa,astroid,PCManticore,2017-02-09 08:19:58,``' '.join('if %s' % n.accept(self) for i in ...)`` feels more natural to me.,714abcc4758ff2120a0824533a2d075a8a57da69,"(None, '', u'astroid/as_string.py')"
17,pull_request_commit_comment,400,pycqa,astroid,PCManticore,2017-02-09 08:20:42,"Check my previous comment regarding ``is_async``. Sorry, I think I misled you in a different PR, with a similar use case.",714abcc4758ff2120a0824533a2d075a8a57da69,"(None, '', u'astroid/rebuilder.py')"
18,pull_request_commit_comment,400,pycqa,astroid,PCManticore,2017-02-09 08:23:48,"You can use ``@`` to extract a particular node, instead of doing it manually, such as in this example:

```
f = extract_node('''
async def f():
   return [i async for i in...] #@
''')
# now f is the Return
```
Or you can use ``__()`` for a fine grained approach, as in:

```
f = extract_node('''
async def f():
   return __([i async for i in...])
''')
# now f is the comprehension
```",714abcc4758ff2120a0824533a2d075a8a57da69,"(None, '', u'astroid/tests/unittest_python3.py')"
19,pull_request_commit_comment,400,pycqa,astroid,PCManticore,2017-02-09 08:24:25,"A comment should be enough here. If I remember correctly, docstrings have special meaning in unittests.",714abcc4758ff2120a0824533a2d075a8a57da69,"(None, '', u'astroid/tests/unittest_python3.py')"
20,pull_request_commit,400,pycqa,astroid,rogalski,2017-02-07 21:49:36,Initial support for asynchronous comprehensions,d50417eea03d2e0098f4309166acc4aff652f51b,
21,pull_request_commit,400,pycqa,astroid,rogalski,2017-02-07 21:53:20,"Fix obvious regression for older interpreters, remove redundant comment",edee41c6ffbc7fddbfada91b7d0b069a46b6d648,
22,pull_request_commit,400,pycqa,astroid,rogalski,2017-02-07 21:56:43,Fix regression part2: add default value for getattr (...),df99e25f292aa987f6c533f461666095781e6eed,
23,pull_request_commit,400,pycqa,astroid,rogalski,2017-02-07 22:04:10,Fix bugs found by pylint,30dad28076353d8890b6542e60117d6205fc97ba,
24,pull_request_commit,400,pycqa,astroid,rogalski,2017-02-09 18:26:02,"Merge remote-tracking branch 'PyCQA/master' into async_comprehensions

# Conflicts:
#	ChangeLog",1a12c78b5444c27ff4cea448f9a5d95bfb142842,
25,pull_request_commit,400,pycqa,astroid,rogalski,2017-02-09 18:34:15,Fix review comments,f8eec36010a522b978567709beee8d99fa1c7316,
26,pull_request_commit,400,pycqa,astroid,rogalski,2017-02-09 18:39:39,Reuse inherited code instead of copy-pasting it,17874b88d3836c15c25f88a974e1350412b9cc10,
27,pull_request_commit,400,pycqa,astroid,rogalski,2017-02-28 20:16:15,Disable assigned_stmts for async fors and async comprehensions,00e28c5cabb88f06844c396a37d0969b51feda8e,
28,pull_request_commit,400,pycqa,astroid,rogalski,2017-03-01 18:38:34,"Merge remote-tracking branch 'PyCQA/master' into async_comprehensions

# Conflicts:
#	ChangeLog",714abcc4758ff2120a0824533a2d075a8a57da69,
0,issue_title,403,pycqa,astroid,rogalski,2017-02-08 21:05:08,Needed for PyCQA/pylint#1320,start issue,Fix typing.NamedTuple being not callable
1,issue_closed,403,pycqa,astroid,rogalski,2017-02-19 20:04:34,,closed issue,Fix typing.NamedTuple being not callable
2,pull_request_title,403,pycqa,astroid,rogalski,2017-02-08 21:05:08,Needed for PyCQA/pylint#1320,7d3741e4324527b4c06e1bb4db63e65153ca1ed3,Fix typing.NamedTuple being not callable
3,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:09:34,"
[![Coverage Status](https://coveralls.io/builds/10062001/badge)](https://coveralls.io/builds/10062001)

Coverage remained the same at 89.304% when pulling **9f7a91baff9113188784f7ed952e831761f5c69d on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
4,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:09:34,"
[![Coverage Status](https://coveralls.io/builds/10062001/badge)](https://coveralls.io/builds/10062001)

Coverage remained the same at 89.304% when pulling **9f7a91baff9113188784f7ed952e831761f5c69d on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
5,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:09:34,"
[![Coverage Status](https://coveralls.io/builds/10062001/badge)](https://coveralls.io/builds/10062001)

Coverage remained the same at 89.304% when pulling **9f7a91baff9113188784f7ed952e831761f5c69d on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
6,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:09:34,"
[![Coverage Status](https://coveralls.io/builds/10062001/badge)](https://coveralls.io/builds/10062001)

Coverage remained the same at 89.304% when pulling **9f7a91baff9113188784f7ed952e831761f5c69d on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
7,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:23:33,"
[![Coverage Status](https://coveralls.io/builds/10062225/badge)](https://coveralls.io/builds/10062225)

Coverage remained the same at 89.304% when pulling **6c03951713cb891982de7ab152235dd9e5eae7e5 on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
8,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:23:34,"
[![Coverage Status](https://coveralls.io/builds/10062225/badge)](https://coveralls.io/builds/10062225)

Coverage remained the same at 89.304% when pulling **6c03951713cb891982de7ab152235dd9e5eae7e5 on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
9,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:23:34,"
[![Coverage Status](https://coveralls.io/builds/10062225/badge)](https://coveralls.io/builds/10062225)

Coverage remained the same at 89.304% when pulling **6c03951713cb891982de7ab152235dd9e5eae7e5 on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
10,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:29:38,"
[![Coverage Status](https://coveralls.io/builds/10062348/badge)](https://coveralls.io/builds/10062348)

Coverage increased (+0.01%) to 89.318% when pulling **79e66536b786287adf4c0efce6823cc00039f9da on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
11,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:29:38,"
[![Coverage Status](https://coveralls.io/builds/10062348/badge)](https://coveralls.io/builds/10062348)

Coverage increased (+0.01%) to 89.318% when pulling **79e66536b786287adf4c0efce6823cc00039f9da on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
12,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:34:22,"
[![Coverage Status](https://coveralls.io/builds/10062437/badge)](https://coveralls.io/builds/10062437)

Coverage increased (+0.01%) to 89.318% when pulling **37280b4906b137dfbd8f2be4d8fce611181fa662 on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
13,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:34:22,"
[![Coverage Status](https://coveralls.io/builds/10062437/badge)](https://coveralls.io/builds/10062437)

Coverage increased (+0.01%) to 89.318% when pulling **37280b4906b137dfbd8f2be4d8fce611181fa662 on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
14,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:34:22,"
[![Coverage Status](https://coveralls.io/builds/10062437/badge)](https://coveralls.io/builds/10062437)

Coverage increased (+0.01%) to 89.318% when pulling **37280b4906b137dfbd8f2be4d8fce611181fa662 on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
15,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:34:22,"
[![Coverage Status](https://coveralls.io/builds/10062437/badge)](https://coveralls.io/builds/10062437)

Coverage increased (+0.01%) to 89.318% when pulling **37280b4906b137dfbd8f2be4d8fce611181fa662 on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
16,issue_comment,403,pycqa,astroid,coveralls,2017-02-08 21:34:22,"
[![Coverage Status](https://coveralls.io/builds/10062437/badge)](https://coveralls.io/builds/10062437)

Coverage increased (+0.01%) to 89.318% when pulling **37280b4906b137dfbd8f2be4d8fce611181fa662 on rogalski:fix-namedtuple-not-callable** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
",,
17,issue_comment,403,pycqa,astroid,rogalski,2017-02-19 20:04:32,I'll close it - it's much better solved by #390,,
18,pull_request_commit_comment,403,pycqa,astroid,rogalski,2017-02-08 21:26:35,"I don't like this early exit, but on the other hand `typing` is known to be actively developed, so I don't see much value in chasing issues related to older version of library code...",7d3741e4324527b4c06e1bb4db63e65153ca1ed3,"(None, '', u'astroid/tests/unittest_inference.py')"
19,pull_request_commit_comment,403,pycqa,astroid,PCManticore,2017-02-09 08:48:36,What is the reason for this change? ,7d3741e4324527b4c06e1bb4db63e65153ca1ed3,"(5, '', u'astroid/bases.py')"
20,pull_request_commit_comment,403,pycqa,astroid,PCManticore,2017-02-09 08:50:44,"I don't like it either. Does this happen with older versions of ``typing``? We should, probably, pin it to a version that doesn't give us too much trouble.",7d3741e4324527b4c06e1bb4db63e65153ca1ed3,"(None, '', u'astroid/tests/unittest_inference.py')"
21,pull_request_commit_comment,403,pycqa,astroid,rogalski,2017-02-09 22:06:30,typing.NamedTuple was inferred as not callable when class_context was False,7d3741e4324527b4c06e1bb4db63e65153ca1ed3,"(5, '', u'astroid/bases.py')"
22,pull_request_commit_comment,403,pycqa,astroid,PCManticore,2017-02-13 22:45:03,"Yeah, but I'm asking from a protocol perspective. ``class_context`` is False, since the lookup is done on the instance, thus it should not go through the metaclass lookup and so on. What I'm asking is why typing.NamedTuple is special. Is it an instance or a class? If it is an Instance, how come it has a ``__call__`` defined in the metaclass (I presume), that it can access in this place? Where does its ``__call__`` come from? ",7d3741e4324527b4c06e1bb4db63e65153ca1ed3,"(5, '', u'astroid/bases.py')"
23,pull_request_commit,403,pycqa,astroid,rogalski,2017-02-08 21:04:29,Fix typing.NamedTuple being not callable,9f7a91baff9113188784f7ed952e831761f5c69d,
24,pull_request_commit,403,pycqa,astroid,rogalski,2017-02-08 21:17:01,Rewrite a test to check if asserted behaviour is what interpreter does,6c03951713cb891982de7ab152235dd9e5eae7e5,
25,pull_request_commit,403,pycqa,astroid,rogalski,2017-02-08 21:24:20,"UT: If one of inferred is Uninferable, skip check for being callable",79e66536b786287adf4c0efce6823cc00039f9da,
26,pull_request_commit,403,pycqa,astroid,rogalski,2017-02-08 21:29:20,Fix pylon warning,37280b4906b137dfbd8f2be4d8fce611181fa662,
27,pull_request_commit,403,pycqa,astroid,rogalski,2017-02-09 22:26:24,Merge branch 'master' into fix-namedtuple-not-callable,b9d4879ca962838bb5803e0408f0367234a789d3,
28,pull_request_commit,403,pycqa,astroid,rogalski,2017-02-09 22:27:55,run tests for named tuple being callable only in python 3.6+,7d3741e4324527b4c06e1bb4db63e65153ca1ed3,
0,issue_title,393,pycqa,astroid,cdunklau,2017-01-29 19:00:52,"Looks like astroid doesn't yet support PEP 526 variable type hints, new in Python 3.6

### Steps to reproduce

1. Put the code `myvar: int` in a file.
2. Run pylint against that file

### Current behavior

Pylint crashes with this traceback. Appears to point at the new node introduced in Python 3.6's AST: `AnnAssign(expr target, expr annotation, expr? value, int simple)`

```
Traceback (most recent call last):
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/pylint/lint.py"", line 927, in get_ast
    return MANAGER.ast_from_file(filepath, modname, source=True)
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/astroid/manager.py"", line 86, in ast_from_file
    return AstroidBuilder(self).file_build(filepath, modname)
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/astroid/builder.py"", line 141, in file_build
    module = self._data_build(data, modname, path)
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/astroid/builder.py"", line 185, in _data_build
    module = builder.visit_module(node, modname, node_file, package)
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/astroid/rebuilder.py"", line 154, in visit_module
    newnode.body = [self.visit(child, newnode) for child in node.body]
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/astroid/rebuilder.py"", line 154, in <listcomp>
    newnode.body = [self.visit(child, newnode) for child in node.body]
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/astroid/rebuilder.py"", line 165, in visit
    visit_method = getattr(self, visit_name)
AttributeError: 'TreeRebuilder3k' object has no attribute 'visit_annassign'
************* Module pylint_breaks_on_AnnAssign
F:  1, 0: <class 'AttributeError'>: 'TreeRebuilder3k' object has no attribute 'visit_annassign' (astroid-error)
```

### Expected behavior

No crash, perhaps a warning about this not being supported yet?


### Pylint and Astroid Versions
- pylint 1.6.5,
- astroid 1.4.9
- Python 3.6.0 (default, Jan  9 2017, 19:38:03)
",start issue,Crash when trying to interpret PEP 526 variable type hints
1,issue_closed,393,pycqa,astroid,PCManticore,2017-02-09 08:58:46,,closed issue,Crash when trying to interpret PEP 526 variable type hints
2,issue_comment,393,pycqa,astroid,rr-,2017-01-29 19:30:41,"""I have no idea what I'm doing"" kind of patch:

```diff
diff --git a/astroid/node_classes.py b/astroid/node_classes.py
index fb92849..3d5c4ec 100644
--- a/astroid/node_classes.py
+++ b/astroid/node_classes.py
@@ -1051,6 +1051,19 @@ class Assign(mixins.AssignTypeMixin, Statement):
         self.value = value
 
 
+class AnnAssign(mixins.AssignTypeMixin, Statement):
+    """"""class representing an AnnAssign node""""""
+    _astroid_fields = ('targets', 'value', 'annotation',)
+    targets = None
+    value = None
+    annotation = None
+
+    def postinit(self, targets=None, value=None, annotation=None):
+        self.targets = targets
+        self.value = value
+        self.annotation = annotation
+
+
 class AugAssign(mixins.AssignTypeMixin, Statement):
     """"""class representing an AugAssign node""""""
     _astroid_fields = ('target', 'value')
diff --git a/astroid/nodes.py b/astroid/nodes.py
index 3397294..861b0a6 100644
--- a/astroid/nodes.py
+++ b/astroid/nodes.py
@@ -28,7 +28,7 @@ on ImportFrom and Import :
 # pylint: disable=unused-import,redefined-builtin
 
 from astroid.node_classes import (
-    Arguments, AssignAttr, Assert, Assign,
+    Arguments, AssignAttr, Assert, Assign, AnnAssign,
     AssignName, AugAssign, Repr, BinOp, BoolOp, Break, Call, Compare,
     Comprehension, Const, Continue, Decorators, DelAttr, DelName, Delete,
     Dict, Expr, Ellipsis, EmptyNode, ExceptHandler, Exec, ExtSlice, For,
@@ -56,7 +56,7 @@ from astroid.scoped_nodes import (
 ALL_NODE_CLASSES = (
     AsyncFunctionDef, AsyncFor, AsyncWith, Await,
 
-    Arguments, AssignAttr, Assert, Assign, AssignName, AugAssign,
+    Arguments, AssignAttr, Assert, Assign, AnnAssign, AssignName, AugAssign,
     Repr, BinOp, BoolOp, Break,
     Call, ClassDef, Compare, Comprehension, Const, Continue,
     Decorators, DelAttr, DelName, Delete,
diff --git a/astroid/protocols.py b/astroid/protocols.py
index 4058802..a6e6a97 100644
--- a/astroid/protocols.py
+++ b/astroid/protocols.py
@@ -357,6 +357,7 @@ def assign_assigned_stmts(self, node=None, context=None, asspath=None):
                              assign_path=asspath, context=context))
 
 nodes.Assign.assigned_stmts = assign_assigned_stmts
+nodes.AnnAssign.assigned_stmts = assign_assigned_stmts
 nodes.AugAssign.assigned_stmts = assign_assigned_stmts
 
 
diff --git a/astroid/rebuilder.py b/astroid/rebuilder.py
index 4b3506b..f25c794 100644
--- a/astroid/rebuilder.py
+++ b/astroid/rebuilder.py
@@ -214,6 +214,17 @@ class TreeRebuilder(object):
                          self.visit(node.value, newnode))
         return newnode
 
+    def visit_annassign(self, node, parent):
+        """"""visit a AnnAssign node by returning a fresh instance of it""""""
+        newnode = nodes.AnnAssign(node.lineno, node.col_offset, parent)
+        annotation = None
+        if node.annotation:
+            annotation = self.visit(node.annotation, newnode)
+        newnode.postinit([self.visit(node.target, newnode)],
+                         self.visit(node.value, newnode),
+                         annotation)
+        return newnode
+
     def visit_assignname(self, node, parent, node_name=None):
         '''visit a node and return a AssignName node'''
         newnode = nodes.AssignName(node_name, getattr(node, 'lineno', None),
```

This seems to work and does not complain about unused imports in scenarios like this:

```python
from typing import Optional
test: Optional[str] = None
```

(where the imported `Optional` is used only in variable annotations)",,
3,issue_comment,393,pycqa,astroid,rogalski,2017-01-30 08:39:49,"@rr- do you mind creating a ""proper"" pull request? At least we can start with code review and making change ready for merge.",,
4,issue_comment,393,pycqa,astroid,rr-,2017-01-30 08:40:57,Yes sir,,
5,issue_comment,393,pycqa,astroid,PCManticore,2017-02-09 08:58:46,"Thanks to @rr-, this now works in master branch.",,
0,issue_title,401,pycqa,astroid,rogalski,2017-02-08 12:28:52,"They generate lots of noise, and Pylint coveralls configuration seems to be more user-friendly.",start issue,Reconfigure coveralls to skip commenting on PRs
1,issue_closed,401,pycqa,astroid,PCManticore,2017-02-09 07:53:14,,closed issue,Reconfigure coveralls to skip commenting on PRs
2,issue_comment,401,pycqa,astroid,PCManticore,2017-02-09 07:53:14,"Done! This was annoying me too, but I couldn't find the impetus to disable it. ",,
0,issue_title,397,pycqa,astroid,rogalski,2017-02-05 12:31:49,Fix PyCQA/pylint#1312,start issue,Fix namespace population when wildcard import is used
1,issue_closed,397,pycqa,astroid,rogalski,2017-02-05 12:51:58,,closed issue,Fix namespace population when wildcard import is used
2,pull_request_title,397,pycqa,astroid,rogalski,2017-02-05 12:31:49,Fix PyCQA/pylint#1312,55a90c5658b1e314c5f058e4bee4edfba02c5e51,Fix namespace population when wildcard import is used
3,pull_request_merged,397,pycqa,astroid,rogalski,2017-02-05 12:51:58,Fix namespace population when wildcard import is used,3e6ef99928137a396a6ee9c75351f4194b2471e8,Pull request merge from rogalski/astroid:import_all to PyCQA/astroid:master
4,issue_comment,397,pycqa,astroid,coveralls,2017-02-05 12:37:58,"
[![Coverage Status](https://coveralls.io/builds/10001206/badge)](https://coveralls.io/builds/10001206)

Coverage increased (+0.01%) to 89.318% when pulling **0c57b08c12d9f12dc3fbd98e7d5469b38ba6636a on rogalski:import_all** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
5,issue_comment,397,pycqa,astroid,coveralls,2017-02-05 12:37:58,"
[![Coverage Status](https://coveralls.io/builds/10001206/badge)](https://coveralls.io/builds/10001206)

Coverage increased (+0.01%) to 89.318% when pulling **0c57b08c12d9f12dc3fbd98e7d5469b38ba6636a on rogalski:import_all** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
6,issue_comment,397,pycqa,astroid,coveralls,2017-02-05 12:37:58,"
[![Coverage Status](https://coveralls.io/builds/10001206/badge)](https://coveralls.io/builds/10001206)

Coverage increased (+0.01%) to 89.318% when pulling **0c57b08c12d9f12dc3fbd98e7d5469b38ba6636a on rogalski:import_all** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
7,issue_comment,397,pycqa,astroid,coveralls,2017-02-05 12:37:58,"
[![Coverage Status](https://coveralls.io/builds/10001206/badge)](https://coveralls.io/builds/10001206)

Coverage increased (+0.01%) to 89.318% when pulling **0c57b08c12d9f12dc3fbd98e7d5469b38ba6636a on rogalski:import_all** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
8,issue_comment,397,pycqa,astroid,coveralls,2017-02-05 12:37:58,"
[![Coverage Status](https://coveralls.io/builds/10001206/badge)](https://coveralls.io/builds/10001206)

Coverage increased (+0.01%) to 89.318% when pulling **0c57b08c12d9f12dc3fbd98e7d5469b38ba6636a on rogalski:import_all** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
9,issue_comment,397,pycqa,astroid,coveralls,2017-02-05 12:48:26,"
[![Coverage Status](https://coveralls.io/builds/10001266/badge)](https://coveralls.io/builds/10001266)

Coverage increased (+0.01%) to 89.318% when pulling **55a90c5658b1e314c5f058e4bee4edfba02c5e51 on rogalski:import_all** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
10,issue_comment,397,pycqa,astroid,coveralls,2017-02-05 12:48:26,"
[![Coverage Status](https://coveralls.io/builds/10001266/badge)](https://coveralls.io/builds/10001266)

Coverage increased (+0.01%) to 89.318% when pulling **55a90c5658b1e314c5f058e4bee4edfba02c5e51 on rogalski:import_all** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
11,issue_comment,397,pycqa,astroid,PCManticore,2017-02-05 12:54:34,"The current behavior is expected. You can check the previous commit where ``public_names`` was introduced: https://github.com/rogalski/astroid/commit/82c6ef644a2efb77217a23d9b8a6cfb5caffb4ba. As explained there, we cannot provide strong guarantees over ``__all__`` support, so we started relying on all the public names, instead of filtering them through ``__all__``. Cannot check right now the Pylint issue, since I am on a phone, but probably there is another solution to fix it.",,
12,pull_request_commit,397,pycqa,astroid,rogalski,2017-02-05 12:31:39,"Fix inference of names exported via wildcard-import

Fix PyCQA/pylint#1312",0c57b08c12d9f12dc3fbd98e7d5469b38ba6636a,
13,pull_request_commit,397,pycqa,astroid,rogalski,2017-02-05 12:41:20,Clean up tests,55a90c5658b1e314c5f058e4bee4edfba02c5e51,
0,issue_title,356,pycqa,astroid,royw,2016-08-01 21:47:32,"### Fixes / new features
- This pull requests simply says when a class does not have a name attribute, then it does not match the signal name and therefore returns False.

pylint --rcfile=pylint.rc src > quality/pylint.log
Traceback (most recent call last):
  File ""/usr/local/bin/pylint"", line 11, in <module>
    sys.exit(run_pylint())
  File ""/usr/local/lib/python2.7/dist-packages/pylint/**init**.py"", line 23, in run_pylint
    Run(sys.argv[1:])
  File ""/usr/local/lib/python2.7/dist-packages/pylint/lint.py"", line 1315, in **init**
    linter.check(args)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/lint.py"", line 736, in check
    self._do_check(files_or_modules)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/lint.py"", line 867, in _do_check
    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/lint.py"", line 947, in check_astroid_module
    walker.walk(ast_node)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/utils.py"", line 938, in walk
    self.walk(child)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/utils.py"", line 938, in walk
    self.walk(child)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/utils.py"", line 938, in walk
    self.walk(child)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/utils.py"", line 935, in walk
    cb(astroid)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/checkers/stdlib.py"", line 186, in visit_call
    for inferred in node.func.infer():
  File ""/usr/local/lib/python2.7/dist-packages/astroid/bases.py"", line 302, in wrapped
    for res in _func(node, context, *_kwargs):
  File ""/usr/local/lib/python2.7/dist-packages/astroid/bases.py"", line 99, in _infer_stmts
    for inferred in stmt.infer(context=context):
  File ""/usr/local/lib/python2.7/dist-packages/astroid/context.py"", line 49, in cache_generator
    for result in generator:
  File ""/usr/local/lib/python2.7/dist-packages/astroid/bases.py"", line 302, in wrapped
    for res in _func(node, context, *_kwargs):
  File ""/usr/local/lib/python2.7/dist-packages/astroid/bases.py"", line 99, in _infer_stmts
    for inferred in stmt.infer(context=context):
  File ""/usr/local/lib/python2.7/dist-packages/astroid/context.py"", line 49, in cache_generator
    for result in generator:
  File ""/usr/local/lib/python2.7/dist-packages/astroid/bases.py"", line 302, in wrapped
    for res in _func(node, context, **kwargs):
  File ""/usr/local/lib/python2.7/dist-packages/astroid/inference.py"", line 142, in infer_import_from
    module = self.do_import_module()
  File ""/usr/local/lib/python2.7/dist-packages/astroid/mixins.py"", line 129, in do_import_module
    relative_only=level and level >= 1)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/scoped_nodes.py"", line 492, in import_module
    return MANAGER.ast_from_module_name(absmodname)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/manager.py"", line 136, in ast_from_module_name
    return self.ast_from_file(filepath, modname, fallback=False)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/manager.py"", line 86, in ast_from_file
    return AstroidBuilder(self).file_build(filepath, modname)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/builder.py"", line 142, in file_build
    return self._post_build(module, encoding)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/builder.py"", line 166, in _post_build
    module = self._manager.visit_transforms(module)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/manager.py"", line 68, in visit_transforms
    return self._transform.visit(node)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/transforms.py"", line 95, in visit
    module.body = [self._visit(child) for child in module.body]
  File ""/usr/local/lib/python2.7/dist-packages/astroid/transforms.py"", line 63, in _visit
    visited = self._visit_generic(value)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/transforms.py"", line 69, in _visit_generic
    return [self._visit_generic(child) for child in node]
  File ""/usr/local/lib/python2.7/dist-packages/astroid/transforms.py"", line 73, in _visit_generic
    return self._visit(node)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/transforms.py"", line 65, in _visit
    return self._transform(node)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/transforms.py"", line 47, in _transform
    if predicate is None or predicate(node):
  File ""/usr/local/lib/python2.7/dist-packages/astroid/brain/brain_qt.py"", line 12, in _looks_like_signal
    return cls.name == signal_name
AttributeError: 'AssignAttr' object has no attribute 'name'

Here's the method that is throwing the exception:

```
def _looks_like_signal(node, signal_name='pyqtSignal'):
    if '__class__' in node.instance_attrs:
        cls = node.instance_attrs['__class__'][0]
        return cls.name == signal_name
    return False
```

The cls object without the name attribute field look like (repr(cls)):

```
<AssignAttr(__class__) l.120 [lazy_object_proxy.slots] at 0x7f93a4bc2b90>
```

So simply catch the AttributeError and let the function return False:

```
def _looks_like_signal(node, signal_name='pyqtSignal'):
    if '__class__' in node.instance_attrs:
        try:
            cls = node.instance_attrs['__class__'][0]
            return cls.name == signal_name
        except AttributeError:
            # return False if the cls does not have a name attribute
            pass
    return False
```

Thank you.
",start issue,Pylint throws AttributeError on missing class name attribute
1,issue_closed,356,pycqa,astroid,PCManticore,2017-02-09 08:37:57,,closed issue,Pylint throws AttributeError on missing class name attribute
2,pull_request_title,356,pycqa,astroid,royw,2016-08-01 21:47:32,"### Fixes / new features
- This pull requests simply says when a class does not have a name attribute, then it does not match the signal name and therefore returns False.

pylint --rcfile=pylint.rc src > quality/pylint.log
Traceback (most recent call last):
  File ""/usr/local/bin/pylint"", line 11, in <module>
    sys.exit(run_pylint())
  File ""/usr/local/lib/python2.7/dist-packages/pylint/**init**.py"", line 23, in run_pylint
    Run(sys.argv[1:])
  File ""/usr/local/lib/python2.7/dist-packages/pylint/lint.py"", line 1315, in **init**
    linter.check(args)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/lint.py"", line 736, in check
    self._do_check(files_or_modules)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/lint.py"", line 867, in _do_check
    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/lint.py"", line 947, in check_astroid_module
    walker.walk(ast_node)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/utils.py"", line 938, in walk
    self.walk(child)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/utils.py"", line 938, in walk
    self.walk(child)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/utils.py"", line 938, in walk
    self.walk(child)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/utils.py"", line 935, in walk
    cb(astroid)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/checkers/stdlib.py"", line 186, in visit_call
    for inferred in node.func.infer():
  File ""/usr/local/lib/python2.7/dist-packages/astroid/bases.py"", line 302, in wrapped
    for res in _func(node, context, *_kwargs):
  File ""/usr/local/lib/python2.7/dist-packages/astroid/bases.py"", line 99, in _infer_stmts
    for inferred in stmt.infer(context=context):
  File ""/usr/local/lib/python2.7/dist-packages/astroid/context.py"", line 49, in cache_generator
    for result in generator:
  File ""/usr/local/lib/python2.7/dist-packages/astroid/bases.py"", line 302, in wrapped
    for res in _func(node, context, *_kwargs):
  File ""/usr/local/lib/python2.7/dist-packages/astroid/bases.py"", line 99, in _infer_stmts
    for inferred in stmt.infer(context=context):
  File ""/usr/local/lib/python2.7/dist-packages/astroid/context.py"", line 49, in cache_generator
    for result in generator:
  File ""/usr/local/lib/python2.7/dist-packages/astroid/bases.py"", line 302, in wrapped
    for res in _func(node, context, **kwargs):
  File ""/usr/local/lib/python2.7/dist-packages/astroid/inference.py"", line 142, in infer_import_from
    module = self.do_import_module()
  File ""/usr/local/lib/python2.7/dist-packages/astroid/mixins.py"", line 129, in do_import_module
    relative_only=level and level >= 1)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/scoped_nodes.py"", line 492, in import_module
    return MANAGER.ast_from_module_name(absmodname)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/manager.py"", line 136, in ast_from_module_name
    return self.ast_from_file(filepath, modname, fallback=False)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/manager.py"", line 86, in ast_from_file
    return AstroidBuilder(self).file_build(filepath, modname)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/builder.py"", line 142, in file_build
    return self._post_build(module, encoding)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/builder.py"", line 166, in _post_build
    module = self._manager.visit_transforms(module)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/manager.py"", line 68, in visit_transforms
    return self._transform.visit(node)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/transforms.py"", line 95, in visit
    module.body = [self._visit(child) for child in module.body]
  File ""/usr/local/lib/python2.7/dist-packages/astroid/transforms.py"", line 63, in _visit
    visited = self._visit_generic(value)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/transforms.py"", line 69, in _visit_generic
    return [self._visit_generic(child) for child in node]
  File ""/usr/local/lib/python2.7/dist-packages/astroid/transforms.py"", line 73, in _visit_generic
    return self._visit(node)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/transforms.py"", line 65, in _visit
    return self._transform(node)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/transforms.py"", line 47, in _transform
    if predicate is None or predicate(node):
  File ""/usr/local/lib/python2.7/dist-packages/astroid/brain/brain_qt.py"", line 12, in _looks_like_signal
    return cls.name == signal_name
AttributeError: 'AssignAttr' object has no attribute 'name'

Here's the method that is throwing the exception:

```
def _looks_like_signal(node, signal_name='pyqtSignal'):
    if '__class__' in node.instance_attrs:
        cls = node.instance_attrs['__class__'][0]
        return cls.name == signal_name
    return False
```

The cls object without the name attribute field look like (repr(cls)):

```
<AssignAttr(__class__) l.120 [lazy_object_proxy.slots] at 0x7f93a4bc2b90>
```

So simply catch the AttributeError and let the function return False:

```
def _looks_like_signal(node, signal_name='pyqtSignal'):
    if '__class__' in node.instance_attrs:
        try:
            cls = node.instance_attrs['__class__'][0]
            return cls.name == signal_name
        except AttributeError:
            # return False if the cls does not have a name attribute
            pass
    return False
```

Thank you.
",f9c4b41409bfe3c20304856207125f4d989f749c,Pylint throws AttributeError on missing class name attribute
3,pull_request_merged,356,pycqa,astroid,PCManticore,2017-02-09 08:37:57,Pylint throws AttributeError on missing class name attribute,b4f314a6bc12978030d82ccde321f85232498236,Pull request merge from royw/astroid:master to PyCQA/astroid:master
4,issue_comment,356,pycqa,astroid,ceridwen,2017-01-30 21:03:06,"@PCManticore, do you want to take a look at this?  It looks to me like the brain_qt.py code needs to be altered in the light of the new handling for underscore methods/attributes.",,
5,issue_comment,356,pycqa,astroid,PCManticore,2017-01-30 21:19:39,We have to check why this difference appeared in the first case. Maybe inferring the node would be enough.,,
6,pull_request_commit,356,pycqa,astroid,roy_wright@trendmicro.com,2016-08-01 21:14:46,handle missing class name attribute,bb11453818f12c9df4b1751e0080329ffab0241c,
7,pull_request_commit,356,pycqa,astroid,roy_wright@trendmicro.com,2016-08-01 21:36:07,"Merge branch 'master' of https://github.com/royw/astroid

* 'master' of https://github.com/royw/astroid:
  Use proper environment markers for version specific dependencies.",f9c4b41409bfe3c20304856207125f4d989f749c,
0,issue_title,394,pycqa,astroid,rr-,2017-01-30 08:48:02,Crude implementation for #393 ,start issue,Add support for annotated assignment nodes
1,issue_closed,394,pycqa,astroid,PCManticore,2017-02-09 08:14:11,,closed issue,Add support for annotated assignment nodes
2,pull_request_title,394,pycqa,astroid,rr-,2017-01-30 08:48:02,Crude implementation for #393 ,ddc652e44fc1c9946cf9439aecaea3d82d217ff8,Add support for annotated assignment nodes
3,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 08:55:37,"
[![Coverage Status](https://coveralls.io/builds/9900337/badge)](https://coveralls.io/builds/9900337)

Coverage decreased (-0.1%) to 89.203% when pulling **1319a00eab7833c5986ebb40173c8d63bc54d5a0 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
4,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 08:55:37,"
[![Coverage Status](https://coveralls.io/builds/9900337/badge)](https://coveralls.io/builds/9900337)

Coverage decreased (-0.1%) to 89.203% when pulling **1319a00eab7833c5986ebb40173c8d63bc54d5a0 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
5,issue_comment,394,pycqa,astroid,ceridwen,2017-01-30 20:31:09,Can you add a test for this to unittest_nodes.py?  The existing test Python35AyncTest in that file should be a good model.,,
6,issue_comment,394,pycqa,astroid,rr-,2017-01-30 21:50:03,Pushed a basic test,,
7,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 21:55:04,"
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
8,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 21:55:04,"
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
9,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 21:55:04,"
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
10,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 21:55:04,"
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
11,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 21:55:04,"
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
12,issue_comment,394,pycqa,astroid,ceridwen,2017-01-30 22:36:16,"Sorry I forgot to mention this before, but you should use the _visit_or_none helper function in the rebuilder method, and it should be in TreeRebuilder3 since it's a Python 3 feature.",,
13,issue_comment,394,pycqa,astroid,rr-,2017-01-31 08:01:04,Updated~,,
14,issue_comment,394,pycqa,astroid,coveralls,2017-01-31 08:05:30,"
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
15,issue_comment,394,pycqa,astroid,coveralls,2017-01-31 08:05:30,"
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
16,issue_comment,394,pycqa,astroid,coveralls,2017-01-31 08:05:30,"
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
17,issue_comment,394,pycqa,astroid,coveralls,2017-01-31 08:05:30,"
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
18,issue_comment,394,pycqa,astroid,coveralls,2017-01-31 08:05:30,"
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
19,issue_comment,394,pycqa,astroid,rr-,2017-02-05 13:54:18,"Updated~ (made separate commit to ease the review, it's to be squashed at later time)",,
20,issue_comment,394,pycqa,astroid,coveralls,2017-02-05 13:59:03,"
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
21,issue_comment,394,pycqa,astroid,coveralls,2017-02-05 13:59:03,"
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
22,issue_comment,394,pycqa,astroid,coveralls,2017-02-05 13:59:03,"
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
23,issue_comment,394,pycqa,astroid,coveralls,2017-02-05 13:59:03,"
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
24,issue_comment,394,pycqa,astroid,coveralls,2017-02-05 13:59:03,"
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
25,issue_comment,394,pycqa,astroid,ceridwen,2017-02-07 15:44:06,"I'm going to merge this tomorrow or so if there are no more comments, unless someone else wants to do it.  The remaining CI failure looks like a misconfiguration of pylint somehow.",,
26,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 16:51:19,"
[![Coverage Status](https://coveralls.io/builds/10036976/badge)](https://coveralls.io/builds/10036976)

Coverage increased (+0.03%) to 89.335% when pulling **5bd21c2d1caaf4783a3b07892c1690c3f8629f6c on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
27,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 16:51:19,"
[![Coverage Status](https://coveralls.io/builds/10036976/badge)](https://coveralls.io/builds/10036976)

Coverage increased (+0.03%) to 89.335% when pulling **5bd21c2d1caaf4783a3b07892c1690c3f8629f6c on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
28,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 16:51:19,"
[![Coverage Status](https://coveralls.io/builds/10036976/badge)](https://coveralls.io/builds/10036976)

Coverage increased (+0.03%) to 89.335% when pulling **5bd21c2d1caaf4783a3b07892c1690c3f8629f6c on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
29,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 16:54:27,"
[![Coverage Status](https://coveralls.io/builds/10037020/badge)](https://coveralls.io/builds/10037020)

Coverage increased (+0.03%) to 89.335% when pulling **5bd21c2d1caaf4783a3b07892c1690c3f8629f6c on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
30,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 17:02:18,"
[![Coverage Status](https://coveralls.io/builds/10037203/badge)](https://coveralls.io/builds/10037203)

Coverage increased (+0.03%) to 89.335% when pulling **f39ab6377dce29292f8e8b8867f571b1e99eb73a on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
31,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 20:45:53,"
[![Coverage Status](https://coveralls.io/builds/10041540/badge)](https://coveralls.io/builds/10041540)

Coverage increased (+0.03%) to 89.335% when pulling **275ff6135e7befc807e0f6169a7c5b7b69a15d48 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
32,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:35:57,"
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
33,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:35:57,"
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
34,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:35:57,"
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
35,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:35:58,"
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
36,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:35:58,"
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
37,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:38:28,"
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
38,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:38:28,"
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
39,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:38:28,"
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
40,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:38:28,"
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
41,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:38:28,"
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
42,issue_comment,394,pycqa,astroid,PCManticore,2017-02-09 08:14:11,"I merged this manually, with a couple of small changes, such as putting ``simple`` in ``_other_fields``, instead of ``_astroid_fields``. Thank you so much @rr- for your contribution!",,
43,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-05 10:49:09,"Please extend test suite for more complex cases found in [PEP526](https://www.python.org/dev/peps/pep-0526/):

```
primes: List[int] = []

captain: str  # Note: no initial value!

class Starship:
    stats: ClassVar[Dict[str, int]] = {}
```",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/tests/unittest_nodes.py')"
44,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-05 10:50:09,Consider using `test_utils.require_version` decorator.,ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/tests/unittest_nodes.py')"
45,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-05 10:57:14,"this likely should be named `target`, not `targets`. Annotated assign cannot be done anyway:

```
>>> (a, b): (int, int)
  File ""<stdin>"", line 1
SyntaxError: only single target (not tuple) can be annotated
```

Also, `help(_ast.AnnAssign)` yields:

    _fields = ('target', 'annotation', 'value', 'simple')

Astroid is supposed to be superset of `ast` and should be consistent with it. I'll recommend changing `_astroid_fields` value quoted above.

[PEP](https://www.python.org/dev/peps/pep-0526/#runtime-effects-of-type-annotations) also mentions _simple name_, but I don't think it affects us in any way.",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/node_classes.py')"
46,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-07 15:53:00,"we should add `simple` and change ordering to be in conformance with built-in `ast`.

```
>>> ast.parse('a: int').body[0]._fields
('target', 'annotation', 'value', 'simple')
```",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/node_classes.py')"
47,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-07 15:54:05,maybe actually indenting it and using `textwrap.dedent` will look slightly nicer in a code.,ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/tests/unittest_nodes.py')"
48,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-07 15:55:42,"Just a nitpick, test cases should be correct, let's use type specification for both keys and values: `Dict[str, str]`",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/tests/unittest_nodes.py')"
49,pull_request_commit_comment,394,pycqa,astroid,PCManticore,2017-02-07 16:31:01,visit an*,ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/rebuilder.py')"
50,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-07 21:32:11,"@PCManticore just before merging it - is it correct way to do it (creation of fake Const node)?

I encountered a very similar situation during implementation of [async comprehensions] support for astroid. ",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/rebuilder.py')"
51,pull_request_commit_comment,394,pycqa,astroid,PCManticore,2017-02-07 21:36:45,"Mm, now that you mention this, we can probably call ``visit_const`` instead of building it on our own. Thanks for finding this.",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/rebuilder.py')"
52,pull_request_commit_comment,394,pycqa,astroid,ceridwen,2017-02-07 21:39:53,"Something I just noticed: which of these fields are optional in the standard-library ast nodes?  I'm assuming that the annotation, target, and value fields aren't, but I haven't looked at 3.6 myself.  Whatever fields aren't optional should have required arguments.  There's legacy code that requires that it be possible to build some AST nodes without having all the mandatory fields set, but this is bad practice, and we shouldn't be carrying it forward to new nodes.",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/node_classes.py')"
53,pull_request_commit_comment,394,pycqa,astroid,rr-,2017-02-07 21:45:18,"https://docs.python.org/3/library/ast.html
```
          -- 'simple' indicates that we annotate simple name without parens
          | AnnAssign(expr target, expr annotation, expr? value, int simple)
```

Looks like only `value` is optional",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/node_classes.py')"
54,pull_request_commit,394,pycqa,astroid,rr-,2017-01-30 08:45:55,Add support for annotated assignment nodes,437560727e58b738c660b273c85bcea5badb4e71,
55,pull_request_commit,394,pycqa,astroid,rr-,2017-02-05 13:53:56,review fixes,b7c88492163f36559dad3c673b81566f48ab03a2,
56,pull_request_commit,394,pycqa,astroid,rr-,2017-02-07 16:45:20,review fixes (II),60b384f8668b588f33cd03ef92820f06b3ba21c4,
57,pull_request_commit,394,pycqa,astroid,rr-,2017-02-07 16:47:18,add changelog entry,5bd21c2d1caaf4783a3b07892c1690c3f8629f6c,
58,pull_request_commit,394,pycqa,astroid,rr-,2017-02-07 16:57:06,fix indentation,f39ab6377dce29292f8e8b8867f571b1e99eb73a,
59,pull_request_commit,394,pycqa,astroid,rr-,2017-02-07 20:41:17,fix too long line,275ff6135e7befc807e0f6169a7c5b7b69a15d48,
60,pull_request_commit,394,pycqa,astroid,rr-,2017-02-07 22:30:59,make non-optional arguments required,462925a0942847272744b1742a6bbfc4e83d38b1,
61,pull_request_commit,394,pycqa,astroid,rr-,2017-02-07 22:32:47,use visit_const,ddc652e44fc1c9946cf9439aecaea3d82d217ff8,
0,issue_title,399,pycqa,astroid,rogalski,2017-02-07 21:36:51,"See https://www.python.org/dev/peps/pep-0530/ for details
",start issue,Support for asynchronous comprehensions
1,issue_closed,399,pycqa,astroid,rogalski,2017-03-01 18:47:31,,closed issue,Support for asynchronous comprehensions
