"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","630","nilearn","nilearn","arthurmensch","2015-07-03 12:43:04","@GaelVaroquaux @lesteve 

I corrected the random state issue in `multi_pca`, added some caching and verbosity in MultiPCA and CanICA (doesn't hurt, and it speeds things up).

I have doubt on the meaning of `func_memory_level` though : should a high number mean that we cache inner functions + outer function, or only outer functions ?

EDIT : I also added a score function
","start issue","[Waiting for PR dep] Score, verbosity, caching, random_state in MultiPCA"
"issue_closed","630","nilearn","nilearn","arthurmensch","2015-07-27 14:50:08","","closed issue","[Waiting for PR dep] Score, verbosity, caching, random_state in MultiPCA"
"pull_request_title","630","nilearn","nilearn","arthurmensch","2015-07-03 12:43:04","@GaelVaroquaux @lesteve 

I corrected the random state issue in `multi_pca`, added some caching and verbosity in MultiPCA and CanICA (doesn't hurt, and it speeds things up).

I have doubt on the meaning of `func_memory_level` though : should a high number mean that we cache inner functions + outer function, or only outer functions ?

EDIT : I also added a score function
","fcd22cfadb1d97dfed597164fdac80e1295836ce","[Waiting for PR dep] Score, verbosity, caching, random_state in MultiPCA"
"issue_comment","630","nilearn","nilearn","arthurmensch","2015-07-09 08:21:05","I added a score function based on explained variance ratio, with a test
","",""
"issue_comment","630","nilearn","nilearn","GaelVaroquaux","2015-07-11 13:31:46","@arthurmensch : you have a test failure in Python 2.6 (check the travis page): there is no ""assert_is_instance""
","",""
"issue_comment","630","nilearn","nilearn","arthurmensch","2015-07-13 13:41:04","I think this could be merged quite easily. I can remove score function and only keep additional verbosity, intermediary caching and random_state bugfix
","",""
"issue_comment","630","nilearn","nilearn","bthirion","2015-07-13 22:14:46","I think that this PR is almost good to go.
","",""
"issue_comment","630","nilearn","nilearn","lesteve","2015-07-16 08:43:24","> I am waiting for #676 to be merged, I will then integrate this to it. Then I think we could integrate PR #613

Sounds good.
","",""
"pull_request_commit_comment","630","nilearn","nilearn","AlexandreAbraham","2015-07-03 13:17:41","This indentation pattern seems weird to me.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(None, '', u'nilearn/decomposition/canica.py')"
"pull_request_commit_comment","630","nilearn","nilearn","banilo","2015-07-03 22:12:42","Are there analogous printing for the other steps of CanICA?
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(20, '', u'nilearn/decomposition/canica.py')"
"pull_request_commit_comment","630","nilearn","nilearn","banilo","2015-07-03 22:21:29","Am I getting this right?

randomized_svd does not necessarily return the same result every time it is run?

We cache randomized_svd() now, so that same data returns the same result automatically, without invoking or not random_state aspects within randomized_svd()?

Why is random_state argument not used here, yet it is in a random_svd() call below?
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(45, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","arthurmensch","2015-07-06 07:41:40","fastica is the only time consuming step. MultiPCA (called before), prints similar information
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(20, '', u'nilearn/decomposition/canica.py')"
"pull_request_commit_comment","630","nilearn","nilearn","arthurmensch","2015-07-06 11:09:45","There is a random_state in the kwargs, on the line below
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(45, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-11 12:45:58","Is it ? I thought it was pretty fast wrt other steps, but that's mostly fine.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(20, '', u'nilearn/decomposition/canica.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-11 12:46:26","optional
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(33, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-11 13:25:01","I think that @banilo meant that there is no random_state given here.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(52, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","arthurmensch","2015-07-11 13:26:17","Ok i misunderstood the question. This is because linalg.svd is
deterministic.
On 11 Jul 2015 15:25, ""bthirion"" notifications@github.com wrote:

> In nilearn/decomposition/multi_pca.py
> https://github.com/nilearn/nilearn/pull/630#discussion_r34412606:
> 
> > ```
> >  else:
> > ```
> > -        U, S, _ = linalg.svd(data.T, full_matrices=False)
> > -        U, S, _ = cache(linalg.svd, memory, memory_level=memory_level,
> > -                        func_memory_level=2)(
> > -            data.T, full_matrices=False)
> 
> I think that @banilo https://github.com/banilo meant that there is no
> random_state given here.
> 
> â€”
> Reply to this email directly or view it on GitHub
> https://github.com/nilearn/nilearn/pull/630/files#r34412606.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(52, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-11 13:28:43","I'm not sure why you replace the iterator by a list. Are you fixing a bug ?
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(102, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-11 13:38:21","I'm just curious avout func_memory_level=3. is there a rule of the thumb to set this parameter ?
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(155, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-11 13:39:01","`imgs`
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(188, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-11 13:39:37","each subject (no s).
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(202, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-11 13:39:55","if per_component is True
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(202, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-11 13:41:43","Please don't leave commented code, but save it in a separate branch.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(217, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-11 13:46:18","Why do you have a constant patch (instead of plain noise)? I think that this is not used in the test. Sorry if I missed something obvious.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(33, '', u'nilearn/decomposition/tests/test_multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-11 13:48:16","I don't get it: you provide a mask as a cube on  ones.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(54, '', u'nilearn/decomposition/tests/test_multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","arthurmensch","2015-07-11 16:34:49","I will simplify this, it copied a few lines of code to generate synthetic data. I guess this should be factorized in a synthetic generation function.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(33, '', u'nilearn/decomposition/tests/test_multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","arthurmensch","2015-07-11 16:41:56","I think this should be put to 2, like in `session_pca`. `func_memory_level > 1` means that intermediary results are cached as well, but I don't really know how subtle we can be on the memory usage.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(155, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","arthurmensch","2015-07-11 16:43:48","Yes, for some reason `confounds` end up being `repeat(None, 0)` on the following line. I don't know how this come from, I just figured it would just be pragmatic to change it.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(102, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","arthurmensch","2015-07-13 12:44:43","It is slow enough to worry the user on large datasets
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(20, '', u'nilearn/decomposition/canica.py')"
"pull_request_commit_comment","630","nilearn","nilearn","arthurmensch","2015-07-13 12:51:43","This is just to mask sure that our data is not masked (data masking heuristic is hard coded)
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(54, '', u'nilearn/decomposition/tests/test_multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-13 22:01:35","I think it would be worth adding a few more explanations on what this means in practice.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(None, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-13 22:06:06","I think that this is a minor difference, but I'd rather stay with the initial version if there's no reason to change it/
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(102, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","bthirion","2015-07-13 22:14:16","I don't understand. When the mask is provided explictly it not recomputed. Actually, remove that line does not trigger a failure nor an error.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(54, '', u'nilearn/decomposition/tests/test_multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","lesteve","2015-07-15 11:18:22","This is nasty, could you not pass sorted=False to the super constructor above ?
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(None, '', u'nilearn/decomposition/canica.py')"
"pull_request_commit_comment","630","nilearn","nilearn","lesteve","2015-07-15 11:27:41","I am guessing you do that to sort in the descending order.

You can use `np.sort(score)[::-1]` instead.

Also you could compute the argsort once and reuse in this line and the line below:

``` python
index = np.argsort(score)[::-1]
self.score_ = score[index]
self.components_ = self.components_[index]
```
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(None, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","lesteve","2015-07-15 11:29:47","redudent -> redundant
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(175, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","lesteve","2015-07-15 11:39:20","Could it be because confounds is an iterator that is used twice and in the second case it has already been consumed so you get a StopIteration ? In any case, you should either understand the problem better or remove the commented out code that you changed.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(102, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","arthurmensch","2015-07-15 14:47:44","This is an inheritance pattern...
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(None, '', u'nilearn/decomposition/canica.py')"
"pull_request_commit_comment","630","nilearn","nilearn","lesteve","2015-07-15 15:24:28","Granted my suggestion was stupid. 

It is not very clear to me why do you need to set sorted to False, then fit MultiPCA and then set it back to whatever it was ?
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(None, '', u'nilearn/decomposition/canica.py')"
"pull_request_commit_comment","630","nilearn","nilearn","arthurmensch","2015-07-15 16:14:10","Yes, this is only to avoid sorting in MultiPCA, which is useless as we will sort components at the end of ICA
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(None, '', u'nilearn/decomposition/canica.py')"
"pull_request_commit_comment","630","nilearn","nilearn","lesteve","2015-07-15 21:46:33","You probably want to ignore a few parameters, like memory, memory_level and verbose in the _cache call.
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(125, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit_comment","630","nilearn","nilearn","lesteve","2015-07-15 21:47:35","You probably want to ignore memory and memory_level too
","fcd22cfadb1d97dfed597164fdac80e1295836ce","(None, '', u'nilearn/decomposition/multi_pca.py')"
"pull_request_commit","630","nilearn","nilearn","arthurmensch","2015-07-03 12:32:53","Cache, verbosity, random_state management in CanICA, MultiPCA","713b866ab9d93322fa25af4cbff1198fc4e1c547",""
"pull_request_commit","630","nilearn","nilearn","arthurmensch","2015-07-03 12:38:19","Removed keep_data_flat flag","22f0cccb95eee2c70c30461abf49a8f3cbcc5e54",""
"pull_request_commit","630","nilearn","nilearn","arthurmensch","2015-07-03 12:39:11","Removed keep_data_flat flag","b9ffc28482842543b62d9c5359e3a1002203d6a3",""
"pull_request_commit","630","nilearn","nilearn","arthurmensch","2015-07-03 12:44:36","PEP8","79479f593c88686cfb64efaf12d37d91654320b3",""
"pull_request_commit","630","nilearn","nilearn","arthurmensch","2015-07-03 13:39:46","PEP8","470ef4c5f8323fafeb2b427a2bf6fb26db5f3220",""
"pull_request_commit","630","nilearn","nilearn","arthurmensch","2015-07-09 08:15:04","Added score function","c07875d453b2b4d3e8ed62b508c39cb9b9e1f7c2",""
"pull_request_commit","630","nilearn","nilearn","arthurmensch","2015-07-09 08:22:47","Commented code","fcd22cfadb1d97dfed597164fdac80e1295836ce",""
