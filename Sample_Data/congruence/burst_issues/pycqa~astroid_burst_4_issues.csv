,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,147,pycqa,astroid,pylint-bot,2015-07-03 15:47:23,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

The current state of the project is far from being good, mostly due to circular dependencies between a lot of components, which leads to low reusability and ugly design hacks:
- Instance.getitem depends on CallContext, which is in inference.py. CallContext depends on nodes.py, which depends on bases.py.
- LookupMixin depends on AssName and DelName from node_classes, moving it in mixins.py is not possible,
- the monkey patching of inference functions in inference.py as well as assigned_stmts in protocols.py is horrendous. I'm thinking on having an InferenceVisitor, which should be enough to clean up this mess.
- lots of other small dependencies (I don't remember all of them right now)

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/147
",start issue,Lots of circular dependencies in the project
1,issue_closed,147,pycqa,astroid,pylint-bot,2015-12-09 05:54:07,,closed issue,Lots of circular dependencies in the project
2,issue_comment,147,pycqa,astroid,pylint-bot,2015-11-07 13:08:30,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Most of the circular dependencies are fixed in bookmark 2.0. The idea through this get fixed was to use virtual base classes for nodes and other objects, which means that object needs to register itself as a concrete implementation of one or more virtual base classes. This means that isinstance can be used with virtual base classes now, rather than with concrete objects, which removed almost all the dependencies we had in the project. Another pain was the use of monkey patching in inference.py and protocols.py, which is now removed by implementing dispatch methods on virtual base classes instead. There were some places though where we needed the concrete node classes in order to build nodes during inference, which is solved with dependency injection: in node_classes, when these functions are called, we pass the current module as an extra argument. 

Solving this issue also meant the separation of nodes from runtime objects, which now live in two separate namespaces, astroid.tree respectively astroid.interpreter.
",,
0,issue_title,140,pycqa,astroid,pylint-bot,2015-07-03 15:12:46,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

In the following case, since we don't fully understand the Base object, we should emit
an YES object, not a BinaryOperationError.

```
#!python

from unknown import Unknown
class Base(Unknown):
    pass
Base() * 23 
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/140
",start issue,"Binary operations between classes with unknown bases should yield YES, not an error"
1,issue_closed,140,pycqa,astroid,PCManticore,2016-02-19 16:17:38,,closed issue,"Binary operations between classes with unknown bases should yield YES, not an error"
2,issue_comment,140,pycqa,astroid,PCManticore,2016-02-19 16:17:38,"Fixed in pylint with https://github.com/PyCQA/pylint/commit/5d0e45d47758ed133e176a4b9a99f256ea9e3584 The fix shouldn't be in astroid.
",,
0,issue_title,144,pycqa,astroid,pylint-bot,2015-07-03 15:26:29,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We could add some inference support for kwargs:

```
#!python

from astroid.test_utils import extract_node
n = extract_node('''
import time

def test(**kwargs):
    return dict(kwargs)
test(a=4, b=5) #@
''')
i = next(n.infer())
print(i.items) # prints an empty list, instead of Dict(a=4, b=5)
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/144
",start issue,Understand **kwargs
1,issue_closed,144,pycqa,astroid,pylint-bot,2015-12-09 05:54:05,,closed issue,Understand **kwargs
2,issue_comment,144,pycqa,astroid,pylint-bot,2015-09-10 22:03:37,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fixed by 0b422f439e36682228646743fe1891b08ab49295
",,
0,issue_title,149,pycqa,astroid,pylint-bot,2015-07-03 16:09:40,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

For improving the compatibility with the ast module, we could add a new function, called `astroid.parse`, which will be the equivalent of:

```
#!python

from astroid.builder import AstroidBuilder
b = AstroidBuilder(manager)
return b.string_build(code, __file__)
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/149
",start issue,"Add astroid.parse function, similar to ast.parse"
1,issue_closed,149,pycqa,astroid,pylint-bot,2015-12-09 05:54:09,,closed issue,"Add astroid.parse function, similar to ast.parse"
2,issue_comment,149,pycqa,astroid,pylint-bot,2015-07-23 11:53:25,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fixed.
",,
0,issue_title,143,pycqa,astroid,pylint-bot,2015-07-03 15:26:23,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

""Ass"" as an abbreviation for ""assign"" doesn't read well in English.  I'd suggest using either ""set"" (as in setattr, setitem) or the full word ""assign.""

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/143
",start issue,"[easy] Change abbrevation for ""assign"" away from ""ass"""
1,issue_closed,143,pycqa,astroid,PCManticore,2016-02-19 16:46:29,,closed issue,"[easy] Change abbrevation for ""assign"" away from ""ass"""
2,issue_comment,143,pycqa,astroid,pylint-bot,2015-08-25 17:45:27,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I think this is fixed with the latest changes.
",,
3,issue_comment,143,pycqa,astroid,pylint-bot,2015-08-25 18:17:37,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Actually we do have some asspath variables left behind.
",,
4,issue_comment,143,pycqa,astroid,PCManticore,2016-02-19 16:46:29,"Closing this since I can't find any variables named asspath or similar in 2.0 (and I'm not interested in the other branches).
",,
