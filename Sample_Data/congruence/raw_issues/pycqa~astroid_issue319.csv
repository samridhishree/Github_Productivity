"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","319","pycqa","astroid","PCManticore","2016-02-14 22:51:44","Through this model, astroid starts knowing special attributes of certain Python objects, such as functions, classes, super objects and so on. This was previously possible before, but now the lookup and the attributes themselves are separated into a new module, objectmodel.py, which describes, in a more comprehensive way, the data model of each object.

@ceridwen let me know what you think. It's still not perfect, at some point I'd like to move out the lookup completely off the nodes into its separate domain, but that's a medium term plan, not necessarily for now.
","start issue","Introduce a special attributes model"
"issue_closed","319","pycqa","astroid","PCManticore","2016-02-23 22:54:03","","closed issue","Introduce a special attributes model"
"pull_request_title","319","pycqa","astroid","PCManticore","2016-02-14 22:51:44","Through this model, astroid starts knowing special attributes of certain Python objects, such as functions, classes, super objects and so on. This was previously possible before, but now the lookup and the attributes themselves are separated into a new module, objectmodel.py, which describes, in a more comprehensive way, the data model of each object.

@ceridwen let me know what you think. It's still not perfect, at some point I'd like to move out the lookup completely off the nodes into its separate domain, but that's a medium term plan, not necessarily for now.
","25575e47e144e1591dca27af32e386b12b6c2b1d","Introduce a special attributes model"
"pull_request_merged","319","pycqa","astroid","PCManticore","2016-02-23 22:54:03","Introduce a special attributes model","2d123c1f584a7fa842a2849e6d124541d711158e","Pull request merge from PyCQA/astroid:special_attributes to PyCQA/astroid:2.0"
"issue_comment","319","pycqa","astroid","PCManticore","2016-02-18 00:26:34","PR updated to support some rudimentary descriptor binding (func.**get**(X, Y)). It works only partially, because I had to rebuild the function which got bound for changing the parent to the class which gets bound to when the BoundMethod is created, but I need to do the same for the Arguments node and probably for the components from the body, which quickly gets into a slippery slope of rebuilding ASTs. I'll revisit this when we'll have the zipper, since it's probably going to be easier to make a subpart of the tree to depend on a new parent.
","",""
"issue_comment","319","pycqa","astroid","ceridwen","2016-02-18 19:37:46","My general comment so far is that some more high-level documentation would be useful.  I see what you're doing but not how the pieces are going to fit together.  How finished is this?  I'll offer other comments when I have a better understanding of where you're going.
","",""
"issue_comment","319","pycqa","astroid","PCManticore","2016-02-18 19:43:36","Sure, I'll add a description. I think it's fairly finished, there are some unimplemented special objects, but I'm not planning to implement them any time soon (**closure** for instance). 
","",""
"issue_comment","319","pycqa","astroid","PCManticore","2016-02-18 21:37:14","I added a short description to the objectmodel.py's docstring. Let me know if this seems enough. 
","",""
"issue_comment","319","pycqa","astroid","PCManticore","2016-02-23 15:14:25","@ceridwen Any comment on this PR? I'd like to merge it in the following days and some feedback would be appreciated (it's a big change and hopefully I didn't miss anything, so it's better to have two pairs of eyes than one)
","",""
"issue_comment","319","pycqa","astroid","ceridwen","2016-02-23 21:06:12","The docstring description did help me to understand what was going on, yes.  One early top-level comment: if the object model is part of the lookup mechanism, should it be lookup/ rather than interpreter/?  Are lookup/ and interpreter/ well-enough distinguished to be separate directories?
","",""
"issue_comment","319","pycqa","astroid","PCManticore","2016-02-23 21:08:25","No, the lookup will be part of the interpreter namespace. We might have in
the future something as interpreter/lookup, but I am not sure if we need to
add it now.
On Feb 23, 2016 9:06 PM, ""ceridwen"" notifications@github.com wrote:

> The docstring description did help me to understand what was going on,
> yes. One early top-level comment: if the object model is part of the lookup
> mechanism, should it be lookup/ rather than interpreter/? Are lookup/ and
> interpreter/ well-enough distinguished to be separate directories?
> 
> â€”
> Reply to this email directly or view it on GitHub
> https://github.com/PyCQA/astroid/pull/319#issuecomment-187904952.
","",""
"issue_comment","319","pycqa","astroid","ceridwen","2016-02-23 21:37:18","Beyond my inline comments, this looks good to me, and an improvement on what we have now.
","",""
"issue_comment","319","pycqa","astroid","PCManticore","2016-02-23 22:53:59","Thanks for the review @ceridwen 
","",""
"pull_request_commit","319","pycqa","astroid","PCManticore","2016-02-13 23:53:24","Introduce a special attributes model

Through this model, astroid starts knowing special attributes of certain Python objects,
such as functions, classes, super objects and so on. This was previously possible before,
but now the lookup and the attributes themselves are separated into a new module,
objectmodel.py, which describes, in a more comprehensive way, the data model of each
object.","25575e47e144e1591dca27af32e386b12b6c2b1d",""
