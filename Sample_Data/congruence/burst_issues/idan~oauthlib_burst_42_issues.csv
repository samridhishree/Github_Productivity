,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,400,idan,oauthlib,arnicvs,2015-11-03 12:01:45,"When 'scope' is passed to `OAuth2Token.__init__()` but it is None, a NoneType exception will be raised, so I updated the check to make sure scope is not None.
",start issue,Fix for oauth2 token processing
1,issue_closed,400,idan,oauthlib,thedrow,2016-03-14 09:48:50,,closed issue,Fix for oauth2 token processing
2,pull_request_title,400,idan,oauthlib,arnicvs,2015-11-03 12:01:45,"When 'scope' is passed to `OAuth2Token.__init__()` but it is None, a NoneType exception will be raised, so I updated the check to make sure scope is not None.
",3e314218e1f691f91eecf7dfadb82d47fad8c185,Fix for oauth2 token processing
3,pull_request_merged,400,idan,oauthlib,thedrow,2016-03-14 09:48:50,Fix for oauth2 token processing,cafc1f42afec5112a6a913e958d1f6bb31245abc,Pull request merge from arnicvs/oauthlib:niels/patch-token-scope-processing to idan/oauthlib:master
4,pull_request_commit,400,idan,oauthlib,arnicvs,2015-11-03 11:58:19,Fixed OAuth2Token() breaking when scope is passed in params but has value None.,3e314218e1f691f91eecf7dfadb82d47fad8c185,
0,issue_title,369,idan,oauthlib,truetug,2015-07-28 15:00:15,"```
POST http://localhost/o/token/?format=json
Content-Type: application/x-www-form-urlencoded
Authorization: Basic ***
```

Response 500

> cat requirements.txt | grep oau
> django-oauth-toolkit==0.8.1
> 
> pip freeze -l | grep oau
> django-oauth-toolkit==0.8.1
> oauthlib==1.0.0
> requests-oauthlib==0.5.0

```
  File ""django/core/handlers/base.py"", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File ""django/views/generic/base.py"", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File ""django/utils/decorators.py"", line 34, in _wrapper
    return bound_func(*args, **kwargs)
  File ""django/views/decorators/csrf.py"", line 58, in wrapped_view
    return view_func(*args, **kwargs)
  File ""django/utils/decorators.py"", line 30, in bound_func
    return func.__get__(self, type(self))(*args2, **kwargs2)
  File ""braces/views/_forms.py"", line 22, in dispatch
    return super(CsrfExemptMixin, self).dispatch(*args, **kwargs)
  File ""django/views/generic/base.py"", line 89, in dispatch
    return handler(request, *args, **kwargs)
  File ""django/utils/decorators.py"", line 34, in _wrapper
    return bound_func(*args, **kwargs)
  File ""django/views/decorators/debug.py"", line 76, in sensitive_post_parameters_wrapper
    return view(request, *args, **kwargs)
  File ""django/utils/decorators.py"", line 30, in bound_func
    return func.__get__(self, type(self))(*args2, **kwargs2)
  File ""oauth2_provider/views/base.py"", line 170, in post
    url, headers, body, status = self.create_token_response(request)
  File ""oauth2_provider/views/mixins.py"", line 124, in create_token_response
    return core.create_token_response(request)
  File ""oauth2_provider/oauth2_backends.py"", line 106, in create_token_response
    headers)
  File ""oauthlib/oauth2/rfc6749/endpoints/base.py"", line 64, in wrapper
    return f(endpoint, uri, *args, **kwargs)
  File ""oauthlib/oauth2/rfc6749/endpoints/token.py"", line 100, in create_token_response
    request, self.default_token_type)
  File ""oauthlib/oauth2/rfc6749/grant_types/client_credentials.py"", line 75, in create_token_response
    self.validate_token_request(request)
  File ""oauthlib/oauth2/rfc6749/grant_types/client_credentials.py"", line 99, in validate_token_request
    if not self.request_validator.authenticate_client(request):
  File ""oauth2_provider/oauth2_validators.py"", line 166, in authenticate_client
    authenticated = self._authenticate_basic_auth(request)
  File ""oauth2_provider/oauth2_validators.py"", line 58, in _authenticate_basic_auth
    encoding = request.encoding or 'utf-8'
  File ""oauthlib/common.py"", line 410, in __getattr__
    raise AttributeError(name)
```

After downgrade to 0.7.2 it is works fine.
",start issue,Problem with Basic auth in 1.0.0
1,issue_closed,369,idan,oauthlib,truetug,2016-03-14 15:48:41,,closed issue,Problem with Basic auth in 1.0.0
2,issue_comment,369,idan,oauthlib,poswald,2016-03-14 15:39:22,"This was fiixed by #363 I believe and can be closed.
",,
0,issue_title,407,idan,oauthlib,eofs,2016-03-11 09:21:46,"Current implementation doesn't allow `/` and `?` character to appear in query string in non-encoded form.

However RFC 3986 section 3.4 states following:

> However, as query components are often used to carry identifying information in the form of ""key=value"" pairs and one frequently used value is a reference to another URI, it is sometimes better for usability to avoid percent-encoding those characters.

This pull requests adds `/` and `?` characters into allowed characters list.
",start issue,Allow `/` and `?` characters in query string (RFC 3986 section 3.4)
1,issue_closed,407,idan,oauthlib,thedrow,2016-03-14 09:48:03,,closed issue,Allow `/` and `?` characters in query string (RFC 3986 section 3.4)
2,pull_request_title,407,idan,oauthlib,eofs,2016-03-11 09:21:46,"Current implementation doesn't allow `/` and `?` character to appear in query string in non-encoded form.

However RFC 3986 section 3.4 states following:

> However, as query components are often used to carry identifying information in the form of ""key=value"" pairs and one frequently used value is a reference to another URI, it is sometimes better for usability to avoid percent-encoding those characters.

This pull requests adds `/` and `?` characters into allowed characters list.
",e59f04bf577f0faa3e5fe2de177d65d094592b55,Allow `/` and `?` characters in query string (RFC 3986 section 3.4)
3,pull_request_merged,407,idan,oauthlib,thedrow,2016-03-14 09:48:03,Allow `/` and `?` characters in query string (RFC 3986 section 3.4),ce8857d297f9218107da89bd49f8d2aedc9b5359,Pull request merge from eofs/oauthlib:feature/rfc-3986-section-3.4 to idan/oauthlib:master
4,issue_comment,407,idan,oauthlib,thedrow,2016-03-14 09:47:25,"The tests fail on 3.2 because virtualenv dropped support. Disregard that.
I think there was a reason why these were disallowed though I'm not sure.
",,
5,issue_comment,407,idan,oauthlib,thedrow,2016-03-14 09:48:01,"No you're right.
",,
6,pull_request_commit,407,idan,oauthlib,eofs,2016-03-11 09:15:02,"Allow `/` and `?` characters per RFC 3986 section 3.4 specification.

Fixes #404",028720698e17a61b975acced53fad31e569fe41c,
7,pull_request_commit,407,idan,oauthlib,eofs,2016-03-11 09:15:38,Tests for `/` and `?` characters in query.,e59f04bf577f0faa3e5fe2de177d65d094592b55,
0,issue_title,404,idan,oauthlib,rhaining,2015-12-15 20:32:03,"Per RFC 3986 section 3.4, query strings should be allowed to include forward slashes `/` & `?`.
http://tools.ietf.org/html/rfc3986#section-3.4

>  The query component is indicated by the first question
>   mark (""?"") character and terminated by a number sign (""#"") character
>   or by the end of the URI.
> 
> The characters slash (""/"") and question mark (""?"") may represent data
>   within the query component.

Can we update https://github.com/idan/oauthlib/blob/master/oauthlib/common.py#L112 to include these characters?

Otherwise, oauthlib throws the error ala:

> Error trying to decode a non urlencoded string.

https://github.com/idan/oauthlib/blob/master/oauthlib/common.py#L131

thanks!
",start issue,Query strings should be able to include forward slashes `/`
1,issue_closed,404,idan,oauthlib,thedrow,2016-03-14 09:48:05,,closed issue,Query strings should be able to include forward slashes `/`
2,issue_comment,404,idan,oauthlib,Bramas,2016-01-18 22:07:27,"I totally agree with this.
",,
3,issue_comment,404,idan,oauthlib,macrojames,2016-01-18 22:21:48,"I also read colons are allowed. I have issues with this at the moment, because some libs won't encode the redirect uris 
",,
4,issue_comment,404,idan,oauthlib,rhaining,2016-03-14 18:04:49,"@thedrow awesome! thanks so much for fixing this. 
",,
