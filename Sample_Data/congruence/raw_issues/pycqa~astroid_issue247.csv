"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","247","pycqa","astroid","pylint-bot","2015-11-05 06:09:49","Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

These two methods are doing very similar things, building a ClassDef node for the result of a call of type, to the point that when I was fixing bugs in modular-locals I was literally copy-pasting code from one to the other.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/247
","start issue","Duplicated code in ClassDef._infer_type_call and BoundMethod._infer_type_new_call"
"issue_closed","247","pycqa","astroid","PCManticore","2016-03-01 22:39:40","","closed issue","Duplicated code in ClassDef._infer_type_call and BoundMethod._infer_type_new_call"
"issue_comment","247","pycqa","astroid","pylint-bot","2015-11-05 13:54:19","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

In 2.0 BoundMethod._infer_type_new_call is moved in brain by the way. Also, they are doing different things, even though they share some code. One of them could be implemented in terms of the other in this case.
","",""
"issue_comment","247","pycqa","astroid","PCManticore","2016-03-01 22:39:40","Closing this. I actually tried to remove the duplication, but the semantics are so tied and different in some places, such as the handling of attributes (which in one place ignores type errors, while in the other it can't work without them), that I feel that making the code more generic can lead to confusion and impredictible behaviour. I can live with some duplicates lines.
","",""
