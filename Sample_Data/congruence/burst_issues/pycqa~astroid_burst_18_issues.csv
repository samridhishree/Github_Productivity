,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,72,pycqa,astroid,pylint-bot,2015-01-12 10:40:37,"Originally reported by: **BitBucket: [cladmi](http://bitbucket.org/cladmi), GitHub: @cladmi?**

---

Same problems as with pylint: https://bitbucket.org/logilab/pylint/issue/379/installing-pylint-via-setuptools-as-a

python2 errors:

```
#!python

Searching for astroid>=1.3.2
Reading https://pypi.python.org/simple/astroid/
Best match: astroid 1.3.2
Downloading https://pypi.python.org/packages/source/a/astroid/astroid-1.3.2.tar.gz#md5=2ab96129a977b6eba27765a15d1a9bf2
Processing astroid-1.3.2.tar.gz
Writing /tmp/easy_install-q6tpTI/astroid-1.3.2/setup.cfg
Running astroid-1.3.2/setup.py -q bdist_egg --dist-dir /tmp/easy_install-q6tpTI/astroid-1.3.2/egg-dist-tmp-HboZeM
zip_safe flag not set; analyzing archive contents...
astroid.__init__: module references __file__
astroid.builder: module references __file__
astroid.raw_building: module references __file__
astroid.raw_building: module references __path__
astroid.scoped_nodes: module references __file__
astroid.scoped_nodes: module references __path__
astroid.modutils: module references __file__
astroid.modutils: module references __path__
astroid.manager: module references __file__
astroid.tests.unittest_scoped_nodes: module references __file__
astroid.tests.unittest_scoped_nodes: module references __path__
astroid.tests.unittest_regrtest: module references __file__
astroid.tests.unittest_utils: module references __file__
astroid.tests.unittest_inference: module references __file__
astroid.tests.unittest_manager: module references __file__
astroid.tests.unittest_lookup: module references __path__
astroid.tests.unittest_modutils: module references __file__
astroid.tests.unittest_modutils: module references __path__
SyntaxError: ('invalid syntax', ('/home/harter/work/iot-lab/parts/cli-tools/astroid-1.3.2-py2.7.egg/astroid/tests/testdata/python3/data/module.py', 55, 32, ""                print('yo', end=' ')\n""))

SyntaxError: ('invalid syntax', ('/home/harter/work/iot-lab/parts/cli-tools/astroid-1.3.2-py2.7.egg/astroid/tests/testdata/python3/data/module2.py', 100, 22, ""print('bonjour', file=stream)\n""))

```

and python3 errors

```
#!python

Searching for astroid>=1.3.2
Reading https://pypi.python.org/simple/astroid/
Best match: astroid 1.3.2
Downloading https://pypi.python.org/packages/source/a/astroid/astroid-1.3.2.tar.gz#md5=2ab96129a977b6eba27765a15d1a9bf2
Processing astroid-1.3.2.tar.gz
Writing /tmp/easy_install-uqmbgc7p/astroid-1.3.2/setup.cfg
Running astroid-1.3.2/setup.py -q bdist_egg --dist-dir /tmp/easy_install-uqmbgc7p/astroid-1.3.2/egg-dist-tmp-l2nonlrc
zip_safe flag not set; analyzing archive contents...
astroid.tests.__pycache__.unittest_lookup.cpython-34: module references __path__
astroid.tests.__pycache__.unittest_scoped_nodes.cpython-34: module references __file__
astroid.tests.__pycache__.unittest_scoped_nodes.cpython-34: module references __path__
astroid.tests.__pycache__.unittest_inference.cpython-34: module references __file__
astroid.tests.__pycache__.unittest_utils.cpython-34: module references __file__
astroid.tests.__pycache__.unittest_manager.cpython-34: module references __file__
astroid.tests.__pycache__.unittest_regrtest.cpython-34: module references __file__
astroid.tests.__pycache__.unittest_modutils.cpython-34: module references __file__
astroid.tests.__pycache__.unittest_modutils.cpython-34: module references __path__
astroid.__pycache__.__init__.cpython-34: module references __file__
astroid.__pycache__.manager.cpython-34: module references __file__
astroid.__pycache__.scoped_nodes.cpython-34: module references __file__
astroid.__pycache__.scoped_nodes.cpython-34: module references __path__
astroid.__pycache__.builder.cpython-34: module references __file__
astroid.__pycache__.modutils.cpython-34: module references __file__
astroid.__pycache__.modutils.cpython-34: module references __path__
astroid.__pycache__.raw_building.cpython-34: module references __file__
astroid.__pycache__.raw_building.cpython-34: module references __path__
  File ""/home/harter/work/iot-lab/parts/cli-tools/astroid-1.3.2-py3.4.egg/astroid/tests/testdata/python2/data/noendingnewline.py"", line 21
    print 'a'
            ^
SyntaxError: Missing parentheses in call to 'print'

  File ""/home/harter/work/iot-lab/parts/cli-tools/astroid-1.3.2-py3.4.egg/astroid/tests/testdata/python2/data/module.py"", line 22
    print '!!!'
              ^
SyntaxError: Missing parentheses in call to 'print'

  File ""/home/harter/work/iot-lab/parts/cli-tools/astroid-1.3.2-py3.4.egg/astroid/tests/testdata/python2/data/module2.py"", line 73
    assert `1`
           ^
SyntaxError: invalid syntax

  File ""/home/harter/work/iot-lab/parts/cli-tools/astroid-1.3.2-py3.4.egg/astroid/tests/testdata/python2/data/nonregr.py"", line 16
    print v.get('yo')
          ^
SyntaxError: invalid syntax

  File ""/home/harter/work/iot-lab/parts/cli-tools/astroid-1.3.2-py3.4.egg/astroid/tests/testdata/python2/data/notall.py"", line 7
    def func(): print 'yo'
                         ^
SyntaxError: invalid syntax

  File ""/home/harter/work/iot-lab/parts/cli-tools/astroid-1.3.2-py3.4.egg/astroid/tests/testdata/python2/data/all.py"", line 7
    def func(): print 'yo'
                         ^
SyntaxError: invalid syntax

  File ""/home/harter/work/iot-lab/parts/cli-tools/astroid-1.3.2-py3.4.egg/astroid/tests/testdata/python2/data/SSL1/Connection1.py"", line 14
    print 'init Connection'
                          ^
SyntaxError: Missing parentheses in call to 'print'

  File ""/home/harter/work/iot-lab/parts/cli-tools/astroid-1.3.2-py3.4.egg/astroid/tests/testdata/python2/data/module1abs/__init__.py"", line 4
    print sys.version
            ^
SyntaxError: Missing parentheses in call to 'print'

  File ""/home/harter/work/iot-lab/parts/cli-tools/astroid-1.3.2-py3.4.egg/astroid/tests/testdata/python2/data/appl/myConnection.py"", line 7
    print 'MyConnection init'
                            ^
SyntaxError: Missing parentheses in call to 'print'


```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/72
",start issue,Installing astroid via setuptools as a dependency produces SyntaxError warnings
1,issue_closed,72,pycqa,astroid,PCManticore,2016-02-18 21:57:41,,closed issue,Installing astroid via setuptools as a dependency produces SyntaxError warnings
2,issue_comment,72,pycqa,astroid,pylint-bot,2015-03-13 09:51:37,"_Original comment by_ **Michael Platings (BitBucket: [mplatings](http://bitbucket.org/mplatings), GitHub: @mplatings?)**:

---

For a work-around to fix the errors on Python 2, I've submitted this pull request: https://bitbucket.org/logilab/astroid/pull-request/70/work-around-the-python-2-part-of-issue

I frequently get people asking me why they're seeing errors while installing my software so I'd really like to see this fixed!
",,
3,issue_comment,72,pycqa,astroid,pylint-bot,2015-08-10 17:46:35,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Would you like to work on a patch? ;-) It would be nice to have this fixed, but I'm at this point in a dearth of time, being overwhelmed by the number of issues that needs to be solved.
",,
4,issue_comment,72,pycqa,astroid,unixsurfer,2015-12-21 17:00:12,"I would like to see a fix for the python3 errors
",,
5,issue_comment,72,pycqa,astroid,PCManticore,2016-02-18 21:57:40,"Fixed, the testdata should be compatible with both versions.
",,
6,issue_comment,72,pycqa,astroid,cladmi,2016-02-19 00:15:10,"@PCManticore NiceÂ ! Which commit does solve this, I wasn't good enough with setuptools to correct the bug, I tried but failed so I'm really interested.
",,
7,issue_comment,72,pycqa,astroid,PCManticore,2016-02-19 00:17:58,"It should be this one https://github.com/PyCQA/astroid/commit/ffa1ba873ca879ae2d259903b8add63f6e6eb2ac. This is applied only in the 2.0 branch, since that's where our focus is currently going (will become the new master in a couple of weeks hopefully).
",,
0,issue_title,231,pycqa,astroid,pylint-bot,2015-10-28 00:03:54,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

There are multiple methods in LocalsDictNodeNG that are roughly duplicates of methods in collections.Mapping, and using it would require implementing only one more trivial method, `__len__`.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/231
",start issue,Use collections.Mapping to provide methods for LocalsDictNodeNG
1,issue_closed,231,pycqa,astroid,PCManticore,2016-02-18 22:00:31,,closed issue,Use collections.Mapping to provide methods for LocalsDictNodeNG
2,issue_comment,231,pycqa,astroid,PCManticore,2016-02-18 22:00:31,"I'm closing this, I don't see a benefit and the code will still look the same.
",,
0,issue_title,322,pycqa,astroid,ceridwen,2016-02-17 05:30:26,"Many packages, especially C extensions, seem to build their `__all__` globals using augmented assignment or other dynamic methods.  Since understanding dynamic list creation in the general case is probably too hard, it would be more accurate to ignore `__all__` and simply assume that all public names are available from a wildcard import.
",start issue,Remove `__all__` handling from import analysis
1,issue_closed,322,pycqa,astroid,PCManticore,2016-02-18 21:56:38,,closed issue,Remove `__all__` handling from import analysis
0,issue_title,111,pycqa,astroid,pylint-bot,2015-06-20 14:35:20,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Improve the data model for all objects we support right now. We should know the dunder attributes of functions, classes and any other object.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/111
",start issue,Better data model
1,issue_closed,111,pycqa,astroid,PCManticore,2016-02-18 22:04:44,,closed issue,Better data model
2,issue_comment,111,pycqa,astroid,PCManticore,2016-02-18 22:04:44,"Closing, since it will be handled by https://github.com/PyCQA/astroid/pull/319
",,
0,issue_title,39,pycqa,astroid,pylint-bot,2014-07-25 11:00:18,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Currently pylinting sqlalchemy code gives some false positives for E1120 (no-value-for-parameter)

I've attached sample code which exhibits this problem.

```
#!bash

$ pylint --version
pylint 1.1.0, 
astroid 1.0.1, common 0.61.0
Python 2.7.3 (default, Aug  9 2012, 17:23:57) 
[GCC 4.7.1 20120720 (Red Hat 4.7.1-5)]

$ python -c ""import sqlalchemy; print sqlalchemy.__version__""
0.9.4

$ pylint --reports=no sqlalchemy_testcase.py
************* Module sqlalchemy_testcase
E: 20, 4: No value passed for parameter 'dml' in function call (no-value-for-parameter)
```

The insert function is decorated, and the decorator fills in the 'dml' parameter. The callee providing it is an error.

I could potentially look at this myself but won't have the time to do so immediately.

Reported by Robbie Coomber on pylint-brain.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/39
",start issue,Support for sqlalchemy
1,issue_closed,39,pycqa,astroid,PCManticore,2016-02-18 21:52:45,,closed issue,Support for sqlalchemy
2,issue_comment,39,pycqa,astroid,pylint-bot,2015-02-26 17:04:30,"_Original comment by_ **Sylvain R (BitBucket: [sylvainr_](http://bitbucket.org/sylvainr_))**:

---

Hi there,

Any updates on that issue?

We use sqlalchemy extensively so that false positive shows up a lot.

Because we use it so much, we can not just do an inline disable, nor do we want to disable the ''no-value-for-parameter"" globally. 

So our current solution for the time being is to wrap pylint into a simple script that just filter out the ""No value passed for parameter 'dml' in function call"" lines, which kind of sucks and make our ""pylinter"" more complicated to use.

Using that wrapper is not ideal and it would be awesome if:
1) pylint/astroid would properly handle the sqlalchemy.Table.insert() calls, or
2) provide an easy way to just ignore those specific errors.

I know 1 may not be easy so maybe 2 is a more realistic solution? I am not aware of anyway to specifically ignore this error. I tried ignored-modules=sqlalchemy or ignored-classes=sqlalchemy.sql.schema.Table but it does not mute that error.

I think in general having more granularity around ignores at the pylintrc level is a good thing when encountering those issues.

Any suggestions?

PS: Thanks a lot for that awesome tool!
",,
3,issue_comment,39,pycqa,astroid,pylint-bot,2015-02-26 18:23:14,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

This will most likely be fixed when this PR will be integrated: https://bitbucket.org/logilab/pylint/pull-request/222/added-support-for-arity-decrementing/diff. It adds support for understanding arity decrementing decorators and this issue falls in the same situation.
",,
4,issue_comment,39,pycqa,astroid,PCManticore,2016-02-18 21:52:45,"Closing this. I don't think this issue should be here, but rather in Pylint.
",,
5,issue_comment,39,pycqa,astroid,raylu,2017-07-27 03:02:02,"Is there an issue in pylint that tracks this? I found https://github.com/PyCQA/pylint/issues/194 which appears to be closed because it should be handled in pylint-brain, now astroid.",,
0,issue_title,64,pycqa,astroid,pylint-bot,2014-11-28 20:39:00,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We should understand the following function calls and map them to their syntactic counterpart.

```
#!python

list([4, 5, 6])
set((1, 2, 3))
tuple(('a', 'b', 'c')
frozenset({1: 2})
dict(a=4, b=5)
```

Currently, astroid understand list/set/tuple calls without heterogenous elements and only with const nodes. Using tuple(('a', tuple(list([4]))) might not work right now, for instance.
The tricky part is the frozenset, which can't be mapped to a Set and it doesn't have an equivalent AST node.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/64
",start issue,Add support for builtin constructors
1,issue_closed,64,pycqa,astroid,PCManticore,2016-02-18 22:03:24,,closed issue,Add support for builtin constructors
2,issue_comment,64,pycqa,astroid,PCManticore,2016-02-18 22:03:24,"Not sure why this is still open. We do support frozensets for a while now.
",,
0,issue_title,41,pycqa,astroid,pylint-bot,2014-07-25 11:04:43,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

The following is from Cole Robinson:

""""""

I poked at this a bit. Basically just doing:

```
#!python

diff --git a/brain/py2gi.py b/brain/py2gi.py
index 5001b7c..2584055 100644
--- a/brain/py2gi.py
+++ b/brain/py2gi.py
@@ -128,18 +129,21 @@ def _new_import_module(self, modname, relative_only=False,
             modnames.append('gi._glib')
         elif modname == 'gi.repository.GObject':
             modnames.append('gi._gobject')
+
+        import importlib
+
+        astng = None
         try:
-            modcode = ''
-            for m in modnames:
-                __import__(m)
-                modcode += _gi_build_stub(sys.modules[m])
+            for m in modnames[:1]:
+                acmod = importlib.import_module(m)
+                astng = MANAGER.ast_from_module(acmod, modname=m)
         except ImportError:
             astng = _inspected_modules[modname] = None
         else:
-            astng = AstroidBuilder(MANAGER).string_build(modcode, modname)
             _inspected_modules[modname] = astng

```

It didn't blow up, but running it against a simple script like:

from gi.repository import Gtk

print Gtk.get_major_version
print Gtk.get_major_version()

w = Gtk.Label()
w.set_label(""foo"")

Yielded these errors:

**\* Module pylint.testgtk E: 8, 0: Function 'wrapper' has no 'set_label' member (no-member) E: 8, 0: Instance of 'Label' has no 'set_label' member (no-member)

Unfortunately looking at the actual inspection code was overwhelming, so I don't think I can help here. I'm happy to test any work though, or help provide test cases.

""""""

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/41
",start issue,py2gi: rewrite using the living object builder
1,issue_closed,41,pycqa,astroid,PCManticore,2016-02-18 22:07:53,,closed issue,py2gi: rewrite using the living object builder
2,issue_comment,41,pycqa,astroid,PCManticore,2016-02-18 22:07:53,"Closing this. I don't know a lot about py2gi, since it is mostly developed by contributors and as such, there is no point in having this issue opened.
",,
