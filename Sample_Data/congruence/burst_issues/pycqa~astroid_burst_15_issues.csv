,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,214,pycqa,astroid,pylint-bot,2015-10-15 03:05:58,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

At the moment, Instance is used for instances of classes and instances of other built-in types (lists, dicts) are subclasses of it.  This leads to cases where code has to type-test using type identity rather than isinstance, for instance, and makes it impossible to customize the behavior of class instances.  Instance should probably be a superclass, containing code common to all instances, and ClassInstance should be a subclass.  This will probably also make it easier to subclass Instance to build code for other types coded in C.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/214
",start issue,"Instance should be a superclass, ClassInstance should be a subclass"
1,issue_closed,214,pycqa,astroid,pylint-bot,2015-12-09 05:55:17,,closed issue,"Instance should be a superclass, ClassInstance should be a subclass"
2,issue_comment,214,pycqa,astroid,pylint-bot,2015-10-20 13:37:43,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Yes, this sounds good to me.
",,
3,issue_comment,214,pycqa,astroid,pylint-bot,2015-11-03 16:08:52,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I'm currently doing this change in bookmark 2.0.
",,
4,issue_comment,214,pycqa,astroid,pylint-bot,2015-11-07 12:43:05,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Separate class instances and builtin instances into two concepts

One problem with handling both concepts with a single class leads
to type-testing using type identity rather than using isinstance, since
builtin instances uses the same base class as class instances (even though
this is fairly fuzzy). With two classes instead, we can easily distinguish
between these cases.

The commit includes two new virtual base classes, Instance and BuiltinInstance
and separates the Instance class into BaseInstance and Instance, also
changing in some places the use of type-identity testing with isinstance testing.
Closes issue #214.
",,
5,issue_comment,214,pycqa,astroid,pylint-bot,2015-11-07 12:44:54,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

This should be fixed, but the solution is somewhat temporary. I don't like that BaseInstance has the entire lookup mechanism, but that will be changed when the lookup will be improved in #93.
",,
0,issue_title,26,pycqa,astroid,pylint-bot,2014-04-23 16:06:49,"Originally reported by: **David Shea (BitBucket: [davidshea](http://bitbucket.org/davidshea), GitHub: @davidshea?)**

---

I don't really know how, but the TransactionSet class in rpm's python library has itself in the bases list, or something that looks like it:

> > > import rpm
> > > print(rpm.TransactionSet.**bases**)
> > > (<type 'rpm.ts'>,)
> > > print(rpm.ts)
> > > <class 'rpm.transaction.TransactionSet'>

This causes _is_metaclass to get stuck recursing on the same class. Encountered when running pylint on code such as the following:

import rpm
ts = rpm.TransactionSet(""/"")
print ts.dbMatch(""basenames"", ""/"")

I don't know whether astroid's assessment of the class and its bases is correct, but on the assumption that it is I've attached a patch to avoid the infinite recursion.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/26
",start issue,astroid gets stuck on classes which have themselves as a base
1,issue_closed,26,pycqa,astroid,pylint-bot,2015-12-09 05:51:59,,closed issue,astroid gets stuck on classes which have themselves as a base
2,issue_comment,26,pycqa,astroid,pylint-bot,2014-04-23 14:25:39,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Thanks for the report. The fix was already applied in 7a9a377. Could you check that it fixes your issue? Another user reported this problem and his situation was similar to the one reported by you, but he was doing some ugly monkey patching which confused astroid.
",,
3,issue_comment,26,pycqa,astroid,pylint-bot,2014-04-23 14:35:08,"_Original comment by_ **David Shea (BitBucket: [davidshea](http://bitbucket.org/davidshea), GitHub: @davidshea?)**:

---

Oh cool, thanks. I ended up making the same fix, so yeah, it solves the problem :-)
",,
4,issue_comment,26,pycqa,astroid,pylint-bot,2014-04-23 14:35:48,"_Original comment by_ **David Shea (BitBucket: [davidshea](http://bitbucket.org/davidshea), GitHub: @davidshea?)**:

---

Duplicate of #25.
",,
0,issue_title,82,pycqa,astroid,pylint-bot,2015-03-13 23:59:09,"Originally reported by: **Daniel Balparda (BitBucket: [balparda](http://bitbucket.org/balparda), GitHub: @balparda?)**

---

After issue #59 the ""ability to optimize small ast subtrees, with the first use in the optimization of multiple BinOp nodes"" was added. We have a pylint checker that defines a visit_binop() to catch things like:
print 'a' + 'b'
print 'a' + 'b' 'c'
print 'a' 'b' + 'c'
print 'a' + 'b' + 'c'
The idea is to warn against explicit string concatenations. After v1.3.5 the last example comes as:
node.as_string() -> ""print 'abc'""
This means out visit_binop() is never called. This may be a problem not worth fixing but it is an issue nonetheless. Thanks.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/82
",start issue,The new BinOp optimization in 1.3.5 kills pylint's ability to warn on 'a'+'b'+'c'
1,issue_closed,82,pycqa,astroid,pylint-bot,2015-12-09 05:53:04,,closed issue,The new BinOp optimization in 1.3.5 kills pylint's ability to warn on 'a'+'b'+'c'
2,issue_comment,82,pycqa,astroid,pylint-bot,2015-03-13 23:11:03,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Interesting use case.  A flag that disables the optimisation will help? Something along the lines of `manager.disable_ast_optimisation`, which needs to be set to True in your checker. Another solution would be for the peephole optimizer to obtain the joined string only if there are more than `n` nodes involved in the operation, but I don't think this one deserves the hassle. 
",,
3,issue_comment,82,pycqa,astroid,pylint-bot,2015-03-13 23:22:10,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

In fact, it should be `True` by default and should be enabled only if the user wants to get rid of the maximum recursion depth problem.
",,
4,issue_comment,82,pycqa,astroid,pylint-bot,2015-03-13 23:23:37,"_Original comment by_ **Daniel Balparda (BitBucket: [balparda](http://bitbucket.org/balparda), GitHub: @balparda?)**:

---

A flag disabling it would solve the issue fine. That is what we (Google) will do internally to go around this problem anyway, so I see no problem in having a public mechanism to do this.
",,
5,issue_comment,82,pycqa,astroid,pylint-bot,2015-03-14 15:31:48,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add a new option to AstroidManager for controlling the AST peephole optimizer

The new option, 'optimize_ast', controls if peephole optimizer should be enabled or not.
This prevents a regression, where the visit_binop method wasn't called
anymore with astroid 1.3.5, due to the differences in the resulting AST.
Closes issue #82.
",,
6,issue_comment,82,pycqa,astroid,pylint-bot,2015-03-14 15:51:44,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

And this commit for Pylint https://bitbucket.org/logilab/pylint/commits/d3153c4d948290940ecf75077e7e47e1d5aed405. I'll follow with a new release shortly.
",,
0,issue_title,147,pycqa,astroid,pylint-bot,2015-07-03 15:47:23,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

The current state of the project is far from being good, mostly due to circular dependencies between a lot of components, which leads to low reusability and ugly design hacks:
- Instance.getitem depends on CallContext, which is in inference.py. CallContext depends on nodes.py, which depends on bases.py.
- LookupMixin depends on AssName and DelName from node_classes, moving it in mixins.py is not possible,
- the monkey patching of inference functions in inference.py as well as assigned_stmts in protocols.py is horrendous. I'm thinking on having an InferenceVisitor, which should be enough to clean up this mess.
- lots of other small dependencies (I don't remember all of them right now)

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/147
",start issue,Lots of circular dependencies in the project
1,issue_closed,147,pycqa,astroid,pylint-bot,2015-12-09 05:54:07,,closed issue,Lots of circular dependencies in the project
2,issue_comment,147,pycqa,astroid,pylint-bot,2015-11-07 13:08:30,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Most of the circular dependencies are fixed in bookmark 2.0. The idea through this get fixed was to use virtual base classes for nodes and other objects, which means that object needs to register itself as a concrete implementation of one or more virtual base classes. This means that isinstance can be used with virtual base classes now, rather than with concrete objects, which removed almost all the dependencies we had in the project. Another pain was the use of monkey patching in inference.py and protocols.py, which is now removed by implementing dispatch methods on virtual base classes instead. There were some places though where we needed the concrete node classes in order to build nodes during inference, which is solved with dependency injection: in node_classes, when these functions are called, we pass the current module as an extra argument. 

Solving this issue also meant the separation of nodes from runtime objects, which now live in two separate namespaces, astroid.tree respectively astroid.interpreter.
",,
0,issue_title,14,pycqa,astroid,pylint-bot,2014-01-29 07:05:16,"Originally reported by: **Antony Lee (BitBucket: [anntzer](http://bitbucket.org/anntzer), GitHub: @anntzer?)**

---

```
#!python
from abc import ABCMeta

class C(metaclass=ABCMeta):
    pass

def f(arg: ABCMeta):
    pass
```

Pylint doesn't detect either use of ABCMeta and warns that the import is unused.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/14
",start issue,Spurious unused-import warning when imported variable is used as metaclass or as function annotation
1,issue_closed,14,pycqa,astroid,pylint-bot,2015-12-09 05:51:48,,closed issue,Spurious unused-import warning when imported variable is used as metaclass or as function annotation
2,issue_comment,14,pycqa,astroid,pylint-bot,2014-01-29 06:24:16,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

This belongs to Pylint tracker (https://bitbucket.org/logilab/pylint/issues/new).
",,
3,issue_comment,14,pycqa,astroid,pylint-bot,2014-02-01 12:47:02,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

There's https://bitbucket.org/logilab/pylint/issue/143 for this issue.
",,
0,issue_title,124,pycqa,astroid,pylint-bot,2015-06-20 15:05:34,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

```
#!python

class A:
    def __getitem__(self, index):
         return index + 1

a = A()
a[4] # this should be five
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/124
",start issue,Understand instance.__getitem__
1,issue_closed,124,pycqa,astroid,pylint-bot,2015-12-09 05:53:48,,closed issue,Understand instance.__getitem__
2,issue_comment,124,pycqa,astroid,pylint-bot,2015-07-01 20:08:56,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add support for inferring subscript on instances, which will  use **getitem**. Closes issue #124.
",,
3,issue_comment,124,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add support for inferring subscript on instances, which will  use **getitem**. Closes issue #124.
",,
0,issue_title,106,pycqa,astroid,pylint-bot,2015-06-03 20:55:41,"Originally reported by: **Anonymous**

---

Adding python2.7/lib-dynload to the pythonpath, depending on its location (default, virtualenv), breaks what MANAGER.ast_from_module_name('datetime') returns.

Test code:

```
#!shell
(isc)vhermecz@vhermecz-utosh:~$ export PYTHONPATH='/usr/lib/python2.7/lib-dynload'
(isc)vhermecz@vhermecz-utosh:~$ python
Python 2.7.6 (default, Mar 22 2014, 22:59:56) 
[GCC 4.8.2] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> from astroid import MANAGER, scoped_nodes, nodes, inference_tip
>>> MANAGER.ast_from_module_name('datetime').locals
{'timedelta': [<Class(timedelta) l.0 [datetime] at 0x7f0c33750a50>], 'MAXYEAR': [<Const(MAXYEAR) l.0 [datetime] at 0x7f0c33a11510>], 'datetime': [<Class(datetime) l.0 [datetime] at 0x7f0c33a11610>], 'date': [<Class(date) l.0 [datetime] at 0x7f0c33a115d0>], 'datetime_CAPI': [<EmptyNode(datetime_CAPI) l.0 [datetime] at 0x7f0c339c38d0>], 'tzinfo': [<Class(tzinfo) l.0 [datetime] at 0x7f0c3375cc90>], 'time': [<Class(time) l.0 [datetime] at 0x7f0c33750a10>], 'MINYEAR': [<Const(MINYEAR) l.0 [datetime] at 0x7f0c33a11550>], '__package__': [<Const(__package__) l.0 [datetime] at 0x7f0c33a11590>]}
>>> import datetime
>>> datetime.__file__
'/usr/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so'
>>> exit()
(isc)vhermecz@vhermecz-utosh:~$ export PYTHONPATH='/home/vhermecz/.virtualenvs/isc/lib/python2.7/lib-dynload'
(isc)vhermecz@vhermecz-utosh:~$ python
Python 2.7.6 (default, Mar 22 2014, 22:59:56) 
[GCC 4.8.2] on linux2
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> from astroid import MANAGER, scoped_nodes, nodes, inference_tip
>>> MANAGER.ast_from_module_name('datetime').locals
{}
>>> import datetime
>>> datetime.__file__
'/home/vhermecz/.virtualenvs/isc/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so'
>>> exit()
(isc)vhermecz@vhermecz-utosh:~$ diff /home/vhermecz/.virtualenvs/isc/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so /usr/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so | wc -l
0
(isc)vhermecz@vhermecz-utosh:~$ diff /home/vhermecz/.virtualenvs/isc/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so /usr/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so
(isc)vhermecz@vhermecz-utosh:~$ ll /home/vhermecz/.virtualenvs/isc/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so /usr/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so
-rw-r--r-- 1 root root 109232 Mar 22  2014 /home/vhermecz/.virtualenvs/isc/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so
-rw-r--r-- 1 root root 109232 Mar 22  2014 /usr/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so
(isc)vhermecz@vhermecz-utosh:~$ md5sum /home/vhermecz/.virtualenvs/isc/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so /usr/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so
e8c03b647ec98b8d272134581c92d667  /home/vhermecz/.virtualenvs/isc/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so
e8c03b647ec98b8d272134581c92d667  /usr/lib/python2.7/lib-dynload/datetime.x86_64-linux-gnu.so
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/106
",start issue,dynload datetime problem
1,issue_closed,106,pycqa,astroid,pylint-bot,2015-12-09 05:53:33,,closed issue,dynload datetime problem
2,issue_comment,106,pycqa,astroid,pylint-bot,2015-06-03 19:04:45,"_Original comment by_ **Vajk Hermecz (BitBucket: [vhermecz](http://bitbucket.org/vhermecz), GitHub: @vhermecz?)**:

---

I've created the issue, sorry for not logging in before doing so. - vhermecz
",,
3,issue_comment,106,pycqa,astroid,pylint-bot,2015-06-05 21:11:26,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

There's nothing wrong with how astroid behaves regarding to PYTHONPATH and datetime.

In astroid.modutils, we're retrieving the locations where the standard library is expected to be, using disutils.sysconfig.get_python_lib. Whenever a module should be loaded using astroid, we're looking to see if we can find it in one of those locations. If so, we know the module is a builtin and we can safely load it if it's an extension module. In the current case, the module will not be marked as a builtin, since PYTHONPATH is not taken in consideration when the standard library paths are retrieved and thus it will be an empty module, due to the fact that it is an extension modules and they aren't loaded automatically if they aren't builtins.

At this point, you can set MANAGER.extension_package_whitelist to ('datetime', ) and that should load this module properly from the extra PYTHONPATH.
",,
0,issue_title,162,pycqa,astroid,pylint-bot,2015-07-13 22:32:16,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

visit_assign in the rebuilder is currently using the stdlib ast node types to assign the type attribute on astroid function nodes.  This should be internalized to one of the node classes rather than being an external assignment.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/162
",start issue,Move the method type determination logic from visit_assign to one of the node classes.
1,issue_closed,162,pycqa,astroid,pylint-bot,2015-12-09 05:54:21,,closed issue,Move the method type determination logic from visit_assign to one of the node classes.
2,issue_comment,162,pycqa,astroid,pylint-bot,2015-08-05 21:58:41,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Move the determination of a function type from rebuilder to Function.type.

Closes issue #162.
",,
3,issue_comment,162,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Move the determination of a function type from rebuilder to Function.type.

Closes issue #162.
",,
0,issue_title,225,pycqa,astroid,pylint-bot,2015-10-26 04:27:36,"Originally reported by: **Pavel Roskin (BitBucket: [pavel_roskin](http://bitbucket.org/pavel_roskin))**

---

The current astroid cannot be installed with Python2 because `funcsigs` is misspelled as `funcigs` in `astroid/__pkginfo__.py`

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/225
",start issue,"""funcsigs"" misspelled as ""funcigs"", python 2 support broken"
1,issue_closed,225,pycqa,astroid,pylint-bot,2015-12-09 05:55:27,,closed issue,"""funcsigs"" misspelled as ""funcigs"", python 2 support broken"
2,issue_comment,225,pycqa,astroid,pylint-bot,2015-10-26 03:42:22,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Thanks for the report.  Are you trying to install using the @ bookmark/head?  The other bookmarks in the repository are under development and thus at any point may well be broken, but the @ bookmark should always point to a working changeset.  (If you're pulling and not getting all the bookmarks, something else is going on.)
",,
3,issue_comment,225,pycqa,astroid,pylint-bot,2015-10-26 04:14:57,"_Original comment by_ **Pavel Roskin (BitBucket: [pavel_roskin](http://bitbucket.org/pavel_roskin))**:

---

It's embarrassing to admit, today is the first day I heard of bookmarks. I run ""hg pull -u"" regularly on the checked out repositories. I notices that hg complained of something ""non-linear"", so I forced the update. Then I could not install astroid. I could quickly find out the reason. Then I forked astroid to submit a pull request. But my fork does not have that issue, it's behind the original repository. As I understand, bookmarks are lightweight branches, and I got to an experimental branch accidentally.
",,
4,issue_comment,225,pycqa,astroid,pylint-bot,2015-10-26 04:53:27,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Fixed in 68d51cfd7930.
",,
0,issue_title,76,pycqa,astroid,pylint-bot,2015-01-24 21:17:17,"Originally reported by: **Thomas Waldmann (BitBucket: [thomaswaldmann](http://bitbucket.org/thomaswaldmann), GitHub: @thomaswaldmann?)**

---

See: https://github.com/letsencrypt/lets-encrypt-preview/issues/187

I know you state compatibility with 2.7 only (and not 2.6), but nevertheless it has worked until 1.3.3.

So if it is no big thing, please fix it.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/76
",start issue,python2.6 compatibility
1,issue_closed,76,pycqa,astroid,pylint-bot,2015-12-09 05:52:57,,closed issue,python2.6 compatibility
2,issue_comment,76,pycqa,astroid,pylint-bot,2015-01-26 22:54:04,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Minimal syntactic compatibility with Python 2.6. Closes issue #76.
",,
0,issue_title,223,pycqa,astroid,pylint-bot,2015-10-23 18:15:04,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

I think ""CONST_CLS"" is a bit of a misnomer, primarily because the container types (lists, sets, tuples, and dicts) aren't in any sense constants in their actual use in ASTs.  Not only are lists, sets, and dicts mutable, tuples can contain mutable objects, and it's perfectly possible to build an AST where they contain objects that depend on arbitrary other AST properties and any runtime complications you want.  A closer-to-accurate description would be that CONST_CLS contains builtin types that have their own AST nodes because they have special syntactic forms in Python, so list because of [] but not frozenset because frozensets can only be built by calling the constructor, but this isn't accurate either because Ellipsis isn't listed in CONST_CLS even though it has a special syntactic form, ..., while None and NotImplemented are included even though they have no special syntactic form.
- Split CONST_CLS into at least two dictionaries, one for builtin types that are not containers and the other for builtin containers with AST nodes.  I'll propose the name scalars for the former, from Perl.  Note that all of the former are represented in astroid with Const nodes except for Ellipsis.  I don't know what to call the latter that's accurate and not overly verbose.
- Consider renaming node_classes.Const Scalar.  (Though, maybe we should have a discussion about type dispatch and how astroid merged types in UnaryOp, BinOp, and Const.)
- Update const_factory to do stricter input validation to ensure it only builds actual constants.
- Write a new function in raw_building that processes containers with non-constant values.  (As a subcase, this will handle scalars and containers of scalars, so maybe just eliminate const_factory in favor of the new function?)

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/223
",start issue,CONST_CLS and const_factory issues
1,issue_closed,223,pycqa,astroid,pylint-bot,2015-12-09 05:55:25,,closed issue,CONST_CLS and const_factory issues
2,issue_comment,223,pycqa,astroid,pylint-bot,2015-10-24 13:28:39,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Ellipsis is not listed into CONST_CLS, since it's already an AST node. Unfortunately, None and NotImplemented are just Name nodes in the AST.

I don't like the term scalar **at all**. It's so opaque if you don't know Perl or other language where it is named so and it makes the situation worse, because now when I read the code, I have to look what a scalar is. We should try to keep away from this kind of names.

I think what would make more sense is to just get rid of const_factory and always create the nodes by hand, which will not be a problem anyway after the zipper changes are merged. Also the current const_factory is buggy, since it doesn't store the metadata (parent, lineno, col_offset).

So this means that the CONST_CLS can just be removed. As well as _CONST_PROXY, by changing each node to define a _proxied method instead (List, Set and so on). The same for Const nodes, where _proxied will just dispatch to the underlying value for finding out what it should be. 

Please let me know if something is unclear.
",,
3,issue_comment,223,pycqa,astroid,pylint-bot,2015-10-26 04:55:37,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

CONST_CLS and const_factory are removed in 68d51cfd7930.  const_factory is replaced with a combination of direct calls to node constructors and the new raw_building.ast_from_object() function.
",,
0,issue_title,128,pycqa,astroid,pylint-bot,2015-06-20 15:12:04,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given this code, A.getattr('**mro**') doesn't actually return the mro, but the ancestors
as returned by Class.ancestors(). This should call Class.mro() instead.

```
#!python

from astroid.test_utils import extract_node
n = extract_node('''
class A:
   pass
''')
print(n.getattr('__mro__'))
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/128
",start issue,Class.getattr('__mro__') doesn't actually return the mro
1,issue_closed,128,pycqa,astroid,pylint-bot,2015-12-09 05:53:51,,closed issue,Class.getattr('__mro__') doesn't actually return the mro
2,issue_comment,128,pycqa,astroid,pylint-bot,2015-10-26 14:17:33,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Closed by https://bitbucket.org/logilab/astroid/commits/aab2116ebe0b80a096b111d2e6765b47bc992d12
",,
3,issue_comment,128,pycqa,astroid,pylint-bot,2015-10-26 14:25:32,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Class.getattr('**mro**') returns the actual MRO.

Also, Class.getattr('**bases**') returns actual bases.
It previously didn't work correctly, because it was putting the
entire ancestors into the Tuple object and it put those classes
into the wrong attribute.
Closes issue #128.
",,
4,issue_comment,128,pycqa,astroid,pylint-bot,2015-11-19 13:22:50,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Class.getattr('**mro**') returns the actual MRO.

Also, Class.getattr('**bases**') returns actual bases.
It previously didn't work correctly, because it was putting the
entire ancestors into the Tuple object and it put those classes
into the wrong attribute.
Closes issue #128.
",,
0,issue_title,296,pycqa,astroid,lmedioni,2015-12-16 10:21:24,"solves issue #265
",start issue,Add information about parent module to the elements defined in it
1,issue_closed,296,pycqa,astroid,PCManticore,2015-12-17 18:01:29,,closed issue,Add information about parent module to the elements defined in it
2,pull_request_title,296,pycqa,astroid,lmedioni,2015-12-16 10:21:24,"solves issue #265
",058a287405390f9c7562c9eb2b3a7c8fc589e7a1,Add information about parent module to the elements defined in it
3,pull_request_merged,296,pycqa,astroid,PCManticore,2015-12-17 18:01:29,Add information about parent module to the elements defined in it,28703f98ced82b46697a93117f9d349dc352c0a2,Pull request merge from lmedioni/astroid:issue265 to PyCQA/astroid:master
4,issue_comment,296,pycqa,astroid,PCManticore,2015-12-17 18:01:35,"Thanks!
",,
5,pull_request_commit,296,pycqa,astroid,laura.medioni@logilab.fr,2015-12-16 10:18:22,"Add information about parent module to the elements defined in this module

solves issue #265",058a287405390f9c7562c9eb2b3a7c8fc589e7a1,
0,issue_title,63,pycqa,astroid,pylint-bot,2014-11-28 17:09:50,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We should add support for six.moves in astroid.brain. Running Pylint over a codebase which uses a lot of six.moves modules yields too many no-name-in-module. Here's how six.moves add its attributes:

```
#!python

for attr in _moved_attributes:
    setattr(_MovedItems, attr.name, attr)
    if isinstance(attr, MovedModule):
        _importer._add_module(attr, ""moves."" + attr.name)
del attr

_MovedItems._moved_attributes = _moved_attributes

moves = _MovedItems(__name__ + "".moves"")
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/63
",start issue,"Add support for six,moves"
1,issue_closed,63,pycqa,astroid,pylint-bot,2015-12-09 05:52:44,,closed issue,"Add support for six,moves"
2,issue_comment,63,pycqa,astroid,pylint-bot,2014-12-18 14:50:50,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add brain tips for six.moves. Closes issue #63.
",,
0,issue_title,157,pycqa,astroid,pylint-bot,2015-07-10 16:42:47,"Originally reported by: **h w (BitBucket: [vvh](http://bitbucket.org/vvh), GitHub: @vvh?)**

---

Hi,

with pylint 1.1.0 and  astroid 1.0.1 I can check the following code snippet:

```
#!python
import posix_ipc

class MyQueue(posix_ipc.MessageQueue):
    def __init__(self, p_name = ""/MyQueue"", p_flags = posix_ipc.O_CREAT, p_mode = 0o600, p_max_messages = 10, p_max_message_size = 8192, p_read = True, p_write = True):
        posix_ipc.MessageQueue.__init__(self, p_name, p_flags, p_mode, p_max_messages, p_max_message_size, p_read, p_write)


def main():
    l_myq = MyQueue()
    del l_myq


if __name__ == '__main__':
    main()
```

The pylint returns:

```
#!bash

$ pylint --disable C,R --reports=no pylint-posix_ipc.py
No config file found, using default configuration
$
```

With the recent versions (astroid 1.3.6 and pylint 1.4.4) I get the following errors:

```
#!bash

$ pylint --disable C,R --reports=no pylint-posix_ipc.py
No config file found, using default configuration
************* Module pylint-posix_ipc
E:  3,14: Module 'posix_ipc' has no 'MessageQueue' member (no-member)
E:  4,54: Module 'posix_ipc' has no 'O_CREAT' member (no-member)
E:  5, 8: Module 'posix_ipc' has no 'MessageQueue' member (no-member)
$
```

It look like that astroid/pylint no longer detects members of the posix_ipc module. I use Python 3.3.2+.

Any ideas?

Thank you!

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/157
",start issue,Since astroid 1.1.0 posix_ipc module can't checked.
1,issue_closed,157,pycqa,astroid,pylint-bot,2015-12-09 05:54:16,,closed issue,Since astroid 1.1.0 posix_ipc module can't checked.
2,issue_comment,157,pycqa,astroid,pylint-bot,2015-07-10 14:45:12,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

What is posix_ipc?
",,
3,issue_comment,157,pycqa,astroid,pylint-bot,2015-07-10 14:49:45,"_Original comment by_ **h w (BitBucket: [vvh](http://bitbucket.org/vvh), GitHub: @vvh?)**:

---

It is a python module:

[posix_ipc python module](https://pypi.python.org/pypi/posix_ipc)

[posix_ipc Homepage](http://semanchuk.com/philip/posix_ipc/)
",,
4,issue_comment,157,pycqa,astroid,pylint-bot,2015-07-10 14:50:43,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I see that it's an extension module. Try using this instead and check if it works:

`pylint file.py --extension-pkg-whitelist=posix_ipc`
",,
5,issue_comment,157,pycqa,astroid,pylint-bot,2015-07-10 14:55:07,"_Original comment by_ **h w (BitBucket: [vvh](http://bitbucket.org/vvh), GitHub: @vvh?)**:

---

Perfect - it works.

Sorry for creating a ticket, I couldn't find a forum and I got no respond on IRC.
",,
6,issue_comment,157,pycqa,astroid,pylint-bot,2015-07-10 14:56:02,"_Original comment by_ **h w (BitBucket: [vvh](http://bitbucket.org/vvh), GitHub: @vvh?)**:

---

With

```
#!python

--extension-pkg-whitelist=posix_ipc
```

then it works.
",,
0,issue_title,284,pycqa,astroid,PCManticore,2015-12-11 11:17:06,"Travis build: https://travis-ci.org/PyCQA/astroid/jobs/96246837
",start issue,Cleanup pylint errors over astroid's codebase from travis
1,issue_closed,284,pycqa,astroid,PCManticore,2015-12-14 01:16:18,,closed issue,Cleanup pylint errors over astroid's codebase from travis
0,issue_title,60,pycqa,astroid,pylint-bot,2014-11-24 22:52:46,"Originally reported by: **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**

---

I have a custom pylint checker which looks like this:

```
#!python
def process_module(self, node):
    # ...
    for (lineno, line) in enumerate(node.file_stream):
        # ...
    else:
        self.add_message('modeline-missing', line=1)
```

(full code [here](https://github.com/The-Compiler/qutebrowser/blob/d625cde28cdf40c562ebb868a146901e9a72deb9/scripts/pylint_checkers/modeline.py))

Since upgrading to from 1.2.1 to 1.3.2 (and pylint from 1.3.1 to 1.4.0) I got the error message for every file, unless I add a `node.file_stream.seek(0)` at the top.

I looked at the pylint plugins and found this in checkers/misc.py:

```
#!python
def process_module(self, module):
    # ...
    stream = module.file_stream
    stream.seek(0)  # XXX may be removed with astroid > 0.23
```

So this looks like a regression to me.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/60
",start issue,Raw file checker needs to rewind file stream
1,issue_closed,60,pycqa,astroid,pylint-bot,2015-12-09 05:52:42,,closed issue,Raw file checker needs to rewind file stream
2,issue_comment,60,pycqa,astroid,pylint-bot,2014-11-25 08:54:36,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fixed in c827e3da6e683d918a58bf0a2e7ce6d2b8b41592. We'll release astroid 1.3.3 as soon as I fix the performance issue you reported in Pylint.
",,
0,issue_title,117,pycqa,astroid,pylint-bot,2015-06-20 14:55:26,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

There are a couple of syntactic changes to Python 3.5:
- the new @ (matmul) operator
- additional unpacking generalization
- async and await keywords

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/117
",start issue,Support Python 3.5
1,issue_closed,117,pycqa,astroid,pylint-bot,2015-12-09 05:53:43,,closed issue,Support Python 3.5
2,issue_comment,117,pycqa,astroid,pylint-bot,2015-10-14 21:48:01,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

We do support 3.5 in astroid 1.4.0 for instance. There are some issues with the understanding of a couple of Python 3.5's features, but they can be considered separate of this (#201 and #202 for instance).
",,
3,issue_comment,117,pycqa,astroid,pylint-bot,2015-10-15 08:11:23,"_Original comment by_ **Robert Kuska (BitBucket: [xkuska](http://bitbucket.org/xkuska))**:

---

Hi Claudiu, when do you plan to release v1.4.0? 
",,
4,issue_comment,117,pycqa,astroid,pylint-bot,2015-10-15 08:26:17,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I don't know honestly. We have these 5 issues that blocks the release (https://bitbucket.org/logilab/astroid/issues?priority=blocker&status=open&status=new) but I didn't have enough time to tackle them. Could take a week or two or something like that.
",,
5,issue_comment,117,pycqa,astroid,pylint-bot,2015-11-02 09:42:49,"_Original comment by_ **Robert Kuska (BitBucket: [xkuska](http://bitbucket.org/xkuska))**:

---

Astroid is blocking our update to python3.5 in Fedora, any news with the release date?
",,
6,issue_comment,117,pycqa,astroid,pylint-bot,2015-11-02 09:45:26,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

It's still going to take some time to fix those blocker issues, since they require more architectural changes than a couple of fixes. But since the release it's taking too long, our plans is to start cherrypicking some features, including 3.5 support, into a new branch and release the new version from there. That's something that I plan to start doing this week and hopefully it will be done by next week. If I don't comeback with an answer until then, please ping me back.
",,
7,issue_comment,117,pycqa,astroid,pylint-bot,2015-11-11 08:06:34,"_Original comment by_ **Robert Kuska (BitBucket: [xkuska](http://bitbucket.org/xkuska))**:

---

I don't want to rush you or anything, but do you have some ETA for the python3.5 support release?
",,
8,issue_comment,117,pycqa,astroid,pylint-bot,2015-11-11 15:17:57,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Thank you for the ping. I started to graft changesets from the default branch into a 1.4.0 branch (https://bitbucket.org/logilab/astroid/commits/branch/1.4.0) and hopefully I would finish this in the following days, together with pylint. I'm trying to have it finished by weekend.
",,
9,issue_comment,117,pycqa,astroid,pylint-bot,2015-11-29 18:05:56,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I just released pylint 1.5.0, together with astroid 1.4.0. I'm extremely sorry for this delay, we'll try to have a better release schedule in place in order to avoid long-awaited releases such as this one.
",,
0,issue_title,96,pycqa,astroid,pylint-bot,2015-04-19 11:36:14,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We can do more in astroid.raw_building. There are some cases where we can retrieve the arguments supported by those members, either by using inspect.getargspec / inspect.Signature or by parsing the help() output. Here's one place where we can do better, for instance: https://bitbucket.org/logilab/astroid/src/83053ac2227e483004445d34247e3ccc35527ef1/astroid/raw_building.py?at=default#cl-167

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/96
",start issue,Get arguments of builtin objects in raw_building
1,issue_closed,96,pycqa,astroid,pylint-bot,2015-12-09 05:53:24,,closed issue,Get arguments of builtin objects in raw_building
2,issue_comment,96,pycqa,astroid,pylint-bot,2015-11-06 22:48:32,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

In the modular-locals bookmark, functions in raw_building now use inspect.Signature to introspect functions.  I haven't tried to parse help() output, mainly because it would be far too difficult.
",,
3,issue_comment,96,pycqa,astroid,pylint-bot,2015-11-11 15:30:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Should be sufficient for now. I was thinking that we can retrieve the signature of builtins by parsing their help output, but as you said, that's too difficult and can be handled with a more saner approach by using stub files.
",,
0,issue_title,256,pycqa,astroid,pylint-bot,2015-11-11 05:29:30,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

With support for global and nonlocal statements officially back-burnered (#250), it would be useful to remove the global statement from this test case so that the other tests depending on it will pass.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/256
",start issue,[modular-locals bugs] Delete global statement in testdata/.../data/module.py
1,issue_closed,256,pycqa,astroid,pylint-bot,2015-12-09 05:55:54,,closed issue,[modular-locals bugs] Delete global statement in testdata/.../data/module.py
2,issue_comment,256,pycqa,astroid,pylint-bot,2015-11-14 17:40:28,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Changed in 3e3b3e9 .  There is still a test that tests the global statement and is marked as an expected failure.
",,
0,issue_title,160,pycqa,astroid,pylint-bot,2015-07-13 22:26:58,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

The first three are virtually alpha-equivalent.  Dict also has some overlapping code.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/160
",start issue,"Duplicate code in List, Set, Tuple, and Dict in node_classes.py"
1,issue_closed,160,pycqa,astroid,pylint-bot,2015-12-09 05:54:19,,closed issue,"Duplicate code in List, Set, Tuple, and Dict in node_classes.py"
2,issue_comment,160,pycqa,astroid,pylint-bot,2015-07-26 12:43:03,"_Original comment by_ **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**:

---

Are you sure you're looking at astroid and not at pylint?

If you're still at the sprints, I'm currently at the pytest table (in the same roon the Django sprint is) - just come there if you need help :)
",,
3,issue_comment,160,pycqa,astroid,pylint-bot,2015-07-26 12:52:08,"_Original comment by_ **Michał Bultrowicz (BitBucket: [Lagoena](http://bitbucket.org/Lagoena))**:

---

Ye... i dind't notice it was astroid, pylint :) So I'll come there
",,
4,issue_comment,160,pycqa,astroid,pylint-bot,2015-08-20 21:54:52,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Introduce a base class for Set, List and Tuple in order to avoid code duplication. Closes issue #160.
",,
5,issue_comment,160,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Introduce a base class for Set, List and Tuple in order to avoid code duplication. Closes issue #160.
",,
0,issue_title,249,pycqa,astroid,pylint-bot,2015-11-08 06:54:03,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

These test is failing because the docstring attribute of the mock ASTs for list and int are no longer tuples: 

``` python
            self.assertEqual(len(cls.getattr('__doc__')), 1, (cls, cls.getattr('__doc__')))
```

``` python
          self.assertEqual(len(inst.getattr('__doc__')), 1)
```

What I don't understand is why they were enclosed in tuples in the first place.  Maybe change this to a test to make sure it's a Const(str) node and call it a day?

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/249
",start issue,"[modular-locals bugs] unittest_scoped_nodes, test_cls_special_attributes_1 and test_instance_special_attributes"
1,issue_closed,249,pycqa,astroid,pylint-bot,2015-12-09 05:55:48,,closed issue,"[modular-locals bugs] unittest_scoped_nodes, test_cls_special_attributes_1 and test_instance_special_attributes"
2,issue_comment,249,pycqa,astroid,pylint-bot,2015-11-08 07:10:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Are they really tuples? When I ran the test, I get a list of Consts, which is actually correct, because getattr returns all the possible values. 
",,
3,issue_comment,249,pycqa,astroid,pylint-bot,2015-11-08 15:40:16,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Hmm, for some reason it was displaying as with parentheses rather than brackets in the REPL, so I thought it was a tuple, but checking the type shows it's a list, so it's working as expected.
",,
4,issue_comment,249,pycqa,astroid,pylint-bot,2015-11-08 15:44:30,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

ast_from_object was double-counting **doc** and so getattr was producing a length-2 list, fixed in 6da8294.
",,
0,issue_title,248,pycqa,astroid,pylint-bot,2015-11-05 20:54:51,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

At the moment, the brain tests only try to import the stdlib version of enum:

``` python
try:
    import enum # pylint: disable=unused-import
    HAS_ENUM = True
except ImportError:
    HAS_ENUM = False
```

This should be extended to include the backport for earlier Python versions, https://pypi.python.org/pypi/enum34.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/248
",start issue,Enum support should be tested with PyPi backport
1,issue_closed,248,pycqa,astroid,pylint-bot,2015-12-09 05:55:47,,closed issue,Enum support should be tested with PyPi backport
2,issue_comment,248,pycqa,astroid,pylint-bot,2015-11-06 23:47:23,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Added in b68ee1186e5f.
",,
0,issue_title,86,pycqa,astroid,pylint-bot,2015-03-27 11:47:59,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Example:

```
#!python

import six
import lala

class A(six.with_metaclass(object, lala.lala)):
    pass
```

The .mro() for A will be [A], while it should be [A, lala.lala]. The problem is in scoped_nodes.Class._inferred_bases, where the temporary class hack is skipped, without
yielding the metaclass in question.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/85
",start issue,Class.mro doesn't take in account six.with_metaclass
1,issue_closed,86,pycqa,astroid,pylint-bot,2015-12-09 05:53:17,,closed issue,Class.mro doesn't take in account six.with_metaclass
2,issue_comment,86,pycqa,astroid,pylint-bot,2015-03-31 10:41:31,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Proper mro support for six.with_metaclass. Closes issue #85.
",,
3,issue_comment,86,pycqa,astroid,pylint-bot,2015-11-11 15:14:12,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Proper mro support for six.with_metaclass. Closes issue #85.
",,
0,issue_title,42,pycqa,astroid,pylint-bot,2014-07-28 00:34:58,"Originally reported by: **Anonymous**

---

Since upgrading to astroid 1.2.0 pylint has been failing with an exception.  Minimal test case:

```
#!python

from nose.tools import raises

@raises(RuntimeError)
def test():
    pass
```

Run with `pylint test.py` gives traceback:

```
Traceback (most recent call last):
  File ""/usr/local/bin/pylint"", line 9, in <module>
    load_entry_point('pylint==1.3.0', 'console_scripts', 'pylint')()
  File ""/usr/local/lib/python2.7/dist-packages/pylint/__init__.py"", line 21, in run_pylint
    Run(sys.argv[1:])
  File ""/usr/local/lib/python2.7/dist-packages/pylint/lint.py"", line 991, in __init__
    linter.check(args)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/lint.py"", line 585, in check
    self.check_astroid_module(astroid, walker, rawcheckers, tokencheckers)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/lint.py"", line 662, in check_astroid_module
    walker.walk(astroid)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/utils.py"", line 804, in walk
    self.walk(child)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/utils.py"", line 801, in walk
    cb(astroid)
  File ""/usr/local/lib/python2.7/dist-packages/pylint/checkers/base.py"", line 279, in visit_function
    self._check_redefinition(node.is_method() and 'method' or 'function', node)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/scoped_nodes.py"", line 670, in is_method
    return self.type != 'function' and isinstance(self.parent.frame(), Class)
  File ""/usr/local/lib/python2.7/dist-packages/logilab/common/decorators.py"", line 155, in __get__
    val = self.wrapped(inst)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/scoped_nodes.py"", line 536, in _function_type
    _type = _infer_decorator_callchain(node)
  File ""/usr/local/lib/python2.7/dist-packages/astroid/scoped_nodes.py"", line 501, in _infer_decorator_callchain
    result = current.infer_call_result(current.parent).next()
StopIteration
```

This test case works fine with astroid 1.1.0.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/42
",start issue,pylint with astroid 1.2.0 fails with `StopIteration` exception
1,issue_closed,42,pycqa,astroid,pylint-bot,2015-12-09 05:52:18,,closed issue,pylint with astroid 1.2.0 fails with `StopIteration` exception
2,issue_comment,42,pycqa,astroid,pylint-bot,2014-07-28 05:47:59,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Will be fixed. We'll wait for a week or two for more of these regressions to occur before releasing a bug fix version.
",,
3,issue_comment,42,pycqa,astroid,pylint-bot,2014-07-28 06:19:25,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fix a crash occurred when inferring decorator call chain. Closes issue #42.
",,
4,issue_comment,42,pycqa,astroid,pylint-bot,2014-07-28 08:57:08,"_Original comment by_ **William Manley (BitBucket: [willmanley](http://bitbucket.org/willmanley))**:

---

Great, thanks for the fast response :).
",,
5,issue_comment,42,pycqa,astroid,pylint-bot,2014-08-01 13:37:53,"_Original comment by_ **Ciaran Creedon (BitBucket: [ccreedon1](http://bitbucket.org/ccreedon1), GitHub: @ccreedon1?)**:

---

Is there a release date for this?
",,
6,issue_comment,42,pycqa,astroid,pylint-bot,2014-08-01 14:23:21,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

A week or two.
",,
7,issue_comment,42,pycqa,astroid,pylint-bot,2014-08-22 09:04:55,"_Original comment by_ **BitBucket: [wooparadog](http://bitbucket.org/wooparadog), GitHub: @wooparadog?**:

---

Hi, when will this be released?
",,
8,issue_comment,42,pycqa,astroid,pylint-bot,2014-08-22 09:32:56,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

This weekend.
",,
9,issue_comment,42,pycqa,astroid,pylint-bot,2014-08-24 19:35:26,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

astroid 1.2.1 was released, so the problem should be fixed with the PyPi version.
",,
10,issue_comment,42,pycqa,astroid,pylint-bot,2014-08-31 10:55:10,"_Original comment by_ **David Röthlisberger (BitBucket: [drothlis](http://bitbucket.org/drothlis), GitHub: @drothlis?)**:

---

Astroid 1.2.1 fixes the issue I reported. Thanks!
",,
0,issue_title,240,pycqa,astroid,pylint-bot,2015-11-01 16:40:37,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

Several decorators, for instance scoped_nodes.remove_nodes and decorators.raise_if_nothing_inferred, currently raise InferenceErrors that provide no useful information for debugging at all.  It's possible to write generic error messages, but that doesn't improve the situation much since, for instance, it's obvious from the stack trace that raise_if_nothing_inferred raised because the generator it's decorating returned an empty iterator, but that doesn't get at _why_ the generator returned an empty iterator.  There are really only two reasonable ways I can see to solve this problem.
1. Use StopIteration to pass information from the generator to the decorator.  This will require some explicit StopIteration handling code to remain Py2/3 compatible, but as of adding `yield from` in Python 3.3, using [StopIteration values is the official method for returning values from a generator](https://www.python.org/dev/peps/pep-0380/#use-of-stopiteration-to-return-values).  (In fact, these decorators would be greatly simplified by the use of `yield from` in the first place, but maintaining Python 2 compatibility makes that impossible.)  The idea is that when the generator terminates, it always adds some information to the StopIteration it raises.  If the decorator decides there was an error condition, it uses that information to create a structured InferenceError to raise.
2. Perform introspection on the generator when the decorator is called.  This requires some additional complexity in the decorator to split off as much introspection computation as possible to the point where the function is decorated, so as not to redo it every time the decorated function is called, and then some heuristics to figure out what the decorated function is doing with its arguments so that the decorator knows which arguments it received to attach to the InferenceError.

I think the first option is better, primarily because it puts the responsibility for figuring out what arguments the InferenceError should have in the right place, but it is maybe more hackish.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/240
",start issue,Decorators that raise InferenceErrors don't provide debugging information
1,issue_closed,240,pycqa,astroid,pylint-bot,2015-12-09 05:55:40,,closed issue,Decorators that raise InferenceErrors don't provide debugging information
2,issue_comment,240,pycqa,astroid,pylint-bot,2015-11-02 02:18:30,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I've looked both eliminating raise_if_nothing_inferred and raising a custom exception.  The first fails because when raise_if_nothing_inferred is called after path_wrapper uses return to raise StopIteration, raise_if_nothing_inferred will raise InferenceError; and because raise_if_nothing_inferred is at the moment catching StopIterations in the other inference generators themselves.  Neither of these behaviors can be easily duplicated at the level of the generators themselves.  For the second, there are cases where path_wrapper is called after raise_if_nothing_inferred and vice versa, and meanwhile, there are also cases where the same function is wrapped by only one or both.  This means that both path_wrapper and raise_if_nothing_inferred can potentially need to raise the custom exception for the other one.

I think this takes us back to the only practical solutions being the two I first proposed.
",,
3,issue_comment,240,pycqa,astroid,pylint-bot,2015-11-03 16:28:57,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

One possible workaround when using StopIteration: create two versions of the decorators, one for use on Python < 3.3. and one for use on Python > 3.3.  This would require using exec or doing a dynamic import, replacing the explicit raise StopIteration in one version with return in the other.
",,
4,issue_comment,240,pycqa,astroid,pylint-bot,2015-11-05 14:53:12,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

We could use StopIteration for now and change later on with a decorator implementation. Another thing is that when 3.7 comes out, we might consider dropping support for Python 2.7, depending how things evolve until then.
",,
5,issue_comment,240,pycqa,astroid,pylint-bot,2015-11-06 17:12:39,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

e17cea5afccd uses StopIteration to pass information from and into raise_if_nothing_inferred and path_wrapper and removes removes_nodes altogether.
",,
0,issue_title,38,pycqa,astroid,pylint-bot,2014-07-24 10:11:11,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

```
#!python

FAIL: test_builtin_lookup (unittest_lookup.LookupTC)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/home/ubuntu/src/bitbucket.org/logilab/astroid/.tox/py33/lib/python3.3/site-packages/astroid/test/unittest_lookup.py"", line 274, in test_builtin_lookup
    self.assertIs(intstmts[0], nodes.const_factory(1)._proxied)
AssertionError: <Class(int) l.None [builtins] at 0x7fd5e4222950> is not <Class(int) l.None [builtins] at 0x7fd5e5047cd0>

```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/38
",start issue,builtin cache failure
1,issue_closed,38,pycqa,astroid,pylint-bot,2015-12-09 05:52:12,,closed issue,builtin cache failure
2,issue_comment,38,pycqa,astroid,pylint-bot,2014-07-25 13:25:00,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Already fixed by Torsten.
",,
0,issue_title,297,pycqa,astroid,lmedioni,2015-12-16 10:33:51,"For now the test fails, due to issue #265. Based on PR #296, everything is OK.
",start issue,Add support for inference on threading.Lock
1,issue_closed,297,pycqa,astroid,PCManticore,2015-12-21 16:04:34,,closed issue,Add support for inference on threading.Lock
2,pull_request_title,297,pycqa,astroid,lmedioni,2015-12-16 10:33:51,"For now the test fails, due to issue #265. Based on PR #296, everything is OK.
",1586fb45afa2918977e1f3a764273e9b4f2abeee,Add support for inference on threading.Lock
3,issue_comment,297,pycqa,astroid,PCManticore,2015-12-21 16:04:33,"Merged with a couple of small changes https://github.com/PyCQA/astroid/commit/af0e3f5658097a21b78e3008854fa02ddbfc0ab3. I changed it to a function, which returns an instance of a lock class.
",,
4,pull_request_commit_comment,297,pycqa,astroid,PCManticore,2015-12-17 18:11:05,"Did you see my comment from https://bitbucket.org/logilab/astroid/pull-requests/98/add-support-for-inference-on-threadinglock/diff regarding transforms vs inference tip?
",1586fb45afa2918977e1f3a764273e9b4f2abeee,"(20, '', u'astroid/brain/brain_stdlib.py')"
5,pull_request_commit_comment,297,pycqa,astroid,lmedioni,2015-12-18 12:35:12,"Sorry. You're right but I'm running out of time... Would it be OK if I modify the module transform to have Lock being a function? 
",1586fb45afa2918977e1f3a764273e9b4f2abeee,"(20, '', u'astroid/brain/brain_stdlib.py')"
6,pull_request_commit,297,pycqa,astroid,laura.medioni@logilab.fr,2015-12-16 10:30:53,Add support for inference on threading.Lock,1586fb45afa2918977e1f3a764273e9b4f2abeee,
0,issue_title,8,pycqa,astroid,pylint-bot,2013-12-18 11:53:22,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Most likely related to this change (adding NameConstant) http://hg.python.org/cpython/rev/03f92a9f0875 and relevant for this pull request: https://bitbucket.org/logilab/astroid/pull-request/16/add-support-for-ast-nameconstant/diff.

```
#!python

FAIL: test_argnames (__main__.FunctionNodeTC)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""unittest_scoped_nodes.py"", line 333, in test_argnames
    self.assertEqual(astroid['f'].argnames(), ['a', 'b', 'c', 'args', 'kwargs'])
AssertionError: Lists differ: ['a', 'b', 'c', <_ast.arg object at 0x040FF5F0>, <_ast.ar[19 chars]6D0>] != ['a', 'b', 'c', 'args', 'kwargs']

First differing element 3:
<_ast.arg object at 0x040FF5F0>
args

+ ['a', 'b', 'c', 'args', 'kwargs']
- ['a',
-  'b',
-  'c',
-  <_ast.arg object at 0x040FF5F0>,
-  <_ast.arg object at 0x040FF6D0>]

======================================================================
FAIL: test_format_args (__main__.FunctionNodeTC)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""unittest_scoped_nodes.py"", line 232, in test_format_args
    self.assertEqual(func.args.format_args(), 'any, base=data.module.YO, *args, **kwargs')
AssertionError: 'any,[18 chars]YO, *<_ast.arg object at 0x041057B0>, **<_ast.[21 chars]790>' != 'any,[18 chars]YO, *args, **kwargs'
- any, base=data.module.YO, *<_ast.arg object at 0x041057B0>, **<_ast.arg object at 0x04105790>
+ any, base=data.module.YO, *args, **kwargs
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/9
",start issue,failures for Python 3.4 beta
1,issue_closed,8,pycqa,astroid,pylint-bot,2015-12-09 05:51:38,,closed issue,failures for Python 3.4 beta
2,issue_comment,8,pycqa,astroid,pylint-bot,2014-02-01 12:44:36,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Solved by https://bitbucket.org/logilab/astroid/pull-request/20/add-support-for-python-34/diff.
",,
0,issue_title,178,pycqa,astroid,pylint-bot,2015-08-20 16:56:06,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

While working on my patch, I've lots of times had to resort to vars() and similar built-ins to get information about the state of node classes, inference contexts, and the like.  The `__repr__` and `__str__` methods for the node classes as currently written aren't adequate because they don't print out all the attributes.  Inference contexts don't have either and vars() also doesn't work because of slots.  dump() gives information about the nodes and some of their attributes, but doesn't play well with pdb (line breaks end up as '\n' literals, which makes the output hard to read) and is also not complete.  I think at a minimum, every object should have a method that will print out its complete (non-recursive) state in a format that pdb understands.  dump() should be changed to format correctly in pdb and possibly to include more information than it currently does.  Maybe the best way to do this is to add an optional parameter that gives a verbosity level?  For other recursive data structures, a pprint-equivalent would be good.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/178
",start issue,Provide a way to print the complete state of astroid objects
1,issue_closed,178,pycqa,astroid,pylint-bot,2015-12-09 05:54:35,,closed issue,Provide a way to print the complete state of astroid objects
2,issue_comment,178,pycqa,astroid,pylint-bot,2015-09-05 14:38:10,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Are there other objects that need some form of legible representation other than nodes and contexts?  Should I use `__str__`, `__repr__`, both, or another method for complete-state representations?
",,
3,issue_comment,178,pycqa,astroid,pylint-bot,2015-09-05 14:57:29,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I think you could use `__str__` or maybe another method for complete-state representations. Usually when I try things with astroid, I do it in an interpreter session and it would be cumbersome to have the complete representation each time I do something like the following.

```
#!python

>>> node = astroid.parse('...')
>>> node
# Oups, prints a lot of stuff, instead of printing the tree node.
```
",,
4,issue_comment,178,pycqa,astroid,pylint-bot,2015-09-08 17:50:55,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

This is taking longer than I'd hoped to get right, mainly because the formatting is hard to get optimally legible.  How do you feel about my using the 3.4 functools.singledispatch library and the 2.7 backport on PyPi to handle the type dispatching in `as_string.dump`?  I've done some more refactoring of the fields, moving what I'd term as AST-dependent fields like `_style` and `locals` into `_other_other_fields` for lack of a better name.  I'm currently using repr_tree as the method, I may add another method if I can figure out a reasonable representation of the AST fields. 
",,
5,issue_comment,178,pycqa,astroid,pylint-bot,2015-09-08 17:53:44,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Sounds good! I'm fine with using singledispatch. 
",,
6,issue_comment,178,pycqa,astroid,pylint-bot,2015-09-24 18:38:31,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Does this needs to be open or can we consider it fixed?
",,
7,issue_comment,178,pycqa,astroid,pylint-bot,2015-09-25 03:50:20,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Are there any other important cases of objects with state in astroid?  I did the ones I know about, but I'm not sure if there are any others.  If there aren't, I'd say this is finished.
",,
8,issue_comment,178,pycqa,astroid,pylint-bot,2015-09-25 05:55:10,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I think it's done. There's still the CallContext object, but we have #194 for it.
",,
0,issue_title,206,pycqa,astroid,pylint-bot,2015-10-04 17:23:48,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given this code `{'x': 1, **{'y': 2}}`, astroid fails with the following traceback

```
#!python

 (most recent call last):
 File ""e:\projects\repos\pylint\pylint\lint.py"", line 899, in get_ast
   return MANAGER.ast_from_file(filepath, modname, source=True)
 File ""e:\projects\repos\astroid-1\astroid\manager.py"", line 90, in ast_from_file
   return AstroidBuilder(self).file_build(filepath, modname)
 File ""e:\projects\repos\astroid-1\astroid\builder.py"", line 140, in file_build
   module = self._data_build(data, modname, path)
 File ""e:\projects\repos\astroid-1\astroid\builder.py"", line 189, in _data_build
   module = builder.visit_module(node, modname, node_file, package)
 File ""e:\projects\repos\astroid-1\astroid\rebuilder.py"", line 122, in visit_module
   newnode.postinit([self.visit(child, newnode) for child in node.body])
 File ""e:\projects\repos\astroid-1\astroid\rebuilder.py"", line 122, in <listcomp>
   newnode.postinit([self.visit(child, newnode) for child in node.body])
 File ""e:\projects\repos\astroid-1\astroid\rebuilder.py"", line 134, in visit
   return visit_method(node, parent, assign_ctx)
 File ""e:\projects\repos\astroid-1\astroid\rebuilder.py"", line 220, in visit_assign
   self.visit(node.value, newnode, None))
 File ""e:\projects\repos\astroid-1\astroid\rebuilder.py"", line 134, in visit
   return visit_method(node, parent, assign_ctx)
 File ""e:\projects\repos\astroid-1\astroid\rebuilder.py"", line 392, in visit_dict
   for key, value in zip(node.keys, node.values)])
 File ""e:\projects\repos\astroid-1\astroid\rebuilder.py"", line 392, in <listcomp>
   for key, value in zip(node.keys, node.values)])
 File ""e:\projects\repos\astroid-1\astroid\rebuilder.py"", line 132, in visit
   visit_method = getattr(self, visit_name)
AttributeError: 'TreeRebuilder3' object has no attribute 'visit_nonetype'
```

This happens because the dictionary is represented as a pair of keys and values in the form (['x', None], [1, {'y', 2}]) and astroid considers that each component is an AST node.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/206
",start issue,Crash when encountering PEP 448 unpacking in a dictionary
1,issue_closed,206,pycqa,astroid,pylint-bot,2015-12-09 05:55:05,,closed issue,Crash when encountering PEP 448 unpacking in a dictionary
2,issue_comment,206,pycqa,astroid,pylint-bot,2015-10-04 15:30:25,"_Original comment by_ **BitBucket: [cezarelnazli](http://bitbucket.org/cezarelnazli), GitHub: @cezarelnazli?**:

---

Are there any other cases where None might appear? Would a possible solution look something like `if Pair[0][i] is None: Pair[0].remove(i); Pair[0].insert(i, Pair[1][i].keys())`? Would something like this work for nested dicts as well (`{'x': 1, **{'y': 2, **{'z': 3}}}`)?
",,
3,issue_comment,206,pycqa,astroid,pylint-bot,2015-10-05 22:23:18,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add a new node, DictUnpack, for representing the unpacking of a dict using PEP 448

This is a different approach than what the builtin ast module does,
since it just uses None to represent this kind of operation,
which seems conceptually wrong, due to the fact the AST contains
non-AST nodes. Closes issue #206.
",,
4,issue_comment,206,pycqa,astroid,pylint-bot,2015-10-05 22:30:31,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Cezar, I don't know, hopefully this was the only place where this occurred. I fixed it by adding a new node, since it seems that the builtin ast module does some things conceptually wrong (putting None as an AST node).
",,
5,issue_comment,206,pycqa,astroid,pylint-bot,2015-11-18 19:28:46,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add a new node, DictUnpack, for representing the unpacking of a dict using PEP 448

This is a different approach than what the builtin ast module does,
since it just uses None to represent this kind of operation,
which seems conceptually wrong, due to the fact the AST contains
non-AST nodes. Closes issue #206.
",,
0,issue_title,279,pycqa,astroid,pylint-bot,2015-12-07 17:15:38,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Until we'll have support for descriptors transforming methods into properties, we need to update the list of possible properties with a new member `lazy`.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/279
",start issue,Add `lazy` to the list of possible decorator properties
1,issue_closed,279,pycqa,astroid,PCManticore,2015-12-21 16:12:32,,closed issue,Add `lazy` to the list of possible decorator properties
0,issue_title,90,pycqa,astroid,pylint-bot,2015-04-16 09:13:56,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We could try to understand this:

```
#!python

from astroid.builder import AstroidBuilder as ab
b = ab()
node = b.string_build('''
f = (1, 2, 3)[1:]
''')
f = node['f']
print(f.infered()) # yields YES instead of Tuple
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/90
",start issue,"Slices of list, tuples etc are the same type"
1,issue_closed,90,pycqa,astroid,pylint-bot,2015-12-09 05:53:18,,closed issue,"Slices of list, tuples etc are the same type"
2,issue_comment,90,pycqa,astroid,pylint-bot,2015-08-20 21:25:32,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Duplicate of #137.
",,
0,issue_title,50,pycqa,astroid,pylint-bot,2014-10-16 07:58:33,"Originally reported by: **BitBucket: [carlio](http://bitbucket.org/carlio), GitHub: @carlio?**

---

If a decorator returns itself, type inference in Astroid can get into an infinite loop. The following will cause Pylint to stall forever:

```
def decorator():
    def wrapper():
        return decorator()
    return wrapper

@decorator()
def do_a_thing():
    print 'hello'
```

Here is a real-world example of this code: https://github.com/allegro/ralph/blob/develop/src/ralph/util/plugin.py#L25

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/50
",start issue,Infinite loop in inference with decorators
1,issue_closed,50,pycqa,astroid,pylint-bot,2015-12-09 05:52:28,,closed issue,Infinite loop in inference with decorators
2,issue_comment,50,pycqa,astroid,pylint-bot,2014-10-16 06:03:55,"_Original comment by_ **BitBucket: [carlio](http://bitbucket.org/carlio), GitHub: @carlio?**:

---

I've tracked the issue down to `nodes_of_class` in `bases.py` on this line: https://bitbucket.org/logilab/astroid/src/3538affb576112b198837e9be187e986b666231d/bases.py?at=default#cl-561

I'm not certain how to fix it however - so far my attempts have broken the unit tests.
",,
3,issue_comment,50,pycqa,astroid,pylint-bot,2014-10-16 06:20:48,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fix an infinite loop with decorator call chain inference, where the decorator returns itself. Closes issue #50.
",,
4,issue_comment,50,pycqa,astroid,pylint-bot,2014-10-16 06:26:41,"_Original comment by_ **BitBucket: [carlio](http://bitbucket.org/carlio), GitHub: @carlio?**:

---

That was quick :)
",,
0,issue_title,28,pycqa,astroid,pylint-bot,2014-04-27 20:03:22,"Originally reported by: **Arfrever Frehtes Taifersar Arahesis (BitBucket: [arfrever](http://bitbucket.org/arfrever), GitHub: @arfrever?)**

---

Test suite triggers exceptions with Python 3.4. I use Astroid 1.1.0.

```
========================  unittest_nodes.py  =========================
unhandled exception occurred while testing unittest_nodes
Traceback (most recent call last):
  File ""/usr/lib64/python3.4/site-packages/logilab/common/pytest.py"", line 429, in testfile
    options=self.options, outstream=sys.stderr)
  File ""/usr/lib64/python3.4/site-packages/logilab/common/pytest.py"", line 765, in __init__
    testLoader=NonStrictTestLoader())
  File ""/usr/lib64/python3.4/unittest/main.py"", line 63, in __init__
    self.module = __import__(module)
  File ""/tmp/astroid-1.1.0/build/lib/astroid/test/unittest_nodes.py"", line 28, in <module>
    from data import module as test_module
ImportError: cannot import name 'module'
=======================  unittest_builder.py  ========================
unhandled exception occurred while testing unittest_builder
Traceback (most recent call last):
  File ""/usr/lib64/python3.4/site-packages/logilab/common/pytest.py"", line 429, in testfile
    options=self.options, outstream=sys.stderr)
  File ""/usr/lib64/python3.4/site-packages/logilab/common/pytest.py"", line 765, in __init__
    testLoader=NonStrictTestLoader())
  File ""/usr/lib64/python3.4/unittest/main.py"", line 63, in __init__
    self.module = __import__(module)
  File ""/tmp/astroid-1.1.0/build/lib/astroid/test/unittest_builder.py"", line 38, in <module>
    from data import module as test_module
ImportError: cannot import name 'module'
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/28
",start issue,Test errors with Python 3.4
1,issue_closed,28,pycqa,astroid,pylint-bot,2015-12-09 05:52:01,,closed issue,Test errors with Python 3.4
2,issue_comment,28,pycqa,astroid,pylint-bot,2014-11-22 10:59:57,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

This is fixed with the latest versions of astroid.
",,
0,issue_title,59,pycqa,astroid,pylint-bot,2014-11-23 11:31:15,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Due to how we visit bin ops (recursively), if the following string is large enough, it will crash Pylint with a maximum recursion depth exceeded.

```
#!python


def formatsDiagram():
    img = PhotoImage(format='gif',data=
        'R0lGODlhigJnAef/AAABAAEEAAkCAAMGAg0GBAYJBQoMCBMODQ4QDRITEBkS'
        +'CxsSEhkWDhYYFQ0aJhkaGBweGyccGh8hHiIkIiMmGTEiHhQoPSYoJSkqKDcp'
        +'Ii0uLDAxLzI0Mh44U0gxMDI5JkM0JjU3NDY6Kjc5Njo7OUE8Ozw+Oz89QTxA'
         ... # many other lines
        +'F1akOFFiRIgPHTZksKBAgMCLGTdGNIAAQgKfDAcgZbj0odOnUA8GBAA7')
     return img

```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/59
",start issue,Crash in visit_binop for many strings joined by plus
1,issue_closed,59,pycqa,astroid,pylint-bot,2015-12-09 05:52:42,,closed issue,Crash in visit_binop for many strings joined by plus
2,issue_comment,59,pycqa,astroid,pylint-bot,2015-01-18 20:00:00,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add the ability to optimize small ast subtrees.

The first use of the AST peephole optimizer is the optimization of multiple
BinOp nodes. This removes recursivity in the rebuilder when dealing
with a lot of small strings joined by the
 addition operator. which are
now precomputed to the final string. Closes issue #59.
",,
0,issue_title,185,pycqa,astroid,pylint-bot,2015-09-10 19:54:23,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given the following code, calling as_string on the resulting module leads to a surprising output:

```
#!python

from astroid import parse
m = parse('''
def test(a, b, c=42, *, x=42, **kwargs):
    print(a, b, c, args)
''')
print(m.as_string())
```

It seems that keyword only arguments are somehow treated as annotations.

```
#!python

def test(a, b, c=42, **kwargs, *, x:42):
    print(a, b, c, args)
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/185
",start issue,as_string gives wrong result for keyword-only arguments
1,issue_closed,185,pycqa,astroid,pylint-bot,2015-12-09 05:54:41,,closed issue,as_string gives wrong result for keyword-only arguments
2,issue_comment,185,pycqa,astroid,pylint-bot,2015-09-10 20:27:40,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Want me to fix this?
",,
3,issue_comment,185,pycqa,astroid,pylint-bot,2015-09-10 21:00:19,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Sure, why not. :-)
",,
4,issue_comment,185,pycqa,astroid,pylint-bot,2015-09-18 17:57:50,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

This should be fixed by https://bitbucket.org/logilab/astroid/commits/7b127880987d8896349e070debaccc587a3c6570 .
",,
5,issue_comment,185,pycqa,astroid,pylint-bot,2015-09-18 18:05:50,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

It's partially fixed. The resulting output it's still not valid syntax.
",,
6,issue_comment,185,pycqa,astroid,pylint-bot,2015-09-18 18:18:35,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Oh, ugh, you're right.
",,
7,issue_comment,185,pycqa,astroid,pylint-bot,2015-09-27 00:39:09,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Hopefully actually fix #185
",,
8,issue_comment,185,pycqa,astroid,pylint-bot,2015-11-18 18:52:31,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Hopefully actually fix #185
",,
0,issue_title,11,pycqa,astroid,pylint-bot,2014-01-14 12:38:04,"Originally reported by: **Anonymous**

---

OS: Windows XP
Python 3.3.2
astroid 1.0.1
pylint 1.0.0

pylint --rcfile=pylint.ini src

Traceback (most recent call last):
  File ""C:\python33\lib\site-packages\astroid\scoped_nodes.py"", line 284, in getattr
    return [self.import_module(name, relative_only=True)]
  File ""C:\python33\lib\site-packages\astroid\brain\py2gi.py"", line 113, in _new_import_module
    return _orig_import_module(self, modname, relative_only, level)
  File ""C:\python33\lib\site-packages\astroid\scoped_nodes.py"", line 339, in import_module
    return MANAGER.ast_from_module_name(absmodname)
  File ""C:\python33\lib\site-packages\astroid\manager.py"", line 133, in ast_from_module_name
    return self.ast_from_file(filepath, modname, fallback=False)
  File ""C:\python33\lib\site-packages\astroid\manager.py"", line 104, in ast_from_file
    return AstroidBuilder(self).file_build(filepath, modname)
  File ""C:\python33\lib\site-packages\astroid\builder.py"", line 127, in file_build
    node = self.string_build(data, modname, path)
  File ""C:\python33\lib\site-packages\astroid\builder.py"", line 140, in string_build
    self.delayed_assattr(delayed)
  File ""C:\python33\lib\site-packages\astroid\builder.py"", line 190, in delayed_assattr
    for infered in node.expr.infer():
  File ""C:\python33\lib\site-packages\astroid\bases.py"", line 311, in wrapped
    for res in _func(node, context, *_kwargs):
  File ""C:\python33\lib\site-packages\astroid\bases.py"", line 115, in _infer_stmts
    for infered in stmt.infer(context):
  File ""C:\python33\lib\site-packages\astroid\bases.py"", line 311, in wrapped
    for res in _func(node, context, *_kwargs):
  File ""C:\python33\lib\site-packages\astroid\bases.py"", line 115, in _infer_stmts
    for infered in stmt.infer(context):
  File ""C:\python33\lib\site-packages\astroid\bases.py"", line 311, in wrapped
    for res in _func(node, context, *_kwargs):
  File ""C:\python33\lib\site-packages\astroid\bases.py"", line 335, in wrapper
    for node in func(_args, **kwargs):
  File ""C:\python33\lib\site-packages\astroid\inference.py"", line 162, in infer_callfunc
    for infered in callee.infer_call_result(self, callcontext):
  File ""C:\python33\lib\site-packages\astroid\bases.py"", line 277, in infer_call_result
    return self._proxied.infer_call_result(caller, context)
  File ""C:\python33\lib\site-packages\astroid\bases.py"", line 261, in infer_call_result
    return (x is YES and x or Instance(x) for x in caller.args[0].infer())
IndexError: list index out of range

Pylint continues:

Report
82 statements analysed.

Note that I have added diagnostics in 'bases.py', so the line number 261 may not be accurate:
260:  print(caller,caller.args)
this prints: CallFunc() []
before the traceback

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/11
",start issue,Pylint crashes in astroid IndexError: list index out of range
1,issue_closed,11,pycqa,astroid,pylint-bot,2015-12-09 05:51:41,,closed issue,Pylint crashes in astroid IndexError: list index out of range
2,issue_comment,11,pycqa,astroid,pylint-bot,2014-01-14 11:52:03,"_Original comment by_ **Andrew Wall (BitBucket: [quamrana](http://bitbucket.org/quamrana))**:

---

Just signed up to bitbucket.

Let me know if you want additional details.
",,
3,issue_comment,11,pycqa,astroid,pylint-bot,2014-01-14 12:30:07,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

we would need the smallest possible code snippet that reproduce the
problem. Also you may want to try pylint 1.1 (but I don't think it will fix
your pb)/
",,
4,issue_comment,11,pycqa,astroid,pylint-bot,2014-04-08 12:18:36,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

@quamrana up?
",,
5,issue_comment,11,pycqa,astroid,pylint-bot,2014-08-20 21:29:37,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Don't crash when trying to infer unbound object.**new** call. Closes issue #11.
",,
6,issue_comment,11,pycqa,astroid,pylint-bot,2014-08-20 21:30:19,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Should be fixed.
",,
0,issue_title,84,pycqa,astroid,pylint-bot,2015-03-20 16:30:38,"Originally reported by: **Ned Batchelder (BitBucket: [ned](http://bitbucket.org/ned), GitHub: @ned?)**

---

When running on the edx-platform repo (https://github.com/edx/edx-platform), 1.3.4 successfully reports 5782 errors, but 1.3.5 crashes with a TypeError.  I've attached the output.  These are each concatenations of three different pylint runs.

I am running with:
logilab-astng==0.24.3
logilab-common==0.63.0
pylint==1.4.1

pylout_134.txt is with astroid 1.3.4 installed.  pylout_135.txt is with 1.3.5.

BTW: 1.3.6 also crashes.

We also have a few pylint plugins of our own, from https://github.com/edx/edx-lint

Pylint ends with this exception:

```
    sys.exit(run_pylint())
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/pylint/__init__.py"", line 23, in run_pylint
    Run(sys.argv[1:])
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/pylint/lint.py"", line 1266, in __init__
    linter.check(args)
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/pylint/lint.py"", line 674, in check
    self._do_check(files_or_modules)
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/pylint/lint.py"", line 805, in _do_check
    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/pylint/lint.py"", line 881, in check_astroid_module
    walker.walk(ast_node)
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/pylint/utils.py"", line 869, in walk
    self.walk(child)
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/pylint/utils.py"", line 869, in walk
    self.walk(child)
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/pylint/utils.py"", line 869, in walk
    self.walk(child)
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/pylint/utils.py"", line 866, in walk
    cb(astroid)
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/pylint/checkers/typecheck.py"", line 293, in visit_assign
    function_node = safe_infer(node.value.func)
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/pylint/checkers/utils.py"", line 96, in safe_infer
    next(inferit)
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/astroid/bases.py"", line 327, in wrapped
    for res in _func(node, context, **kwargs):
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/astroid/bases.py"", line 351, in wrapper
    for node in func(*args, **kwargs):
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/astroid/inference.py"", line 247, in infer_getattr
    for obj in owner.igetattr(self.attrname, context):
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1211, in igetattr
    for infered in _infer_stmts(self.getattr(name, context), context,
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1196, in getattr
    for classnode in self.ancestors(recurs=True, context=context):
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1103, in ancestors
    context=context):
  File ""/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1089, in ancestors
    for baseobj in stmt.infer(context):
TypeError: '_Yes' object is not iterable
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/84
",start issue,1.3.5 crashes with TypeError: '_Yes' object is not iterable
1,issue_closed,84,pycqa,astroid,pylint-bot,2015-12-09 05:53:13,,closed issue,1.3.5 crashes with TypeError: '_Yes' object is not iterable
2,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-22 11:59:50,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Thank you for the issue, I'll look into it.
",,
3,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-23 18:41:10,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Could you tell me on which file it crashed and how did you ran pylint? I'm trying to reproduce, but there are so many directories in edx-platform that I don't know where to start.
",,
4,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-25 21:21:28,"_Original comment by_ **Jeremy Braun (BitBucket: [jtbraun](http://bitbucket.org/jtbraun), GitHub: @jtbraun?)**:

---

With a recent version of cartopy, this error (which may have many causes) is triggered by the following code:

```
#!python

import cartopy.crs as ccrs
proj = ccrs.PlateCarree()
proj._threshold = 0.01

```
",,
5,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-25 21:22:11,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Thanks, will look into it. Probably will fix the edx problem as well.
",,
6,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-25 21:39:26,"_Original comment by_ **Jeremy Braun (BitBucket: [jtbraun](http://bitbucket.org/jtbraun), GitHub: @jtbraun?)**:

---

It's the special-case of ""with_metaclass"" in infer_call_result.  For some reason the b.infer(context) call on the Name(CRS) argument that comes from Projection (see below) returns the YES object, which gets assigned as c.bases, eventually triggering the error.

Looking deeper, crs.py import CRS from cartopy._crs, a shared object library (crs.so).
When this hits scoped_nodes.py, Module(cartopy._crs).getattr, looking for the CRS member, that fails, and returns a NotFoundError() exception.

That in turn hits inference.py, infer_from (which attempted to lookup the CRS member).  That catches NotFoundError, and raises InferenceError().
That is caught in bases.py, _infer_stmts(), which was attempting to lookup 'CRS' in the From(cartopy._crs) object. This runs ""yield YES"", which eventually gets back into the set of base classes for the with_metaclass special case, and later the failure.

I have no idea what was actually intended here, though. Good luck, and thank you!

```
#!python

from cartopy._crs import CRS, Geocentric, Geodetic, Globe, PROJ4_RELEASE

class Projection(six.with_metaclass(ABCMeta, CRS)):
class _RectangularProjection(Projection):
class _CylindricalProjection(_RectangularProjection):
class PlateCarree(_CylindricalProjection):

```
",,
7,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-25 23:20:38,"_Original comment by_ **Ned Batchelder (BitBucket: [ned](http://bitbucket.org/ned), GitHub: @ned?)**:

---

@PCManticore I've tried to make a reproducible case for you, but have not been able to.  Installing all of Open edX's prerequisites is difficult.... :(
",,
8,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-26 17:32:46,"_Original comment by_ **Michael Barrientos (BitBucket: [mbarrien](http://bitbucket.org/mbarrien), GitHub: @mbarrien?)**:

---

Don't have a test case yet, but also seeing this same crash when using the freezegun library to mock out datetime calls.
",,
9,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-26 19:29:33,"_Original comment by_ **Michael Barrientos (BitBucket: [mbarrien](http://bitbucket.org/mbarrien), GitHub: @mbarrien?)**:

---

Here's a test case. Will need to pip install freezegun.

```
import datetime
import unittest

from freezegun import freeze_time

class TestClass(unittest.TestCase):
    @freeze_time('2015-03-26T12:24:00+0700')
    def test_something(self):
        datetime.datetime.now()
```

And the traceback:

```

Traceback (most recent call last):
  File ""/Users/mike/work/venv/bin/pylint"", line 11, in <module>
    sys.exit(run_pylint())
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/pylint/__init__.py"", line 23, in run_pylint
    Run(sys.argv[1:])
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/pylint/lint.py"", line 1332, in __init__
    linter.check(args)
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/pylint/lint.py"", line 747, in check
    self._do_check(files_or_modules)
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/pylint/lint.py"", line 869, in _do_check
    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/pylint/lint.py"", line 946, in check_astroid_module
    walker.walk(ast_node)
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/pylint/utils.py"", line 874, in walk
    self.walk(child)
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/pylint/utils.py"", line 874, in walk
    self.walk(child)
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/pylint/utils.py"", line 871, in walk
    cb(astroid)
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/pylint/checkers/base.py"", line 1142, in visit_function
    confidence=confidence)
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/pylint/checkers/base.py"", line 1170, in _check_docstring
    func = safe_infer(node.body[0].value.func)
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/pylint/checkers/utils.py"", line 96, in safe_infer
    next(inferit)
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/astroid/bases.py"", line 327, in wrapped
    for res in _func(node, context, **kwargs):
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/astroid/bases.py"", line 351, in wrapper
    for node in func(*args, **kwargs):
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/astroid/inference.py"", line 247, in infer_getattr
    for obj in owner.igetattr(self.attrname, context):
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1211, in igetattr
    for infered in _infer_stmts(self.getattr(name, context), context,
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1196, in getattr
    for classnode in self.ancestors(recurs=True, context=context):
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1103, in ancestors
    context=context):
  File ""/Users/mike/work/venv/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1089, in ancestors
    for baseobj in stmt.infer(context):
TypeError: '_Yes' object is not iterable
```
",,
10,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-27 11:52:58,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Filter out YES nodes when creating a temporary class for the with_metaclass hack.

Having an YES node in a class bases will lead to a crash with a TypeError
when trying to obtain the ancestors of the given class, because .ancestors()
will try to iterate each inferred node from the bases, thus will try to
iterate over an YES node. This should fix issue #84.
",,
11,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-27 11:53:20,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

This wasn't meant to be closed. Sorry about that.
",,
12,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-27 11:54:07,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Could you all do a test with the latest astroid's tip? The freezegun problem was solved, but I don't have an environment for edx, nor for cartopy.
",,
13,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-27 14:53:34,"_Original comment by_ **Ned Batchelder (BitBucket: [ned](http://bitbucket.org/ned), GitHub: @ned?)**:

---

I confirmed that astroid's tip does not crash on the edX code.  I'm looking now to see how the violations differ, because the count changed between 1.3.4 and tip.
",,
14,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-27 15:17:41,"_Original comment by_ **Ned Batchelder (BitBucket: [ned](http://bitbucket.org/ned), GitHub: @ned?)**:

---

The violations count went down because astroid 1.3.4 complained about nose.tools' assert_equals() method missing parameters.  astroid tip correctly does not complain about that.  The fix looks good, thanks!
",,
15,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-27 16:07:10,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Nice, thanks! I'll close the issue after I have confirmation from Jeremy that this works for him as well.
",,
16,issue_comment,84,pycqa,astroid,pylint-bot,2015-03-27 16:07:24,"_Original comment by_ **Jeremy Braun (BitBucket: [jtbraun](http://bitbucket.org/jtbraun), GitHub: @jtbraun?)**:

---

Works for the cartopy repro as well.
",,
17,issue_comment,84,pycqa,astroid,pylint-bot,2015-06-05 13:45:09,"_Original comment by_ **Kristaps Rāts (BitBucket: [kristaps](http://bitbucket.org/kristaps), GitHub: @kristaps?)**:

---

Any estimate when this will be on PyPI?
",,
18,issue_comment,84,pycqa,astroid,pylint-bot,2015-06-12 13:19:42,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I could probably make a bug fix release for astroid in this weekend. astroid 1.4 and pylint 1.5 are scheduled somewhere in the middle of July.
",,
19,issue_comment,84,pycqa,astroid,pylint-bot,2015-07-27 17:31:08,"_Original comment by_ **Daniel Myers (BitBucket: [moird](http://bitbucket.org/moird), GitHub: @moird?)**:

---

Also wondering when this will be on PyPi?
",,
20,issue_comment,84,pycqa,astroid,pylint-bot,2015-07-28 07:37:17,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I'll be creating astroid 1.3.8 today with this change, sorry for taking so long.
",,
21,issue_comment,84,pycqa,astroid,pylint-bot,2015-07-28 19:07:11,"_Original comment by_ **Daniel Myers (BitBucket: [moird](http://bitbucket.org/moird), GitHub: @moird?)**:

---

It looks like the changeset for this issue: 40e3176b4747 was not included in 1.3.7.
",,
22,issue_comment,84,pycqa,astroid,pylint-bot,2015-07-28 20:33:38,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Yep, I forgot about this issue when I released 1.3.7. I just got back home from EuroPython, so hopefully tomorrow morning I'll push 1.3.8 to PyPi. I'm really sorry for the delay.
",,
23,issue_comment,84,pycqa,astroid,pylint-bot,2015-08-02 19:38:55,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Filter out YES nodes when creating a temporary class for the with_metaclass hack.

Having an YES node in a class bases will lead to a crash with a TypeError
when trying to obtain the ancestors of the given class, because .ancestors()
will try to iterate each inferred node from the bases, thus will try to
iterate over an YES node. This should fix issue #84.
",,
24,issue_comment,84,pycqa,astroid,pylint-bot,2015-08-02 20:49:01,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Yep, as usual, being late.. I just released astroid 1.3.8 with the fix for this issue. Please test it and report any bugs that you find. ;-) 
",,
25,issue_comment,84,pycqa,astroid,pylint-bot,2015-08-14 11:05:18,"_Original comment by_ **Kristaps Rāts (BitBucket: [kristaps](http://bitbucket.org/kristaps), GitHub: @kristaps?)**:

---

Fix works for me, thank you.
",,
0,issue_title,164,pycqa,astroid,pylint-bot,2015-07-25 12:51:55,"Originally reported by: **BitBucket: [harut](http://bitbucket.org/harut), GitHub: @harut?**

---

We have manual sys.path modification as a part of our project configuration.

```
#!python

def path_config():
    for path in [THIRD_PARTY_DIR]:
        if path not in sys.path:
            sys.path.insert(0, path)
```

Right now pylint can not understand what is going on and returns an error:

```
Unable to import '%packagename%' (import-error)
```

It would be nice to understand this kind of things, or have a method to manually add a path to pylint.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/164
",start issue,Manual sys.path modification
1,issue_closed,164,pycqa,astroid,pylint-bot,2015-12-09 05:54:24,,closed issue,Manual sys.path modification
2,issue_comment,164,pycqa,astroid,pylint-bot,2015-07-25 11:34:50,"_Original comment by_ **BitBucket: [harut](http://bitbucket.org/harut), GitHub: @harut?**:

---

copied to pylint
",,
0,issue_title,1,pycqa,astroid,pylint-bot,2013-06-22 11:55:26,"Originally reported by: **BitBucket: [idella5](http://bitbucket.org/idella5)**

---

firstly under py3.2; Python 3.2.4

pytest

yields

``` python
........E............
======================================================================
ERROR: test_generator_attributes (unittest_lookup.LookupTC)
----------------------------------------------------------------------
Traceback (most recent call last)
  File ""/mnt/gen2/TmpDir/portage/dev-python/astng-0.24.3/work/logilab-astng-0.24.3-python3_2/test/lib/logilab_astng-0.24.3-py3.2.egg/logilab/astng/test/unittest_lookup.py"", line 228, in test_generator_attributes
    self.assertIsInstance(gener.getattr('next')[0], Function)
  File ""/usr/lib64/python3.2/site-packages/logilab/astng/bases.py"", line 160, in getattr
    return self._proxied.getattr(name, context)
  File ""/usr/lib64/python3.2/site-packages/logilab/astng/scoped_nodes.py"", line 886, in getattr
    raise NotFoundError(name)
logilab.astng.exceptions.NotFoundError: next

                              no stdout                               
                              no stderr                               
______________________________________________
--------------------------------------------------------------------------
..S.F..
======================================================================
FAIL: test_numpy_crash (unittest_regrtest.NonRegressionTC)
test don't crash on numpy
----------------------------------------------------------------------
Traceback (most recent call last)
  File ""/mnt/gen2/TmpDir/portage/dev-python/astng-0.24.3/work/logilab-astng-0.24.3-python3_2/test/lib/logilab_astng-0.24.3-py3.2.egg/logilab/astng/test/unittest_regrtest.py"", line 136, in test_numpy_crash
    self.assertIsInstance(infered[0], Instance)
  File ""/usr/lib64/python3.2/site-packages/logilab/common/testlib.py"", line 1102, in assertIsInstance
    self.assertTrue(isinstance(obj, klass), msg)
  File ""/usr/lib64/python3.2/unittest/case.py"", line 506, in assertTrue
    raise self.failureException(msg)
AssertionError: False is not true : YES is not an instance of <class 'logilab.astng.bases.Instance'> but of <class 'logilab.astng.bases._Yes'>

                              no stdout                               
                              no stderr                               
```

Secondly pypy.  The patch I made below resets the tests to yield a pass for pypy running them. Note ""# no way for this one (is 4 actually)"" in the test file implies you know of this oddity yet there it still sits.  For py2.7 3.2 it passes but under pypy it yeilds these different data.

``` bash
diff -ur logilab-astng-0.24.3.orig/test/unittest_builder.py logilab-astng-0.24.3/test/unittest_builder.py
--- test/unittest_builder.py    2013-04-17 17:38:31.000000000 +0800
+++ test/unittest_builder.py    2013-06-19 02:13:51.425269363 +0800
@@ -62,8 +62,12 @@
         self.assertEqual(name.tolineno, 4)
         strarg = callfunc.args[0]
         self.assertIsInstance(strarg, nodes.Const)
-        self.assertEqual(strarg.fromlineno, 5) # no way for this one (is 4 actually)
-        self.assertEqual(strarg.tolineno, 5)
+        if hasattr(sys, 'pypy_version_info'):
+            self.assertEqual(strarg.fromlineno, 4) # no way for this one (is 4 actually)
+            self.assertEqual(strarg.tolineno, 4)
+        else:
+            self.assertEqual(strarg.fromlineno, 5) # no way for this one (is 4 actually)
+            self.assertEqual(strarg.tolineno, 5)
         namearg = callfunc.args[1]
         self.assertIsInstance(namearg, nodes.Name)
         self.assertEqual(namearg.fromlineno, 5)
diff -ur logilab-astng-0.24.3.orig/test/unittest_inference.py logilab-astng-0.24.3/test/unittest_inference.py
--- test/unittest_inference.py  2013-04-17 17:38:31.000000000 +0800
+++ test/unittest_inference.py  2013-06-19 02:52:41.618270007 +0800
@@ -710,8 +710,12 @@
         node = get_name_node(astng, 'open', -1)
         infered = list(node.infer())
         self.assertEqual(len(infered), 1)
-        self.assertIsInstance(infered[0], nodes.Function)
-        self.assertEqual(infered[0].name, 'open')
+        if hasattr(sys, 'pypy_version_info'):
+            self.assertIsInstance(infered[0], nodes.Class)
+            self.assertEqual(infered[0].name, 'file')
+        else:
+            self.assertIsInstance(infered[0], nodes.Function)
+            self.assertEqual(infered[0].name, 'open')

     def test_callfunc_context_func(self):
         code = '''
```

The remaining test left to just fail is

``` python
.....S.......E..........................................
======================================================================
ERROR: test_socket_build (unittest_builder.BuilderTC)
----------------------------------------------------------------------
Traceback (most recent call last)
  File ""/usr/lib64/pypy2.0/site-packages/logilab/common/testlib.py"", line 661, in _proceed
    testfunc(*args, **kwargs)
  File ""/mnt/gen2/TmpDir/portage/dev-python/astng-0.24.3/work/logilab-astng-0.24.3-pypy2_0/test/lib/logilab_astng-0.24.3-py2.7.egg/logilab/astng/test/unittest_builder.py"", line 442, in test_socket_build
    self.assertIn('connect', fclass)
  File ""/usr/lib64/pypy2.0/lib-python/2.7/unittest/case.py"", line 798, in assertIn
    if member not in container:
TypeError: '_Yes' object is not iterable

                              no stdout                               
                              no stderr                               
```

It appears to me that pypy reading the ??same directory structure comes up with _Yes object, a valid astng object I gather but the wrong damned one.
There's a build log for you.

Over to you

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/1
",start issue,"test suite fails in -0.24.3 under py3.2, pypy"
1,issue_closed,1,pycqa,astroid,pylint-bot,2015-12-09 05:51:25,,closed issue,"test suite fails in -0.24.3 under py3.2, pypy"
2,issue_comment,1,pycqa,astroid,pylint-bot,2013-06-22 09:59:21,"_Original comment by_ **BitBucket: [idella5](http://bitbucket.org/idella5)**:

---

oh py3.3 doesn't even get started.

``` python
Installed /mnt/gen2/TmpDir/portage/dev-python/astng-0.24.3/work/logilab-astng-0.24.3-python3_3/test/lib/logilab_astng-0.24.3-py3.3.egg
Processing dependencies for logilab-astng==0.24.3
Finished processing dependencies for logilab-astng==0.24.3
Traceback (most recent call last):
  File ""/usr/bin/pytest-python3.3"", line 6, in <module>

    from logilab.common.pytest import run
  File ""/usr/lib64/python3.3/site-packages/logilab/common/pytest.py"", line 124, in <module>
    from logilab.common import testlib, STD_BLACKLIST
  File ""/usr/lib64/python3.3/site-packages/logilab/common/testlib.py"", line 496, in <module>
    class TestCase(unittest.TestCase):
  File ""/usr/lib64/python3.3/site-packages/logilab/common/testlib.py"", line 1189, in TestCase
    assertItemsEqual = unittest.TestCase.assertSameElements
AttributeError: type object 'TestCase' has no attribute 'assertSameElements'
 * ERROR: dev-python/astng-0.24.3 failed (test phase):
 *   Tests fail with python3.3
```
",,
3,issue_comment,1,pycqa,astroid,pylint-bot,2013-10-18 15:24:56,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

I integrated your pypy fix and tested using 3.3. The only remaining error is the one concerning numpy.

As I've not time for this one yet, I'll consider this issue resolved and numpy/py3 problems should go to another isse.
",,
4,issue_comment,1,pycqa,astroid,pylint-bot,2013-10-18 15:27:21,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

Same thing for socket vs pypy
",,
5,issue_comment,1,pycqa,astroid,pylint-bot,2013-10-18 15:28:48,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

failures for numpy/py3 and socket/pypy are not fixed and deserve separated issues.
",,
6,issue_comment,1,pycqa,astroid,pylint-bot,2013-10-19 00:41:14,"_Original comment by_ **BitBucket: [idella5](http://bitbucket.org/idella5)**:

---

hmm thanks Sylvian
",,
0,issue_title,10,pycqa,astroid,pylint-bot,2014-01-13 16:30:37,"Originally reported by: **Ethan Glasser-Camp (BitBucket: [glasserc](http://bitbucket.org/glasserc), GitHub: @glasserc?)**

---

This is the same as pylint issue 95 (https://bitbucket.org/logilab/pylint/issue/95/how-can-i-write-a-plugin-to-change-imports). sthenault asked me to create this new issue specific to astroid and indicate that it is a follow-up.

Hi, I use flask. Flask defines a module called flask.ext. Importing flask.ext.foo is automagically mapped to importing flask_foo. I wrote a plugin on an old version of pylint to handle this: http://engineering.pave.com/post/51820567994/welcome-linting-flask-ext

I'm trying now to upgrade to pylint 1.0.0 and I see that the API has changed. I'm trying to use the new API but having trouble. I can define a transform function, as follows:

```
MANAGER.register_transform(node_classes.From, replace_from_flask_ext,
                           is_from_flask_ext)
```

With is_from_flask_ext and replace_from_flask_ext defined as:

```
def copy_node_info(src, dest):
    """"""Copy information from src to dest

    Every node in the AST has to have line number information.  Get
    the information from the old stmt.""""""
    for attr in ['lineno', 'fromlineno', 'tolineno',
                 'col_offset', 'parent']:
        if hasattr(src, attr):
            setattr(dest, attr, getattr(src, attr))


def splice(stmt, new_stmt):
    """"""Replace stmt with new_stmt in the AST

    Also, copy useful information from stmt to new_stmt.

    This assumes that stmt and new_stmt are of the same type and
    define the same names.
    """"""
    copy_node_info(stmt, new_stmt)

    # Replace stmt with new_stmt in the sequence of statements that
    # included stmt.
    # body = stmt.parent.body
    # i = body.index(stmt)
    # stmt.parent.body[i] = new_stmt

    # The names defined by an import statement are kept in stmt.names
    # as a pair of (exported_name, as_name). For example, ""import foo,
    # bar as baz"" corresponds to an import statement with
    # names=[(""foo"", None), (""bar"", ""baz"")].
    #
    # All names that stmt defined should now be defined by new_stmt.
    for (name, as_name) in stmt.names:
        stmt.parent.set_local(as_name or name, new_stmt)

    return new_stmt

def is_from_flask_ext(node):
    """"""Is this a 'from flask.ext import wtf' statement?""""""
    return node.modname == 'flask.ext'

def replace_from_flask_ext(node):
    """"""Replace 'from flask.ext import wtf' with 'import flask_wtf as wtf'.""""""
    new_stmt = node_classes.Import()
    new_stmt.names = []
    for pair in node.names:
        (name, as_name) = pair
        new_stmt.names.append(('flask_'+name, as_name or name))

    return splice(node, new_stmt)
```

I'm running it on code like (from the test):

```
from flask.ext import wtf

print wtf.Flboltolo
class MyForm(wtf.Form):
    """"""Test form""""""
    field = StringField()
```

Unfortunately, this doesn't infer anything about the ""wtf"" variable. (In particular I don't see the ""E: 15, 6: Module 'flask_wtf' has no 'Flboltolo' member"" error.) I think this is due to the fact that the TreeRebuilder stores all From nodes in a member variable called _from_nodes, even when I replace them with other nodes. Commenting out self._from_nodes.append(newnode) on line 490 of rebuilder.py gives me the expected result. There appears to be no other way for me to achieve this effect, because the TreeRebuilder isn't passed to the transform functions and it cannot be accessed in any other way.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/10
",start issue,How can I write a plugin to change imports?
1,issue_closed,10,pycqa,astroid,pylint-bot,2015-12-09 05:51:40,,closed issue,How can I write a plugin to change imports?
2,issue_comment,10,pycqa,astroid,pylint-bot,2014-01-13 15:31:14,"_Original comment by_ **Ethan Glasser-Camp (BitBucket: [glasserc](http://bitbucket.org/glasserc), GitHub: @glasserc?)**:

---

Relatedly, I have another plugin that tries to add instance variables to classes if they're inherited from certain classes. Right now it's impossible to trace their inheritance chains from a register_transform function if those classes are imported using ""from module import Class"".
",,
3,issue_comment,10,pycqa,astroid,pylint-bot,2014-04-08 12:21:29,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

This used to work but doesn't anymore since you updated your code to the new api?
",,
4,issue_comment,10,pycqa,astroid,pylint-bot,2014-04-08 13:21:00,"_Original comment by_ **Ethan Glasser-Camp (BitBucket: [glasserc](http://bitbucket.org/glasserc), GitHub: @glasserc?)**:

---

As far as I know, although I haven't tried it since January.
",,
5,issue_comment,10,pycqa,astroid,pylint-bot,2014-11-06 00:21:19,"_Original comment by_ **BitBucket: [mdbostwick](http://bitbucket.org/mdbostwick)**:

---

Did anything happen with this? I am using pylint 1.3.1 and astroid 1.2.1, common 0.63.0,  that I am getting false positives on flask.ext.<plugin> and would very much like to resolve those. 
",,
6,issue_comment,10,pycqa,astroid,pylint-bot,2015-06-28 22:22:01,"_Original comment by_ **Joe Schafer (BitBucket: [jschaf](http://bitbucket.org/jschaf), GitHub: @jschaf?)**:

---

I created a pylint-flask plugin that solves this issue in a different way.  My code is at https://github.com/jschaf/pylint-flask

Instead of reusing the From node, I just made new ones.
",,
7,issue_comment,10,pycqa,astroid,pylint-bot,2015-08-10 22:02:21,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I'm really sorry for the delay, having bugs lurking around for years is not acceptable.

The original problem, the fact that inference wasn't really possible in transforms was fixed in the commit e22bcea38c2cfe9de535819cca3047ce5ad06426, which added a separate step for transforms. The problem with the transforms was that they were running at the same time the AST tree was built, which meant that whenever a transform was doing inference, it was doing inference on a partially constructed tree, with results similar as the one experienced in this issue. Since now the transforms are separated and called after the AST is built, inference is fully possible inside transforms, which means that transforms as the one provided by Ethan are working properly now. The fix will be part of astroid 1.4.
",,
0,issue_title,295,pycqa,astroid,PCManticore,2015-12-15 14:55:17,"Hey folks,

Here's a basic setup of AppVeyor which I'd like to get into astroid as part of its testing suite. It kinda works so far, but depending on numpy takes its toll reflected on the unusual build run time (almost an hour for all the Python versions). I tried multiple solutions, but none worked so far. If you have any idea how we might improve things on this side, please tell me about it. 

cc @The-Compiler would you mind setting up an AppVeyor account for pylint-bot, when you'll get some time? Most probably using it is the best solution.
",start issue,Setup a basic AppVeyor deployment.
1,issue_closed,295,pycqa,astroid,PCManticore,2015-12-16 09:10:32,,closed issue,Setup a basic AppVeyor deployment.
2,pull_request_title,295,pycqa,astroid,PCManticore,2015-12-15 14:55:17,"Hey folks,

Here's a basic setup of AppVeyor which I'd like to get into astroid as part of its testing suite. It kinda works so far, but depending on numpy takes its toll reflected on the unusual build run time (almost an hour for all the Python versions). I tried multiple solutions, but none worked so far. If you have any idea how we might improve things on this side, please tell me about it. 

cc @The-Compiler would you mind setting up an AppVeyor account for pylint-bot, when you'll get some time? Most probably using it is the best solution.
",b194b835be4335dcca25b50c5ea79f959e90025b,Setup a basic AppVeyor deployment.
3,pull_request_merged,295,pycqa,astroid,PCManticore,2015-12-16 09:10:32,Setup a basic AppVeyor deployment.,f5b826e2b6648598af883d256a997af2d770c604,Pull request merge from PyCQA/astroid:appveyor to PyCQA/astroid:master
4,issue_comment,295,pycqa,astroid,ceridwen,2015-12-15 19:20:17,"I know next to nothing about installing Python on Windows, so I don't know if I comment about that, though I support testing on it.   This might be a good place to handle IronPython, since .NET is Windows-native?  For numpy, I still think we should split off most of brain.
",,
5,issue_comment,295,pycqa,astroid,PCManticore,2015-12-15 19:26:52,"I agree with the splitting, but in my opinion we should do it after switching completely to GitHub (having Travis and AppVeyor working for most of the cases).
",,
6,issue_comment,295,pycqa,astroid,PCManticore,2015-12-15 19:27:56,"Yeah, we could add IronPython as well, after having the basic blocks integrated.
",,
7,issue_comment,295,pycqa,astroid,The-Compiler,2015-12-16 05:35:32,"https://ci.appveyor.com/project/pylint-bot/pylint and https://ci.appveyor.com/project/pylint-bot/astroid are up and running. :wink:
",,
8,issue_comment,295,pycqa,astroid,PCManticore,2015-12-16 08:46:21,"Thanks @The-Compiler ! By the way, I think you need to add the hooks for the project. I pushed a commit, but no build was triggered or am I doing something wrong?
",,
9,issue_comment,295,pycqa,astroid,PCManticore,2015-12-16 09:10:26,"Let's merge it as is and we'll do a test PR shortly.
",,
10,pull_request_commit,295,pycqa,astroid,PCManticore,2015-12-14 11:02:05,Setup a basic AppVeyor deployment.,b194b835be4335dcca25b50c5ea79f959e90025b,
0,issue_title,55,pycqa,astroid,pylint-bot,2014-11-21 00:28:08,"Originally reported by: **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**

---

Workaround is `pip install'<'1.3.0`.

```
$ pylint simple_test.py
Traceback (most recent call last):
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/bin/pylint"", line 9, in <module>
    load_entry_point('pylint==1.3.1', 'console_scripts', 'pylint')()
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/pylint/__init__.py"", line 21, in run_pylint
    Run(sys.argv[1:])
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/pylint/lint.py"", line 991, in __init__
    linter.check(args)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/pylint/lint.py"", line 585, in check
    self.check_astroid_module(astroid, walker, rawcheckers, tokencheckers)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/pylint/lint.py"", line 662, in check_astroid_module
    walker.walk(astroid)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/pylint/utils.py"", line 804, in walk
    self.walk(child)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/pylint/utils.py"", line 801, in walk
    cb(astroid)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/pylint/checkers/variables.py"", line 756, in visit_import
    module = node.infer_name_module(parts[0]).next()
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/astroid/bases.py"", line 110, in cache_generator
    for result in generator:
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/astroid/bases.py"", line 341, in wrapped
    for res in _func(node, context, **kwargs):
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/astroid/inference.py"", line 212, in infer_import
    yield self.do_import_module(lookupname)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/astroid/mixins.py"", line 107, in do_import_module
    return mymodule.import_module(modname, level=level)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 367, in import_module
    return MANAGER.ast_from_module_name(modname)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/astroid/manager.py"", line 147, in ast_from_module_name
    return self.ast_from_file(filepath, modname, fallback=False)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/astroid/manager.py"", line 109, in ast_from_file
    return AstroidBuilder(self).file_build(filepath, modname)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/astroid/builder.py"", line 134, in file_build
    module = self._data_build(data, modname, path)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/astroid/builder.py"", line 177, in _data_build
    module = rebuilder.visit_module(node, modname, node_file, package)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/astroid/rebuilder.py"", line 148, in visit_module
    return self._transform(newnode)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/astroid/manager.py"", line 324, in transform
    ret = transform_func(node)
  File ""/Users/buck/trees/yelp/venv-update/.tox/py27-lint/lib/python2.7/site-packages/astroid/__init__.py"", line 115, in transform
    for name, obj in extension_module.locals.items():
AttributeError: 'NoneType' object has no attribute 'locals'


$ cat simple_test.py
import pytest


$ pip freeze
PyYAML==3.11
argparse==1.2.2
aspy.yaml==0.2.0
astroid==1.3.0
cached-property==0.1.5
flake8==2.2.5
jsonschema==2.4.0
logilab-common==0.63.0
mccabe==0.2.1
nodeenv==0.11.1
ordereddict==1.1
pep8==1.5.7
pre-commit==0.3.2
py==1.4.26
pyflakes==0.8.1
pylint==1.3.1
pytest==2.6.4
simplejson==3.6.5
six==1.8.0
venv-update==0.0a2
virtualenv==1.11.6
wsgiref==0.1.2
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/55
",start issue,astroid 1.3.0 explodes on `import pytest`
1,issue_closed,55,pycqa,astroid,pylint-bot,2015-12-09 05:52:34,,closed issue,astroid 1.3.0 explodes on `import pytest`
2,issue_comment,55,pycqa,astroid,pylint-bot,2014-11-21 08:17:15,"_Original comment by_ **BitBucket: [jquast](http://bitbucket.org/jquast), GitHub: @jquast?**:

---

Submitted Pull request #63
",,
3,issue_comment,55,pycqa,astroid,pylint-bot,2014-11-21 11:04:42,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

return AstroidBuilder() value in py2pytest.py

This closes issue #55. function pytest_transform()
fails to return any value, causing NoneType exception
in register_module_extender().
",,
4,issue_comment,55,pycqa,astroid,pylint-bot,2014-11-21 17:40:20,"_Original comment by_ **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**:

---

Please comment when this hits pypi.
Thanks for the quick patch!
",,
5,issue_comment,55,pycqa,astroid,pylint-bot,2014-11-21 21:52:55,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

1.3.1 has been released, which contains the fix for this.
",,
6,issue_comment,55,pycqa,astroid,pylint-bot,2014-11-21 21:53:19,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

Issue #57 was marked as a duplicate of this issue.
",,
0,issue_title,105,pycqa,astroid,pylint-bot,2015-06-03 09:17:42,"Originally reported by: **sebastien charret (BitBucket: [SebCharret](http://bitbucket.org/SebCharret))**

---

Hi all,

I try to install pylint on my virtualenv and I have the following error.

```
#!python

# pip3 install pylint
 Collecting pylint
  Using cached pylint-1.4.3-py2.py3-none-any.whl
 Collecting logilab-common>=0.53.0 (from pylint)
  Using cached logilab-common-0.63.2.tar.gz
    /usr/lib/python3.4/distutils/dist.py:260: UserWarning: Unknown distribution option: 'test_require'
      warnings.warn(msg)
    package init file './test/__init__.py' not found (or not a regular file)
Requirement already satisfied (use --upgrade to upgrade): six in /home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages (from pylint)
Collecting astroid>=1.3.6 (from pylint)
  Exception:
  Traceback (most recent call last):
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/basecommand.py"", line 232, in main
      status = self.run(options, args)
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/commands/install.py"", line 339, in run
      requirement_set.prepare_files(finder)
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/req/req_set.py"", line 333, in prepare_files
      upgrade=self.upgrade,
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/index.py"", line 305, in find_requirement
      page = self._get_page(main_index_url, req)
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/index.py"", line 783, in _get_page
      return HTMLPage.get_page(link, req, session=self.session)
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/index.py"", line 872, in get_page
      ""Cache-Control"": ""max-age=600"",
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/_vendor/requests/sessions.py"", line 473, in get
      return self.request('GET', url, **kwargs)
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/download.py"", line 365, in request
      return super(PipSession, self).request(method, url, *args, **kwargs)
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/_vendor/requests/sessions.py"", line 461, in request
      resp = self.send(prep, **send_kwargs)
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/_vendor/requests/sessions.py"", line 573, in send
      r = adapter.send(request, **kwargs)
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/_vendor/cachecontrol/adapter.py"", line 36, in send
      cached_response = self.controller.cached_request(request)
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/_vendor/cachecontrol/controller.py"", line 100, in cached_request
      resp = self.serializer.loads(request, self.cache.get(cache_url))
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/_vendor/cachecontrol/serialize.py"", line 62, in loads
      return getattr(self, ""_loads_v{0}"".format(ver))(request, data)
    File ""/home/sebastien/.virtualenvs/pyMarket3.4/lib/python3.4/site-packages/pip/_vendor/cachecontrol/serialize.py"", line 91, in _loads_v1
      body = io.BytesIO(cached[""response""].pop(""body""))
  TypeError: 'str' does not support the buffer interface

```

My os:
Linux version 3.13.0-53-generic (buildd@phianna) (gcc version 4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #89-Ubuntu SMP Wed May 20 10:34:39 UTC 2015
Python: 3.4.0

Thanks for the help.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/105
",start issue,Error on installation with pip
1,issue_closed,105,pycqa,astroid,pylint-bot,2015-12-09 05:53:32,,closed issue,Error on installation with pip
2,issue_comment,105,pycqa,astroid,pylint-bot,2015-06-03 07:34:34,"_Original comment by_ **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**:

---

This looks like a pip rather than a astroid problem - it show that before astroid is even downloaded:

https://github.com/pypa/pip/issues/2481
https://github.com/pypa/pip/issues/2317
https://github.com/pypa/pip/issues/2460
",,
3,issue_comment,105,pycqa,astroid,pylint-bot,2015-06-03 08:55:01,"_Original comment by_ **sebastien charret (BitBucket: [SebCharret](http://bitbucket.org/SebCharret))**:

---

@Florian Bruhin You were right, it was a pip outdated problem. Thanks for your help.
",,
0,issue_title,210,pycqa,astroid,pylint-bot,2015-10-10 10:05:10,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

The module was added a while ago, for fixing a recursion problem found in a PyPi package. The code was using string concatenation in order to build a huge base64-encoded image, which unfortunately hit the recursion limit in astroid.rebuilder. The problem is that the code wasn't working by default in CPython, without modifying the recursion limit to something higher. Since the peephole optimizer we have is badly named and it actually doesn't do optimizing (it's just some constant folding) and since the problem it supposed to be fixing shouldn't be handled like this, we could deprecate it and eventually remove it. This also implies the same modification in pylint, where the flag --optimize-ast is exposed.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/210
",start issue,Deprecate and remove astpeepholeoptimizer
1,issue_closed,210,pycqa,astroid,pylint-bot,2015-12-09 05:55:14,,closed issue,Deprecate and remove astpeepholeoptimizer
2,issue_comment,210,pycqa,astroid,pylint-bot,2015-11-12 15:12:46,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Remove the astpeephole

It was initially added in order to remove a recursion error in rebuilder, which
happened when a lot of strings were added together, leading to an
actual recursion error when executing the code. The peepholer was more
of a constant folding algorithm rather than a real peepholer. Since it's
purpose is limited and the original problem is not worth fixing in
astroid, but in the user code, this is removed.
Closes issue #210
",,
0,issue_title,77,pycqa,astroid,pylint-bot,2015-01-27 06:55:14,"Originally reported by: **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**

---

This file causes pylint to crash:

```
class C(object): pass                                                                                                                                  
class D(C, object): pass                                                                                                                               
class B(object, C): pass                                                                                                                               
class A(B, D): pass                                                                                                                                    
```

This is the trace:

```
  File ""/nail/home/buck/pg/3/virtualenv_run/lib/python2.6/site-packages/pylint/checkers/utils.py"", line 532, in unimplemented_abstract_methods
    mro = reversed(node.mro())
  File ""/nail/home/buck/pg/3/virtualenv_run/lib/python2.6/site-packages/astroid/scoped_nodes.py"", line 1459, in mro
    return _c3_merge(unmerged_mro)
  File ""/nail/home/buck/pg/3/virtualenv_run/lib/python2.6/site-packages/astroid/scoped_nodes.py"", line 77, in _c3_merge
    for subsequence in sequences]
ValueError: zero length field name in format
```

This example was made by repeatedly simplifying the inheritance structure of `sqlalchemy.Column`, which causes pylint to crash similarly:

```
from sqlalchemy import Column                                                                                                                          

Column()                                                                                                                                               
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/77
",start issue,error in mro
1,issue_closed,77,pycqa,astroid,pylint-bot,2015-12-09 05:52:58,,closed issue,error in mro
2,issue_comment,77,pycqa,astroid,pylint-bot,2015-01-27 06:19:20,"_Original comment by_ **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**:

---

Invalid. 

This was caused by my incomplete patch to re-add py26 support.
",,
0,issue_title,233,pycqa,astroid,pylint-bot,2015-10-28 04:43:43,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

The urlparse module in 2 was consolidated into the urllib module on Python 3.  I tried replacing urlparse with six.moves.urllib.urlparse.

``` python
result = test_utils.extract_node(""""""
import six

result = __(six.moves.urllib.parse.urlparse('gopher://'))
"""""")
```

This seems to work for now, but it's not exactly a clean test case, we should consider replacing it.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/233
",start issue,test_namedtuple_advanced_inference fails on Python 3 because urlparse no longer exists
1,issue_closed,233,pycqa,astroid,pylint-bot,2015-12-09 05:55:33,,closed issue,test_namedtuple_advanced_inference fails on Python 3 because urlparse no longer exists
2,issue_comment,233,pycqa,astroid,pylint-bot,2015-11-03 15:41:06,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Why should it be replaced? If it works with this change, that's great, but we shouldn't change old regression tests, unless it's absolutely necessary.
",,
3,issue_comment,233,pycqa,astroid,pylint-bot,2015-11-03 16:39:31,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

According to the comments, this is for testing the case where a class inherits from both a namedtuple and another class.  However, that's sensitive to the underlying implementation of urllib, so it's not good for testing namedtuple.  We should manufacture a test that explicitly tests namedtuple multiple inheritance.  If we're worried about urllib breaking, we should move this test somewhere else, maybe to a collection of tests explicitly for testing the stdlib?  However, this has been broken ever since Python 3.0 and as far as I know no one's complained about it, which makes me think it's not an issue...
",,
4,issue_comment,233,pycqa,astroid,pylint-bot,2015-11-03 17:34:02,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

It's mostly about testing that we don't broke urllib and it makes sense to be moved somewhere else. Also, the test was disabled on Python 3, so it's not a surprise that it was broken on Python 3.0.
",,
5,issue_comment,233,pycqa,astroid,pylint-bot,2015-11-06 23:49:30,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Changed in b68ee1186e5f.  This replaced urlparse with the appropriate six.moves module, but still depends on urllib's implementation.
",,
0,issue_title,9,pycqa,astroid,pylint-bot,2013-10-19 05:41:07,"Originally reported by: **Arfrever Frehtes Taifersar Arahesis (BitBucket: [arfrever](http://bitbucket.org/arfrever), GitHub: @arfrever?)**

---

unittest_regrtest.NonRegressionTC.test_numpy_crash() fails.
I use Astroid 1.0.1 and NumPy 1.8.0.

```
======================================================================
FAIL: test_numpy_crash (unittest_regrtest.NonRegressionTC)
test don't crash on numpy
----------------------------------------------------------------------
Traceback (most recent call last)
  File ""/usr/lib64/python2.7/site-packages/logilab/common/testlib.py"", line 661, in _proceed
    testfunc(*args, **kwargs)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'f_back', 'f_builtins', 'f_code', 'f_exc_traceback', 'f_exc_type', 'f_exc_value', 'f_globals', 'f_lasti', 'f_lineno', 'f_locals', 'f_restricted', 'f_trace'] == 'unittest_regrtest'

    ------------------------ local variables -------------------------
    args: ()
    kwargs: {}
    result: <logilab.common.testlib.SkipAwareTestResult run=4 errors=0 failures=0>
    self: <unittest_regrtest.NonRegressionTC testMethod=test_numpy_crash>
      self._TestCase__exc_info: <built-in function exc_info>
      self._TestCase__testMethodName: 'test_numpy_crash'
      self._cleanups: []
      self._current_test_descr: None
      self._options_: <Values at 0x1dde248: {'profile': None, 'skipped': None, 'tags_pattern': None, 'dbc': False, 'django': False, 'exitfirst': False, 'testdir': None, 'pdb': None, 'restart': False}>
      self._resultForDoCleanups: None
      self._testMethodDoc: ""test don't crash on numpy""
      self._testMethodName: 'test_numpy_crash'
      self._type_equality_funcs: {<type 'dict'>: 'assertDictEqual', <type 'set'>: 'assertSetEqual', <type 'list'>: 'assertListEqual', <type 'frozenset'>: 'assertSetEqual', <type 'unicode'>: 'assertMultiLineEqual', <type 'tuple'>: 'assertTupleEqual'}
    testfunc: <bound method NonRegressionTC.test_numpy_crash of <unittest_regrtest.NonRegressionTC testMethod=test_numpy_crash>>
    ------------------------------------------------------------------

  File ""/tmp/root/usr/lib64/python2.7/site-packages/astroid/test/unittest_regrtest.py"", line 136, in test_numpy_crash
    self.assertIsInstance(infered[0], Instance)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'f_back', 'f_builtins', 'f_code', 'f_exc_traceback', 'f_exc_type', 'f_exc_value', 'f_globals', 'f_lasti', 'f_lineno', 'f_locals', 'f_restricted', 'f_trace'] == 'unittest_regrtest'

    ------------------------ local variables -------------------------
    astroid: <Module(unittest_regrtest) l.0 [unittest_regrtest] at Ox2d55dd0>
    builder: <astroid.builder.AstroidBuilder object at 0x2d55b10>
    callfunc: <Name(multiply) l.4 [unittest_regrtest] at Ox2d55f10>
    data: '\nfrom numpy import multiply\n\nmultiply(1, 2, 3)\n'
    infered: [YES]
    numpy: <module 'numpy' from '/usr/lib64/python2.7/site-packages/numpy/__init__.pyc'>
    self: <unittest_regrtest.NonRegressionTC testMethod=test_numpy_crash>
      self._TestCase__exc_info: <built-in function exc_info>
      self._TestCase__testMethodName: 'test_numpy_crash'
      self._cleanups: []
      self._current_test_descr: None
      self._options_: <Values at 0x1dde248: {'profile': None, 'skipped': None, 'tags_pattern': None, 'dbc': False, 'django': False, 'exitfirst': False, 'testdir': None, 'pdb': None, 'restart': False}>
      self._resultForDoCleanups: None
      self._testMethodDoc: ""test don't crash on numpy""
      self._testMethodName: 'test_numpy_crash'
      self._type_equality_funcs: {<type 'dict'>: 'assertDictEqual', <type 'set'>: 'assertSetEqual', <type 'list'>: 'assertListEqual', <type 'frozenset'>: 'assertSetEqual', <type 'unicode'>: 'assertMultiLineEqual', <type 'tuple'>: 'assertTupleEqual'}
    ------------------------------------------------------------------

  File ""/usr/lib64/python2.7/site-packages/logilab/common/testlib.py"", line 1102, in assertIsInstance
    self.assertTrue(isinstance(obj, klass), msg)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'f_back', 'f_builtins', 'f_code', 'f_exc_traceback', 'f_exc_type', 'f_exc_value', 'f_globals', 'f_lasti', 'f_lineno', 'f_locals', 'f_restricted', 'f_trace'] == 'unittest_regrtest'

    ------------------------ local variables -------------------------
    klass: <class 'astroid.bases.Instance'>
    msg: ""YES is not an instance of <class 'astroid.bases.Instance'> but of <class 'astroid.bases._Yes'>""
    obj: YES
    self: <unittest_regrtest.NonRegressionTC testMethod=test_numpy_crash>
      self._TestCase__exc_info: <built-in function exc_info>
      self._TestCase__testMethodName: 'test_numpy_crash'
      self._cleanups: []
      self._current_test_descr: None
      self._options_: <Values at 0x1dde248: {'profile': None, 'skipped': None, 'tags_pattern': None, 'dbc': False, 'django': False, 'exitfirst': False, 'testdir': None, 'pdb': None, 'restart': False}>
      self._resultForDoCleanups: None
      self._testMethodDoc: ""test don't crash on numpy""
      self._testMethodName: 'test_numpy_crash'
      self._type_equality_funcs: {<type 'dict'>: 'assertDictEqual', <type 'set'>: 'assertSetEqual', <type 'list'>: 'assertListEqual', <type 'frozenset'>: 'assertSetEqual', <type 'unicode'>: 'assertMultiLineEqual', <type 'tuple'>: 'assertTupleEqual'}
    strict: False
    ------------------------------------------------------------------

  File ""/usr/lib64/python2.7/unittest/case.py"", line 424, in assertTrue
    raise self.failureException(msg)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'f_back', 'f_builtins', 'f_code', 'f_exc_traceback', 'f_exc_type', 'f_exc_value', 'f_globals', 'f_lasti', 'f_lineno', 'f_locals', 'f_restricted', 'f_trace'] == 'unittest_regrtest'

    ------------------------ local variables -------------------------
    expr: False
    msg: ""YES is not an instance of <class 'astroid.bases.Instance'> but of <class 'astroid.bases._Yes'>""
    self: <unittest_regrtest.NonRegressionTC testMethod=test_numpy_crash>
      self._TestCase__exc_info: <built-in function exc_info>
      self._TestCase__testMethodName: 'test_numpy_crash'
      self._cleanups: []
      self._current_test_descr: None
      self._options_: <Values at 0x1dde248: {'profile': None, 'skipped': None, 'tags_pattern': None, 'dbc': False, 'django': False, 'exitfirst': False, 'testdir': None, 'pdb': None, 'restart': False}>
      self._resultForDoCleanups: None
      self._testMethodDoc: ""test don't crash on numpy""
      self._testMethodName: 'test_numpy_crash'
      self._type_equality_funcs: {<type 'dict'>: 'assertDictEqual', <type 'set'>: 'assertSetEqual', <type 'list'>: 'assertListEqual', <type 'frozenset'>: 'assertSetEqual', <type 'unicode'>: 'assertMultiLineEqual', <type 'tuple'>: 'assertTupleEqual'}
    ------------------------------------------------------------------

AssertionError: YES is not an instance of <class 'astroid.bases.Instance'> but of <class 'astroid.bases._Yes'>

                              no stdout                               
                              no stderr                               
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/8
",start issue,unittest_regrtest.NonRegressionTC.test_numpy_crash() fails
1,issue_closed,9,pycqa,astroid,pylint-bot,2015-12-09 05:51:38,,closed issue,unittest_regrtest.NonRegressionTC.test_numpy_crash() fails
2,issue_comment,9,pycqa,astroid,pylint-bot,2013-10-25 14:15:45,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

anyone to confirm the pb occurs with numppy 1.8 but not previous version ? (I've only 1.7.1 there)
",,
3,issue_comment,9,pycqa,astroid,pylint-bot,2014-02-11 04:46:22,"_Original comment by_ **BitBucket: [idella5](http://bitbucket.org/idella5)**:

---

Yes; confirm;

Astroid 1.0.1,
numpy; Installed versions:  1.8.0

$ python -V
Python 2.7.6

/path/to/astroid-1.0.1/test $ PYTHONPATH=../build/lib/ pytest

yields

``` python
...F.S.
======================================================================
FAIL: test_numpy_crash (unittest_regrtest.NonRegressionTC)
test don't crash on numpy
----------------------------------------------------------------------
Traceback (most recent call last)
  File ""/usr/lib64/python2.7/site-packages/logilab/common/testlib.py"", line 664, in _proceed
    testfunc(*args, **kwargs)
  File ""/mnt/gen2/TmpDir/portage/dev-python/astroid-1.0.1/work/astroid-1.0.1/test/unittest_regrtest.py"", line 136, in test_numpy_crash
    self.assertIsInstance(infered[0], Instance)
  File ""/usr/lib64/python2.7/site-packages/logilab/common/testlib.py"", line 1105, in assertIsInstance
    self.assertTrue(isinstance(obj, klass), msg)
  File ""/usr/lib64/python2.7/unittest/case.py"", line 424, in assertTrue
    raise self.failureException(msg)
AssertionError: YES is not an instance of <class 'astroid.bases.Instance'> but of <class 'astroid.bases._Yes'>

                              no stdout                               
                              no stderr                               
```
",,
4,issue_comment,9,pycqa,astroid,pylint-bot,2014-07-25 13:28:41,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

It was fixed in the tip.
",,
0,issue_title,200,pycqa,astroid,pylint-bot,2015-09-29 22:27:36,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given the following code, astroid crashes with a KeyError. This is happening because Instance.getitem always wraps its arguments in a Const object, while sometimes it gets passed a slice object. It should use objects.Slice instead and probably it shouldn't do the wrapping itself, but the caller should be responsible for this.

```
#!python

from astroid.test_utils import extract_node
n = extract_node('''
class A:
   def __getitem__(self, k):       
       return k

A()[:42] #@

''')
print(next(n.infer()))
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/200
",start issue,KeyError when trying to infer what an instance's __getitem__ returns when called with a slice
1,issue_closed,200,pycqa,astroid,pylint-bot,2015-12-09 05:55:00,,closed issue,KeyError when trying to infer what an instance's __getitem__ returns when called with a slice
2,issue_comment,200,pycqa,astroid,pylint-bot,2015-10-03 14:44:56,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Don't wrap instance's arguments into a Const, instead let the original index object to be used.

This prevents a crash when the original index object is a slice object,
which was wrapped inadvertendly in a Const node, leading to a crash
later on if the said object was inferred. Closes issue #200.
",,
0,issue_title,6,pycqa,astroid,pylint-bot,2013-10-15 20:28:44,"Originally reported by: **Anonymous**

---

This would fix https://bitbucket.org/logilab/pylint/issue/93/pylint-crashes-on-namedtuple-attribute.

If you prefer to make a more minor update, this is the only change that's required, I believe:

https://bitbucket.org/logilab/astroid/commits/5ed6266cab789bc89d882444c938f03953491496

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/6
",start issue,Please update pyPI
1,issue_closed,6,pycqa,astroid,pylint-bot,2015-12-09 05:51:34,,closed issue,Please update pyPI
2,issue_comment,6,pycqa,astroid,pylint-bot,2013-10-15 18:29:18,"_Original comment by_ **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**:

---

Didn't mean to post anonymously. That was me.
",,
0,issue_title,12,pycqa,astroid,pylint-bot,2014-01-15 11:04:24,"Originally reported by: **Antony Lee (BitBucket: [anntzer](http://bitbucket.org/anntzer), GitHub: @anntzer?)**

---

With the current tip of astroid, pylint-python3 still warns about no-argument `super()` used on old-style classes, which is obviously wrong.  I guess this can be fixed by changing the check in `TreeRebuilder.visit_class` (`newnode._newstyle = metaclass in ('type', 'ABCMeta')`) to include also the case `sys.version_info > (3,)`.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/12
",start issue,Spurious old-style class warnings for Python 3
1,issue_closed,12,pycqa,astroid,pylint-bot,2015-12-09 05:51:43,,closed issue,Spurious old-style class warnings for Python 3
2,issue_comment,12,pycqa,astroid,pylint-bot,2014-01-15 10:26:12,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I'm interested in this issue, I'll have a look in the weekend. In the past I investigated this problem, the only things left after adding your suggested check was that there were warnings about missing **init** (no-init warning) and `.bases` didn't contain `object` for Python 3, which could potentially lead to some problems (like missing attributes? although I'm not certain if this is the case).
",,
3,issue_comment,12,pycqa,astroid,pylint-bot,2014-01-15 12:30:08,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

Claudiu, imo the pb is simply that 'newstyle' attribute should always be
true w/ Python3. At some point we may want to inject 'object' in the base
classes but that shouldn't be necessary at a first glance.
",,
4,issue_comment,12,pycqa,astroid,pylint-bot,2014-01-15 12:57:12,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Sure, agreed. I'll have a pull request ready in short time.
",,
5,issue_comment,12,pycqa,astroid,pylint-bot,2014-01-16 07:57:31,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Hello. Please see
https://bitbucket.org/logilab/astroid/pull-request/18/all-class-nodes-are-marked-as-new-style/diff. 
",,
6,issue_comment,12,pycqa,astroid,pylint-bot,2014-01-16 08:04:57,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

All class nodes are marked as new style classes for Py3k, closes #12.
",,
0,issue_title,71,pycqa,astroid,pylint-bot,2015-01-07 01:50:20,"Originally reported by: **François Mockers (BitBucket: [mockersf](http://bitbucket.org/mockersf), GitHub: @mockersf?)**

---

When I run pylint on :

```
#!python

from hashlib import sha1

sha1().block_size
```

I get the following error :

```
E:  3, 0: Instance of 'sha1' has no 'block_size' member (no-member)
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/71
",start issue,hashlib : block_size property is not recognized
1,issue_closed,71,pycqa,astroid,pylint-bot,2015-12-09 05:52:52,,closed issue,hashlib : block_size property is not recognized
0,issue_title,24,pycqa,astroid,pylint-bot,2014-03-25 04:11:30,"Originally reported by: **Choongmin Lee (BitBucket: [clee704](http://bitbucket.org/clee704), GitHub: @clee704?)**

---

```
#!python

from wtforms.form import Form
from astroid import MANAGER
MANAGER.ast_from_class(Form).newstyle
```

The last line returns `False`, although `wtforms.form.Form` is a new-style class.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/24
",start issue,Some new-style classes are reported as old-style
1,issue_closed,24,pycqa,astroid,pylint-bot,2015-12-09 05:51:56,,closed issue,Some new-style classes are reported as old-style
2,issue_comment,24,pycqa,astroid,pylint-bot,2014-04-08 11:21:46,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

resolved on astroid's tip
",,
0,issue_title,232,pycqa,astroid,pylint-bot,2015-10-28 01:52:09,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

With the changes I've made in this bookmark, the nodes representing None and dicts no longer have locals or instance_attrs attributes, so as written this test fails, and the situation that it's testing shouldn't be possible in the first place because there should no longer be external assignments to locals in astroid at all and only nodes with explicit need for instance_attrs should have that dictionary available.  What should I do with the test?

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/232
",start issue,[modular_locals bugs] test_inferred_dont_pollute changes
1,issue_closed,232,pycqa,astroid,pylint-bot,2015-12-09 05:55:33,,closed issue,[modular_locals bugs] test_inferred_dont_pollute changes
2,issue_comment,232,pycqa,astroid,pylint-bot,2015-10-28 07:39:52,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

It seems that with the current modular-locals this raises UnresolvableName, 

```
#!python

from astroid.test_utils import extract_node
n = extract_node('''
            def func(a=None):
                a.custom_attr = 0
                a #@
''')
print(next(n.infer()))
```

which seems like a regression and a bit weird to happen. If the object doesn't have a locals or instance_attrs, then whatever assignment computations we have, they should be ignored. Apart of this, the tests should be changed to see that a is still inferred, but has no attributes at all.
",,
3,issue_comment,232,pycqa,astroid,pylint-bot,2015-10-28 16:25:33,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

The UnresolvableName bug is a separate issue, this bookmark still has a lot of bugs.
",,
4,issue_comment,232,pycqa,astroid,pylint-bot,2015-11-03 15:35:43,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Still relevant? Seems to be changed in modular-locals.
",,
5,issue_comment,232,pycqa,astroid,pylint-bot,2015-11-03 21:57:00,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I fixed the bug that was causing the NameInferenceError.  Unfortunately, I now have new bugs :(.  At the moment, the new test is failing because with the new code, inference on the first Name.a node is returning ClassDef.NoneType (from the mock builtins) rather than NameConstant.None.  I'm not quite sure why this is.  Shouldn't inference return the object that the name is referring to, not its type?

``` python
        code = '''
        def func(a=None):
            a.custom_attr = 0
            a #@
        def func2(a={}):
            a.custom_attr = 0
            a #@
        '''
        name_nodes = test_utils.extract_node(code)
```
",,
6,issue_comment,232,pycqa,astroid,pylint-bot,2015-11-04 07:31:33,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

That's weird, because I get NameConstant instead when running the test.
",,
7,issue_comment,232,pycqa,astroid,pylint-bot,2015-11-04 15:38:03,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Oh, I see what's going on now: it is correctly returning NameConstant.None, it's that the custom **gettattr** on NameConstant (inherited from Const) is returning ClassDef.NoneType, which does have a locals attribute.  I fixed the test by reverting to use assertNotIn:

``` python
        code = '''
        def func(a=None):
            a.custom_attr = 0
            a #@
        def func2(a={}):
            a.custom_attr = 0
            a #@
        '''
        name_nodes = test_utils.extract_node(code)
        for node in name_nodes:
            self.assertNotIn('custom_attr', next(node.infer()).locals)
            self.assertNotIn('custom_attr', next(node.infer()).instance_attrs)
```

Here's hoping this is fixed for good and nothing will break when I fix the rest of the bugs.
",,
8,issue_comment,232,pycqa,astroid,pylint-bot,2015-11-04 16:03:11,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Fixed by 43cb866783ba, which changes the test to use assertNotIn to check that the locals and instance_attrs of ClassDef.NoneType are not changed.
",,
0,issue_title,291,pycqa,astroid,PCManticore,2015-12-12 17:00:11,"They share some common code through inheritance such as display_type and scope_lookup, leading to a weird ontology where a Lambda is an ancestor of a FunctionDef, while they should be in fact switched.

```
>>> node = FunctionDef()
>>> isinstance(node, Lambda) # should be false
>>> node = Lambda()
>>> isinstance(node, FunctionDef) # should be true
```
",start issue,Decouple FunctionDef from Lambda
1,issue_closed,291,pycqa,astroid,PCManticore,2016-01-03 15:15:12,,closed issue,Decouple FunctionDef from Lambda
0,issue_title,47,pycqa,astroid,pylint-bot,2014-08-25 11:59:39,"Originally reported by: **Okko Willeboordse (BitBucket: [owillebo](http://bitbucket.org/owillebo), GitHub: @owillebo?)**

---

pylint-script.py 1.3.1,
astroid 1.2.1, common 0.62.1
Python 2.7.8 (default, Jun 30 2014, 16:03:49) [MSC v.1500 32 bit (Intel)]

Linting following script;

```
#!python

'''Show pylint issue.'''
import PyQt4.QtGui
import PyQt4.QtCore

class MyList(PyQt4.QtGui.QListWidget):
  '''MyList'''
  item = False
  @PyQt4.QtCore.pyqtSlot()
  def mySlot(self):
    '''mySlot'''
    self.item = True
```

gives;

```
#!python

>pylint.bat ""gaiusbusgraphlegend.py"" ""--msg-template={path}:{line}:{column}: [{msg_id}] {msg}""
************* Module gaius.widgets.gaiusbusgraphlegend
gaiusbusgraphlegend.py:8:3: [E1101] Module 'PyQt4.QtCore' has no 'pyqtSlot' member
Traceback (most recent call last):
  File ""C:\Python27\lib\site-packages\astroid\scoped_nodes.py"", line 299, in getattr
    return [self.import_module(name, relative_only=True)]
  File ""C:\Python27\lib\site-packages\astroid\brain\py2gi.py"", line 125, in _new_import_module
    return _orig_import_module(self, modname, relative_only, level)
  File ""C:\Python27\lib\site-packages\astroid\scoped_nodes.py"", line 356, in import_module
    return MANAGER.ast_from_module_name(absmodname)
  File ""C:\Python27\lib\site-packages\astroid\manager.py"", line 134, in ast_from_module_name
    return self.ast_from_module(module, modname)
  File ""C:\Python27\lib\site-packages\astroid\manager.py"", line 189, in ast_from_module
    return AstroidBuilder(self).module_build(module, modname)
  File ""C:\Python27\lib\site-packages\astroid\builder.py"", line 103, in module_build
    node = self.inspect_build(module, modname=modname, path=path)
  File ""C:\Python27\lib\site-packages\astroid\raw_building.py"", line 232, in inspect_build
    self.object_build(node, module)
  File ""C:\Python27\lib\site-packages\astroid\raw_building.py"", line 276, in object_build
    class_node = object_build_class(node, member, name)
  File ""C:\Python27\lib\site-packages\astroid\raw_building.py"", line 141, in object_build_class
    basenames = [base.__name__ for base in member.__bases__]
TypeError: C++ type 'QWidget*' is not supported as  type
>Exit code: 2    Time: 5.101
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/47
",start issue,pylint crash on PyQt4
1,issue_closed,47,pycqa,astroid,pylint-bot,2015-12-09 05:52:25,,closed issue,pylint crash on PyQt4
2,issue_comment,47,pycqa,astroid,pylint-bot,2014-08-25 11:15:19,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

This is à long standing bug in PyQt, pylint can't do anything about it
without hardcoding support for it somewhere. The problem is that pyqt crash
upon introspection if QtCore isn't imported first.
",,
3,issue_comment,47,pycqa,astroid,pylint-bot,2014-08-25 12:19:23,"_Original comment by_ **Okko Willeboordse (BitBucket: [owillebo](http://bitbucket.org/owillebo), GitHub: @owillebo?)**:

---

Are you refering to http://www.logilab.org/57299?

There it is stated that it is importing QtCore first (before QtGui) that gives the problems.

Anyway, this issue is independent of the order in which PyQt4 components are imported.

It is an issue that arises with the latest pylint and libs.

With an older version;
pylint-script.py 1.2.1,
astroid 1.1.1, common 0.61.0
Python 2.7.8 (default, Jun 30 2014, 16:03:49) [MSC v.1500 32 bit (Intel)]

the issue does not occur.
",,
4,issue_comment,47,pycqa,astroid,pylint-bot,2014-08-25 12:35:20,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

I was indeed refering to this issue. Anyway, this remains a pyqt problem,
the fact that it occurs or not only depends on the level of introspection
done by pylint.
",,
5,issue_comment,47,pycqa,astroid,pylint-bot,2014-08-25 12:47:49,"_Original comment by_ **Okko Willeboordse (BitBucket: [owillebo](http://bitbucket.org/owillebo), GitHub: @owillebo?)**:

---

With pylint-script.py 1.2.1, astroid 1.2.X, common 0.62.1 Python 2.7.8 (default, Jun 30 2014, 16:03:49) [MSC v.1500 32 bit (Intel)] the problem also occurs.

It seems that with astroid 1.2.X this is broken.
",,
6,issue_comment,47,pycqa,astroid,pylint-bot,2014-10-04 13:50:05,"_Original comment by_ **Gary Oberbrunner (BitBucket: [garyo](http://bitbucket.org/garyo), GitHub: @garyo?)**:

---

Is there any workaround for this?  I can't pylint any of my pyqt code.
",,
7,issue_comment,47,pycqa,astroid,pylint-bot,2015-01-18 10:31:48,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I can't reproduce this on Windows, but the problem is somewhat alleviated by using Pylint 1.4 and the corresponding astroid, because since 1.4 we don't try to investigate objects / modules without an underlying source code, as it is the case for PyQt4, thus we don't instantiate them in a improper way. If this is required, pass the flag `--extension-pkg-whitelist=PyQt4` to pylint.
",,
0,issue_title,48,pycqa,astroid,pylint-bot,2014-09-11 19:04:08,"Originally reported by: **stone big (BitBucket: [stonebig](http://bitbucket.org/stonebig), GitHub: @stonebig?)**

---

Would it be possible to get a .whl universal package on Pypi ?

If I'm right, maybe over-simplifying,  it's just a matter of adding a setup.cfg file at root level with 

```
[wheel]
universal = 1
```

and then doing this to upload to pypi

```
python setup.py sdist bdist_wheel upload -r pypi
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/48
",start issue,Wheel packaging format for pypi.org
1,issue_closed,48,pycqa,astroid,pylint-bot,2015-12-09 05:52:26,,closed issue,Wheel packaging format for pypi.org
2,issue_comment,48,pycqa,astroid,pylint-bot,2014-10-16 06:29:20,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add support for the wheel format. Closes issue #48.
",,
3,issue_comment,48,pycqa,astroid,pylint-bot,2014-10-16 15:53:01,"_Original comment by_ **stone big (BitBucket: [stonebig](http://bitbucket.org/stonebig), GitHub: @stonebig?)**:

---

Hi Claudiu,

Thanks a lot !
",,
0,issue_title,58,pycqa,astroid,pylint-bot,2014-11-22 04:38:41,"Originally reported by: **Anonymous**

---

Because of use of print() function without using `from __future__ import print_function`:

```
$ mkvirtualenv xxx
New python executable in xxx/bin/python2.7
Also creating executable in xxx/bin/python
Installing setuptools, pip...done.

$ pip install astroid
Downloading/unpacking astroid
  Downloading astroid-1.3.1-py2.py3-none-any.whl (163kB): 163kB downloaded
Downloading/unpacking logilab-common>=0.60.0 (from astroid)
  Downloading logilab-common-0.63.0.tar.gz (195kB): 195kB downloaded
  Running setup.py (path:/Users/docker/.virtualenvs/xxx/build/logilab-common/setup.py) egg_info for package logilab-common

    package init file './test/__init__.py' not found (or not a regular file)
Downloading/unpacking six (from astroid)
  Downloading six-1.8.0-py2.py3-none-any.whl
Installing collected packages: astroid, logilab-common, six
Compiling /Users/docker/.virtualenvs/xxx/build/astroid/astroid/tests/testdata/python3/data/module.py ...
  File ""/Users/docker/.virtualenvs/xxx/build/astroid/astroid/tests/testdata/python3/data/module.py"", line 55
    print('yo', end=' ')
                   ^
SyntaxError: invalid syntax

Compiling /Users/docker/.virtualenvs/xxx/build/astroid/astroid/tests/testdata/python3/data/module2.py ...
  File ""/Users/docker/.virtualenvs/xxx/build/astroid/astroid/tests/testdata/python3/data/module2.py"", line 100
    print('bonjour', file=stream)
                         ^
SyntaxError: invalid syntax

  Running setup.py install for logilab-common
    package init file './test/__init__.py' not found (or not a regular file)
    package init file './test/__init__.py' not found (or not a regular file)
    changing mode of build/scripts-2.7/pytest from 644 to 755

    package init file './test/__init__.py' not found (or not a regular file)
    Installing /Users/docker/.virtualenvs/xxx/lib/python2.7/site-packages/logilab_common-0.63.0-py2.7-nspkg.pth
    changing mode of /Users/docker/.virtualenvs/xxx/bin/pytest to 755
    package init file './test/__init__.py' not found (or not a regular file)
Successfully installed astroid logilab-common six
Cleaning up...
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/58
",start issue,SyntaxError on install for python2
1,issue_closed,58,pycqa,astroid,pylint-bot,2015-12-09 05:52:40,,closed issue,SyntaxError on install for python2
2,issue_comment,58,pycqa,astroid,pylint-bot,2014-11-22 10:40:47,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

This is harmless, since the compile failures are in the test files. The installation does finish nonetheless.

I think we have code in pylint that disables compilation of test files, should be easy enough to adopt this in astroid.
",,
3,issue_comment,58,pycqa,astroid,pylint-bot,2014-11-22 14:05:59,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

Do not byte-compile test files on install. Fixes #58.
",,
4,issue_comment,58,pycqa,astroid,pylint-bot,2015-04-28 11:31:23,"_Original comment by_ **Davide Callegari (BitBucket: [brokenseal](http://bitbucket.org/brokenseal), GitHub: @brokenseal?)**:

---

I'm still having this issue with your latest version on pypi, when are you planning to update it?
Thanks.
",,
5,issue_comment,58,pycqa,astroid,pylint-bot,2015-04-29 06:47:23,"_Original comment by_ **Davide Callegari (BitBucket: [brokenseal](http://bitbucket.org/brokenseal), GitHub: @brokenseal?)**:

---

Guys, this error makes your library unusable, please update to a newer version on pypi, thanks.
",,
6,issue_comment,58,pycqa,astroid,pylint-bot,2015-04-29 07:04:15,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

What do you mean `unusable`? Those errors are only compile failures in the test files.
",,
7,issue_comment,58,pycqa,astroid,pylint-bot,2015-04-29 08:34:33,"_Original comment by_ **Davide Callegari (BitBucket: [brokenseal](http://bitbucket.org/brokenseal), GitHub: @brokenseal?)**:

---

Have you tried upgrading pylint with that compile failure?
Take a look:

```
#!bash

$ pylint --version
pylint 1.3.1,
astroid 1.3.2, common 0.63.0
Python 2.7.6 (default, Mar 22 2014, 22:59:56)
[GCC 4.8.2]
$ pip install pylint==1.4.3
[...]
 File ""[...]/astroid/astroid/tests/testdata/python3/data/module2.py"", line 100
    print('bonjour', file=stream)
                         ^
SyntaxError: invalid syntax

Successfully installed pylint astroid
Cleaning up...
$ pylint --version
pylint 1.3.1,
astroid 1.3.2, common 0.63.0
Python 2.7.6 (default, Mar 22 2014, 22:59:56)
[GCC 4.8.2]
```

It doesn't update it.
",,
8,issue_comment,58,pycqa,astroid,pylint-bot,2015-04-29 08:41:19,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I believe you have another problem there. Maybe you have two python versions and pip installs somewhere and pylint is somewhere else.
Here's what I have. As you can see and as the installation tells, astroid _succesfully_ installs, even though you see those compilation errors.

```
#!python

C:\Users\Claudiu>pip install pylint==1.3.1 astroid==1.3.2
Collecting pylint==1.3.1
  Downloading pylint-1.3.1.zip (471kB)
    100% |################################| 471kB 381kB/s
Collecting astroid==1.3.2
  Downloading astroid-1.3.2-py2.py3-none-any.whl (163kB)
    100% |################################| 167kB 368kB/s
Requirement already satisfied (use --upgrade to upgrade): logilab-common>=0.53.0
 in e:\projects\repos\logilab-common (from pylint==1.3.1)
Requirement already satisfied (use --upgrade to upgrade): six in c:\python34\lib
\site-packages (from astroid==1.3.2)
Requirement already satisfied (use --upgrade to upgrade): colorama in c:\python3
4\lib\site-packages (from logilab-common>=0.53.0->pylint==1.3.1)
Installing collected packages: astroid, pylint
  Running setup.py install for pylint
Successfully installed astroid-1.3.2 pylint-1.3.1

C:\Users\Claudiu>pylint --version
No config file found, using default configuration
pylint-script.py 1.3.1,
astroid 1.3.2, common 0.63.2
Python 3.4.2 (v3.4.2:ab2c023a9432, Oct  6 2014, 22:15:05) [MSC v.1600 32 bit (In
tel)]

C:\Users\Claudiu>pip install pylint==1.4.3
Collecting pylint==1.4.3
  Downloading pylint-1.4.3-py2.py3-none-any.whl (428kB)
    100% |################################| 430kB 470kB/s
Collecting astroid>=1.3.6 (from pylint==1.4.3)
  Downloading astroid-1.3.6-py2.py3-none-any.whl (182kB)
    100% |################################| 184kB 660kB/s
Requirement already satisfied (use --upgrade to upgrade): six in c:\python34\lib
\site-packages (from pylint==1.4.3)
Requirement already satisfied (use --upgrade to upgrade): logilab-common>=0.53.0
 in e:\projects\repos\logilab-common (from pylint==1.4.3)
Requirement already satisfied (use --upgrade to upgrade): colorama in c:\python3
4\lib\site-packages (from logilab-common>=0.53.0->pylint==1.4.3)
Installing collected packages: astroid, pylint
  Found existing installation: astroid 1.3.2
    Uninstalling astroid-1.3.2:
      Successfully uninstalled astroid-1.3.2
  Found existing installation: pylint 1.3.1
    Uninstalling pylint-1.3.1:
      Successfully uninstalled pylint-1.3.1
Successfully installed astroid-1.3.6 pylint-1.4.3

C:\Users\Claudiu>pylint --version
No config file found, using default configuration
pylint 1.4.3,
astroid 1.3.6, common 0.63.2
Python 3.4.2 (v3.4.2:ab2c023a9432, Oct  6 2014, 22:15:05) [MSC v.1600 32 bit (In
tel)]

```
",,
9,issue_comment,58,pycqa,astroid,pylint-bot,2015-04-29 12:03:17,"_Original comment by_ **Davide Callegari (BitBucket: [brokenseal](http://bitbucket.org/brokenseal), GitHub: @brokenseal?)**:

---

I see no compilation errors
",,
10,issue_comment,58,pycqa,astroid,pylint-bot,2015-04-29 12:05:59,"_Original comment by_ **Davide Callegari (BitBucket: [brokenseal](http://bitbucket.org/brokenseal), GitHub: @brokenseal?)**:

---

Oh, sorry, you mean my errors.
So, no, I double checked and everything comes from my local virtualenv.
",,
11,issue_comment,58,pycqa,astroid,pylint-bot,2015-04-29 12:11:50,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Could you verify what's the path of pylint and what's the path of pip?
",,
12,issue_comment,58,pycqa,astroid,pylint-bot,2015-04-29 14:10:50,"_Original comment by_ **Davide Callegari (BitBucket: [brokenseal](http://bitbucket.org/brokenseal), GitHub: @brokenseal?)**:

---

I verified pip, pylint and python paths and they all come from the same virtualenv.
",,
13,issue_comment,58,pycqa,astroid,pylint-bot,2015-04-30 08:56:23,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I really can't reproduce your case. Here's what I have in a virtualenv, as you can see, in the end astroid installs just fine.

```
#!python
(testpylint)devstack@ubuntu:~/test/$ pip install pylint==1.3.1
Downloading/unpacking pylint==1.3.1
  Downloading pylint-1.3.1.zip (471kB): 471kB downloaded
  Running setup.py (path:/home/devstack/test//testpylint/build/pylint/setup.py) egg_info for package pylint

    warning: no files found matching '*.html' under directory 'doc'
Downloading/unpacking logilab-common>=0.53.0 (from pylint==1.3.1)
  Downloading logilab-common-0.63.2.tar.gz (196kB): 196kB downloaded
  Running setup.py (path:/home/devstack/test//testpylint/build/logilab-common/setup.py) egg_info for package logilab-common
    /usr/lib/python2.7/distutils/dist.py:267: UserWarning: Unknown distribution option: 'test_require'
      warnings.warn(msg)

    package init file './test/__init__.py' not found (or not a regular file)
Downloading/unpacking astroid>=1.2.1 (from pylint==1.3.1)
  Downloading astroid-1.3.6-py2.py3-none-any.whl (182kB): 182kB downloaded
Downloading/unpacking six>=1.4.0 (from logilab-common>=0.53.0->pylint==1.3.1)
  Downloading six-1.9.0-py2.py3-none-any.whl
Installing collected packages: pylint, logilab-common, astroid, six
  Running setup.py install for pylint
    changing mode of build/scripts-2.7/pylint from 664 to 775
    changing mode of build/scripts-2.7/pylint-gui from 664 to 775
    changing mode of build/scripts-2.7/symilar from 664 to 775
    changing mode of build/scripts-2.7/epylint from 664 to 775
    changing mode of build/scripts-2.7/pyreverse from 664 to 775

    warning: no files found matching '*.html' under directory 'doc'
    changing mode of /home/devstack/test//testpylint/bin/pylint to 775
    changing mode of /home/devstack/test//testpylint/bin/pylint-gui to 775
    changing mode of /home/devstack/test//testpylint/bin/symilar to 775
    changing mode of /home/devstack/test//testpylint/bin/pyreverse to 775
    changing mode of /home/devstack/test//testpylint/bin/epylint to 775
    Installing pylint script to /home/devstack/test//testpylint/bin
    Installing epylint script to /home/devstack/test//testpylint/bin
    Installing pyreverse script to /home/devstack/test//testpylint/bin
    Installing pylint-gui script to /home/devstack/test//testpylint/bin
    Installing symilar script to /home/devstack/test//testpylint/bin
  Running setup.py install for logilab-common
    /usr/lib/python2.7/distutils/dist.py:267: UserWarning: Unknown distribution option: 'test_require'
      warnings.warn(msg)
    package init file './test/__init__.py' not found (or not a regular file)
    package init file './test/__init__.py' not found (or not a regular file)
    changing mode of build/scripts-2.7/pytest from 664 to 775

    package init file './test/__init__.py' not found (or not a regular file)
    Installing /home/devstack/test//testpylint/lib/python2.7/site-packages/logilab_common-0.63.2-py2.7-nspkg.pth
    changing mode of /home/devstack/test//testpylint/bin/pytest to 775
    package init file './test/__init__.py' not found (or not a regular file)
Compiling /home/devstack/test//testpylint/build/astroid/astroid/tests/testdata/python3/data/module.py ...
  File ""/home/devstack/test//testpylint/build/astroid/astroid/tests/testdata/python3/data/module.py"", line 55
    print('yo', end=' ')
                   ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/astroid/astroid/tests/testdata/python3/data/module2.py ...
  File ""/home/devstack/test//testpylint/build/astroid/astroid/tests/testdata/python3/data/module2.py"", line 100
    print('bonjour', file=stream)
                         ^
SyntaxError: invalid syntax

Successfully installed pylint logilab-common astroid six
Cleaning up...
(testpylint)devstack@ubuntu:~/test/$ pylint --version
Warning: option include-ids is deprecated and ignored.
Warning: option symbols is deprecated and ignored.
pylint 1.3.1,
astroid 1.3.6, common 0.63.2
Python 2.7.6 (default, Mar 22 2014, 22:59:56)
[GCC 4.8.2]
(testpylint)devstack@ubuntu:~/test/$ pip install astroid==1.3.2
Downloading/unpacking astroid==1.3.2
  Downloading astroid-1.3.2-py2.py3-none-any.whl (163kB): 163kB downloaded
Requirement already satisfied (use --upgrade to upgrade): logilab-common>=0.60.0 in ./testpylint/lib/python2.7/site-packages (from astroid==1.3.2)
Requirement already satisfied (use --upgrade to upgrade): six in ./testpylint/lib/python2.7/site-packages (from astroid==1.3.2)
Installing collected packages: astroid
  Found existing installation: astroid 1.3.6
    Uninstalling astroid:
      Successfully uninstalled astroid
Compiling /home/devstack/test//testpylint/build/astroid/astroid/tests/testdata/python3/data/module.py ...
  File ""/home/devstack/test//testpylint/build/astroid/astroid/tests/testdata/python3/data/module.py"", line 55
    print('yo', end=' ')
                   ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/astroid/astroid/tests/testdata/python3/data/module2.py ...
  File ""/home/devstack/test//testpylint/build/astroid/astroid/tests/testdata/python3/data/module2.py"", line 100
    print('bonjour', file=stream)
                         ^
SyntaxError: invalid syntax

Successfully installed astroid
Cleaning up...
(testpylint)devstack@ubuntu:~/test/$ pylint --version
Warning: option include-ids is deprecated and ignored.
Warning: option symbols is deprecated and ignored.
pylint 1.3.1,
astroid 1.3.2, common 0.63.2
Python 2.7.6 (default, Mar 22 2014, 22:59:56)
[GCC 4.8.2]
(testpylint)devstack@ubuntu:~/test/$ pip install pylint==1.4.3
Downloading/unpacking pylint==1.4.3
  Downloading pylint-1.4.3-py2.py3-none-any.whl (428kB): 428kB downloaded
Requirement already satisfied (use --upgrade to upgrade): six in ./testpylint/lib/python2.7/site-packages (from pylint==1.4.3)
Downloading/unpacking astroid>=1.3.6 (from pylint==1.4.3)
  Downloading astroid-1.3.6-py2.py3-none-any.whl (182kB): 182kB downloaded
Requirement already satisfied (use --upgrade to upgrade): logilab-common>=0.53.0 in ./testpylint/lib/python2.7/site-packages (from pylint==1.4.3)
Installing collected packages: pylint, astroid
  Found existing installation: pylint 1.3.1
    Uninstalling pylint:
      Successfully uninstalled pylint
Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/abstract_abc_methods.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/abstract_abc_methods.py"", line 6
    class Parent(object, metaclass=abc.ABCMeta):
                                  ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/abstract_class_instantiated_py2.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/abstract_class_instantiated_py2.py"", line 15
    class GoodClass(object, metaclass=abc.ABCMeta):
                                     ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/abstract_class_instantiated_py3.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/abstract_class_instantiated_py3.py"", line 14
    class GoodClass(object, metaclass=abc.ABCMeta):
                                     ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/abstract_method_py2.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/abstract_method_py2.py"", line 35
    class Structure(object, metaclass=abc.ABCMeta):
                                     ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/abstract_method_py3.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/abstract_method_py3.py"", line 35
    class Structure(object, metaclass=abc.ABCMeta):
                                     ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/class_members_py27.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/class_members_py27.py"", line 34
    class TestMetaclass(object, metaclass=ABCMeta):
                                         ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/class_members_py30.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/class_members_py30.py"", line 34
    class TestMetaclass(object, metaclass=ABCMeta):
                                         ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/no_name_in_module.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/no_name_in_module.py"", line 15
    print('hello world', file=sys.stdout)
                             ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/old_style_class_py27.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/old_style_class_py27.py"", line 10
    class NotOldStyle2(metaclass=type):
                                ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/raising_non_exception_py3.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/raising_non_exception_py3.py"", line 13
    raise Exc from missing # [raising-non-exception]
                 ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/unbalanced_tuple_unpacking_py30.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/unbalanced_tuple_unpacking_py30.py"", line 9
    first, second, *last = (1, 2, 3, 4)
                   ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/undefined_variable_py30.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/undefined_variable_py30.py"", line 8
    def test(self)->Undefined: # [undefined-variable]
                  ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/functional/yield_outside_func.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/functional/yield_outside_func.py"", line 2
    yield 1  # [yield-outside-function]
SyntaxError: 'yield' outside function

/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_assert_2uple.py:4: SyntaxWarning: assertion is always true, perhaps remove parentheses?
  assert (1 == 1, 2 == 2), ""no error""
/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_assert_2uple.py:5: SyntaxWarning: assertion is always true, perhaps remove parentheses?
  assert (1 == 1, 2 == 2) #this should generate a warning
/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_assert_2uple.py:7: SyntaxWarning: assertion is always true, perhaps remove parentheses?
  assert (1 == 1, ), ""no error""
/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_assert_2uple.py:8: SyntaxWarning: assertion is always true, perhaps remove parentheses?
  assert (1 == 1, )
/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_assert_2uple.py:9: SyntaxWarning: assertion is always true, perhaps remove parentheses?
  assert (1 == 1, 2 == 2, 3 == 5), ""no error""
/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_assert_2uple.py:11: SyntaxWarning: assertion is always true, perhaps remove parentheses?
  assert (True, 'error msg') #this should generate a warning
Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_bad_exception_context_py30.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_bad_exception_context_py30.py"", line 14
    raise IndexError from 1
                        ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_continue_not_in_loop.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_continue_not_in_loop.py"", line 8
    continue
SyntaxError: 'continue' not properly in loop

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_e0108.py ...
SyntaxError: duplicate argument '_' in function definition (func_e0108.py, line 4)

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_exec_used_py30.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_exec_used_py30.py"", line 6
    exec('a = 1', globals={})
                         ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_keyword_repeat.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_keyword_repeat.py"", line 8
    function_default_arg(two=5, two=7)
SyntaxError: keyword argument repeated

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_kwoa_py30.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_kwoa_py30.py"", line 3
    def function(*, foo):
                  ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_noerror_mcs_attr_access.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_noerror_mcs_attr_access.py"", line 14
    class Test(object, metaclass=Meta):
                                ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_noerror_unused_variable_py30.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_noerror_unused_variable_py30.py"", line 12
    nonlocal attr
                ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_return_outside_func.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_return_outside_func.py"", line 3
    return
SyntaxError: 'return' outside function

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_return_yield_mix_py_33.py ...
SyntaxError: 'return' with argument inside generator (func_return_yield_mix_py_33.py, line 8)

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_syntax_error.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_syntax_error.py"", line 1
    def toto
           ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_undefined_metaclass_var_py30.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_undefined_metaclass_var_py30.py"", line 8
    class Bad(metaclass=ABCMet):
                       ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_unused_import_py30.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_unused_import_py30.py"", line 10
    class Meta(metaclass=abc.ABCMeta):
                        ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_used_before_assignment_py30.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_used_before_assignment_py30.py"", line 10
    nonlocal cnt
               ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/func_w0705.py ...
  File ""/home/devstack/test//testpylint/build/pylint/pylint/test/input/func_w0705.py"", line 28
    __revision__ += 1
SyntaxError: default 'except:' must be last

Compiling /home/devstack/test//testpylint/build/pylint/pylint/test/input/syntax_error.py ...
Sorry: IndentationError: expected an indented block (syntax_error.py, line 2)
  Found existing installation: astroid 1.3.2
    Uninstalling astroid:
      Successfully uninstalled astroid
Compiling /home/devstack/test//testpylint/build/astroid/astroid/tests/testdata/python3/data/module.py ...
  File ""/home/devstack/test//testpylint/build/astroid/astroid/tests/testdata/python3/data/module.py"", line 55
    print('yo', end=' ')
                   ^
SyntaxError: invalid syntax

Compiling /home/devstack/test//testpylint/build/astroid/astroid/tests/testdata/python3/data/module2.py ...
  File ""/home/devstack/test//testpylint/build/astroid/astroid/tests/testdata/python3/data/module2.py"", line 100
    print('bonjour', file=stream)
                         ^
SyntaxError: invalid syntax

Successfully installed pylint astroid
Cleaning up...
(testpylint)devstack@ubuntu:~/test/$ pylint --version
Warning: option include-ids is deprecated and ignored.
Warning: option symbols is deprecated and ignored.
pylint 1.4.3,
astroid 1.3.6, common 0.63.2
Python 2.7.6 (default, Mar 22 2014, 22:59:56)
[GCC 4.8.2]
(testpylint)devstack@ubuntu:~/test/$


```
",,
14,issue_comment,58,pycqa,astroid,pylint-bot,2015-04-30 10:17:17,"_Original comment by_ **Davide Callegari (BitBucket: [brokenseal](http://bitbucket.org/brokenseal), GitHub: @brokenseal?)**:

---

Weird.
Anyway, since you actually fixed these issues, can you update the version you have on pypi? That would help.
",,
15,issue_comment,58,pycqa,astroid,pylint-bot,2015-05-14 15:55:17,"_Original comment by_ **BitBucket: [jakirkham](http://bitbucket.org/jakirkham), GitHub: @jakirkham?**:

---

I'm sorry to raise this back up again, but I don't understand how adding `from __future__ import print_function` would be harmful for the python 3 test data. I should say I am trying to install the latest version (1.3.6) and am still seeing the exact same issue as the OP.
",,
16,issue_comment,58,pycqa,astroid,pylint-bot,2015-05-14 16:34:48,"_Original comment by_ **BitBucket: [jakirkham](http://bitbucket.org/jakirkham), GitHub: @jakirkham?**:

---

If I clone the repo and use the latest version, I only see the first error. It appears someone patched the second one by using `__future__`. Patching the `module.py` file fixes the problem for me (patch below).

---

```
diff -r 2758935c62ca astroid/tests/testdata/python3/data/module.py
--- a/astroid/tests/testdata/python3/data/module.py Wed May 13 12:37:32 2015 +0300
+++ b/astroid/tests/testdata/python3/data/module.py Thu May 14 12:33:25 2015 -0400
@@ -1,3 +1,5 @@
+from __future__ import print_function
+
 """"""test module for astroid
 """"""
```
",,
0,issue_title,34,pycqa,astroid,pylint-bot,2014-06-11 17:54:08,"Originally reported by: **Emile Anclin (BitBucket: [anclin](http://bitbucket.org/anclin), GitHub: @anclin?)**

---

Hello, here is a patch for the infinite loop of Pyreverse (Pylint bug #4), with a non regression test. Probably it yields also some small performance improvement on bigger projects...

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/34
",start issue,[patch] fix infinite loop for Pylint bug #4 (Pyreverse)
1,issue_closed,34,pycqa,astroid,pylint-bot,2015-12-09 05:52:09,,closed issue,[patch] fix infinite loop for Pylint bug #4 (Pyreverse)
2,issue_comment,34,pycqa,astroid,pylint-bot,2014-08-20 14:12:52,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fix an infinite loop in the inference, by returning a copy of instance attributes, when calling 'instance_attr'. Closes issue #34 (patch by Emile Anclin).
",,
3,issue_comment,34,pycqa,astroid,pylint-bot,2014-08-20 14:13:25,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Thank you, Emile. I integrated the patch.
",,
0,issue_title,207,pycqa,astroid,pylint-bot,2015-10-06 23:38:16,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

The YES object represents some kind of indication that astroid's inference has failed, but the name gives no indication of this.  Since we already have an InferenceError, maybe InferenceFailure or some such?

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/207
",start issue,Rename YES to something more clearly describing its purpose
1,issue_closed,207,pycqa,astroid,pylint-bot,2015-12-09 05:55:06,,closed issue,Rename YES to something more clearly describing its purpose
2,issue_comment,207,pycqa,astroid,pylint-bot,2015-10-06 21:46:39,"_Original comment by_ **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**:

---

FWIW, in PEP 484 (type hints), the somewhat similar thing is called ""Any"". I don't like InferenceFailure personally, it sounds too much like an exception...

Maybe Uninferred or Uninferrable or Something/Object/Thing?
",,
3,issue_comment,207,pycqa,astroid,pylint-bot,2015-10-06 21:54:10,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

How about Anything? 
",,
4,issue_comment,207,pycqa,astroid,pylint-bot,2015-10-07 04:45:11,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

Any or Anything sound good
",,
5,issue_comment,207,pycqa,astroid,pylint-bot,2015-10-07 18:35:30,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Keep in mind that typing.Any represents a type, not a value, while inference returns, in general, values, as I understand it. This difference isn't always as well-defined in Python's type system as in others, because for instance classes, which are themselves types, are instances/values of metaclasses, but I think it's worth trying to keep this concept distinct from typing.Any. I'd prefer Undefined, Unknown, or Uninferrable.
",,
6,issue_comment,207,pycqa,astroid,pylint-bot,2015-10-07 19:15:11,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

Dunno ? :)
",,
7,issue_comment,207,pycqa,astroid,pylint-bot,2015-10-07 20:24:49,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I also think that it should not be named Any, since it will definitely cause confusion. From the other alternatives, I prefer Anything or Unknown / Uninferrable. I don't like Undefined because it's not clear what's undefined, the result of the inference or something in the inference chain. Uninferrable suggests that something can't be inferred and has a negative conotation, whilst Anything suggests the same (to me at least) but has a positive connotation (in the sense that the inference engine can say that Anything can happen when inferring this node).

So either Uninferrable or Anything, your pick, @ceridwenv :-)
",,
8,issue_comment,207,pycqa,astroid,pylint-bot,2015-10-10 17:02:06,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I was thinking further about typing in connection with this.  Type inference is really a form of a theorem prover about a program, proving either that the type of a return value is some type or that the types aren't consistent in the first place.  The Any type in the typing stdlib module is what's called a https://en.wikipedia.org/wiki/Top_type , a type that's a supertype of all other types.  However, I don't see how to provide inference results with relations like, ""is a subtype of"" or ""is a supertype of,"" so I think that conceptually astroid inference results are different from types.  Thus, my vote goes for Uninferable.  (Note: I think the spelling ""inferable"" is more standard, so I think we should spell it thus: http://www.merriam-webster.com/thesaurus/inferable .)
",,
9,issue_comment,207,pycqa,astroid,pylint-bot,2015-10-10 17:47:31,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Yes, we're more interested into what happens rather than what types are involved. I'm perfectly happy with Uninferable. The fix must leave YES as an alternative name to Uninferable, but it could mark it as deprecated. We'll remove YES in a couple of releases afterwards.
",,
10,issue_comment,207,pycqa,astroid,pylint-bot,2015-11-06 23:48:02,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Renamed in b68ee1186e5f.
",,
0,issue_title,54,pycqa,astroid,pylint-bot,2014-11-04 11:25:10,"Originally reported by: **Gilles Dartiguelongue (BitBucket: [EvaSDK](http://bitbucket.org/EvaSDK), GitHub: @EvaSDK?)**

---

With astroid 1.2.1 available from pypi, running pylint of some projects of my company work just fine but using changeset:   1273:4b36c6903a05 fails with:

```
Traceback (most recent call last):
  File ""/Users/gilles/devel/lib-ocs/venv/bin/pylint"", line 9, in <module>
    load_entry_point('pylint==1.3.1', 'console_scripts', 'pylint')()
  File ""/Users/gilles/devel/lib-ocs/venv/lib/python2.7/site-packages/pylint/__init__.py"", line 21, in run_pylint
    Run(sys.argv[1:])
[...]
  File ""/Users/gilles/devel/lib-ocs/venv/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1011, in ancestors
    for grandpa in baseobj.ancestors(True, context):
[...]
  File ""/Users/gilles/devel/lib-ocs/venv/lib/python2.7/site-packages/astroid/node_classes.py"", line 366, in _find_arg
    if isinstance(arg, Tuple):
RuntimeError: maximum recursion depth exceeded while calling a Python object
```

This seems reproducible on a couple of projects with a big enough code base.

I wrote a patch that works around the problem by creating a cache in `infer_stmts` but it makes unittests fail and I am not sure if this is the way to go at all.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/54
",start issue,Maximum recursion depth exceeded
1,issue_closed,54,pycqa,astroid,pylint-bot,2015-12-09 05:52:33,,closed issue,Maximum recursion depth exceeded
2,issue_comment,54,pycqa,astroid,pylint-bot,2014-11-04 10:27:46,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Do you have a small snippet that reproduces this problem?
",,
3,issue_comment,54,pycqa,astroid,pylint-bot,2014-11-04 11:13:38,"_Original comment by_ **Gilles Dartiguelongue (BitBucket: [EvaSDK](http://bitbucket.org/EvaSDK), GitHub: @EvaSDK?)**:

---

I looked up some publicly available project that shows the problem and found that flask-sqlalchemy has it:

```
$ git clone https://github.com/mitsuhiko/flask-sqlalchemy.git
$ virtualenv venv
$ . venv/bin/activate
$ pip install --process-dependency-links -e .
$ pip install pylint
$ pip uninstall astroid
$ pip install <path_to_astroid_clone>
$ pylint flask_sqlalchemy
```
",,
4,issue_comment,54,pycqa,astroid,pylint-bot,2014-11-09 12:44:00,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

I can't reproduce this with astroid & pylint HEAD as of right now, using flask_sqlalchemy.
",,
5,issue_comment,54,pycqa,astroid,pylint-bot,2014-11-09 21:34:49,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

It seems like the instructions for reproduction were incomplete. I was able to reproduce the crash with

```
#!python
import sqlalchemy
sqlalchemy.Table()
```

This is now fixed in https://bitbucket.org/logilab/astroid/commits/14ecf7228d27267773598a625e440a1de060e3dd
",,
6,issue_comment,54,pycqa,astroid,pylint-bot,2015-01-16 01:17:59,"_Original comment by_ **Yoni Ben-Meshulam (BitBucket: [bmesh](http://bitbucket.org/bmesh), GitHub: @bmesh?)**:

---

@torstenmarek can you comment as to which version the fix is in? I'm seeing a similar error when using astroid 1.3.2 and pylint 1.4.0. 
",,
7,issue_comment,54,pycqa,astroid,pylint-bot,2015-01-16 07:34:44,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Could you paste the traceback? Maybe it's some other error.
",,
8,issue_comment,54,pycqa,astroid,pylint-bot,2015-02-02 05:51:16,"_Original comment by_ **shrikant shinde (BitBucket: [shrikant_shinde](http://bitbucket.org/shrikant_shinde))**:

---

# pylint --version

No config file found, using default configuration
pylint 1.4.1,
astroid 1.3.4, common 0.63.2
Python 2.7.8 (default, Aug 29 2014, 22:18:20)
[GCC 4.8.2]

Issue is reproduced with this version when run pylint e.g. pylint test_script.py
This is reproducible with change dated 2014-11-10
",,
9,issue_comment,54,pycqa,astroid,pylint-bot,2015-02-02 08:46:57,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Yoni, could you give a small reproducible example for this crash?
",,
10,issue_comment,54,pycqa,astroid,pylint-bot,2015-04-17 15:10:49,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Closing until a reproducing case can be given. Notice that the latest astroid has some fixes regarding the same problem with other libraries, maybe they are related.
",,
0,issue_title,187,pycqa,astroid,pylint-bot,2015-09-14 12:11:54,"Originally reported by: **Marcus Bajohr (BitBucket: [antiphasis](http://bitbucket.org/antiphasis), GitHub: @antiphasis?)**

---

Setting up a new development computer with python 3.5 i stumpled upon the following error:

Using this trivial working valid python code file, name it dummy.py:

```
#!python

print(""test"")
```

testing it with `pylint dummy.py` causes this traceback: 

```
No config file found, using default configuration
Traceback (most recent call last):
  File ""c:\python35\lib\site-packages\pylint\lint.py"", line 910, in get_ast
    return MANAGER.ast_from_file(filepath, modname, source=True)
  File ""c:\python35\lib\site-packages\astroid\manager.py"", line 112, in ast_from_file
    return AstroidBuilder(self).file_build(filepath, modname)
  File ""c:\python35\lib\site-packages\astroid\builder.py"", line 134, in file_build
    module = self._data_build(data, modname, path)
  File ""c:\python35\lib\site-packages\astroid\builder.py"", line 177, in _data_build
    module = rebuilder.visit_module(node, modname, node_file, package)
  File ""c:\python35\lib\site-packages\astroid\rebuilder.py"", line 148, in visit_module
    newnode.body = [self.visit(child, newnode) for child in node.body]
  File ""c:\python35\lib\site-packages\astroid\rebuilder.py"", line 148, in <listcomp>
    newnode.body = [self.visit(child, newnode) for child in node.body]
  File ""c:\python35\lib\site-packages\astroid\rebuilder.py"", line 161, in visit
    return self._transform(visit_method(node, parent))
  File ""c:\python35\lib\site-packages\astroid\rebuilder.py"", line 427, in visit_discard
    newnode.value = self.visit(node.value, newnode)
  File ""c:\python35\lib\site-packages\astroid\rebuilder.py"", line 161, in visit
    return self._transform(visit_method(node, parent))
  File ""c:\python35\lib\site-packages\astroid\rebuilder.py"", line 331, in visit_callfunc
    if node.starargs is not None:
AttributeError: 'Call' object has no attribute 'starargs'
************* Module dummy
F:  1, 0: <class 'AttributeError'>: 'Call' object has no attribute 'starargs' (astroid-error)

```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/187
",start issue,'Call' object has no attribute 'starargs' (astroid-error)
1,issue_closed,187,pycqa,astroid,pylint-bot,2015-12-09 05:54:43,,closed issue,'Call' object has no attribute 'starargs' (astroid-error)
2,issue_comment,187,pycqa,astroid,pylint-bot,2015-09-14 10:39:12,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

astroid and pylint don't support Python 3.5 yet, I'm still working on this and it will be due soon, in a couple of weeks. In the mean time, you can test with the repository versions, but be aware that they aren't very stable.
",,
3,issue_comment,187,pycqa,astroid,pylint-bot,2015-09-14 11:08:35,"_Original comment by_ **Marcus Bajohr (BitBucket: [antiphasis](http://bitbucket.org/antiphasis), GitHub: @antiphasis?)**:

---

Ok, i'll give the repo versions a test. 

Would't it be useful to show a more prominent warning that as of now astroid isn't working with python 3.5? Because that's how i was trapped. No warning while installation via pip, no warning or information on the site - the only trace is issue #117
",,
4,issue_comment,187,pycqa,astroid,pylint-bot,2015-11-05 19:29:58,"_Original comment by_ **Robert Bruce (BitBucket: [robru](http://bitbucket.org/robru), GitHub: @robru?)**:

---

+1 for this, just got bit by this myself.

Ubuntu Xenial (16.04) will be shipping python 3.5 as the default python interpreter, so it would be great to get this fixed & packaged in Ubuntu at some point before April 2016.
",,
5,issue_comment,187,pycqa,astroid,pylint-bot,2015-11-11 15:33:20,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

We're working on releasing 1.4.0 with support for Python 3.5. The branch is here https://bitbucket.org/logilab/astroid/commits/branch/1.4.0, we're grafting non-controversial changes from the default branch until we're reaching a point where the branch is good to go for a release. It would be definitely sooner than April 2016, my expectation is that by the next week, we'll have it released.
",,
6,issue_comment,187,pycqa,astroid,pylint-bot,2015-11-29 13:48:51,"_Original comment by_ **BitBucket: [sandrotosi](http://bitbucket.org/sandrotosi), GitHub: @sandrotosi?**:

---

@PCManticore any update on this?
",,
7,issue_comment,187,pycqa,astroid,pylint-bot,2015-11-29 17:49:19,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Just released astroid 1.4.0 along with pylint 1.5.0.
",,
0,issue_title,56,pycqa,astroid,pylint-bot,2014-11-21 05:59:31,"Originally reported by: **Chris O'Hara (BitBucket: [chris6f](http://bitbucket.org/chris6f))**

---

I get the following error when using `astroid==1.3.0` but not with `astroid==1.2.1`

```
import MySQLdb
try:
    ...
except MySQLdb.IntegrityError:
   ...
```

```
Module 'MySQLdb' has no 'IntegrityError' member (no-member)
```

The `MySQLdb` module definitely does have the `IntegrityError` member

```
Python 2.7.8 (default, Oct 16 2014, 14:37:02) 
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.51)] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> from MySQLdb import IntegrityError
>>>
```

For reference:

```
pylint 1.3.1, 
astroid 1.3.0, common 0.63.0
Python 2.7.8 (default, Oct 16 2014, 14:37:02) 
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.51)]
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/56
",start issue,Pylint error with astroid==1.3.0 but not with 1.2.1
1,issue_closed,56,pycqa,astroid,pylint-bot,2015-12-09 05:52:36,,closed issue,Pylint error with astroid==1.3.0 but not with 1.2.1
2,issue_comment,56,pycqa,astroid,pylint-bot,2014-11-21 23:22:12,"_Original comment by_ **Lukas Solanka (BitBucket: [lsolanka](http://bitbucket.org/lsolanka), GitHub: @lsolanka?)**:

---

It looks like also the issue with using numpy functions has been re-introduced with 1.3.0

```
#!

$ pylint --version
pylint 1.3.1,
astroid 1.3.1, common 0.63.0
Python 2.7.8 (default, Aug 24 2014, 21:26:19)
[GCC 4.2.1 Compatible Apple LLVM 5.1 (clang-503.0.40)]
```

```
#!python
import numpy as np

a = np.arange(10)

```

```
#!
Module 'numpy' has no 'arange' member (no-member)
```

This does not happen with 1.2.1
",,
3,issue_comment,56,pycqa,astroid,pylint-bot,2014-11-22 10:43:13,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

astroid does not import C extension from outside the stdlib any more, since the only way to inspect them is to import them into the running interpreter. This has many sideeffects, because arbitrary code can run in extensions on import.

We could provide a whitelist that can be controlled by users to add trusted extensions. Thoughts?
",,
4,issue_comment,56,pycqa,astroid,pylint-bot,2014-11-22 10:47:32,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

See https://bitbucket.org/logilab/pylint/issue/347/please-either-disable-or-document-dynamic for the background.

```
#!python

>>> import numpy
>>> numpy.arange.__module__
'numpy.core.multiarray'
>>> sys.modules['numpy.core.multiarray']
<module 'numpy.core.multiarray' from '/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy/core/multiarray.so'>

```
",,
5,issue_comment,56,pycqa,astroid,pylint-bot,2014-11-22 11:57:50,"_Original comment by_ **Chris O'Hara (BitBucket: [chris6f](http://bitbucket.org/chris6f))**:

---

Ok, so using `from _mysql_exceptions import IntegrityError` gets rid of the warning.

I understand the reason for keeping pylint static, but can this be something that lives behind an option or flag? Pylint is telling me that my code is invalid and it isn't.
",,
6,issue_comment,56,pycqa,astroid,pylint-bot,2014-11-22 12:25:23,"_Original comment by_ **Lukas Solanka (BitBucket: [lsolanka](http://bitbucket.org/lsolanka), GitHub: @lsolanka?)**:

---

To me it seems like a flag would be a simpler option. That way there is no need to maintain a whitelist.
",,
7,issue_comment,56,pycqa,astroid,pylint-bot,2014-11-22 12:45:23,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

astroid will not maintain a whitelist itself. I'll add an API to astroid so clients can set a whitelist, and a flag to pylint that can be used to set it
",,
8,issue_comment,56,pycqa,astroid,pylint-bot,2014-11-22 13:52:35,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

Fixed. The next PyLint release will have flags to control the loading of C extensions.
",,
0,issue_title,61,pycqa,astroid,pylint-bot,2014-11-28 16:16:05,"Originally reported by: **BitBucket: [jcristau](http://bitbucket.org/jcristau), GitHub: @jcristau?**

---

in astroid 1.3.2:

```
======================  unittest_inference.py  =======================
...........................................................E............................
======================================================================
ERROR: test_mechanize_open (unittest_inference.InferenceTest)
----------------------------------------------------------------------
Traceback (most recent call last)
  File ""/usr/lib/python2.7/unittest/case.py"", line 332, in run
    testMethod()
  File ""/home/jcr/src/bitbucket/logilab/astroid/astroid/tests/unittest_inference.py"", line 986, in test_mechanize_open
    astroid = test_utils.build_string(data, __name__)
AttributeError: 'module' object has no attribute 'build_string'
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/61
",start issue,test failure: ERROR: test_mechanize_open (unittest_inference.InferenceTest)
1,issue_closed,61,pycqa,astroid,pylint-bot,2015-12-09 05:52:42,,closed issue,test failure: ERROR: test_mechanize_open (unittest_inference.InferenceTest)
0,issue_title,144,pycqa,astroid,pylint-bot,2015-07-03 15:26:29,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We could add some inference support for kwargs:

```
#!python

from astroid.test_utils import extract_node
n = extract_node('''
import time

def test(**kwargs):
    return dict(kwargs)
test(a=4, b=5) #@
''')
i = next(n.infer())
print(i.items) # prints an empty list, instead of Dict(a=4, b=5)
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/144
",start issue,Understand **kwargs
1,issue_closed,144,pycqa,astroid,pylint-bot,2015-12-09 05:54:05,,closed issue,Understand **kwargs
2,issue_comment,144,pycqa,astroid,pylint-bot,2015-09-10 22:03:37,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fixed by 0b422f439e36682228646743fe1891b08ab49295
",,
0,issue_title,19,pycqa,astroid,pylint-bot,2014-02-28 20:42:45,"Originally reported by: **David Shea (BitBucket: [davidshea](http://bitbucket.org/davidshea), GitHub: @davidshea?)**

---

For example, NetworkManager contains a class 80211ApFlags. Running pylint-1.1 on a file that contains

from gi.repository import NetworkManager

results in

Traceback (most recent call last):
  File ""/usr/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 284, in getattr
    return [self.import_module(name, relative_only=True)]
  File ""/usr/lib/python2.7/site-packages/astroid/brain/py2gi.py"", line 139, in _new_import_module
    astng = AstroidBuilder(MANAGER).string_build(modcode, modname)
  File ""/usr/lib/python2.7/site-packages/astroid/builder.py"", line 133, in string_build
    module = self._data_build(data, modname, path)
  File ""/usr/lib/python2.7/site-packages/astroid/builder.py"", line 146, in _data_build
    node = parse(data + '\n')
  File ""/usr/lib/python2.7/site-packages/astroid/builder.py"", line 39, in parse
    return compile(string, ""<string>"", 'exec', PyCF_ONLY_AST)
  File ""<string>"", line 364
    class 80211ApFlags(object):
              ^
SyntaxError: invalid syntax

The problem being that astroid attempts to generate python stubs for gi modules without checking whether the names are valid in python. Attaching a patch that fixes the problem by skipping such identifiers.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/19
",start issue,SyntaxError when examining gi modules containing identifiers not legal in python
1,issue_closed,19,pycqa,astroid,pylint-bot,2015-12-09 05:51:52,,closed issue,SyntaxError when examining gi modules containing identifiers not legal in python
2,issue_comment,19,pycqa,astroid,pylint-bot,2014-03-22 13:08:55,"_Original comment by_ **Cole Robinson (BitBucket: [crobinso](http://bitbucket.org/crobinso), GitHub: @crobinso?)**:

---

This patch should also remove the 'not name' and Iconv comment above, since it should catch that case as well.
",,
3,issue_comment,19,pycqa,astroid,pylint-bot,2014-03-31 22:03:01,"_Original comment by_ **Cole Robinson (BitBucket: [crobinso](http://bitbucket.org/crobinso), GitHub: @crobinso?)**:

---

David, I added your patch to a pull request against pylint-brain:

https://bitbucket.org/logilab/pylint-brain/pull-request/15/brain-couple-gobject-introspection-fixes/diff

However I can't close this bug...
",,
4,issue_comment,19,pycqa,astroid,pylint-bot,2014-04-08 10:11:23,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

backport gi related changes from pylint-brain, closes #19 and #22
",,
0,issue_title,241,pycqa,astroid,pylint-bot,2015-11-03 06:16:26,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

The lack of proper types in the builtins is causing lots of bugs in modular-locals, including #234, and at the moment, raw_building is already directly inserting a mock ClassDef node for types.GeneratorType into the AST.  I would like to add other builtin types to the builtin module, either in their own namespace (probably using a ClassDef node to hold them) or directly. The former has the advantage of more clearly separating which names are accessible in builtins versus which aren't but will require some changes to how lookups are handled, and because the lookup code is scattered across astroid, that could touch many locations.  Note that these types should be included in the builtins module because the Python interpreter identifies their module as builtins.

The types that have to be included are NotImplementedType, NoneType, and types.GeneratorType.  Other types we might include come from https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy and https://docs.python.org/3/library/types.html .  (We will almost certainly have to add a coroutine type at some point to handle Python 3.5 properly.)

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/241
",start issue,Adding types to the builtins mock AST
1,issue_closed,241,pycqa,astroid,pylint-bot,2015-12-09 05:55:41,,closed issue,Adding types to the builtins mock AST
2,issue_comment,241,pycqa,astroid,pylint-bot,2015-11-03 15:25:47,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I don't think the former case is worth it for now, we can let them be discoverable. This has the advantage that it simplifies the implementation and it can be used earlier, rather than trying to modify the lookup methods from all the place. 

I agree with all the types you mentioned, but could you also add FunctionType and MethodType for now? They'll greatly simplify the code for helpers.object_type, which in turn will help the efforts of removing the circular depedency (since currently it needs to depend on raw_building for building a dynamic class with the type of functions).
",,
3,issue_comment,241,pycqa,astroid,pylint-bot,2015-11-14 05:12:33,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Types added in 3e3b3e936b69.
",,
0,issue_title,92,pycqa,astroid,pylint-bot,2015-04-16 10:17:43,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We could understand the return value of a lambda or a function, where the value is nothing but the vararg of the function, if we have a context and a callcontext at our disposal. For instance, this code should yield (1, 2, 3), not [] as it is right now.

```
#!python

from astroid.builder import AstroidBuilder as ab
b = ab()
n = b.string_build('''
a = lambda *args: args
f = a(1, 2, 3)
''')
f = n['f']
print(next(f.infer()).elts) # returns []
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/92
",start issue,Understand lambda *args: args
1,issue_closed,92,pycqa,astroid,pylint-bot,2015-12-09 05:53:20,,closed issue,Understand lambda *args: args
2,issue_comment,92,pycqa,astroid,pylint-bot,2015-04-16 08:18:07,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

This will fix a false positive with this code:

```
#!python

from decimal import Decimal
d = Decimal(2)
a, b, c = d.as_tuple()

```

Pylint will emit an unbalanced-tuple-unpacking here, because it infers the fact that as_tuple returns an empty tuple.
",,
3,issue_comment,92,pycqa,astroid,pylint-bot,2015-09-10 22:02:25,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fixed by 0b422f439e36682228646743fe1891b08ab49295
",,
0,issue_title,181,pycqa,astroid,pylint-bot,2015-09-04 21:57:01,"Originally reported by: **Anonymous**

---

I have a line where I have a list of tuples and one of the elements of the tuple is an object which has a **str** conversion function. I think the most trenchant code for printing this for inspection is 

""\n"".join(["","".join(map(str,e))
              for e in list_of_tuples])

because join wants its list to consist of strings.

Using a list comprehension for this would probably look like

""\n"".join(["","".join([str(ee) for ee in e]) 
               for e in list_of_tuples])

But I haven't tried it because it's not economical compared to map.

I know I can disable bad built-in on the basis of an individual built-in. But bad-builtin is relevant for other choices between LC and map so I'm looking for something more subtle. I'm not opposed to LC's in general. As a newbie who has been exposed to FP I appreciate collection comprehensions and am delighted to use them. But map(str) should be considered a good idiom. If you set the criterion as allow builtins that transform a collection to the same collection maybe this is a worthwhile relaxation of the bad-builtin criteria

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/181
",start issue,bad builtin on map is not black-and-white
1,issue_closed,181,pycqa,astroid,pylint-bot,2015-12-09 05:54:38,,closed issue,bad builtin on map is not black-and-white
2,issue_comment,181,pycqa,astroid,pylint-bot,2015-09-10 21:57:37,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Hi,

Could you post the issue on pylint's tracker, please? https://bitbucket.org/logilab/pylint/
This issue tracker is for pylint's underlying AST and inference engine.
",,
0,issue_title,13,pycqa,astroid,pylint-bot,2014-01-18 11:36:22,"Originally reported by: **Nikolay Golub (BitBucket: [ngolub](http://bitbucket.org/ngolub))**

---

I've moved my project to python 3 and my tests, which using pylint and httpretty fails with this error:

File ""/usr/local/lib/python3.3/dist-packages/logilab/common/modutils.py"", line 297, in file_from_modpath
    return _file_from_modpath(modpath, path, context)`
  File ""/usr/local/lib/python3.3/dist-packages/logilab/common/modutils.py"", line 556, in _file_from_modpath
    mtype, mp_filename = _module_file(modpath, path)
  File ""/usr/local/lib/python3.3/dist-packages/logilab/common/modutils.py"", line 663, in _module_file
    data = stream.read(4096)
  File ""/usr/lib/python3.3/encodings/ascii.py"", line 26, in decode
    return codecs.ascii_decode(input, self.errors)[0]
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 133: ordinal not in range(128)

I've found, that if fails on httpretty module indexing, because it contains:
# #!/usr/bin/env python

# -_\- coding: utf-8 -_-

# <HTTPretty - HTTP client mock for Python>

# Copyright (C) <2011-2013>  Gabriel Falcão <...

Why pylint tries to decode utf-8 source as ascii?

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/13
",start issue,Python 3: Pylint can't check package source code in unicode format
1,issue_closed,13,pycqa,astroid,pylint-bot,2015-12-09 05:51:47,,closed issue,Python 3: Pylint can't check package source code in unicode format
2,issue_comment,13,pycqa,astroid,pylint-bot,2014-04-08 12:17:15,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

it sounds like this is because an `__init__.py` file contains non ascii string, and attempt to read its content by lgc.modutils fails in such case. This needs deeper investigation for a proper fix.
",,
3,issue_comment,13,pycqa,astroid,pylint-bot,2014-07-24 08:19:01,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I can't reproduce it using latest astroid / pylint. Also, pylint knows how to handle files in unicode format. Maybe you used an older version of astroid?
",,
4,issue_comment,13,pycqa,astroid,pylint-bot,2014-10-08 08:58:46,"_Original comment by_ **Duncan Booth (BitBucket: [duncan_booth](http://bitbucket.org/duncan_booth))**:

---

I came across this problem running pylint 1.3.1, astroid 1.2.1 (so the current versions) when running pylint over a package that depends on Unidecode 0.04.16.
The `Unidecode/__init__.py` file contains non-ascii characters.

This is not an issue when I run pylint from the bash shell with the environment variable `LANG=en_US.UTF-8`, however when run as a sub-process inside the editor I use, the editor sets `LANG=C` and that causes astroid to fail when attempting to read the non-ascii `__init__.py` file.

```
#!sh

(wyatt)duncan@ubuntu:~$ cat test.py
from unidecode import unidecode
(wyatt)duncan@ubuntu:~$ LANG=en_US.UTF-8 pylint test.py
No config file found, using default configuration
************* Module test
C:  1, 0: Missing module docstring (missing-docstring)
W:  1, 0: Unused import unidecode (unused-import)


Report
======
2 statements analysed.

Messages by category
--------------------

+-----------+-------+---------+-----------+
|type       |number |previous |difference |
+===========+=======+=========+===========+
|convention |1      |1        |=          |
+-----------+-------+---------+-----------+
|refactor   |0      |0        |=          |
+-----------+-------+---------+-----------+
|warning    |1      |1        |=          |
+-----------+-------+---------+-----------+
|error      |0      |0        |=          |
+-----------+-------+---------+-----------+



Messages
--------

+------------------+------------+
|message id        |occurrences |
+==================+============+
|unused-import     |1           |
+------------------+------------+
|missing-docstring |1           |
+------------------+------------+



Global evaluation
-----------------
Your code has been rated at 0.00/10 (previous run: 0.00/10, +0.00)

Duplication
-----------

+-------------------------+------+---------+-----------+
|                         |now   |previous |difference |
+=========================+======+=========+===========+
|nb duplicated lines      |0     |0        |=          |
+-------------------------+------+---------+-----------+
|percent duplicated lines |0.000 |0.000    |=          |
+-------------------------+------+---------+-----------+



External dependencies
---------------------
::

    unidecode (test)



Raw metrics
-----------

+----------+-------+-------+---------+-----------+
|type      |number |%      |previous |difference |
+==========+=======+=======+=========+===========+
|code      |2      |100.00 |2        |=          |
+----------+-------+-------+---------+-----------+
|docstring |0      |0.00   |0        |=          |
+----------+-------+-------+---------+-----------+
|comment   |0      |0.00   |0        |=          |
+----------+-------+-------+---------+-----------+
|empty     |0      |0.00   |0        |=          |
+----------+-------+-------+---------+-----------+



Statistics by type
------------------

+---------+-------+-----------+-----------+------------+---------+
|type     |number |old number |difference |%documented |%badname |
+=========+=======+===========+===========+============+=========+
|module   |1      |1          |=          |0.00        |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|class    |0      |0          |=          |0           |0        |
+---------+-------+-----------+-----------+------------+---------+
|method   |0      |0          |=          |0           |0        |
+---------+-------+-----------+-----------+------------+---------+
|function |0      |0          |=          |0           |0        |
+---------+-------+-----------+-----------+------------+---------+



(wyatt)duncan@ubuntu:~$ LANG= pylint test.py
No config file found, using default configuration
************* Module test
C:  1, 0: Missing module docstring (missing-docstring)
Traceback (most recent call last):
  File ""/home/duncan/.virtualenvs/wyatt/bin/pylint"", line 9, in <module>
    load_entry_point('pylint==1.3.1', 'console_scripts', 'pylint')()
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/site-packages/pylint/__init__.py"", line 21, in run_pylint
    Run(sys.argv[1:])
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/site-packages/pylint/lint.py"", line 991, in __init__
    linter.check(args)
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/site-packages/pylint/lint.py"", line 585, in check
    self.check_astroid_module(astroid, walker, rawcheckers, tokencheckers)
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/site-packages/pylint/lint.py"", line 662, in check_astroid_module
    walker.walk(astroid)
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/site-packages/pylint/utils.py"", line 804, in walk
    self.walk(child)
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/site-packages/pylint/utils.py"", line 801, in walk
    cb(astroid)
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/site-packages/pylint/checkers/imports.py"", line 270, in visit_from
    self._add_imported_module(node, '%s.%s' % (importedmodnode.name, name))
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/site-packages/pylint/checkers/imports.py"", line 304, in _add_imported_module
    importedmodname = get_module_part(importedmodname)
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/site-packages/astroid/modutils.py"", line 330, in get_module_part
    context_file=context_file)
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/site-packages/astroid/modutils.py"", line 275, in file_from_modpath
    return _file_from_modpath(modpath, path, context)
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/site-packages/astroid/modutils.py"", line 482, in _file_from_modpath
    mtype, mp_filename = _module_file(modpath, path)
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/site-packages/astroid/modutils.py"", line 603, in _module_file
    data = stream.read(4096)
  File ""/home/duncan/.virtualenvs/wyatt/lib/python3.4/encodings/ascii.py"", line 26, in decode
    return codecs.ascii_decode(input, self.errors)[0]
UnicodeDecodeError: 'ascii' codec can't decode byte 0xce in position 449: ordinal not in range(128)
(wyatt)duncan@ubuntu:~$ 

```
",,
5,issue_comment,13,pycqa,astroid,pylint-bot,2014-10-30 06:51:18,"_Original comment by_ **Vadim Markovtsev (BitBucket: [vmarkovtsev](http://bitbucket.org/vmarkovtsev), GitHub: @vmarkovtsev?)**:

---

I have this issue, too. It breaks my CI distributed builds in Jenkins.
Developers, do you know anything about default codecs? Let me explain you...

Usually, the default codec is utf-8 - in terminal, etc. This is why you are not able to reproduce the problem ""using latest astroid / pylint"".
But, consider the scenario when pylint is run through a non-interactive SSH session. Not OpenSSH, but things like Paramiko or JSCh. Why this is important, you would ask? Because, OpenSSH is smart enough to pass over environment variables like LC_* and LANG which define the locale **and default encoding** which python3 uses, but this is not the case with other dumb SSH clients.

When Python3 does not recognize a sane environment, it defaults to (tada!) ascii encoding. And (oh shit) even the following code will fail:

```
#!python
with open(""file_with_utf8_chars.txt"", ""r"") as f:
    mystr = f.read()
```

>  File ""/usr/lib/python3.4/encodings/ascii.py"", line 26, in decode
> 
>    return codecs.ascii_decode(input, self.errors)[0]
> 
>    UnicodeDecodeError: 'ascii' codec can't decode byte 0xc2 in position 50864: ordinal not in range(128)

Yes, this is bad, bad Python3 habit. And yes, many people complain about it, see e.g. [this link](http://lucumr.pocoo.org/2011/12/7/thoughts-on-python3/) (ctrl-f ssh).

How to reproduce it? Set the default encoding to ascii (LANG= as suggested by Duncan).

How to fix it? [Read the docs](https://docs.python.org/3/howto/unicode.html) and open('file', encoding='utf-8')
",,
6,issue_comment,13,pycqa,astroid,pylint-bot,2015-06-11 01:38:37,"_Original comment by_ **C N Kiser (BitBucket: [ckiser](http://bitbucket.org/ckiser))**:

---

I am still having this problem - because of Jenkins. On the server I can run pylint from the virtualenv my Jenkins server creates. Works fine if I am on the command line and fails when I try to execute the same command from Jenkins. Since I am building from a bash script, I can add `export LANG=en_US.UTF-8` to the script and it looks like that fixes the problem. But it would be great if this worked out of the box if possible.
",,
7,issue_comment,13,pycqa,astroid,pylint-bot,2015-06-11 04:19:42,"_Original comment by_ **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**:

---

> How to fix it? Read the docs and open('file', encoding='utf-8')

That's not really a good fix, IMHO. Just using UTF-8 is just a guess, like open without an encoding (i.e. the system's default encoding) is as well.

The real solution (if pylint doesn't yet) would be to use [tokenize.open](https://docs.python.org/3.4/library/tokenize.html#tokenize.open) on Python3, which detects the [PEP263](https://www.python.org/dev/peps/pep-0263/) encoding markers and opens the file correctly, even if it ends up having an `encoding: latin1` marker ;)

That being said, I have source files with UTF-8 in them, and I can run pylint on them just fine with `LANG=C` (pylint 1.4.3, astroid 1.3.6, common 0.63.2).
",,
0,issue_title,127,pycqa,astroid,pylint-bot,2015-06-20 15:09:20,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Currently, doing this will result in `module` having `print_function` as a local:

```
#!python

from __future__ import print_function
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/127
",start issue,__future__ statements should not be locals of the module
1,issue_closed,127,pycqa,astroid,pylint-bot,2015-12-09 05:53:51,,closed issue,__future__ statements should not be locals of the module
2,issue_comment,127,pycqa,astroid,pylint-bot,2015-07-07 09:00:33,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Actually it's not a problem at all, since print_function will be available as an object in that module.
",,
0,issue_title,176,pycqa,astroid,pylint-bot,2015-08-20 16:42:17,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

In debugging, I noticed that on Python 2 in certain circumstances it's possible for exceptions in the inference mechanisms to end up losing the traceback up to the point they're raised.  (Python3 always chains exceptions that are raised while processing another exception, I think.)  The best way I know of to do this is probably with six.reraise, but I'm open to other suggestions.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/176
",start issue,Preserve tracebacks on Python 2
1,issue_closed,176,pycqa,astroid,pylint-bot,2015-12-09 05:54:33,,closed issue,Preserve tracebacks on Python 2
2,issue_comment,176,pycqa,astroid,pylint-bot,2015-08-20 14:43:22,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

That sounds good, there are a lot of places where exceptions are reraised, without considering the loss of the traceback. 
",,
3,issue_comment,176,pycqa,astroid,pylint-bot,2015-08-20 14:50:46,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

I'm aware of `raise
ObjectNotFound(name).with_traceback(sys.exc_info()[-1])` (py3) or `raise
ObjectNotFound(name), None, sys.exc_info()[-1]` (py2)
",,
4,issue_comment,176,pycqa,astroid,pylint-bot,2015-09-05 14:31:56,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

My problem when attempting this has turned out to be that I don't understand the code paths well enough to know where exceptions can be raised ultimately within an `except` block.  I can simply try to change all the places where exceptions are being raised, or if anyone has more understanding of the code paths, I could try to focus on those.
",,
5,issue_comment,176,pycqa,astroid,pylint-bot,2015-09-05 15:02:17,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

We could focus only on the places where exceptions are being raised, since otherwise we might have tracebacks from the entire inference chain and I'm not sure how useful that would be. In that case, something as oslo.excutils.save_and_reraise_exception could be used: http://docs.openstack.org/developer/oslo.utils/api/excutils.html#oslo_utils.excutils.save_and_reraise_exception
",,
6,issue_comment,176,pycqa,astroid,pylint-bot,2015-09-26 12:36:05,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fixed by https://bitbucket.org/logilab/astroid/pull-requests/88/use-sixreraise-to-avoid-losing-tracebacks
",,
0,issue_title,7,pycqa,astroid,pylint-bot,2013-10-18 21:43:10,"Originally reported by: **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**

---

This simple script generates a (admittedly perverse) class which, when analyzed causes astroid to stack overflow.

http://paste.pound-python.org/show/HvGNK3BPWVkbqY1VAlyl/

If the number of methods is somewhat reduced, a huge running time is incurred instead, which is (for me) even worse. I'm trying to measure it, but currently it's ten minutes and counting.

Here is a trace of the inference being performed at the time of stack overflow:
http://paste.pound-python.org/show/QEm5Q15I1WMrHGnrWyqU/

This is a real issue for us as the cheetah templating framework generates code equivalent to the above. This causes pylint to be unusable to check these generated files. I do want to check these generated python files for issues, and pylint seems like the most full-featured tool available.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/7
",start issue,very long run time and/or stack overflow during inference
1,issue_closed,7,pycqa,astroid,pylint-bot,2015-12-09 05:51:36,,closed issue,very long run time and/or stack overflow during inference
2,issue_comment,7,pycqa,astroid,pylint-bot,2013-10-18 21:10:22,"_Original comment by_ **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**:

---

Profile of analysis of a similar class with just 14 methods, which takes 30 seconds.
",,
3,issue_comment,7,pycqa,astroid,pylint-bot,2013-10-18 21:11:28,"_Original comment by_ **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**:

---

The raw data which was used to generate the above image.
",,
4,issue_comment,7,pycqa,astroid,pylint-bot,2013-10-18 21:11:30,"_Original comment by_ **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**:

---

The raw data which was used to generate the above image.
",,
5,issue_comment,7,pycqa,astroid,pylint-bot,2013-10-28 16:40:28,"_Original comment by_ **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**:

---

As a minor update, my attempt to time the inference on the somewhat smaller class is still running, ten days later. The cputime is 9 days, 20:58:43. 

I'm killing it now. 
",,
6,issue_comment,7,pycqa,astroid,pylint-bot,2013-10-28 16:50:12,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

there is much probably an infinite loop somewhere which doesn't end into an
infinite recursion error and so ends endlessly.
",,
7,issue_comment,7,pycqa,astroid,pylint-bot,2013-10-28 19:07:07,"_Original comment by_ **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**:

---

My hypothesis is different: I believe it's tracing all the possible assignment paths in a permutative manner, yielding O(n^n) performance. With smaller numbers (3-10), it does complete, just exponentially slower for each new method.
",,
8,issue_comment,7,pycqa,astroid,pylint-bot,2014-03-12 01:12:44,"_Original comment by_ **BitBucket: [eevee](http://bitbucket.org/eevee), GitHub: @eevee?**:

---

I looked into this a bit in the course of trying to improve pylint performance on a large and terrible codebase.  :)

Buck is correct; this is equivalent to `O(n^n)`.  The following happens:
- Encounter `trans = self.transaction` in method 1.  Try to infer `self.transaction`.
- Encounter `self.transaction = trans` in method 1.  Infer `trans`.  Find `trans = self.transaction` in method 1.  Skip it because it's already being inferred.
- Encounter `self.transaction = trans` in method 2.  Infer `trans`.  Find `trans = self.transaction` in method 2.  Try to infer `self.transaction`.
- Encounter `self.transaction = trans` in method 1...

This repeats rather ridiculously.  Every assignment of `self.transaction` tries to infer from every assignment _to_ it.  Method 1 tries to infer from methods 2 through `n`, which each try to infer from methods 2 through `n` except themselves, etc.  So each of `n` methods tries to infer from `n` - 1 methods which try to infer from `n` - 2 methods, and so on, producing `O(n!)`.  It only terminates at all because the inference of a particular expression is prevented from inferring itself; otherwise method 1 would try to infer itself forever.

I think I have a small fix for this, which involves extending the existing recursive-inference protection to avoid inferring the same attribute on an instance of the same _class_ twice in the call stack.  I'll post it as soon as I figure out how to do that with hg and bitbucket.  :)
",,
9,issue_comment,7,pycqa,astroid,pylint-bot,2014-03-12 06:30:07,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

sounds good eevee, thanks !

don't hesitate to ask for help for submitting your patch.
",,
10,issue_comment,7,pycqa,astroid,pylint-bot,2014-03-12 16:36:56,"_Original comment by_ **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**:

---

+1 +1
",,
11,issue_comment,7,pycqa,astroid,pylint-bot,2014-03-12 16:40:50,"_Original comment by_ **Buck Evan (BitBucket: [bukzor](http://bitbucket.org/bukzor), GitHub: @bukzor?)**:

---

@eevee Put your diff on http://paste.pound-python.org/ if you're really stuck on bitbucket/hg.

This page always gives me enough information to do what I need with hg:  http://mercurial.selenic.com/wiki/GitConcepts#Command_equivalence_table
",,
12,issue_comment,7,pycqa,astroid,pylint-bot,2014-04-08 11:32:17,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

@eevee any update on this? Astroid should be released soon, it would be great if it could include a fix for this one.
",,
13,issue_comment,7,pycqa,astroid,pylint-bot,2014-04-08 19:32:50,"_Original comment by_ **BitBucket: [eevee](http://bitbucket.org/eevee), GitHub: @eevee?**:

---

Finally submitted pull request #28, which includes a commit to fix this issue.
",,
14,issue_comment,7,pycqa,astroid,pylint-bot,2014-04-09 06:15:00,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

Avoid recursively inferring the same attr on the same class. Closes #7
",,
0,issue_title,234,pycqa,astroid,pylint-bot,2015-10-29 15:38:22,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

Since I reworked the code for buiding ASTs from objects, the parent of the node corresponding to None is now an Assign node rather than the builtins module directly, which causes the second of the following asserts to fail.

``` python
    def assert_classes_equal(self, cls, other):
        self.assertEqual(cls.name, other.name)
        self.assertEqual(cls.parent, other.parent)
        self.assertEqual(cls.qname(), other.qname())
```

Since nodes will no longer hold their parents after the zipper patch, this test needs to be changed anyway.  This may need to be part of a more comprehensive change aimed at these temporary inference objects, since at the moment a ClassDef node that isn't an actual child of a module won't be able to calculate a qname at all, but for now I think removing the parent check is probably best since I'm going to have to revisit it anyway.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/234
",start issue,"[modular_locals bugs] unittest_helpers, test_object_type"
1,issue_closed,234,pycqa,astroid,pylint-bot,2015-12-09 05:55:34,,closed issue,"[modular_locals bugs] unittest_helpers, test_object_type"
2,issue_comment,234,pycqa,astroid,pylint-bot,2015-10-29 14:45:15,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

What do you mean that nodes will no longer hold their parents after the zipper patch, you mean that the parent attribute will not exist anymore? 
",,
3,issue_comment,234,pycqa,astroid,pylint-bot,2015-10-29 14:46:38,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Yes.
",,
4,issue_comment,234,pycqa,astroid,pylint-bot,2015-10-29 14:48:38,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Why? That's definitely not ideal, since it leads to a lot of breaking in the API. Wasn't the discussion about providing a property which does an underlying up() call?
",,
5,issue_comment,234,pycqa,astroid,pylint-bot,2015-10-29 14:59:13,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

To clarify my point: there _will_ be a parent property that does exactly that for nodes that are children of a parent node.  The problem is specifically limited to nodes that are created using helpers._build_proxy_class() or similar code.  At the moment, it's done like this:

``` python
def _build_proxy_class(cls_name, builtins):
    return nodes.ClassDef(name=cls_name, parent=builtins)
```

This creates a node with a reference to its parent but that's not a child of any other node at all.  With the zipper patch, parent will become a property and a node that's not the child of anything won't _have_ a parent.  My suggested solution, without having traced the use of nodes created by _build_proxy_class or similar code, is to create a special proxy object that has only the attributes that are being created in _build_proxy_class, since the ClassDef node that it's currently generating doesn't have most of the attributes of a real ClassDef node anyway.  If it's essential that it be a real ClassDef node, the only way to do it will be to be to change the parent too.
",,
6,issue_comment,234,pycqa,astroid,pylint-bot,2015-10-29 15:10:24,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

I don't know if that's essential, but it seems important that nodes created
from living object behave like any others so they have not te be specially
handled in pylint. In the case of ""fake"" ClassDefs that are injected in the
builtin module, it seems right to me that their parent is the 'builtin'
module. That being said, I've to admit I've not closely enough followed the
zipper thing to have a stronger opinion.
",,
7,issue_comment,234,pycqa,astroid,pylint-bot,2015-10-29 16:16:19,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I spent considerable effort in the raw_building changes to make sure the nodes built from live objects are the same as nodes constructed by using the builtin parser and then converting to an astroid AST.  I'm reasonably sure that the ASTs it makes now are accurate than before, and it's certainly true that I fixed bugs and corner cases where I know it wasn't working right: for instance, it crashed on most Python 3 standard library modules before, but now it doesn't.  The AST for the node for None in builtins is now this:

``` python
      Assign(
         targets=[AssignName(name='None')],
         value=Singleton(value=None)),
```

The Assign node is a child of the builtins Module node.

On this test, replacing parent with root() fixes the second assert but not the third.  This isn't really surprising to me:

``` python
>>> None.__qualname__
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
AttributeError: 'NoneType' object has no attribute '__qualname__'
```

What is object_type() used for?  This test is checking that builtin types are (very) loosely the same as stuff made by object_type, but by making raw_building more accurate I also made it so that object_type's output is no longer the same.
",,
8,issue_comment,234,pycqa,astroid,pylint-bot,2015-10-29 16:32:01,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

object_type is used to implement the `type` builtin, which means that it's used for inferring type calls, as well as used in a couple of other places in the inference.  

The tests verifies some assumption about what type(obj) will return, by verifying that they are roughly similar.  Now, not all capabilities are one to one mappings for their counterpart in Python, which is the case for qname, even though it None doesn't have `__qualname__`, we want to have a sanctioned way of retrieving the entire path to that object, which qname already does for us, so in this case I'm not sure we should remove it.

Another thing with the AST of None, I think it's not strictly the same as what would have happen if it where in pure Python, at least on Python 3 though, where you can't assign these names (None, True, False). This will cause problems for instance when trying to add a check in Python 2, in Pylint, for verifying that they are rebound to other objects, since now you don't know if they were written like this in the source code or if that's something that the underlying library does. I think for these objects (None, True, False, are there any other singleton objects) we should find another way to represent the AST. Not sure what though, maybe introducing another node, that represents a symbolic creation?
",,
9,issue_comment,234,pycqa,astroid,pylint-bot,2015-10-29 17:00:31,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Thanks.  Maybe instead of my asking and you replying here where no one will look for it, maybe I could just ask you to drop a quick docstring in the appropriate function?

I'm not sure I understand your comments about Python 2/3 and Pylint.  On Python 2, you _can_ assign to these special names, it's just a very bad idea.  Does Pylint not currently complain about this?  On Python 3, these are keywords so you can't assign to them.

I'm open to considering a different representation, but I'm not sure what either.  The singletons I know about are True, False, None, NotImplemented, and Ellipsis, which is special because it has its own syntactic form.  That said, if we're talking about special representations, we should probably also include GeneratorType, which is currently being inserted into the builtins module by hand, and ask if there are any other types that need handling. 
",,
10,issue_comment,234,pycqa,astroid,pylint-bot,2015-10-29 17:16:31,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Yes, please let me know where should I write it.

Nope, we currently have no check for this, but we should add one. 

Since I don't know any other project from where to take inspiration from, how about something like Symbol(name='None', value=Singleton(None))? When encountered, we'll know that it creates an unique object with that name and that value, which can never be reassigned. It shouldn't probably have any string representation, but I'm not sure right now what other restrictions should it have.

Yes, we could add more types, especially the ones created by object_type itself. Then, object_type could only retrieve the _proxied attribute of the said object (for instance, for FunctionDef it could retrieve a ClassDef(function), while this would be different for Bound and UnboundMethods). What do you think?
",,
11,issue_comment,234,pycqa,astroid,pylint-bot,2015-10-29 18:10:07,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Could you put what you said above about object_type's functionality in its docstring, please?

I think that your solution is good.  How about calling what you called Symbol ""Keyword,"" ""ReservedWord"", or ""ReservedName""?  The Python documentation calls reserved words keywords (see https://docs.python.org/2/library/keyword.html).  We could use NameConstant instead if we want consistency with the stdlib AST module.  Note that weirdly, Ellipsis and NotImplemented are not keywords on Python 3 though they should be.

I also like the idea of handling more of the types.  I'll have to think about how exactly to implement it though.
",,
12,issue_comment,234,pycqa,astroid,pylint-bot,2015-10-29 18:13:16,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Will do. NameConstant sounds the best, don't know how I omitted that. 
",,
13,issue_comment,234,pycqa,astroid,pylint-bot,2015-10-30 17:24:23,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

After I spent some time thinking about it, here's the fundamental problem with the way things are working at the moment: the _proxied attribute of nodes is supposed to point to another AST that represents the type of the object the node represents.  However, there don't exist ASTs representing all the types in builtins or anywhere else: for instance, NoneType and NotImplementedType.  Without an AST to proxy to, lookups can fail.  I think the best solution to this is to create a mapping of types to ASTs representing types.  Also, we should reconsider naming _proxied to something representing what it actually is, in this case, the type of the object the node represents.
",,
14,issue_comment,234,pycqa,astroid,pylint-bot,2015-11-03 21:33:33,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

When I was rewriting _object_type to use the new builtins AST (#241) , I noticed that there's a problem: the names of these types are different on different implementations while object_type hard-codes the CPython names for them.  My suggested fix is to call them by the names they're exported by in the types module, so FunctionType, MethodType, etc.  However, this causes the test_object_type and test_object_type_classes_and_functions tests to fail because they use introspection to find the intrinsic names of the types.  How should I change these tests to make sure they work in an implementation-independent way?
",,
15,issue_comment,234,pycqa,astroid,pylint-bot,2015-11-03 21:51:49,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Actually, the problem is worse than I realized: because Const._proxied is using introspection to look up the type name in the builtins mock AST, this also has to be changed.  Unfortunately, this is going to require a global solution.  We need to either create our own names for the types and use those consistently, or we need to use introspection consistently.  I can make a decision if you don't care, just tell me if I should go ahead.  Are there any other locations where things are using introspection to find type names or where type names are hard-coded?  I need to fix them all at the same time.
",,
16,issue_comment,234,pycqa,astroid,pylint-bot,2015-11-03 22:00:24,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

It seems to me that using introspection consistently would require less
work in the long run, but that's not a strong opinion.
",,
17,issue_comment,234,pycqa,astroid,pylint-bot,2015-11-04 07:39:46,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Using our own names for the types might be misleading, since they'll be different from Python. I also agree with Sylvain here, using introspection consistently might require less work in the long run. Why Const._proxied needs to be changed, though, if it needs introspection to look up the type name? Because they can be different on other implementations?
",,
18,issue_comment,234,pycqa,astroid,pylint-bot,2015-11-04 17:04:17,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I switched _object_type to use introspection in 43cb866783ba and changed the test.

```

    def test_object_type(self):
        pairs = [
            ('1', self._extract('int')),
            ('[]', self._extract('list')),
            ('{1, 2, 3}', self._extract('set')),
            ('{1:2, 4:3}', self._extract('dict')),
            ('type', self._extract('type')),
            ('object', self._extract('type')),
            ('object()', self._extract('object')),
            ('lambda: None', self._extract('function')),
            ('len', self._extract('builtin_function_or_method')),
            ('None', self._extract('NoneType')),
            ('import sys\nsys#@', self._extract('module')),
        ]
        for code, expected in pairs:
            node = test_utils.extract_node(code)
            objtype = helpers.object_type(node)
            self.assert_classes_equal(objtype, expected)
```

This is still not finished because it's using CPython names, and it's still failing with the following error:

``` python
ERROR: test_object_type_classes_and_functions (unittest_helpers.TestHelpers)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/home/cara/code/astroid/.tox/py34/lib/python3.4/site-packages/astroid/tests/unittest_helpers.py"", line 115, in test_object_type_classes_and_functions
    self.assert_classes_equal(node_type, expected_type)
  File ""/home/cara/code/astroid/.tox/py34/lib/python3.4/site-packages/astroid/tests/unittest_helpers.py"", line 47, in assert_classes_equal
    self.assertEqual(cls.name, other.name)
AttributeError: 'NoneType' object has no attribute 'name'
```

I honestly don't understand why.  I will have to investigate when I get back.
",,
19,issue_comment,234,pycqa,astroid,pylint-bot,2015-11-04 23:29:52,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Fixed by 04ecfa507e70: introspection is now used consistently in _object_type and the tests.
",,
0,issue_title,40,pycqa,astroid,pylint-bot,2014-07-25 11:02:41,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Reported by Ian Cordasco on pylint-brain project.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/40
",start issue,Support for python-requests
1,issue_closed,40,pycqa,astroid,pylint-bot,2015-12-09 05:52:14,,closed issue,Support for python-requests
2,issue_comment,40,pycqa,astroid,pylint-bot,2015-02-06 14:45:27,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I don't remember what exactly was the problem.
",,
0,issue_title,299,pycqa,astroid,opalmer,2015-12-21 15:49:25,"For some reason this code throws `assignment-from-no-return` on line 7 in Python 3.3:

``` python
""""""
Test module
""""""

from pkg_resources import resource_filename

PATH = resource_filename(""foo"", ""bar.py"")
```

I ran the above inside a clean virtual environment:

``` console
$ python3 --version
Python 3.4.3
$ virtualenv -p python3 /tmp/test
$ . /tmp/test/bin/activate
$ pip install pylint
$ pip freeze
astroid==1.4.2
colorama==0.3.5
lazy-object-proxy==1.2.1
pylint==1.5.2
six==1.10.0
wrapt==1.10.6
$ pylint -E test.py
No config file found, using default configuration
************* Module test
E:  7, 0: Assigning to function call which doesn't return (assignment-from-no-return)
```

For comparison with where I saw this problem originally, here's some of my code which up until yesterday didn't have problems:

https://github.com/opalmer/pywincffi/pull/33/files#diff-899a2c24db5c88e486a990d2702cf6c3R55

And here's the build on Travis which failed (prior to adding `disable=...`): https://travis-ci.org/opalmer/pywincffi/jobs/98052778

Here's the same code, but passing: https://travis-ci.org/opalmer/pywincffi/jobs/97980009

Based on the install output from line 97 downwards the above build used pylint 1.5.1 and astroid 1.4.1.  I thought this might be an issue with pylint but downgrading astroid to 1.4.1 seems to fix the issue:

``` console
$ pip install --upgrade astroid
...
Installing collected packages: astroid
  Found existing installation: astroid 1.4.1
    Uninstalling astroid-1.4.1:
      Successfully uninstalled astroid-1.4.1
Successfully installed astroid-1.4.2
$ pylint -E test.py
No config file found, using default configuration
************* Module test
E:  7, 0: Assigning to function call which doesn't return (assignment-from-no-return)
```

This appears to be a regression, but I'm not intimately familiar enought with either pylint or astroid enough to tell.  Could someone take a look?  I'd be happy to provide more detailed information too.

**UPDATE**: I rolled back astroid to 1.4.1 and kept pylint at the latest version, 1.5.2, and the build for  https://github.com/opalmer/pywincffi/compare/e85f28af3f6d...c6056b17ecf4, seems to pass: https://travis-ci.org/opalmer/pywincffi/builds/98140615
",start issue,New 'assignment-from-no-return' error for pkg_resources.resource_filename
1,issue_closed,299,pycqa,astroid,PCManticore,2015-12-29 15:09:06,,closed issue,New 'assignment-from-no-return' error for pkg_resources.resource_filename
2,issue_comment,299,pycqa,astroid,PCManticore,2015-12-21 15:57:33,"This is something that occurred during the patch release of astroid (1.4.2) and it's already fixed with https://github.com/PyCQA/astroid/commit/8715ea4491e435969d943918fb7a7bca9d95be28. I'm going to create another patch release tonight, sorry for the inconvenience.
",,
3,issue_comment,299,pycqa,astroid,opalmer,2015-12-21 15:58:36,"Ah ok cool, thanks!  I should have looked at the commit log before opening this heh.
",,
4,issue_comment,299,pycqa,astroid,PCManticore,2015-12-29 15:09:06,"This is fixed by astroid 1.4.3, I forgot to close the issue when it was released (for a couple of days now).
",,
5,issue_comment,299,pycqa,astroid,The-Compiler,2015-12-29 17:07:23,"I can confirm the fix - thanks!
",,
0,issue_title,57,pycqa,astroid,pylint-bot,2014-11-21 19:23:48,"Originally reported by: **Jace Browning (BitBucket: [jacebrowning](http://bitbucket.org/jacebrowning), GitHub: @jacebrowning?)**

---

I just started getting this crash after updating asteroid to 1.3.0 from 1.2.1:

```
#!shell

pylint yorm --rcfile=.pylintrc
Traceback (most recent call last):
  File ""env/bin/pylint"", line 9, in <module>
    load_entry_point('pylint==1.3.1', 'console_scripts', 'pylint')()
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/pylint/__init__.py"", line 21, in run_pylint
    Run(sys.argv[1:])
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/pylint/lint.py"", line 991, in __init__
    linter.check(args)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/pylint/lint.py"", line 585, in check
    self.check_astroid_module(astroid, walker, rawcheckers, tokencheckers)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/pylint/lint.py"", line 662, in check_astroid_module
    walker.walk(astroid)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/pylint/utils.py"", line 804, in walk
    self.walk(child)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/pylint/utils.py"", line 801, in walk
    cb(astroid)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/pylint/checkers/variables.py"", line 756, in visit_import
    module = next(node.infer_name_module(parts[0]))
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/astroid/bases.py"", line 110, in cache_generator
    for result in generator:
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/astroid/bases.py"", line 341, in wrapped
    for res in _func(node, context, **kwargs):
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/astroid/inference.py"", line 212, in infer_import
    yield self.do_import_module(lookupname)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/astroid/mixins.py"", line 107, in do_import_module
    return mymodule.import_module(modname, level=level)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/astroid/scoped_nodes.py"", line 361, in import_module
    return MANAGER.ast_from_module_name(absmodname)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/astroid/manager.py"", line 147, in ast_from_module_name
    return self.ast_from_file(filepath, modname, fallback=False)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/astroid/manager.py"", line 109, in ast_from_file
    return AstroidBuilder(self).file_build(filepath, modname)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/astroid/builder.py"", line 134, in file_build
    module = self._data_build(data, modname, path)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/astroid/builder.py"", line 177, in _data_build
    module = rebuilder.visit_module(node, modname, node_file, package)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/astroid/rebuilder.py"", line 148, in visit_module
    return self._transform(newnode)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/astroid/manager.py"", line 324, in transform
    ret = transform_func(node)
  File ""/Users/Browning/Programs/YORM/env/lib/python3.4/site-packages/astroid/__init__.py"", line 115, in transform
    for name, obj in extension_module.locals.items():
AttributeError: 'NoneType' object has no attribute 'locals'
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/57
",start issue,AttributeError: 'NoneType' object has no attribute 'locals' (new in 1.3.0)
1,issue_closed,57,pycqa,astroid,pylint-bot,2015-12-09 05:52:38,,closed issue,AttributeError: 'NoneType' object has no attribute 'locals' (new in 1.3.0)
2,issue_comment,57,pycqa,astroid,pylint-bot,2014-11-21 18:24:27,"_Original comment by_ **Jace Browning (BitBucket: [jacebrowning](http://bitbucket.org/jacebrowning), GitHub: @jacebrowning?)**:

---

Downgrading astroid to 1.2.1 let's pylint run again.
",,
3,issue_comment,57,pycqa,astroid,pylint-bot,2014-11-21 21:53:19,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

Duplicate of #55.
",,
4,issue_comment,57,pycqa,astroid,pylint-bot,2014-11-21 21:53:49,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

Fixed in 1.3.1.
",,
5,issue_comment,57,pycqa,astroid,pylint-bot,2014-11-21 22:39:56,"_Original comment by_ **Jace Browning (BitBucket: [jacebrowning](http://bitbucket.org/jacebrowning), GitHub: @jacebrowning?)**:

---

I confirm this is working in 1.3.1.
",,
0,issue_title,2,pycqa,astroid,pylint-bot,2013-08-06 18:01:20,"Originally reported by: **BitBucket: [languitar](http://bitbucket.org/languitar), GitHub: @languitar?**

---

With setuptools (not with pip) it is currently impossible to install astroid:

```
#!bash

jwienke@precise32:~$ easy_install --user --upgrade astroid
Searching for astroid
Reading http://pypi.python.org/simple/astroid/
Best match: astroid 1.0.0
Downloading https://pypi.python.org/packages/source/a/astroid/astroid-1.0.0.tar.gz#md5=e74430dfbbe09cd18ef75bd76f95425a
Processing astroid-1.0.0.tar.gz
Running astroid-1.0.0/setup.py -q bdist_egg --dist-dir /tmp/easy_install-uAX2Tf/astroid-1.0.0/egg-dist-tmp-KtVD7N
package init file './test/__init__.py' not found (or not a regular file)
package init file './test/__init__.py' not found (or not a regular file)
package init file './test/__init__.py' not found (or not a regular file)
Creating missing __init__.py for astroid.test
zip_safe flag not set; analyzing archive contents...
astroid.raw_building: module references __file__
astroid.raw_building: module references __path__
astroid.builder: module references __file__
astroid.manager: module references __file__
astroid.scoped_nodes: module references __file__
astroid.scoped_nodes: module references __path__
astroid.__init__: module references __file__
astroid.test.unittest_regrtest: module references __file__
astroid.test.unittest_lookup: module references __file__
astroid.test.unittest_lookup: module references __path__
astroid.test.unittest_builder: module references __file__
astroid.test.unittest_builder: module references __path__
astroid.test.unittest_inference: module references __file__
astroid.test.unittest_utils: module references __file__
astroid.test.unittest_nodes: module references __file__
astroid.test.unittest_scoped_nodes: module references __file__
astroid.test.unittest_scoped_nodes: module references __path__
astroid.test.unittest_inspector: module references __file__
astroid.test.unittest_manager: module references __file__
Adding astroid 1.0.0 to easy-install.pth file

Installed /home/jwienke/.local/lib/python2.7/site-packages/astroid-1.0.0-py2.7.egg
Processing dependencies for astroid
Searching for logilab-common>=0.60.0
Reading http://pypi.python.org/simple/logilab-common/
No local packages or download links found for logilab-common>=0.60.0
error: Could not find suitable distribution for Requirement.parse('logilab-common>=0.60.0')
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/2
",start issue,Installation broken under setuptools
1,issue_closed,2,pycqa,astroid,pylint-bot,2015-12-09 05:51:27,,closed issue,Installation broken under setuptools
2,issue_comment,2,pycqa,astroid,pylint-bot,2013-08-07 00:01:47,"_Original comment by_ **BitBucket: [sontek](http://bitbucket.org/sontek), GitHub: @sontek?**:

---

I just ran into this as well.   Astroid is requiring a version of logilab-common that does not exist on pypi.
",,
0,issue_title,286,pycqa,astroid,PCManticore,2015-12-11 15:25:52,"The master branch has quite a lot of bugs caused by a buggy implementation of raw_building. This was completely rewritten by @ceridwen in the modular-locals bookmark, which got merged in 2.0. Unfortunately, b3d48abbdf673697977f59c5476008a85acb1e27 started to uncover some of these bugs in the master branch, as you can see from this Travis build https://travis-ci.org/PyCQA/astroid/jobs/96256817. What's happening is that raw_building will happily construct nodes such as List, Tuple or Set with with composite sequences, such as list of tuples, without converting the inner elements to AST nodes, resulting in a mixture of nodes and Python object. I plan to add a hack for solving this temporarily, so that master branch could be used again.

My question is though what should happen with master during astroid 1.5.0 lifetime, since the changes from modular-locals should mean that we will not have this problem any longer. Here's a couple of things we could do:
- bring the changes from modular-locals into master, which will be released as astroid 1.5.0. This mean that we should restrict ourselves only to the changes made in raw_building.py, so patching .locals should still work and stuff like that.
- kill the plan to release 1.5.0 altogether, merge master with 2.0 and launch it when it's done. We could do small astroid releases for removing deprecated things.

cc @The-Compiler @ceridwen 
",start issue,Should raw_building from 2.0 be included in 1.5?  Should there be a 1.5?
1,issue_closed,286,pycqa,astroid,PCManticore,2016-01-28 16:46:42,,closed issue,Should raw_building from 2.0 be included in 1.5?  Should there be a 1.5?
2,issue_comment,286,pycqa,astroid,ceridwen,2015-12-11 22:28:17,"I don't know how easy moving the changes to raw_building into master will be, astroid's code in general is strongly-coupled.  I've been working to try to fix this, and I think one of our major targets in 2.0 should be to decouple the components more and improve the grouping of related code to make future moves like this easier.

I think the question of if we need an astroid 1.5 depends on how long it takes to release 2.0.  At the moment, assuming we can put together a release next spring, I'd be inclined against it.  If we expect astroid 2.0 to take much longer than that, though, we might consider releasing 1.5.  I'm not sure where the cutoff is---astroid 1.4 took a year, IIRC?  If it happens, astroid 1.5 is probably going to involve backporting more major fixes from 2.0, because we're hitting the point where many of these bugs can't be easily fixed by small changes.
",,
3,issue_comment,286,pycqa,astroid,PCManticore,2015-12-11 23:30:33,"Yeah, astroid 1.4.0 is or should be the outlier here. Its delay was a combination of circumstances, starting from too many features added to pylint and astroid, too many bugs generated by these features and lack of time on my side in certain months. Ideally, it would have been released in June, but rolling new features into pylint and astroid delayed it until the end of the year.

Anyway, waiting one year for 2.0 for instance is not very good, the idea being to push changes to the users that actually make a difference for them, without being locked by a never-ending design phase. My plan is to have 2.0 out by march-april at best, even if it will require to reduce the feature set.

So this means that if you agree and if this sounds good to you as well, that master and 2.0 should be merged together, at least as soon as you consider 2.0 stable with regard to modular-locals changes. Other minor releases could be cherry-picked from it, as it was done for astroid 1.4.0.
",,
4,issue_comment,286,pycqa,astroid,PCManticore,2016-01-25 11:29:37,"Most likely no. But after it gets stable, I'd like to integrate it in master and make master 2.0. 
",,
5,issue_comment,286,pycqa,astroid,PCManticore,2016-01-28 16:46:42,"Closing since we know already what we have to do: 2.0 will get merged into master when it gets stable, there won't be any new minor release (meaning no astroid 1.5, but we'll go straight to 2.0).
",,
0,issue_title,292,pycqa,astroid,ceridwen,2015-12-12 17:09:00,"The classes in mixins.py are only used for the various node classes, so they should be in tree/ with the other AST-specific classes.  Alternately, we could break up the mixins into the modules where they're used---I still think that modules should be structured by functionality, in this case AST nodes, rather than by implementation, in this case classes intended to be used as mixins.
",start issue,Move mixins to tree/ or eliminate it
1,issue_closed,292,pycqa,astroid,PCManticore,2016-01-02 20:47:04,,closed issue,Move mixins to tree/ or eliminate it
0,issue_title,30,pycqa,astroid,pylint-bot,2014-05-02 08:23:52,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We should probably add function annotation support in astroid. Right now this information is lost after rebuilding and makes fixing issues like https://bitbucket.org/logilab/pylint/issue/143/spurious-unused-import-warning-when difficult or impossible.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/30
",start issue,function annotation support
1,issue_closed,30,pycqa,astroid,pylint-bot,2015-12-09 05:52:05,,closed issue,function annotation support
2,issue_comment,30,pycqa,astroid,pylint-bot,2014-07-13 19:46:00,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Solved by 115d966.
",,
0,issue_title,65,pycqa,astroid,pylint-bot,2014-12-07 00:26:53,"Originally reported by: **BitBucket: [jquast](http://bitbucket.org/jquast), GitHub: @jquast?**

---

This reported duplicated from another project, https://github.com/landscapeio/prospector/issues/73#issuecomment-65918116

Reporter claims to have a fairly large project size. Is it possible there is a file descriptor leak?

```
Traceback (most recent call last):
  File ""/usr/local/bin/prospector"", line 9, in <module>
  File ""/usr/local/lib/python2.7/site-packages/prospector/run.py"", line 317, in main
  File ""/usr/local/lib/python2.7/site-packages/prospector/run.py"", line 224, in execute
  File ""/usr/local/lib/python2.7/site-packages/prospector/tools/pylint/__init__.py"", line 182, in run
  File ""/usr/local/lib/python2.7/site-packages/pylint/lint.py"", line 585, in check
  File ""/usr/local/lib/python2.7/site-packages/pylint/lint.py"", line 662, in check_astroid_module
  File ""/usr/local/lib/python2.7/site-packages/pylint/utils.py"", line 804, in walk
  File ""/usr/local/lib/python2.7/site-packages/pylint/utils.py"", line 801, in walk
  File ""/usr/local/lib/python2.7/site-packages/pylint/checkers/variables.py"", line 756, in visit_import
  File ""/usr/local/lib/python2.7/site-packages/astroid/bases.py"", line 110, in cache_generator
  File ""/usr/local/lib/python2.7/site-packages/astroid/bases.py"", line 341, in wrapped
  File ""/usr/local/lib/python2.7/site-packages/astroid/inference.py"", line 212, in infer_import
  File ""/usr/local/lib/python2.7/site-packages/astroid/mixins.py"", line 107, in do_import_module
  File ""/usr/local/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 361, in import_module
  File ""/usr/local/lib/python2.7/site-packages/astroid/manager.py"", line 125, in ast_from_module_name
OSError: [Errno 24] Too many open files
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/65
",start issue,OSError: [Errno 24] Too many open files analyzing large project
1,issue_closed,65,pycqa,astroid,pylint-bot,2015-12-09 05:52:46,,closed issue,OSError: [Errno 24] Too many open files analyzing large project
2,issue_comment,65,pycqa,astroid,pylint-bot,2014-12-15 15:26:09,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Indeed, it was a file descriptor leak. Not a leak per se, since the files were closed after Pylint finished analyzing the modules, but since there were already too many open files, it failed to reach that point. In 468534927b4cace0232e6659892942b291996998 I added a new way for retrieving a module's file stream, using a method, which will be used in Pylint 1.4.1 and thus the file will be closed right away. This problem should go away by then. Since the astroid part is finished, I'll close the issue, but you can reopen it if it reoccurs in Pylint 1.4.1.
",,
3,issue_comment,65,pycqa,astroid,pylint-bot,2014-12-15 16:50:37,"_Original comment by_ **BitBucket: [jquast](http://bitbucket.org/jquast), GitHub: @jquast?**:

---

Great job, solution looks sound.  Thanks for your attention!
",,
0,issue_title,73,pycqa,astroid,pylint-bot,2015-01-13 10:26:40,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Analyzing this project https://github.com/stackforge/anvil with Pylint leads to the following crash.

```
#!python

Traceback (most recent call last):
  File ""C:\Python34\Scripts\pylint-script.py"", line 9, in <module>
    load_entry_point('pylint==1.4.0', 'console_scripts', 'pylint')()
  File ""C:\Python34\lib\site-packages\pylint-1.4.0-py3.4.egg\pylint\__init__.py"", line 23, in run_pylint
    Run(sys.argv[1:])
  File ""C:\Python34\lib\site-packages\pylint-1.4.0-py3.4.egg\pylint\lint.py"", line 1271, in __init__
    linter.check(args)
  File ""C:\Python34\lib\site-packages\pylint-1.4.0-py3.4.egg\pylint\lint.py"", line 686, in check
    self._do_check(files_or_modules)
  File ""C:\Python34\lib\site-packages\pylint-1.4.0-py3.4.egg\pylint\lint.py"", line 810, in _do_check
    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)
  File ""C:\Python34\lib\site-packages\pylint-1.4.0-py3.4.egg\pylint\lint.py"", line 886, in check_astroid_module
    walker.walk(ast_node)
  File ""C:\Python34\lib\site-packages\pylint-1.4.0-py3.4.egg\pylint\utils.py"", line 869, in walk
    self.walk(child)
  File ""C:\Python34\lib\site-packages\pylint-1.4.0-py3.4.egg\pylint\utils.py"", line 866, in walk
    cb(astroid)
  File ""C:\Python34\lib\site-packages\pylint-1.4.0-py3.4.egg\pylint\checkers\base.py"", line 1003, in visit_class
    if not list(node.instance_attr_ancestors(attr)):
  File ""C:\Python34\lib\site-packages\astroid-1.3.2-py3.4.egg\astroid\scoped_nodes.py"", line 1112, in instance_attr_ancestors
    for astroid in self.ancestors(context=context):
  File ""C:\Python34\lib\site-packages\astroid-1.3.2-py3.4.egg\astroid\scoped_nodes.py"", line 1091, in ancestors
    context=context):
  File ""C:\Python34\lib\site-packages\astroid-1.3.2-py3.4.egg\astroid\scoped_nodes.py"", line 1077, in ancestors
    for baseobj in infer:
TypeError: '_Yes' object is not iterable

```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/73
",start issue,TypeError when analyzing a module
1,issue_closed,73,pycqa,astroid,pylint-bot,2015-12-09 05:52:54,,closed issue,TypeError when analyzing a module
2,issue_comment,73,pycqa,astroid,pylint-bot,2015-04-18 08:42:10,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

This doesn't reproduce anymore with the new astroid.
",,
0,issue_title,289,pycqa,astroid,ceridwen,2015-12-12 01:19:25,"Now that we're using Travis CI, we might consider supporting and testing on IronPython.  At least one project seems to have IronPython working on Travis: https://github.com/earthreader/libearth/blob/master/.travis.yml 
",start issue,Consider adding IronPython to supported versions
1,issue_closed,289,pycqa,astroid,PCManticore,2016-06-27 17:32:52,,closed issue,Consider adding IronPython to supported versions
2,issue_comment,289,pycqa,astroid,PCManticore,2016-06-27 17:32:52,"I don't think it is worth it. The last release that they seemed to have, according to their homepage (http://ironpython.net/), was at the end of 2014. We already have some backwards compatibility problems with Jython and PyPy and it is quite hard to provide a good support story with our current limited resources. I would prefer to invest in CPython and PyPy for now.
",,
0,issue_title,220,pycqa,astroid,pylint-bot,2015-10-20 21:33:27,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

If the co_filename attribute is not found, then object_build_methoddescriptor will be called instead: https://bitbucket.org/logilab/astroid/src/6d4e198bdc7091f36c2c24d911c5ee92b64847c2/astroid/raw_building.py?at=default&fileviewer=file-view-default#raw_building.py-239

The branch can be taken on PyPy and on Jython. Removing it leads to some interesting results, where some builtins can get additional information regarding their parameters (which also leads to tons of false positives on pylint):

```
#!python

from astroid.test_utils import extract_node
n = extract_node('''
NotImplementedError
''')
i = next(n.infer())
i = i.getattr('__init__')[0]
print(i.args.args)

```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/220
",start issue,Investigate why _build_from_function from raw_building handles differently objects with co_filename
1,issue_closed,220,pycqa,astroid,pylint-bot,2015-12-09 05:55:23,,closed issue,Investigate why _build_from_function from raw_building handles differently objects with co_filename
2,issue_comment,220,pycqa,astroid,pylint-bot,2015-10-21 21:35:16,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I know what this code is doing now, if I still don't understand why it's doing it.  On CPython 3, object's members are builtin_function_or_methods, method_descriptors, or slot_wrappers.  The first case is caught by inspect.isbuiltin(), which calls imported_member(), which returns False, and thus object_build_methoddescriptor().  The last two cases are caught by the inspect.ismethoddescriptor() case in inspect_build() and object_build_methoddescriptor() is again called.  On PyPy 2, object's members are functions, unbound methods, or bound methods.  All of these go down the ismethod() or isfunction() branches in inspect_build(), which calls _build_from_function.  On PyPy, these functions/methods don't have code objects, so the filename is None is taken and thus object_build_methoddescriptor() is called.

TL;DR: I think this code is intended to call object_build_methoddescriptor() for certain kinds of builtin functions.  I talked to the PyPy about co_filename yesterday, though, and under some circumstances it's possible to be set on PyPy when it's not set on CPython.  This case does come up in astroid's tests, though I don't remember where off the top of my head.
",,
3,issue_comment,220,pycqa,astroid,pylint-bot,2015-10-26 04:59:41,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

The new ast_from_object function replaces all of this functionality with new code.
",,
0,issue_title,167,pycqa,astroid,pylint-bot,2015-08-02 01:09:16,"Originally reported by: **BitBucket: [sandrotosi](http://bitbucket.org/sandrotosi), GitHub: @sandrotosi?**

---

as the title suggests, are you sure about this dependency? should it be a >= instead of <= ?

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/167
",start issue,"install_requires = ['logilab-common<=0.63.0', 'six']"
1,issue_closed,167,pycqa,astroid,pylint-bot,2015-12-09 05:54:26,,closed issue,"install_requires = ['logilab-common<=0.63.0', 'six']"
2,issue_comment,167,pycqa,astroid,pylint-bot,2015-08-02 07:02:06,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Initially yes, because 1.0 had a couple of fixes that were incompatible with 1.3.8. But since we dropped the use of logilab-common a few days ago, I'll backport that instead and we'll get rid of these inconsistencies.
",,
3,issue_comment,167,pycqa,astroid,pylint-bot,2015-08-02 20:47:00,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I just released 1.3.8. I didn't get rid of logilab-common in this release, since backporting the removal from the default branch isn't enough, being necessary an additional pylint release. Anyway, the dependency is fixed now to >=0.63.0. What 1.0+ is bringing in addition is the ability to understand namespace packages properly, but for now astroid 1.3.8 doesn't support that. Thanks.
",,
4,issue_comment,167,pycqa,astroid,pylint-bot,2015-08-04 07:08:46,"_Original comment by_ **BitBucket: [sandrotosi](http://bitbucket.org/sandrotosi), GitHub: @sandrotosi?**:

---

thanks! I just uploaded astroid/1.3.8 to debian
",,
0,issue_title,275,pycqa,astroid,pylint-bot,2015-12-01 02:16:02,"Originally reported by: **Paul Michali (BitBucket: [paul_michali](http://bitbucket.org/paul_michali))**

---

In openstack.org's neutron project, using pylint 1.4.4, when astroid updated to 1.4.1 pylint failed with many non-sensical errors. For example, use of any module from an import was showing a undefined variable error in pylint, which worked fine with astroid 1.3.8 and pylint 1.4.4. We see the same issue with astroid 1.4.0 as well.

E.g.

import abc
import six
...
@six.add_metaclass(abc.ABCMeta)

Plyint would report undefined variable for 'abc' and 'six'. This happens for every import in every file.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/275
",start issue,1.4.0 and 1.4.1 fail to work with pylint 1.4.4
1,issue_closed,275,pycqa,astroid,pylint-bot,2015-12-09 05:56:13,,closed issue,1.4.0 and 1.4.1 fail to work with pylint 1.4.4
2,issue_comment,275,pycqa,astroid,pylint-bot,2015-12-01 03:03:18,"_Original comment by_ **BitBucket: [afahim](http://bitbucket.org/afahim), GitHub: @afahim?**:

---

I can confirm the above. Had to pin astroid version to 1.3.8 to get pylint 1.4.4 to keep working. Works for now, would be nice if the issue gets resolved however.

Here is a stacktrace.

```
#!python


Traceback (most recent call last):
  File ""/home/travis/virtualenv/python2.7.9/bin/pylint"", line 11, in <module>
    sys.exit(run_pylint())
  File ""/home/travis/virtualenv/python2.7.9/lib/python2.7/site-packages/pylint/__init__.py"", line 20, in run_pylint
    from pylint.lint import Run
  File ""/home/travis/virtualenv/python2.7.9/lib/python2.7/site-packages/pylint/lint.py"", line 30, in <module>
    from pylint.checkers import utils
  File ""/home/travis/virtualenv/python2.7.9/lib/python2.7/site-packages/pylint/checkers/__init__.py"", line 46, in <module>
    from astroid.utils import ASTWalker
ImportError: No module named utils

```
",,
3,issue_comment,275,pycqa,astroid,pylint-bot,2015-12-01 04:19:45,"_Original comment by_ **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**:

---

I'm pretty sure mixing a new astroid version with an old pylint version is an unsupported thing and expected to break.
",,
4,issue_comment,275,pycqa,astroid,pylint-bot,2015-12-01 07:18:13,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Yes, they are pretty much incompatible, so try to update pylint to 1.5.0. I know this would have been been better if they we're called 2.0.
",,
5,issue_comment,275,pycqa,astroid,pylint-bot,2015-12-01 12:24:48,"_Original comment by_ **Paul Michali (BitBucket: [paul_michali](http://bitbucket.org/paul_michali))**:

---

Should there be some constraint that prevents pylint 1.4.4 from using astroid 1.4.x? Currently, several projects in OpenStack are using pylint 1.4.4, which is pulling in astroid 1.4.1 as a dependency and breaking.
",,
6,issue_comment,275,pycqa,astroid,pylint-bot,2015-12-01 12:31:02,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

It probably should, but I don't know if it's possible to release 1.4.5 with a pinned dependency of astroid if there is a newer release on PyPi. This is a genuine question, I don't know if it works to upload an older bug fix release.
",,
7,issue_comment,275,pycqa,astroid,pylint-bot,2015-12-01 12:33:57,"_Original comment by_ **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**:

---

I don't see why not - there are projects which have several maintained major versions after all, right?
",,
8,issue_comment,275,pycqa,astroid,pylint-bot,2015-12-01 12:36:09,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I'm going to give it a try then. Paul, would 1.4.5 with a pinned dependency of astroid help you at all?
",,
9,issue_comment,275,pycqa,astroid,pylint-bot,2015-12-01 13:40:26,"_Original comment by_ **Paul Michali (BitBucket: [paul_michali](http://bitbucket.org/paul_michali))**:

---

Yes, I think it would, as currently, we are pinning pylint to 1.4.4, and it is pulling in astroid 1.4.1. We could pin pylint to 1.4.5 and it may ease the pain.
",,
10,issue_comment,275,pycqa,astroid,pylint-bot,2015-12-01 18:36:52,"_Original comment by_ **Robert Collins (BitBucket: [rbtcollins](http://bitbucket.org/rbtcollins), GitHub: @rbtcollins?)**:

---

Yes, appropriate deps within the 1.4.x series would make it a lot easier: rather than trying to coordinate changes to astroid across dozens of projects that all will move to pylint 1.5 at some future point, we can just specify pylint 1.4.5 as compatible with 1.4.4 and let astroid be managed by the pylint dependency.

astroid<1.4.0 would be the preferred way to spell it IMO, then if you do decide to do a point release of astroid you have space to do it in.
",,
11,issue_comment,275,pycqa,astroid,pylint-bot,2015-12-02 18:27:03,"_Original comment by_ **Robert Collins (BitBucket: [rbtcollins](http://bitbucket.org/rbtcollins), GitHub: @rbtcollins?)**:

---

Any word on pylint 1.4.5?
",,
12,issue_comment,275,pycqa,astroid,pylint-bot,2015-12-02 20:18:00,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Hey folks, sorry for the delay. pylint 1.4.5 hit PyPi, please test and tell me if something is not working as expected. Except the astroid change, everything is the same as in 1.4.4.
",,
13,issue_comment,275,pycqa,astroid,pylint-bot,2015-12-02 20:57:54,"_Original comment by_ **Paul Michali (BitBucket: [paul_michali](http://bitbucket.org/paul_michali))**:

---

Thanks!
",,
0,issue_title,15,pycqa,astroid,pylint-bot,2014-01-29 07:07:05,"Originally reported by: **Antony Lee (BitBucket: [anntzer](http://bitbucket.org/anntzer), GitHub: @anntzer?)**

---

```
#!python
def g():
    x = 1
    def h():
        nonlocal x
        x += 1
    return h
```

Pylint currently warns that `x` is undefined at the `x+=1` line.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/15
",start issue,Spurious undefined variable error for nonlocal variables
1,issue_closed,15,pycqa,astroid,pylint-bot,2015-12-09 05:51:48,,closed issue,Spurious undefined variable error for nonlocal variables
2,issue_comment,15,pycqa,astroid,pylint-bot,2014-01-29 06:18:30,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Hi! Thanks for the report. This was already fixed by this pull request https://bitbucket.org/logilab/pylint/pull-request/76/enhance-used-before-assignment-check-to and will be available in Pylint 1.2.
",,
0,issue_title,114,pycqa,astroid,pylint-bot,2015-06-20 14:39:51,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

This should be done only when Class.getattr is invoked and not from Instance.getattr (since attributes of the metaclass can only be accessed from the class, not the instance). 

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/114
",start issue,Make Class.getattr to look into Class.implicit_metaclass()
1,issue_closed,114,pycqa,astroid,pylint-bot,2015-12-09 05:53:40,,closed issue,Make Class.getattr to look into Class.implicit_metaclass()
2,issue_comment,114,pycqa,astroid,pylint-bot,2015-07-26 08:50:00,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Class.getattr looks by default in the implicit and the explicit metaclasses, which is `type` on Python 3.

Closes issue #114.
",,
0,issue_title,230,pycqa,astroid,pylint-bot,2015-10-27 22:36:00,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

At the moment, the _stdlib enum builder is creating an AST filled with EmptyNodes and inserting base_type, which is a full tree with a ClassDef root, into class_node's bases attribute. Normally bases will never contain anything other than a sequence of Name nodes, and it's impossible to define an AST that looks like that in code because you can't put a statement as an argument to a class's bases.  I plan to replace this with a small properly formed AST with a separate ClassDef node for the metaclass, a Name node referring to it, and a mock `__init__` function.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/230
",start issue,Build real AST for Enum
1,issue_closed,230,pycqa,astroid,pylint-bot,2015-12-09 05:55:31,,closed issue,Build real AST for Enum
2,issue_comment,230,pycqa,astroid,pylint-bot,2015-11-22 03:58:23,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Mock ASTs for enums finished in 2591dc9.
",,
0,issue_title,3,pycqa,astroid,pylint-bot,2013-08-07 13:04:31,"Originally reported by: **Victor Safronovich (BitBucket: [suvit](http://bitbucket.org/suvit), GitHub: @suvit?)**

---
## Traceback

```
#!python

Traceback (most recent call last):
  File ""manage.py"", line 11, in <module>
    execute_from_command_line(sys.argv)
  File ""</ws/env/local/lib/python2.7/site-packages/django/core/management/__init__.py"",> line 443, in execute_from_command_line
    utility.execute()
  File ""</ws/env/local/lib/python2.7/site-packages/django/core/management/__init__.py"",> line 382, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File ""</ws/env/local/lib/python2.7/site-packages/django/core/management/base.py"",> line 196, in run_from_argv
    self.execute(*args, **options.__dict__)
  File ""</ws/env/local/lib/python2.7/site-packages/django/core/management/base.py"",> line 232, in execute
    output = self.handle(*args, **options)
  File ""</ws/env/local/lib/python2.7/site-packages/django_jenkins/management/commands/__init__.py"",> line 81, in handle
    if test_runner.run_tests(test_labels):
  File ""</ws/env/local/lib/python2.7/site-packages/django/test/simple.py"",> line 384, in run_tests
    self.teardown_test_environment()
  File ""</ws/uralautomir/theme/tests.py"",> line 67, in teardown_test_environment
    signals.teardown_test_environment.send(sender=self)
  File ""</ws/env/local/lib/python2.7/site-packages/django/dispatch/dispatcher.py"",> line 172, in send
    response = receiver(signal=self, sender=sender, **named)
  File ""</ws/env/local/lib/python2.7/site-packages/django_jenkins/tasks/run_pylint.py"",> line 43, in teardown_test_environment
    lint.Run(args, reporter=ParseableTextReporter(output=self.output), exit=False)
  File ""</ws/env/local/lib/python2.7/site-packages/pylint/lint.py"",> line 1010, in __init__
    linter.check(args)
  File ""</ws/env/local/lib/python2.7/site-packages/pylint/lint.py"",> line 599, in check
    self.check_astroid_module(astroid, walker, rawcheckers, tokencheckers)
  File ""</ws/env/local/lib/python2.7/site-packages/pylint/lint.py"",> line 685, in check_astroid_module
    walker.walk(astroid)
  File ""</ws/env/local/lib/python2.7/site-packages/pylint/utils.py"",> line 662, in walk
    self.walk(child)
  File ""</ws/env/local/lib/python2.7/site-packages/pylint/utils.py"",> line 662, in walk
    self.walk(child)
  File ""</ws/env/local/lib/python2.7/site-packages/pylint/utils.py"",> line 662, in walk
    self.walk(child)
  File ""</ws/env/local/lib/python2.7/site-packages/pylint/utils.py"",> line 662, in walk
    self.walk(child)
  File ""</ws/env/local/lib/python2.7/site-packages/pylint/utils.py"",> line 659, in walk
    cb(astroid)
  File ""</ws/env/local/lib/python2.7/site-packages/pylint/checkers/typecheck.py"",> line 174, in visit_getattr
    if is_super(owner) or getattr(owner, 'type', None) == 'metaclass':
  File ""</ws/env/local/lib/python2.7/site-packages/astroid/bases.py"",> line 51, in __getattr__
    return getattr(self._proxied, name)
  File ""</ws/env/local/lib/python2.7/site-packages/astroid/scoped_nodes.py"",> line 681, in _class_type
    if _class_type(base, ancestors) != 'class':
  File ""</ws/env/local/lib/python2.7/site-packages/astroid/scoped_nodes.py"",> line 680, in _class_type
    for base in klass.ancestors(recurs=False):
  File ""</ws/env/local/lib/python2.7/site-packages/astroid/scoped_nodes.py"",> line 801, in ancestors
    for baseobj in stmt.infer(context):
TypeError: unbound method infer() must be called with Tuple instance as first argument (got InferenceContext instance instead)
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/3
",start issue,Error after upgrade to pylint 1.0
1,issue_closed,3,pycqa,astroid,pylint-bot,2015-12-09 05:51:30,,closed issue,Error after upgrade to pylint 1.0
2,issue_comment,3,pycqa,astroid,pylint-bot,2013-08-20 01:47:41,"_Original comment by_ **Chris Rebert (BitBucket: [cvrebert](http://bitbucket.org/cvrebert), GitHub: @cvrebert?)**:

---

Same issue in the pylint issue tracker: https://bitbucket.org/logilab/pylint/issue/47/typeerror-when-analyzing-python-file
",,
3,issue_comment,3,pycqa,astroid,pylint-bot,2013-09-04 15:02:22,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

See also https://bitbucket.org/logilab/pylint/issue/63/namedtuple-subclassing-crashes-pylint
",,
4,issue_comment,3,pycqa,astroid,pylint-bot,2013-09-04 15:02:56,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

should be fixed by https://bitbucket.org/logilab/astroid/commits/5ed6266cab789bc89d882444c938f03953491496
",,
0,issue_title,119,pycqa,astroid,pylint-bot,2015-06-20 14:58:16,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

In Python 3, the scope of DATA is not the list comprehension, but the parent scope of list comprehension. Currently, everything that is found in a list/set/generator comprehension is believed to have the comprehension as the scope.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/119
",start issue,Wrong scope for DATA in  [x for x in DATA]
1,issue_closed,119,pycqa,astroid,pylint-bot,2015-12-09 05:53:44,,closed issue,Wrong scope for DATA in  [x for x in DATA]
2,issue_comment,119,pycqa,astroid,pylint-bot,2015-11-10 17:07:47,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fixed in 2.0 by 0a27d529944caa52ee97867f277d7397973b3bf9
",,
0,issue_title,80,pycqa,astroid,pylint-bot,2015-02-19 08:02:06,"Originally reported by: **Michal Čihař (BitBucket: [nijel](http://bitbucket.org/nijel), GitHub: @nijel?)**

---

After upgrading to pylint 1.4.1, astroid 1.3.4 I get following error:

```
#!pytb

  File ""/usr/lib/python2.7/site-packages/django_jenkins/tasks/run_pylint.py"", line 38, in run
    lint.Run(args, reporter=ParseableTextReporter(output=output), exit=False)
  File ""/usr/lib/python2.7/site-packages/pylint/lint.py"", line 1266, in __init__
    linter.check(args)
  File ""/usr/lib/python2.7/site-packages/pylint/lint.py"", line 674, in check
    self._do_check(files_or_modules)
  File ""/usr/lib/python2.7/site-packages/pylint/lint.py"", line 805, in _do_check
    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)
  File ""/usr/lib/python2.7/site-packages/pylint/lint.py"", line 881, in check_astroid_module
    walker.walk(ast_node)
  File ""/usr/lib/python2.7/site-packages/pylint/utils.py"", line 869, in walk
    self.walk(child)
  File ""/usr/lib/python2.7/site-packages/pylint/utils.py"", line 869, in walk
    self.walk(child)
  File ""/usr/lib/python2.7/site-packages/pylint/utils.py"", line 869, in walk
    self.walk(child)
  File ""/usr/lib/python2.7/site-packages/pylint/utils.py"", line 866, in walk
    cb(astroid)
  File ""/usr/lib/python2.7/site-packages/pylint/checkers/base.py"", line 392, in visit_callfunc
    abstract_methods = _has_abstract_methods(infered)
  File ""/usr/lib/python2.7/site-packages/pylint/checkers/base.py"", line 191, in _has_abstract_methods
    return len(unimplemented_abstract_methods(node)) &gt; 0
  File ""/usr/lib/python2.7/site-packages/pylint/checkers/utils.py"", line 532, in unimplemented_abstract_methods
    mro = reversed(node.mro())
  File ""/usr/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1456, in mro
    unmerged_mro = [[self]] + [base.mro() for base in bases] + [bases]
[skipped 950 same tracebacks]
  File ""/usr/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1455, in mro
    bases = list(self._inferred_bases(context=context))
  File ""/usr/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1433, in _inferred_bases
    baseobj = next(stmt.infer(context=context))
  File ""/usr/lib/python2.7/site-packages/astroid/bases.py"", line 110, in cache_generator
    for result in generator:
  File ""/usr/lib/python2.7/site-packages/astroid/bases.py"", line 341, in wrapped
    for res in _func(node, context, **kwargs):
  File ""/usr/lib/python2.7/site-packages/astroid/bases.py"", line 365, in wrapper
    for node in func(*args, **kwargs):
  File ""/usr/lib/python2.7/site-packages/astroid/inference.py"", line 239, in infer_getattr
    for owner in self.expr.infer(context):
  File ""/usr/lib/python2.7/site-packages/astroid/bases.py"", line 110, in cache_generator
    for result in generator:
  File ""/usr/lib/python2.7/site-packages/astroid/bases.py"", line 341, in wrapped
    for res in _func(node, context, **kwargs):
  File ""/usr/lib/python2.7/site-packages/astroid/inference.py"", line 167, in infer_name
    frame, stmts = self.lookup(self.name)
  File ""/usr/lib/python2.7/site-packages/astroid/node_classes.py"", line 124, in lookup
    return self.scope().scope_lookup(self, name)
  File ""/usr/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 1046, in scope_lookup
    return frame._scope_lookup(node, name, offset)
  File ""/usr/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 186, in _scope_lookup
    return pscope.scope_lookup(node, name)
  File ""/usr/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 345, in scope_lookup
    return self._scope_lookup(node, name, offset)
  File ""/usr/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 175, in _scope_lookup
    stmts = node._filter_stmts(self.locals[name], self, offset)
  File ""/usr/lib/python2.7/site-packages/astroid/node_classes.py"", line 206, in _filter_stmts
    pindex = _stmt_parents.index(stmt.parent)
  File ""/usr/lib/python2.7/site-packages/astroid/bases.py"", line 427, in __repr__
    self._repr_name(),
  File ""/usr/lib/python2.7/site-packages/astroid/bases.py"", line 420, in _repr_name
    return getattr(self, 'name', getattr(self, 'attrname', ''))
RuntimeError: maximum recursion depth exceeded in cmp

```

This might be same as #54, though the traceback looks different, so I've rather reported it as a separate issue.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/80
",start issue,Maximum recursion depth exceeded through mro
1,issue_closed,80,pycqa,astroid,pylint-bot,2015-12-09 05:53:02,,closed issue,Maximum recursion depth exceeded through mro
2,issue_comment,80,pycqa,astroid,pylint-bot,2015-02-19 08:27:18,"_Original comment by_ **Michal Čihař (BitBucket: [nijel](http://bitbucket.org/nijel), GitHub: @nijel?)**:

---

Actually this was bug in plugin, sorry for confusion. See https://github.com/landscapeio/pylint-django/issues/37
",,
0,issue_title,208,pycqa,astroid,pylint-bot,2015-10-10 05:11:08,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

The 'py' heading is superfluous for all of these files.  'py2' is superfluous for any that work on both 2 and 3, which given they're all tested under both, is all of them.  It's particularly misleading for py2stdlib.py, which covers stdlib packages from both 2 and 3.  The docstring for py2stdlib.py is wrong, since it helps with understanding several packages outside hashlib.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/208
",start issue,Misleading file names and docstrings in astroid/brain
1,issue_closed,208,pycqa,astroid,pylint-bot,2015-12-09 05:55:07,,closed issue,Misleading file names and docstrings in astroid/brain
2,issue_comment,208,pycqa,astroid,pylint-bot,2015-10-26 21:11:48,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Rename the brain files into something more suggestive. Closes issue #208.
",,
3,issue_comment,208,pycqa,astroid,pylint-bot,2015-11-19 13:22:50,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Rename the brain files into something more suggestive. Closes issue #208.
",,
0,issue_title,33,pycqa,astroid,pylint-bot,2014-06-06 15:21:22,"Originally reported by: **BitBucket: [jcristau](http://bitbucket.org/jcristau), GitHub: @jcristau?**

---

On python 2, the rebuilder sets _newstyle to True on a class node if a __metaclass__ variable is set in the parent namespace.  This is wrong, per https://docs.python.org/2/reference/datamodel.html#customizing-class-creation only the global namespace matters.

Test case::

```
def test_metaclass_nested(self):
    astroid = abuilder.string_build(dedent(""""""
    class Test:
        __metaclass__ = type
        class Nested: pass
    """"""))
    nested = astroid['Test'].locals['Nested'][0]
    self.assertFalse(nested.newstyle)
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/33
",start issue,wrong handling of metaclass/newstyle in rebuilder
1,issue_closed,33,pycqa,astroid,pylint-bot,2015-12-09 05:52:07,,closed issue,wrong handling of metaclass/newstyle in rebuilder
2,issue_comment,33,pycqa,astroid,pylint-bot,2014-06-30 09:40:30,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Handle **metaclass** defined at the module level

According to the doc
(https://docs.python.org/2/reference/datamodel.html#customizing-class-creation):

The appropriate metaclass is determined by the following precedence rules:
- If dict['**metaclass**'] exists, it is used.
- Otherwise, if there is at least one base class, its metaclass is used
  (this looks for a **class** attribute first and if not found, uses its
  type).
- Otherwise, if a global variable named **metaclass** exists, it is used.
- Otherwise, the old-style, classic metaclass (types.ClassType) is used.

The third case was not handled by node.metaclass().

Remove metaclass lookup from the rebuilder, handle it all in
Class._explicit_metaclass() instead, and use that in _newstyle_impl if
possible.

Remove test_newstyle_and_metaclass_bad, as I think the returned value in
this test is irrelevant (it's a TypeError anyway, so you can't actually
build that class), and replace it with a test using nested classes.

Closes issue#33
",,
0,issue_title,51,pycqa,astroid,pylint-bot,2014-10-30 07:55:17,"Originally reported by: **Vadim Markovtsev (BitBucket: [vmarkovtsev](http://bitbucket.org/vmarkovtsev), GitHub: @vmarkovtsev?)**

---

This is guys for you to pay attention to updated issue #13. Closing issues because ""you can not reproduce it"" in laboratory conditions is not polite, you know.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/51
",start issue,Python 3: Pylint can't check package source code in unicode format
1,issue_closed,51,pycqa,astroid,pylint-bot,2015-12-09 05:52:29,,closed issue,Python 3: Pylint can't check package source code in unicode format
2,issue_comment,51,pycqa,astroid,pylint-bot,2014-10-30 10:21:17,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

The issue is solved in 9e36dfe62d583d169273eb51856e6a6a7a435a58, with the proper reproducing steps. Also, open doesn't have an 'encoding' parameter on Python 2.X.
",,
3,issue_comment,51,pycqa,astroid,pylint-bot,2014-10-30 13:11:29,"_Original comment by_ **Vadim Markovtsev (BitBucket: [vmarkovtsev](http://bitbucket.org/vmarkovtsev), GitHub: @vmarkovtsev?)**:

---

Thanks! I confirm that the issues are fixed now.
",,
0,issue_title,44,pycqa,astroid,pylint-bot,2014-07-31 05:43:38,"Originally reported by: **BitBucket: [idella5](http://bitbucket.org/idella5)**

---

``` python
...S..F..
======================================================================
FAIL: test_pylint_config_attr (unittest_regrtest.NonRegressionTC)
----------------------------------------------------------------------
Traceback (most recent call last)
  File ""/mnt/gen2/TmpDir/portage/dev-python/astroid-1.2.0/work/astroid-1.2.0-python3_4/build/lib/astroid/test/unittest_regrtest.py"", line 116, in test_pylint_config_attr
    expect)
  File ""/usr/lib64/python3.4/unittest/case.py"", line 992, in assertListEqual
    self.assertSequenceEqual(list1, list2, msg, seq_type=list)
  File ""/usr/lib64/python3.4/unittest/case.py"", line 974, in assertSequenceEqual
    self.fail(msg)
  File ""/usr/lib64/python3.4/unittest/case.py"", line 639, in fail
    raise self.failureException(msg)
AssertionError: Lists differ: ['Opt[84 chars]enChecker', 'BaseChecker', 'OptionsProviderMixIn', 'ASTWalker'] != ['Opt[84 chars]enChecker', 'BaseChecker', 'OptionsProviderMixIn']

First list contains 1 additional elements.
First extra element 7:
ASTWalker

  ['OptionsManagerMixIn',
   'object',
   'MessagesHandlerMixIn',
   'ReportsHandlerMixIn',
   'BaseTokenChecker',
   'BaseChecker',
-  'OptionsProviderMixIn',
?                        ^

+  'OptionsProviderMixIn']
?                        ^

-  'ASTWalker']

                              no stdout                               
                              no stderr                               
======================================================================

Ran 343 test cases in 6.75s (6.75s CPU), 1 failures, 17 skipped
12 modules OK (1 failed)
```

Looks fairly straight forward.  Last char a ',' in 1, ']"" in the other.
ditto python3.3.  Can you replicate? Do you require anything further?

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/44
",start issue,test_pylint_config_attr fails in version 1.2.0 under py3
1,issue_closed,44,pycqa,astroid,pylint-bot,2015-12-09 05:52:19,,closed issue,test_pylint_config_attr fails in version 1.2.0 under py3
2,issue_comment,44,pycqa,astroid,pylint-bot,2014-07-31 05:50:15,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

This looks like a version mismatch between astroid and pylint. Are you sure
 to use pylint 1.3 together with astroid 1.2?
",,
3,issue_comment,44,pycqa,astroid,pylint-bot,2014-07-31 06:28:08,"_Original comment by_ **BitBucket: [idella5](http://bitbucket.org/idella5)**:

---

ok fine.  astroid 1.2 requires pylint 1.3. 

---

Ran 343 test cases in 6.74s (6.74s CPU), 17 skipped
All 13 modules OK

Feel free to close
",,
4,issue_comment,44,pycqa,astroid,pylint-bot,2014-07-31 06:30:44,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

pylint/astroid version mismatch
",,
0,issue_title,22,pycqa,astroid,pylint-bot,2014-03-22 15:00:36,"Originally reported by: **Cole Robinson (BitBucket: [crobinso](http://bitbucket.org/crobinso), GitHub: @crobinso?)**

---

Newer pyobject uses some local class FunctionInfo to export functions, and the pygi brain module doesn't handle it. So there's tons of no-member warnings

This patch alters the inspection to fallback to assuming anything 'callable' is a function, and everything left over is a constant. The latter bit fixes some issues I see using Gdk constants

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/22
",start issue,[PATCH] brain: pygi: Fix function inspection on newer pygobject
1,issue_closed,22,pycqa,astroid,pylint-bot,2015-12-09 05:51:54,,closed issue,[PATCH] brain: pygi: Fix function inspection on newer pygobject
2,issue_comment,22,pycqa,astroid,pylint-bot,2014-03-24 06:34:58,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

Hi,

could you please submit this as a pull request on the pylint-brain project ? (https://bitbucket.org/logilab/pylint-brain/) 

Also, you may be interested in https://bitbucket.org/logilab/pylint-brain/issue/4/py2gi-rewrite-using-the-living-object if you have some time to spend on this :)
",,
3,issue_comment,22,pycqa,astroid,pylint-bot,2014-03-24 13:41:39,"_Original comment by_ **Cole Robinson (BitBucket: [crobinso](http://bitbucket.org/crobinso), GitHub: @crobinso?)**:

---

Okay, should the pull request be against astroid or brain? honestly the split confuses me at this point (this is where something like a git submodule would help...)
",,
4,issue_comment,22,pycqa,astroid,pylint-bot,2014-03-24 13:55:16,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

this should go to pylint-brain, as everything under astroid/brain. While it
would be nice, Unfortunatly I don't think bitbucket support subrepos.
",,
5,issue_comment,22,pycqa,astroid,pylint-bot,2014-03-31 22:03:51,"_Original comment by_ **Cole Robinson (BitBucket: [crobinso](http://bitbucket.org/crobinso), GitHub: @crobinso?)**:

---

I submitted a pull request, let's follow up there.

https://bitbucket.org/logilab/pylint-brain/pull-request/15/brain-couple-gobject-introspection-fixes/diff
",,
6,issue_comment,22,pycqa,astroid,pylint-bot,2014-04-08 10:11:23,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

backport gi related changes from pylint-brain, closes #19 and #22
",,
0,issue_title,69,pycqa,astroid,pylint-bot,2014-12-20 18:49:11,"Originally reported by: **Maarten ter Huurne (BitBucket: [mthuurne](http://bitbucket.org/mthuurne), GitHub: @mthuurne?)**

---

When pylint checks the following source code:

```
#!python
def func(sequence):
    head, *tail = sequence
    return reversed(tail)
```

It will encounter this error in Astroid:

```
  File ""/usr/lib/python3.3/site-packages/astroid-1.3.2-py3.3.egg/astroid/inference.py"", line 366, in infer_ass
    stmts = list(self.assigned_stmts(context=context))
  File ""/usr/lib/python3.3/site-packages/astroid-1.3.2-py3.3.egg/astroid/protocols.py"", line 252, in assend_assigned_stmts
    return self.parent.assigned_stmts(self, context=context)
AttributeError: 'Starred' object has no attribute 'assigned_stmts'
```

The starred variable is clearly part of the trigger for this error, but there also seems to be something special about the 'reversed' function: for example 'len' does not trigger the error.

versions used:

```
pylint3 1.4.0, 
astroid 1.3.2, common 0.63.2
Python 3.3.5 (default, Mar 27 2014, 17:16:46) [GCC]
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/69
",start issue,pylint crash : 'Starred' object has no attribute 'assigned_stmts'
1,issue_closed,69,pycqa,astroid,pylint-bot,2015-12-09 05:52:49,,closed issue,pylint crash : 'Starred' object has no attribute 'assigned_stmts'
2,issue_comment,69,pycqa,astroid,pylint-bot,2014-12-20 17:53:33,"_Original comment by_ **Maarten ter Huurne (BitBucket: [mthuurne](http://bitbucket.org/mthuurne), GitHub: @mthuurne?)**:

---

Jira is making a mess by removing line endings and {noformat} doesn't do anything... I'll put the text in an attachment as well.

_Edit:_ In Firefox I get a formatting toolbar which was missing in Rekonq for some reason; triple backtick does suppress auto-formatting.
",,
3,issue_comment,69,pycqa,astroid,pylint-bot,2015-01-08 18:52:50,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Duplicate of #36.
",,
4,issue_comment,69,pycqa,astroid,pylint-bot,2015-01-08 18:53:46,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Thanks for the report! I'll keep the bug 36 for this.
",,
5,issue_comment,69,pycqa,astroid,pylint-bot,2015-02-21 16:51:35,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

For the record, this was fixed in ac9a644d473f
",,
0,issue_title,120,pycqa,astroid,pylint-bot,2015-06-20 14:59:47,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

.root() should guarantee that what it returns is a module. Unfortunately, I found a couple of cases, which involved transforms, where .root() return classes instead of modules. We should raise an error in that case (and probably we should fix whatever was returning a class to return a module instead).

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/120
",start issue,Raise an error if .root() is not a module
1,issue_closed,120,pycqa,astroid,pylint-bot,2015-12-09 05:53:45,,closed issue,Raise an error if .root() is not a module
2,issue_comment,120,pycqa,astroid,pylint-bot,2015-08-21 07:33:33,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Actually this can happen if the tree was spliced from another and it is in the course of being transformed.
",,
0,issue_title,293,pycqa,astroid,ceridwen,2015-12-12 17:29:19,"If do_import_module is called without a modname argument, it will try to access self.modname on the underlying node, but Import nodes don't have a modname attribute, so it will raise an AttributeError.
",start issue,"ImportFromMixin is used in both Import and ImportFrom nodes, but do_import_module doesn't work for Import"
1,issue_closed,293,pycqa,astroid,PCManticore,2016-01-02 15:48:26,,closed issue,"ImportFromMixin is used in both Import and ImportFrom nodes, but do_import_module doesn't work for Import"
0,issue_title,18,pycqa,astroid,pylint-bot,2014-02-22 13:56:37,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

For Python 3, the following code will trigger a crash in astroid:

```
#!python

with open('c.txt', 'w') as stream, open('b.txt', 'w'):
    stream.write('a')

```

The traceback is:
  File ""D:\Python33\lib\site-packages\pylint-1.1.0-py3.3.egg\pylint\checkers\base.py"", line 349, in visit_callfunc
    infered = next(node.func.infer())
  File ""D:\Python33\lib\site-packages\astroid-1.0.1-py3.3.egg\astroid\bases.py"", line 307, in wrapped
    for res in _func(node, context, *_kwargs):
  File ""D:\Python33\lib\site-packages\astroid-1.0.1-py3.3.egg\astroid\bases.py"", line 331, in wrapper
    for node in func(_args, *_kwargs):
  File ""D:\Python33\lib\site-packages\astroid-1.0.1-py3.3.egg\astroid\inference.py"", line 208, in infer_getattr
    for owner in self.expr.infer(context):
  File ""D:\Python33\lib\site-packages\astroid-1.0.1-py3.3.egg\astroid\bases.py"", line 307, in wrapped
    for res in _func(node, context, *_kwargs):
  File ""D:\Python33\lib\site-packages\astroid-1.0.1-py3.3.egg\astroid\bases.py"", line 115, in _infer_stmts
    for infered in stmt.infer(context):
  File ""D:\Python33\lib\site-packages\astroid-1.0.1-py3.3.egg\astroid\bases.py"", line 307, in wrapped
    for res in _func(node, context, *_kwargs):
  File ""D:\Python33\lib\site-packages\astroid-1.0.1-py3.3.egg\astroid\inference.py"", line 353, in infer_ass
    stmts = list(self.assigned_stmts(context=context))
  File ""D:\Python33\lib\site-packages\astroid-1.0.1-py3.3.egg\astroid\bases.py"", line 331, in wrapper
    for node in func(_args, **kwargs):
  File ""D:\Python33\lib\site-packages\astroid-1.0.1-py3.3.egg\astroid\protocols.py"", line 316, in with_assigned_stmts
    for lst in vars.infer(context):
AttributeError: 'NoneType' object has no attribute 'infer'

The problem is in astroid.protocols.with_assignment_statements, where `vars` can be None in the case of the second context manager, which doesn't use the `as` assignment.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/18
",start issue,Crash when inferring nodes from `with` statements
1,issue_closed,18,pycqa,astroid,pylint-bot,2015-12-09 05:51:50,,closed issue,Crash when inferring nodes from `with` statements
2,issue_comment,18,pycqa,astroid,pylint-bot,2014-02-22 13:00:02,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Don't crash when inferring nodes from with statements, with multiple context managers. Closes #18.
",,
0,issue_title,265,pycqa,astroid,pylint-bot,2015-11-24 16:52:22,"Originally reported by: **Laura Médioni (BitBucket: [lmedioni](http://bitbucket.org/lmedioni), GitHub: @lmedioni?)**

---

For now, inference on:

```
import multiprocessing
multiprocessing.SyncManager()
```

tells SyncManager root is a module whose name is ''.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/265
",start issue,Add information about parent module in inference on a module element
1,issue_closed,265,pycqa,astroid,PCManticore,2015-12-20 12:51:49,,closed issue,Add information about parent module in inference on a module element
2,issue_comment,265,pycqa,astroid,PCManticore,2015-12-20 12:51:49,"Closed by https://github.com/PyCQA/astroid/commit/058a287405390f9c7562c9eb2b3a7c8fc589e7a1
",,
0,issue_title,252,pycqa,astroid,pylint-bot,2015-11-11 00:31:58,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

Unfortunately, I've introduced an infinite recursion that's occurring in a lot of the tests on Python 2.  There has to be a base case here, but I'm not sure what it is.

``` python
  File ""astroid/scoped_nodes.py"", line 155, in locals
    return MappingProxyType(get_locals(self))
  File ""~/code/astroid/.tox/py27/local/lib/python2.7/site-packages/singledispatch.py"", line 210, in wrapper
    return dispatch(args[0].__class__)(*args, **kw)
  File ""astroid/scoped_nodes.py"", line 1874, in scoped_node
    _get_locals(n, locals_, node)
  File ""~/code/astroid/.tox/py27/local/lib/python2.7/site-packages/singledispatch.py"", line 210, in wrapper
    return dispatch(args[0].__class__)(*args, **kw)
  File ""astroid/scoped_nodes.py"", line 1949, in locals_import_from
    imported = node.do_import_module()
  File ""astroid/mixins.py"", line 116, in do_import_module
    if mymodule.relative_to_absolute_name(modname, level) == mymodule.name:
  File ""astroid/scoped_nodes.py"", line 515, in relative_to_absolute_name
    if self.absolute_import_activated() and level is None:
  File ""astroid/scoped_nodes.py"", line 491, in absolute_import_activated
    return self._absolute_import_activated
  File ""astroid/decorators.py"", line 79, in __get__
    val = self.wrapped(inst)
  File ""astroid/scoped_nodes.py"", line 483, in _absolute_import_activated
    for stmt in self.locals.get('absolute_import', ()):
  File ""astroid/scoped_nodes.py"", line 155, in locals
    return MappingProxyType(get_locals(self))
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/252
",start issue,[modular-locals bugs] Python 2 infinite recursion
1,issue_closed,252,pycqa,astroid,pylint-bot,2015-12-09 05:55:51,,closed issue,[modular-locals bugs] Python 2 infinite recursion
2,issue_comment,252,pycqa,astroid,pylint-bot,2015-11-14 05:10:09,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Fixed in 3e3b3e936b69 by using the new future_imports property.
",,
0,issue_title,5,pycqa,astroid,pylint-bot,2013-09-05 01:34:05,"Originally reported by: **Gilles Devaux (BitBucket: [gillesdevaux](http://bitbucket.org/gillesdevaux))**

---

```
#!shell

************* Module kwarter.admin.util
C:  1, 0: Missing module docstring (missing-docstring)
Traceback (most recent call last):
  File ""/Users/gillesdevaux/.virtualenvs/platform/bin/pylint"", line 9, in <module>
    load_entry_point('pylint==1.0.0', 'console_scripts', 'pylint')()
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/pylint/__init__.py"", line 21, in run_pylint
    Run(sys.argv[1:])
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/pylint/lint.py"", line 1010, in __init__
    linter.check(args)
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/pylint/lint.py"", line 599, in check
    self.check_astroid_module(astroid, walker, rawcheckers, tokencheckers)
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/pylint/lint.py"", line 685, in check_astroid_module
    walker.walk(astroid)
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/pylint/utils.py"", line 662, in walk
    self.walk(child)
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/pylint/utils.py"", line 662, in walk
    self.walk(child)
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/pylint/utils.py"", line 662, in walk
    self.walk(child)
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/pylint/utils.py"", line 662, in walk
    self.walk(child)
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/pylint/utils.py"", line 662, in walk
    self.walk(child)
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/pylint/utils.py"", line 662, in walk
    self.walk(child)
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/pylint/utils.py"", line 659, in walk
    cb(astroid)
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/pylint/checkers/typecheck.py"", line 174, in visit_getattr
    if is_super(owner) or getattr(owner, 'type', None) == 'metaclass':
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/astroid/bases.py"", line 51, in __getattr__
    return getattr(self._proxied, name)
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 681, in _class_type
    if _class_type(base, ancestors) != 'class':
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 680, in _class_type
    for base in klass.ancestors(recurs=False):
  File ""/Users/gillesdevaux/.virtualenvs/platform/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 801, in ancestors
    for baseobj in stmt.infer(context):
TypeError: unbound method infer() must be called with Tuple instance as first argument (got InferenceContext instance instead)
```

I nailed it down to this code

```
#!python

def merge_url_qs(url, **kw):
    """""" Merge the query string elements of a URL with the ones in ``kw``.
    If any query string element exists in ``url`` that also exists in
    ``kw``, replace it.""""""
    segments = urlparse.urlsplit(url)
    extra_qs = ['%s=%s' % (k, v) for (k, v) in
                urlparse.parse_qsl(segments.query, keep_blank_values=1)
                if k not in kw]
    qs = ''
    for k, v in sorted(kw.items()):
        qs += '%s=%s&' % (k, v)
    if extra_qs:
        qs += '&'.join(extra_qs)
    else:
        qs = qs[:-1]
    return urlparse.urlunsplit(
        (segments.scheme, segments.netloc, segments.path, qs, segments.fragment)
    )
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/5
",start issue,Pylint throws an Exception when analyzing a file
1,issue_closed,5,pycqa,astroid,pylint-bot,2015-12-09 05:51:32,,closed issue,Pylint throws an Exception when analyzing a file
2,issue_comment,5,pycqa,astroid,pylint-bot,2013-09-05 19:15:01,"_Original comment by_ **Chris Rebert (BitBucket: [cvrebert](http://bitbucket.org/cvrebert), GitHub: @cvrebert?)**:

---

Duplicate of [Issue #3](#3/error-after-upgrade-to-pylint-10)?
",,
3,issue_comment,5,pycqa,astroid,pylint-bot,2013-09-05 19:24:37,"_Original comment by_ **Gilles Devaux (BitBucket: [gillesdevaux](http://bitbucket.org/gillesdevaux))**:

---

looks like it
",,
0,issue_title,23,pycqa,astroid,pylint-bot,2014-03-24 15:12:29,"Originally reported by: **Anonymous**

---

Traceback (most recent call last):
  File ""C:\home\Programs\Python34\lib\site-packages\pylint-1.1.0-py3.4.egg\pylint\lint.py"", line 672, in get_ast
    return MANAGER.ast_from_file(filepath, modname, source=True)
  File ""C:\home\Programs\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\manager.py"", line 104, in ast_from_file
    return AstroidBuilder(self).file_build(filepath, modname)
  File ""C:\home\Programs\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\builder.py"", line 127, in file_build
    node = self.string_build(data, modname, path)
  File ""C:\home\Programs\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\builder.py"", line 133, in string_build
    module = self._data_build(data, modname, path)
  File ""C:\home\Programs\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\builder.py"", line 157, in _data_build
    module = rebuilder.visit_module(node, modname, package)
  File ""C:\home\Programs\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\rebuilder.py"", line 157, in visit_module
    newnode.body = [self.visit(child, newnode) for child in node.body]
  File ""C:\home\Programs\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\rebuilder.py"", line 157, in <listcomp>
    newnode.body = [self.visit(child, newnode) for child in node.body]
  File ""C:\home\Programs\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\rebuilder.py"", line 170, in visit
    return self._transform(visit_method(node, parent))
  File ""C:\home\Programs\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\rebuilder.py"", line 500, in visit_function
    newnode.body = [self.visit(child, newnode) for child in node.body]
  File ""C:\home\Programs\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\rebuilder.py"", line 500, in <listcomp>
    newnode.body = [self.visit(child, newnode) for child in node.body]
  File ""C:\home\Programs\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\rebuilder.py"", line 170, in visit
    return self._transform(visit_method(node, parent))
  File ""C:\home\Programs\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\rebuilder.py"", line 228, in visit_assign
    newnode.value = self.visit(node.value, newnode)
  File ""C:\home\Programs\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\rebuilder.py"", line 168, in visit
    visit_method = getattr(self, visit_name)
AttributeError: 'TreeRebuilder3k' object has no attribute 'visit_nameconstant'
************\* Module scratch
F0002:1:astroid-error: <class 'AttributeError'>: 'TreeRebuilder3k' object has no attribute 'visit_nameconstant'

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/23
",start issue,TreeRebuilder3k' object has no attribute 'visit_nameconstant'
1,issue_closed,23,pycqa,astroid,pylint-bot,2015-12-09 05:51:55,,closed issue,TreeRebuilder3k' object has no attribute 'visit_nameconstant'
2,issue_comment,23,pycqa,astroid,pylint-bot,2014-03-24 14:29:08,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

For Python 3.4 support, you need the astroid from the tip, not the one from the PyPi. It will be released later, though.
",,
3,issue_comment,23,pycqa,astroid,pylint-bot,2014-04-08 11:24:12,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

py 3.4 specific, resolved in astroid's tip
",,
0,issue_title,134,pycqa,astroid,pylint-bot,2015-06-20 19:01:23,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We currently don't have an Arg node for Python 3's arguments, because we are using AssName instead (this is how it works on Python 2).

```
#!python

>>> from ast import parse
>>> x = parse('''
... def test(a): pass
... ''')
>>> print(x)
<_ast.Module object at 0x0000000DBEF6F908>
>>> x.body
[<_ast.FunctionDef object at 0x0000000DBEF6F940>]
>>> x.body[0]
<_ast.FunctionDef object at 0x0000000DBEF6F940>
>>> x.body[0].args
<_ast.arguments object at 0x0000000DBEF6FA20>
>>> x.body[0].args.args
[<_ast.arg object at 0x0000000DBEF76A58>]
>>>
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/134
",start issue,Introduce a new Arg node for Python 3 function arguments
1,issue_closed,134,pycqa,astroid,pylint-bot,2015-12-09 05:53:56,,closed issue,Introduce a new Arg node for Python 3 function arguments
2,issue_comment,134,pycqa,astroid,pylint-bot,2015-08-10 19:48:33,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

In fact, it's nicer to have AssName instead of a new Arg node, since it needs to be the same on both Python 2 and Python 3. Introducing a new node will change that requirement.
",,
0,issue_title,29,pycqa,astroid,pylint-bot,2014-04-27 20:14:51,"Originally reported by: **Arfrever Frehtes Taifersar Arahesis (BitBucket: [arfrever](http://bitbucket.org/arfrever), GitHub: @arfrever?)**

---

unittest_brain.HashlibTC.test_hashlib() fails with Python 3.2.

```
======================================================================
ERROR: test_hashlib (unittest_brain.HashlibTC)
Tests that brain extensions for hashlib work.
----------------------------------------------------------------------
...
  File ""<string>"", line 6
    return u''
             ^
SyntaxError: invalid syntax
```

I attach patch.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/29
",start issue,unittest_brain.HashlibTC.test_hashlib() fails with Python 3.2
1,issue_closed,29,pycqa,astroid,pylint-bot,2015-12-09 05:52:04,,closed issue,unittest_brain.HashlibTC.test_hashlib() fails with Python 3.2
2,issue_comment,29,pycqa,astroid,pylint-bot,2014-08-18 12:59:06,"_Original comment by_ **Viktor Hercinger (BitBucket: [herczy](http://bitbucket.org/herczy), GitHub: @herczy?)**:

---

This doesn't just fail with the unittest, but also with a simple `import hashlib` too.
",,
3,issue_comment,29,pycqa,astroid,pylint-bot,2014-11-22 10:59:12,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

Fixed.
",,
4,issue_comment,29,pycqa,astroid,pylint-bot,2014-11-22 10:59:23,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

Return proper string types for hashlib overlay. Fixes #29.
",,
0,issue_title,62,pycqa,astroid,pylint-bot,2014-11-28 16:20:56,"Originally reported by: **BitBucket: [jcristau](http://bitbucket.org/jcristau), GitHub: @jcristau?**

---

in astroid 1.3.2, python 2.7:

```
=======================  unittest_regrtest.py  =======================
....SF..F..
======================================================================
FAIL: test_new_style_class_detection (unittest_regrtest.NonRegressionTests)
----------------------------------------------------------------------
Traceback (most recent call last)
  File ""/usr/lib/python2.7/unittest/case.py"", line 332, in run
    testMethod()
  File ""/home/jcr/src/bitbucket/logilab/astroid/astroid/tests/unittest_regrtest.py"", line 103, in test_new_style_class_detection
    self.assertTrue(a.newstyle)
  File ""/usr/lib/python2.7/unittest/case.py"", line 425, in assertTrue
    raise self.failureException(msg)
AssertionError: False is not true
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/62
",start issue,test failure: FAIL: test_new_style_class_detection (unittest_regrtest.NonRegressionTests)
1,issue_closed,62,pycqa,astroid,pylint-bot,2015-12-09 05:52:43,,closed issue,test failure: FAIL: test_new_style_class_detection (unittest_regrtest.NonRegressionTests)
2,issue_comment,62,pycqa,astroid,pylint-bot,2014-11-28 15:52:47,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I don't have a gtk environment at my disposal right now, but can you tell me what is the result of the following commands for this script?

```
#!python

import pygtk
pygtk.require(""2.6"")
import gobject

class A(gobject.GObject):
    pass
```

```
#!sh

$ pylint a.py
$ pylint a.py --extension-pkg-whitelist=gobject,pygtk
```

I hope this is just a side effect of the fact that we don't import anymore third party extension packages (which happened until astroid 1.3).
",,
3,issue_comment,62,pycqa,astroid,pylint-bot,2014-11-28 16:06:42,"_Original comment by_ **BitBucket: [jcristau](http://bitbucket.org/jcristau), GitHub: @jcristau?**:

---

Indeed it's probably due to not importing the binary extension.

```
$ PYTHONPATH=~/src/bitbucket/logilab/astroid:~/src/bitbucket/logilab src/bitbucket/logilab/pylint/bin/pylint a.py
No config file found, using default configuration
************* Module a
C:  1, 0: Missing module docstring (missing-docstring)
C:  7, 0: Invalid class name ""A"" (invalid-name)
C:  7, 0: Missing class docstring (missing-docstring)
W:  7, 0: Class has no __init__ method (no-init)
E:  7, 8: Module 'gobject' has no 'GObject' member (no-member)
R:  7, 0: Too few public methods (0/2) (too-few-public-methods)


Report
======
6 statements analysed.

Statistics by type
------------------

+---------+-------+-----------+-----------+------------+---------+
|type     |number |old number |difference |%documented |%badname |
+=========+=======+===========+===========+============+=========+
|module   |1      |1          |=          |0.00        |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|class    |1      |1          |=          |0.00        |100.00   |
+---------+-------+-----------+-----------+------------+---------+
|method   |0      |0          |=          |0           |0        |
+---------+-------+-----------+-----------+------------+---------+
|function |0      |0          |=          |0           |0        |
+---------+-------+-----------+-----------+------------+---------+



External dependencies
---------------------
::

    gobject (a)
    pygtk (a)



Raw metrics
-----------

+----------+-------+------+---------+-----------+
|type      |number |%     |previous |difference |
+==========+=======+======+=========+===========+
|code      |6      |75.00 |6        |=          |
+----------+-------+------+---------+-----------+
|docstring |0      |0.00  |0        |=          |
+----------+-------+------+---------+-----------+
|comment   |1      |12.50 |1        |=          |
+----------+-------+------+---------+-----------+
|empty     |1      |12.50 |1        |=          |
+----------+-------+------+---------+-----------+



Duplication
-----------

+-------------------------+------+---------+-----------+
|                         |now   |previous |difference |
+=========================+======+=========+===========+
|nb duplicated lines      |0     |0        |=          |
+-------------------------+------+---------+-----------+
|percent duplicated lines |0.000 |0.000    |=          |
+-------------------------+------+---------+-----------+



Messages by category
--------------------

+-----------+-------+---------+-----------+
|type       |number |previous |difference |
+===========+=======+=========+===========+
|convention |3      |3        |=          |
+-----------+-------+---------+-----------+
|refactor   |1      |1        |=          |
+-----------+-------+---------+-----------+
|warning    |1      |0        |+1.00      |
+-----------+-------+---------+-----------+
|error      |1      |0        |+1.00      |
+-----------+-------+---------+-----------+



Messages
--------

+-----------------------+------------+
|message id             |occurrences |
+=======================+============+
|missing-docstring      |2           |
+-----------------------+------------+
|too-few-public-methods |1           |
+-----------------------+------------+
|no-member              |1           |
+-----------------------+------------+
|no-init                |1           |
+-----------------------+------------+
|invalid-name           |1           |
+-----------------------+------------+



Global evaluation
-----------------
Your code has been rated at -6.67/10 (previous run: 3.33/10, -10.00)

$ PYTHONPATH=~/src/bitbucket/logilab/astroid:~/src/bitbucket/logilab src/bitbucket/logilab/pylint/bin/pylint  --extension-pkg-whitelist=gobject,pygtk a.py 2>&1 | sed 's/^/    /'
No config file found, using default configuration
************* Module a
C:  1, 0: Missing module docstring (missing-docstring)
C:  7, 0: Invalid class name ""A"" (invalid-name)
C:  7, 0: Missing class docstring (missing-docstring)
R:  7, 0: Too few public methods (0/2) (too-few-public-methods)


Report
======
6 statements analysed.

Statistics by type
------------------

+---------+-------+-----------+-----------+------------+---------+
|type     |number |old number |difference |%documented |%badname |
+=========+=======+===========+===========+============+=========+
|module   |1      |1          |=          |0.00        |0.00     |
+---------+-------+-----------+-----------+------------+---------+
|class    |1      |1          |=          |0.00        |100.00   |
+---------+-------+-----------+-----------+------------+---------+
|method   |0      |0          |=          |0           |0        |
+---------+-------+-----------+-----------+------------+---------+
|function |0      |0          |=          |0           |0        |
+---------+-------+-----------+-----------+------------+---------+



External dependencies
---------------------
::

    gobject (a)
    pygtk (a)



Raw metrics
-----------

+----------+-------+------+---------+-----------+
|type      |number |%     |previous |difference |
+==========+=======+======+=========+===========+
|code      |6      |75.00 |6        |=          |
+----------+-------+------+---------+-----------+
|docstring |0      |0.00  |0        |=          |
+----------+-------+------+---------+-----------+
|comment   |1      |12.50 |1        |=          |
+----------+-------+------+---------+-----------+
|empty     |1      |12.50 |1        |=          |
+----------+-------+------+---------+-----------+



Duplication
-----------

+-------------------------+------+---------+-----------+
|                         |now   |previous |difference |
+=========================+======+=========+===========+
|nb duplicated lines      |0     |0        |=          |
+-------------------------+------+---------+-----------+
|percent duplicated lines |0.000 |0.000    |=          |
+-------------------------+------+---------+-----------+



Messages by category
--------------------

+-----------+-------+---------+-----------+
|type       |number |previous |difference |
+===========+=======+=========+===========+
|convention |3      |3        |=          |
+-----------+-------+---------+-----------+
|refactor   |1      |1        |=          |
+-----------+-------+---------+-----------+
|warning    |0      |1        |-1.00      |
+-----------+-------+---------+-----------+
|error      |0      |1        |-1.00      |
+-----------+-------+---------+-----------+



Messages
--------

+-----------------------+------------+
|message id             |occurrences |
+=======================+============+
|missing-docstring      |2           |
+-----------------------+------------+
|too-few-public-methods |1           |
+-----------------------+------------+
|invalid-name           |1           |
+-----------------------+------------+



Global evaluation
-----------------
Your code has been rated at 3.33/10 (previous run: -6.67/10, +10.00)
```
",,
4,issue_comment,62,pycqa,astroid,pylint-bot,2014-12-04 10:49:13,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

fix test failure in unittest_regrtest, due to change in the handling of extensions loading

Allowing to load arbitrary extensions fix test_new_style_class_detection but
make test_numpy_crash fail because inference seems to do a better job than
before and doesn't return anymore a YES object. As this test only checks that it
doesn't crash, simply stop checking this.

Closes #62
",,
0,issue_title,46,pycqa,astroid,pylint-bot,2014-08-05 17:53:26,"Originally reported by: **Michal Nowikowski (BitBucket: [godfryd](http://bitbucket.org/godfryd), GitHub: @godfryd?)**

---

Not precise data can get into node.locals.
For example test code:

```
""""""unused import""""""
import xml.etree  # [unused-import]
import xml.sax  # [unused-import]
```

node.locals contains:

```
#!python
{'xml': [<Import() l.2 [functional.unused_import] at 0x7f18cde2ec10>, <Import() l.3 [functional.unused_import] at 0x7f18cde46090>]}
```

xml is not a local name. It cannot be referenced in code. 
There is only available either xml.etree or xml.sax.

Wouldn't it be better to fix node.locals that it contains:

```
#!python
{'xml.etree': [<Import() l.2 [functional.unused_import] at 0x7f18cde2ec10>],
 'xml.sax': [<Import() l.3 [functional.unused_import] at 0x7f18cde46090>]}
```

This issue is related to issue pylint#293.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/46
",start issue,node.locals contains not precise data
1,issue_closed,46,pycqa,astroid,pylint-bot,2015-12-09 05:52:22,,closed issue,node.locals contains not precise data
2,issue_comment,46,pycqa,astroid,pylint-bot,2014-08-25 07:00:01,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

this is not true, in your example 'xml' **is** a local name, as demonstrated below:

```
#!python

>>> import xml.etree
>>> print xml
<module 'xml' from '/usr/lib/python2.7/xml/__init__.pyc'>
```

the 'import x.y' form of import in python is importing the 'x' package, then the 'y' subpackage/module, then bind 'x' to the local namespace.
",,
0,issue_title,258,pycqa,astroid,pylint-bot,2015-11-19 05:15:35,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

There's another builtin type in CPython 3.3+ called SimpleNamespace, exposed in types.  I think it's implemented in C but I'm not certain.  It's used for `sys.implementation`; I don't know if it's used anywhere else.  When something tries to import a module containing a SimpleNamespace instance, ast_from_object eventually finds the following definition in `types` and adds it as an AssignNode:

``` python
SimpleNamespace = type(sys.implementation)
```

However, since that `type` call doesn't point to anything inference can understand, it ultimately causes tests to fail.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/258
",start issue,[2.0 bugs] SimpleNamespace causes any tests that ultimately import sys to fail on Python 3
1,issue_closed,258,pycqa,astroid,pylint-bot,2015-12-09 05:55:55,,closed issue,[2.0 bugs] SimpleNamespace causes any tests that ultimately import sys to fail on Python 3
2,issue_comment,258,pycqa,astroid,pylint-bot,2015-11-21 17:47:03,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Added SimpleNamespace to the builtins mock AST in e7139c4.
",,
0,issue_title,260,pycqa,astroid,pylint-bot,2015-11-22 04:53:18,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

Previously, the code for building mock ASTs for enums was directly inserting Instance objects into the locals dictionary for enums.  I changed this to wrap them in InterpreterObjects, but this is now breaking the tests.  I'm not quite sure what the best way to handle this situation is.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/260
",start issue,[2.0 bugs] Enum mock ASTs
1,issue_closed,260,pycqa,astroid,pylint-bot,2015-12-09 05:55:57,,closed issue,[2.0 bugs] Enum mock ASTs
2,issue_comment,260,pycqa,astroid,pylint-bot,2015-11-23 08:31:16,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Taking a look at the test test_int_enum for instance, it seems that it doesn't use inference after obtaining the attribute with .getattr. In that case, just change it to use either igetattr or to infer what's retrieving, this should fix the problem. Wrapping these in InterpreterObjects makes sense.
",,
3,issue_comment,260,pycqa,astroid,pylint-bot,2015-11-23 16:28:53,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Enum tests changed to use inference properly in 054966c1572d
",,
0,issue_title,216,pycqa,astroid,pylint-bot,2015-10-19 17:23:54,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

EmptyNode is used to hold a name and a node for an arbitrary object in the locals attribute of astroid scoped nodes in artificial ASTs that mimic builtin objects or other such things.  Since it has fields, ""Empty"" isn't an appropriate moniker.  Maybe ""Alias?""  There's probably another better name.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/216
",start issue,Rename EmptyNode and repurpose it to explicitly hold representations of runtime objects inside ASTs
1,issue_closed,216,pycqa,astroid,pylint-bot,2015-12-09 05:55:19,,closed issue,Rename EmptyNode and repurpose it to explicitly hold representations of runtime objects inside ASTs
2,issue_comment,216,pycqa,astroid,pylint-bot,2015-11-03 04:59:36,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

infer_empty_node at the moment seems to be taking a Python runtime object and then using it (through several levels of indirection) to get an AST, whether from parsing the code for the module it's from or using the functions to build it from a live object.  (I don't know what happens if infer_empty_node is called on a node containing an AST?  I thought that could happen, but the code seems like it would raise if it did.)  Anyway, there's no reason to have a special node type that returns ordinary AST nodes, it would be simpler and faster to simply insert the node in question into the AST.  That said, there is a use for a special node that returns a runtime object which otherwise can't be found in an AST, so I propose that should be the explicit purpose of EmptyNode from now on.  The first name that occurs is ObjectProxy---the only reason I see not to use it is that we're using lots of other things called object proxies, so that might be confusing.
",,
3,issue_comment,216,pycqa,astroid,pylint-bot,2015-11-03 08:45:07,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

""I don't know what happens if infer_empty_node is called on a node
containing an AST?"" that should not happen. infer_empty_node is the
._infer() method for the EmptyNode class, which is monkey-patched as other
inference method.

Anyway you're right that we could probably build the AST for the runtime
object statically instead of at inference time. In case that work (ie
inference return a single known object) we can probably get ride of the
EmptyNode. I'm not quite sure this actually happen though, and the
EmptyNode purpose isn't already the one you suggest. In any case I agree
EmptyNode could be renamed and its inference method simplified.
",,
4,issue_comment,216,pycqa,astroid,pylint-bot,2015-11-03 14:49:43,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I wasn't quite clear on what I meant: I should have said, ""when infer_empty_node is called on an EmptyNode whose self.object attribute contains an AST node rather than a live Python object.""

I think we still do need a node to hold all the classes representing runtime objects, that don't have normal representations in ASTs: this is everything in the interpreter module in the 2.0 bookmark, now that we're formally splitting static from dynamic objects.  Since it's already performing this task in at least some cases, I think we might as well reuse the existing code.
",,
5,issue_comment,216,pycqa,astroid,pylint-bot,2015-11-03 15:16:51,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Right, at this point it seems more sane to build the AST dynamically instead of wrapping pure Python objects with EmptyNode. I do agree with @ceridwenv regarding the existence of another node which should encapsulate runtime objects (through runtime objects we mean things from astroid.interpreter.objects, which can't be represented by an AST, as it is the case for Super, Instance and so on). The question is how many occurrences of these objects do we currently have and in which places they are? Also, in this case we can rename it to RuntimeObject, it's more meaningful than ObjectProxy.
",,
6,issue_comment,216,pycqa,astroid,pylint-bot,2015-11-03 16:30:24,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Maybe InterpreterObject, to be consistent with the module interpreter.py?
",,
7,issue_comment,216,pycqa,astroid,pylint-bot,2015-11-03 16:31:45,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Sounds good. Apart of the current uses of EmptyNode with a Python object, where InterpreterObject is currently used?
",,
8,issue_comment,216,pycqa,astroid,pylint-bot,2015-11-03 17:20:10,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I'm not sure what you're asking here? 
",,
9,issue_comment,216,pycqa,astroid,pylint-bot,2015-11-03 17:30:25,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

If we have places where we use InterpreterObject (EmptyNode) with interpreter objects (Instance, BoundMethod) etc. I think we have two places modified recently, in nose and enum plugins, but we have others?
",,
10,issue_comment,216,pycqa,astroid,pylint-bot,2015-11-03 18:35:07,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

They are used in nose and multiprocessing to hold BoundMethods.  Enum handling on modular-locals still has some bugs I need to fix, I forget if they're still used there.  help in builtins is an instance of a class _Helper._site.builtins or something like that so it's used there.  At some point during the tests inference is called on one holding one of the _ModuleLoader objects.  I don't know if that's all of them, but it's most of them. 
",,
11,issue_comment,216,pycqa,astroid,pylint-bot,2015-11-14 05:11:31,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Done in 3e3b3e936b69, including changing the name and fixing the inference function.
",,
0,issue_title,281,pycqa,astroid,ceridwen,2015-12-11 01:25:54,"We should integrate https://pypi.python.org/pypi/coverage into tox to figure out where else we need tests.  There are a couple of different ways to do this, http://lists.idyll.org/pipermail/testing-in-python/2015-June/006462.html has a reasonable overview.  
",start issue,Use coverage to measure test coverage
1,issue_closed,281,pycqa,astroid,ceridwen,2016-01-19 00:01:57,,closed issue,Use coverage to measure test coverage
2,issue_comment,281,pycqa,astroid,ceridwen,2016-01-19 00:01:57,"Added coverage in c71e1672.
",,
0,issue_title,280,pycqa,astroid,arusahni,2015-12-10 11:39:49,"For future iterations, we should switch to using pre-canned ignore lists
from https://gitignore.io.
",start issue,Port .hgignore to .gitignore
1,issue_closed,280,pycqa,astroid,PCManticore,2015-12-10 22:24:13,,closed issue,Port .hgignore to .gitignore
2,pull_request_title,280,pycqa,astroid,arusahni,2015-12-10 11:39:49,"For future iterations, we should switch to using pre-canned ignore lists
from https://gitignore.io.
",21e06cccd59415a1bdf90a70e24b3fe0977ea743,Port .hgignore to .gitignore
3,pull_request_merged,280,pycqa,astroid,PCManticore,2015-12-10 22:24:13,Port .hgignore to .gitignore,1f4db220614ac0e680cfacc246b82267408e50b6,Pull request merge from Unknown:ignore-fix to PyCQA/astroid:master
4,issue_comment,280,pycqa,astroid,PCManticore,2015-12-10 22:24:21,"Thank you.
",,
5,pull_request_commit,280,pycqa,astroid,arusahni,2015-12-10 11:37:34,"Port hgignore to gitignore.

For future iterations, we should switch to using pre-canned ignore lists
from https://gitignore.io.",21e06cccd59415a1bdf90a70e24b3fe0977ea743,
0,issue_title,267,pycqa,astroid,pylint-bot,2015-11-26 11:15:02,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

There are a couple of nodes in the builtin module **ast** which provide a `.ctx` member, useful for determining in what context these nodes occurred, with types such as **Store**, for instance for `x[1] = 2`, **Del** for `del x[1]` and **Load** for the rest of them. Might be useful for pylint for disambiguating between a `__getitem__` call or a  `__setitem__` call.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/267
",start issue,"Add a context for certain nodes, similar to the builtin module ast"
1,issue_closed,267,pycqa,astroid,pylint-bot,2015-12-09 05:56:03,,closed issue,"Add a context for certain nodes, similar to the builtin module ast"
2,issue_comment,267,pycqa,astroid,pylint-bot,2015-12-08 09:36:10,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Some nodes got a new attribute, 'ctx', which tells in which context the said node was used.

The possible values for the contexts are `Load` ('a'), `Del` ('del a'),
`Store` ('a = 4') and the nodes that got the new attribute are Starred,
Subscript, List and Tuple. The builtin ast module provides contexts for
Name and Attribute as well, but we took a different approach in the past,
by having different nodes for each type of context. For instance, Name
used in a Del context is a DelName, while Name used in a Store
context is AssignName. Since this is ingrained in astroid since quite
some time, it makes no sense to change them as well, even though it's
a loss of consistency.
The patch introduces a new dependency to enum34 on older Python
versions, which is used for building the three possible enum values
for the contexts.

Closes issue #267.
",,
3,issue_comment,267,pycqa,astroid,pylint-bot,2015-12-08 09:36:11,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Some nodes got a new attribute, 'ctx', which tells in which context the said node was used.

The possible values for the contexts are `Load` ('a'), `Del` ('del a'),
`Store` ('a = 4') and the nodes that got the new attribute are Starred,
Subscript, List and Tuple. The builtin ast module provides contexts for
Name and Attribute as well, but we took a different approach in the past,
by having different nodes for each type of context. For instance, Name
used in a Del context is a DelName, while Name used in a Store
context is AssignName. Since this is ingrained in astroid since quite
some time, it makes no sense to change them as well, even though it's
a loss of consistency.
The patch introduces a new dependency to enum34 on older Python
versions, which is used for building the three possible enum values
for the contexts.

Closes issue #267.
",,
0,issue_title,53,pycqa,astroid,pylint-bot,2014-11-04 11:19:59,"Originally reported by: **Gilles Dartiguelongue (BitBucket: [EvaSDK](http://bitbucket.org/EvaSDK), GitHub: @EvaSDK?)**

---

I am currently trying to work with changeset:   1273:4b36c6903a05 and python3.3 is not easily avaible to me right now but I do have 3.4 installed but:

```
$ tox
GLOB sdist-make: /Users/gilles/devel/astroid-evasdk/setup.py
py27 inst-nodeps: /Users/gilles/devel/astroid-evasdk/.tox/dist/astroid-1.2.1.zip
py27 runtests: PYTHONHASHSEED='1125974306'
py27 runtests: commands[0] | python -Wi -m unittest discover -p unittest*.py
...........s.................................................................................................................s.....................................................................................................s.............s..............................s.s.s.s.s.s.s.s.s.s.s.s.s............s.s.s..s.................................................................
----------------------------------------------------------------------
Ran 361 tests in 1.584s

OK (skipped=21)
py34 recreate: /Users/gilles/devel/astroid-evasdk/.tox/py34
py34 installdeps: logilab-common
py34 inst: /Users/gilles/devel/astroid-evasdk/.tox/dist/astroid-1.2.1.zip
py34 runtests: PYTHONHASHSEED='1125974306'
py34 runtests: commands[0] | python -Wi -m unittest discover -p unittest*.py
.s..........s..s......................s..s..............................................F......................s..............s.........................s.........................................................................s...s...........s............................s.............................s.s..s....................s..s.....s.s..s.s.................s.................
======================================================================
FAIL: test_builtin_help (unittest_inference.InferenceTC)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/Users/gilles/devel/astroid-evasdk/.tox/py34/lib/python3.4/site-packages/astroid/test/unittest_inference.py"", line 711, in test_builtin_help
    'Instance of %s._Helper' % SITE)
AssertionError: 'Instance of site._Helper' != 'Instance of _sitebuiltins._Helper'
- Instance of site._Helper
+ Instance of _sitebuiltins._Helper
?             +    ++++++++


----------------------------------------------------------------------
Ran 357 tests in 3.349s

FAILED (failures=1, skipped=22)
ERROR: InvocationError: '/Users/gilles/devel/astroid-evasdk/.tox/py34/bin/python -Wi -m unittest discover -p unittest*.py'
______________________________________________________________________________________ summary ______________________________________________________________________________________
  py27: commands succeeded
ERROR:   py34: commands failed
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/53
",start issue,unittests fail with python3.4
1,issue_closed,53,pycqa,astroid,pylint-bot,2015-12-09 05:52:31,,closed issue,unittests fail with python3.4
2,issue_comment,53,pycqa,astroid,pylint-bot,2014-11-04 10:43:12,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

It seems that virtualenv uses a completely different site.py than the one from stdlib, which leads to this result. In Python 3.4, `help` is defined in _sitebuiltins, which is imported in site.py, but in virtualenv's version of site.py, there's no _sitebuiltins.
",,
3,issue_comment,53,pycqa,astroid,pylint-bot,2014-11-04 10:55:18,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Check only the name of `help` function. Closes issue #53.
",,
0,issue_title,227,pycqa,astroid,pylint-bot,2015-10-26 09:47:59,"Originally reported by: **Antony Lee (BitBucket: [anntzer](http://bitbucket.org/anntzer), GitHub: @anntzer?)**

---

```
$ pip install --user --upgrade --no-deps -vvv hg+ssh://hg@bitbucket.org/logilab/astroid
<... elided>
      File ""/home/antony/.local/lib/python3.5/site-packages/astroid/tests/unittest_raw_building.py"", line 62
        def f(a, (b, (c, d))):
                 ^
    SyntaxError: invalid syntax

  Removing source in /tmp/pip-h9nj9jv_-build
Successfully installed astroid-1.4.0
Cleaning up...
```

Actually the installation seems to be fine, so it's rather benign.

However, pylint doesn't like it:

```
$ touch /tmp/foo.py
$ pylint /tmp/foo.py
Warning: option profile is obsolete and it is slated for removal in Pylint 1.6.
Warning: option comment is obsolete and it is slated for removal in Pylint 1.6.
Warning: option ignore-iface-methods is obsolete and it is slated for removal in Pylint 1.6.
Warning: option required-attributes is obsolete and it is slated for removal in Pylint 1.6.
Warning: option zope is obsolete and it is slated for removal in Pylint 1.6.
Traceback (most recent call last):
  File ""/usr/bin/pylint"", line 9, in <module>
    load_entry_point('pylint==1.5.0', 'console_scripts', 'pylint')()
  File ""/home/antony/.local/lib/python3.5/site-packages/pylint/__init__.py"", line 23, in run_pylint
    Run(sys.argv[1:])
  File ""/home/antony/.local/lib/python3.5/site-packages/pylint/lint.py"", line 1311, in __init__
    linter.check(args)
  File ""/home/antony/.local/lib/python3.5/site-packages/pylint/lint.py"", line 734, in check
    self._do_check(files_or_modules)
  File ""/home/antony/.local/lib/python3.5/site-packages/pylint/lint.py"", line 861, in _do_check
    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)
  File ""/home/antony/.local/lib/python3.5/site-packages/pylint/lint.py"", line 919, in check_astroid_module
    tokens = utils.tokenize_module(ast_node)
  File ""/home/antony/.local/lib/python3.5/site-packages/pylint/utils.py"", line 150, in tokenize_module
    with module.stream() as stream:
  File ""/home/antony/.local/lib/python3.5/site-packages/astroid/scoped_nodes.py"", line 390, in stream
    return self._get_stream()
  File ""/home/antony/.local/lib/python3.5/site-packages/astroid/scoped_nodes.py"", line 376, in _get_stream
    if self.file_bytes is not None:
AttributeError: 'Module' object has no attribute 'file_bytes'
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/227
",start issue,tip issues on Python3.5
1,issue_closed,227,pycqa,astroid,pylint-bot,2015-12-09 05:55:28,,closed issue,tip issues on Python3.5
2,issue_comment,227,pycqa,astroid,pylint-bot,2015-10-26 09:28:18,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

This seems that you installed a under-development bookmark. Could you try to do a clone instead and before running python setup.py install, do a hg update @? That's the default bookmark which should be working under all conditions. Unfortunately pip doesn't handle this bookmark thingy properly. The problem with raw_building is actually from another under-development bookmark.
",,
3,issue_comment,227,pycqa,astroid,pylint-bot,2015-10-26 18:46:27,"_Original comment by_ **Antony Lee (BitBucket: [anntzer](http://bitbucket.org/anntzer), GitHub: @anntzer?)**:

---

That works, thanks.
",,
0,issue_title,138,pycqa,astroid,pylint-bot,2015-06-20 20:18:59,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given the following code, `c` is inferred as an int, not as a list.

```
#!python

a = (1, 2, 3)
b, *c = a #
print(c.lala)
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/138
",start issue,Understand tuple unpacking correctly
1,issue_closed,138,pycqa,astroid,pylint-bot,2015-12-09 05:54:00,,closed issue,Understand tuple unpacking correctly
2,issue_comment,138,pycqa,astroid,pylint-bot,2015-06-30 23:36:52,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Star unpacking in assignments returns properly a list, not the individual components. Closes issue #138.
",,
3,issue_comment,138,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Star unpacking in assignments returns properly a list, not the individual components. Closes issue #138.
",,
0,issue_title,87,pycqa,astroid,pylint-bot,2015-03-27 22:47:07,"Originally reported by: **Cole Robinson (BitBucket: [crobinso](http://bitbucket.org/crobinso), GitHub: @crobinso?)**

---

The way we inspect gi modules can trigger python-gobject deprecation
warnings. At least on Fedora 22 this is very noisy with a ton of
warnings right after running pylint on gi using code.

Silence the specific pygi deprecation warnings.

(sorry, tried to submit a pull request but my local mercurial or git-remote-hg is falling over, so patch attached)

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/86
",start issue,brain: py2gi: Silence pygi deprecation warnings
1,issue_closed,87,pycqa,astroid,pylint-bot,2015-12-09 05:53:17,,closed issue,brain: py2gi: Silence pygi deprecation warnings
2,issue_comment,87,pycqa,astroid,pylint-bot,2015-03-28 16:18:18,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Supress py2gi warnings. Patch by Cole Robinson. Closes issue #86.
",,
0,issue_title,66,pycqa,astroid,pylint-bot,2014-12-09 15:18:56,"Originally reported by: **Anonymous**

---

I'm using **getattr** in a base class for dynamic methods, and I'd like to be able to set that base class to ignore in TYPECHECK so that I am not bombarded with 'no-member' errors in pylint. There are a lot of classes deriving from this base class, and it's quite the pain to include every new derived class in the 'ignored-classes' part of the pylintrc. It'd be much easier if Pylint ignored sub-classes for typechecking if the base class is ignored. 

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/66
",start issue,Ignored base classes do not affect derived classes (typecheck: ignored-classes)
1,issue_closed,66,pycqa,astroid,pylint-bot,2015-12-09 05:52:46,,closed issue,Ignored base classes do not affect derived classes (typecheck: ignored-classes)
2,issue_comment,66,pycqa,astroid,pylint-bot,2015-03-14 12:45:52,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Could you report this issue on Pylint's tracker https://bitbucket.org/logilab/pylint/? The general idea sounds good, but the issue belongs there. Thank you.
",,
0,issue_title,239,pycqa,astroid,pylint-bot,2015-11-01 15:35:16,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Reproducing with this code. In this case, b can be inferred as an empty list, but the code instead raises an InferenceError when it gets to analyze it.

```
#!python

from astroid.test_utils import extract_node
n = extract_node('''
a, *b, c = 1, 2
b #@
''')
print(next(n.infer()))
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/239
",start issue,Unpacking bug in protocols.starred_assignmed_stmts
1,issue_closed,239,pycqa,astroid,pylint-bot,2015-12-09 05:55:39,,closed issue,Unpacking bug in protocols.starred_assignmed_stmts
2,issue_comment,239,pycqa,astroid,pylint-bot,2015-11-10 23:33:25,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fix a bug in the inference of Starred nodes

This bug occurs when the left hand side of an assignment has an extra element
comparing with the right hand side, which makes the Starred node to not be inferred
correctly as an empty List. Closes issue #239.
",,
0,issue_title,116,pycqa,astroid,pylint-bot,2015-06-20 14:52:41,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

astroid's transform are executed at the same step as the tree rebuilding, which means that if the transform function is doing inference, then it is inferring on a partial tree, which might result in potential errors. In fact, there is a known report of this kind of crash: https://bitbucket.org/logilab/pylint/issue/426/inference-system-errors-out-on-imported
We should separate these steps into two: first build the tree and on the resulting tree apply the transformations.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/116
",start issue,Add a separate step for transforms
1,issue_closed,116,pycqa,astroid,pylint-bot,2015-12-09 05:53:42,,closed issue,Add a separate step for transforms
2,issue_comment,116,pycqa,astroid,pylint-bot,2015-08-02 07:03:55,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

There's a new separate step for transforms.

Until now, the transforms were applied at the same time the tree was
being built. This was problematic if the transform functions were
using inference, since the inference was executed on a partially
constructed tree, which led to failures when post-building
information was needed (such as setting the _from_names
for the From imports).
Now there's a separate step for transforms, which are applied
using transform.TransformVisitor.

There's a couple of other related changes:

```
  * astroid.parse and AstroidBuilder gained a new parameter
    `apply_transforms`, which is a boolean flag, which will
    control if the transforms are applied. We do this because
    there are uses when the vanilla tree is wanted, without
    any implicit modification.

  * the transforms are also applied for builtin modules,
    as a side effect of the fact that transform visiting
    was moved in AstroidBuilder._post_build from
    AstroidBuilder._data_build.
```

Closes issue #116.
",,
3,issue_comment,116,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

There's a new separate step for transforms.

Until now, the transforms were applied at the same time the tree was
being built. This was problematic if the transform functions were
using inference, since the inference was executed on a partially
constructed tree, which led to failures when post-building
information was needed (such as setting the _from_names
for the From imports).
Now there's a separate step for transforms, which are applied
using transform.TransformVisitor.

There's a couple of other related changes:

```
  * astroid.parse and AstroidBuilder gained a new parameter
    `apply_transforms`, which is a boolean flag, which will
    control if the transforms are applied. We do this because
    there are uses when the vanilla tree is wanted, without
    any implicit modification.

  * the transforms are also applied for builtin modules,
    as a side effect of the fact that transform visiting
    was moved in AstroidBuilder._post_build from
    AstroidBuilder._data_build.
```

Closes issue #116.
",,
0,issue_title,224,pycqa,astroid,pylint-bot,2015-10-25 23:27:29,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

Python classes, functions, and modules have their own intrinsic names.  In pure Python code, it's not possible to create such an object without adding the intrinsic name to the local namespace, but some special objects can break this rule.  When constructing ASTs from these objects, there are really three possible approache when building a corresponding node: always use the name the parent object uses, always use the intrinsic name, or use an AssignName node to assign the node for the child object to the name the parent uses (if they differ) so the node is available under both names in the namespace.  Other possibilities involve imprecise heuristics that I think would be fragile, hard to understand, and unmaintainable.  What would work best for the inference? 

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/224
",start issue,Naming issues in ASTs constructed from live objects
1,issue_closed,224,pycqa,astroid,pylint-bot,2015-12-09 05:55:26,,closed issue,Naming issues in ASTs constructed from live objects
2,issue_comment,224,pycqa,astroid,pylint-bot,2015-11-03 16:34:06,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

When you say special objects, you're referring in this case to <class 'function'> and such? 
",,
3,issue_comment,224,pycqa,astroid,pylint-bot,2015-11-03 17:20:24,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Yes.
",,
4,issue_comment,224,pycqa,astroid,pylint-bot,2015-11-04 07:47:09,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

As mentioned in issue #241, where this also comes up, let them both be discoverable. One thing that you can also do is to create a dummy `__all__` variable in the mocked builtins module, which shouldn't contain those hidden names. This might be used by pylint for instance.
",,
5,issue_comment,224,pycqa,astroid,pylint-bot,2015-11-19 04:06:16,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Fixed in 8aca20dd1814.
",,
0,issue_title,102,pycqa,astroid,pylint-bot,2015-06-02 11:17:27,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Useful for flow control analysis and not only.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/102
",start issue,Understand hasattr builtin
1,issue_closed,102,pycqa,astroid,pylint-bot,2015-12-09 05:53:29,,closed issue,Understand hasattr builtin
2,issue_comment,102,pycqa,astroid,pylint-bot,2015-06-07 12:23:13,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add inference support for hasattr builtin. Closes issue #102.
",,
0,issue_title,45,pycqa,astroid,pylint-bot,2014-08-01 00:02:43,"Originally reported by: **Brian Lane (BitBucket: [bcl](http://bitbucket.org/bcl), GitHub: @bcl?)**

---

We have this bug report in Fedora - https://bugzilla.redhat.com/show_bug.cgi?id=1125259

It looks like the Method class is missing a _type attribute.

```
#!python

Version-Release number of selected component:
pylint-1.2-6.fc20

Additional info:
reporter:       libreport-2.2.3
cmdline:        /usr/bin/python /usr/bin/pylint '--msg-template={path}:{line}: [{msg_id}] {msg}' -r n scenarios/Apache.py --disable=C0103,W1201
dso_list:       python-astroid-1.1-3.fc20.noarch
executable:     /usr/bin/pylint
kernel:         3.14.4-200.fc20.x86_64
runlevel:       N 5
type:           Python
uid:            1000

Truncated backtrace:
scoped_nodes.py:686:_is_metaclass:AttributeError: 'Module' object has no attribute '_type'

Traceback (most recent call last):
  File ""/usr/bin/pylint"", line 9, in <module>
    load_entry_point('pylint==1.2.0', 'console_scripts', 'pylint')()
  File ""/usr/lib/python2.7/site-packages/pylint/__init__.py"", line 21, in run_pylint
    Run(sys.argv[1:])
  File ""/usr/lib/python2.7/site-packages/pylint/lint.py"", line 1047, in __init__
    linter.check(args)
  File ""/usr/lib/python2.7/site-packages/pylint/lint.py"", line 626, in check
    self.check_astroid_module(astroid, walker, rawcheckers, tokencheckers)
  File ""/usr/lib/python2.7/site-packages/pylint/lint.py"", line 712, in check_astroid_module
    walker.walk(astroid)
  File ""/usr/lib/python2.7/site-packages/pylint/utils.py"", line 715, in walk
    self.walk(child)
  File ""/usr/lib/python2.7/site-packages/pylint/utils.py"", line 712, in walk
    cb(astroid)
  File ""/usr/lib/python2.7/site-packages/pylint/checkers/classes.py"", line 249, in visit_class
    if node.type == 'class':
  File ""/usr/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 702, in _class_type
    if _is_metaclass(klass):
  File ""/usr/lib/python2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if baseobj._type == 'metaclass':
AttributeError: 'Module' object has no attribute '_type'

Local variables in innermost frame:
baseobj: <Module(scenarios.GenericTest) l.0 [scenarios.GenericTest] at Ox139f710>
base: <Name(GenericTest) l.12 [scenarios.Apache] at Ox109d150>
klass: <Class(Apache) l.12 [scenarios.Apache] at Ox10a2350>
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/45
",start issue,AttributeError: 'Module' object has no attribute '_type'
1,issue_closed,45,pycqa,astroid,pylint-bot,2015-12-09 05:52:21,,closed issue,AttributeError: 'Module' object has no attribute '_type'
2,issue_comment,45,pycqa,astroid,pylint-bot,2014-08-01 04:14:20,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Does this replicate with Astroid 1.2?
",,
3,issue_comment,45,pycqa,astroid,pylint-bot,2014-08-01 17:07:38,"_Original comment by_ **Brian Lane (BitBucket: [bcl](http://bitbucket.org/bcl), GitHub: @bcl?)**:

---

I don't have any way to check, but from looking at the current code in astroid I don't see _type set on Module and the _is_metaclass code looks the same. Are there other changes that may prevent it from getting that far?
",,
4,issue_comment,45,pycqa,astroid,pylint-bot,2014-08-01 17:36:42,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Well, only Class nodes should be processed by _is_metaclass. Could you provide a small sample that reproduces the code?
",,
5,issue_comment,45,pycqa,astroid,pylint-bot,2014-08-23 03:58:57,"_Original comment by_ **Andrew Kuchev (BitBucket: [4soon](http://bitbucket.org/4soon))**:

---

I have similar problem when checking the following code:

```
#!python

def decor(f):
    return f


class Foo:
    @decor
    def prop(self):
        pass


if __name__ == '__main__':
    f = Foo()
    f.prop = 42
```

The stacktrace is:

```
#!python

$ pylint main.py
No config file found, using default configuration
************* Module main
C: 13, 0: Final newline missing (missing-final-newline)
C:  1, 0: Missing module docstring (missing-docstring)
W:  1,10: Redefining name 'f' from outer scope (line 12) (redefined-outer-name)
C:  1, 0: Invalid argument name ""f"" (invalid-name)
C:  1, 0: Missing function docstring (missing-docstring)
C:  5, 0: Missing class docstring (missing-docstring)
W:  5, 0: Class has no __init__ method (no-init)
C:  7, 4: Missing method docstring (missing-docstring)
Traceback (most recent call last):
  File ""/usr/bin/pylint"", line 9, in <module>
    load_entry_point('pylint==1.3.0', 'console_scripts', 'pylint')()
  File ""/usr/lib/python3.4/site-packages/pylint-1.3.0-py3.4.egg/pylint/__init__.py"", line 21, in run_pylint
    Run(sys.argv[1:])
  File ""/usr/lib/python3.4/site-packages/pylint-1.3.0-py3.4.egg/pylint/lint.py"", line 991, in __init__
    linter.check(args)
  File ""/usr/lib/python3.4/site-packages/pylint-1.3.0-py3.4.egg/pylint/lint.py"", line 585, in check
    self.check_astroid_module(astroid, walker, rawcheckers, tokencheckers)
  File ""/usr/lib/python3.4/site-packages/pylint-1.3.0-py3.4.egg/pylint/lint.py"", line 662, in check_astroid_module
    walker.walk(astroid)
  File ""/usr/lib/python3.4/site-packages/pylint-1.3.0-py3.4.egg/pylint/utils.py"", line 804, in walk
    self.walk(child)
  File ""/usr/lib/python3.4/site-packages/pylint-1.3.0-py3.4.egg/pylint/utils.py"", line 804, in walk
    self.walk(child)
  File ""/usr/lib/python3.4/site-packages/pylint-1.3.0-py3.4.egg/pylint/utils.py"", line 801, in walk
    cb(astroid)
  File ""/usr/lib/python3.4/site-packages/pylint-1.3.0-py3.4.egg/pylint/checkers/classes.py"", line 347, in visit_function
    if overridden_frame.type == 'method':
AttributeError: 'Module' object has no attribute 'type'

```

Version: 

```
$ pylint --version
No config file found, using default configuration
pylint 1.3.0, 
astroid 1.2.0, common 0.62.1
Python 3.4.1 (default, May 19 2014, 17:23:49) 
[GCC 4.9.0 20140507 (prerelease)]
```
",,
6,issue_comment,45,pycqa,astroid,pylint-bot,2014-08-23 07:33:15,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Thanks, Andrew, I fixed that in https://bitbucket.org/logilab/pylint/commits/e9ae6b39983942a2d47b2725458aca988ebd93ff. Unfortunately, it's not the same as the other failure.
",,
7,issue_comment,45,pycqa,astroid,pylint-bot,2015-02-06 15:25:07,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Since there's no way to reproduce this, I'll close the issue in the mean time.
",,
0,issue_title,211,pycqa,astroid,pylint-bot,2015-10-11 23:12:52,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

For instance, for a default value, astroid will return the function where it is used as its scope, but that's wrong, since the scope is actual the scope of the parent of the function.

```
#!python

def test(x=f): # the scope of f is test, it should be the scope of the parent of f
    pass
```

This is also true for the function annotation values.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/211
",start issue,.scope() is wrong for some kind of nodes
1,issue_closed,211,pycqa,astroid,pylint-bot,2015-12-09 05:55:15,,closed issue,.scope() is wrong for some kind of nodes
2,issue_comment,211,pycqa,astroid,pylint-bot,2015-11-03 15:43:25,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Working on this in bookmark 2.0.
",,
3,issue_comment,211,pycqa,astroid,pylint-bot,2015-11-10 17:06:18,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

.scope() returns the proper scope for Arguments's default values, function annotations and comprehensions. Closes issue #211.
",,
0,issue_title,170,pycqa,astroid,pylint-bot,2015-08-16 22:39:18,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

In spending copious amounts of time debugging my patch, I've noticed that there are lots of decorators that obscure the names of the functions they contain and break introspection.  I think it would make debugging easier if the decorators all used functools.wraps or https://pypi.python.org/pypi/wrapt to make it clear what they're wrapping.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/170
",start issue,Use functools.wraps or wrapt for decorators
1,issue_closed,170,pycqa,astroid,pylint-bot,2015-12-09 05:54:29,,closed issue,Use functools.wraps or wrapt for decorators
2,issue_comment,170,pycqa,astroid,pylint-bot,2015-08-17 06:39:25,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

That would be great to have and it should be a pretty simple patch.
",,
3,issue_comment,170,pycqa,astroid,pylint-bot,2015-08-26 04:37:56,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I have it mostly ready using wrapt.  Two questions: directly converting path_wrapper to use wrapt like this:

``` python
@wrapt.decorator
def path_wrapper(func, instance, args, kwargs):
    """"""return the given infer function wrapped to handle the path""""""
    # This assumes that context is always passed as a keyword argument.
    context = kwargs.pop('context', None)
    node, = args
    if context is None:
        context = contextmod.InferenceContext()
    context.push(node)
    yielded = set()
    print(func, node, context, kwargs)
    for res in func(node, context, **kwargs):
        # unproxy only true instance, not const, tuple, dict...
        if res.__class__ is Instance:
            ares = res._proxied
        else:
            ares = res
        if ares not in yielded:
            yield res
            yielded.add(ares)
```

Doesn't work because Python's late-binding closures mean that by the time the inner function is called, func is bound is to an object.  The long-term solution here is to not monkey-patch methods onto classes, but in the short run, what should I do?  The obvious easy solution is to turn path_wrapper into a class, which ought to change the binding behavior to eager instead of lazy.

I'm not sure I understand the purpose of cachedproperty well enough to know what functionality it should have.  Looking at it, I think it wants to be a proxy of some sort.  Does it even behave like `@property`?  `@property` normally creates a data descriptor, while cachedproperty only overrides **get** so I think it will produce a non-data descriptor.

Please tell me if I'm asking too many questions and you'd rather I just make decisions about picky implementation details on my own.
",,
4,issue_comment,170,pycqa,astroid,pylint-bot,2015-08-26 05:40:39,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

@cachedproperty is a non-data descriptor, hence decorated function is
called the first time, store result in the instance's dictionnary, and
later access will use this value which takes precedence over the descriptor.
",,
5,issue_comment,170,pycqa,astroid,pylint-bot,2015-08-26 08:31:35,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

You're not asking too many questions, it's actually a good thing to ask if you aren't sure about something. I'm planning to remove the monkey-patching of methods onto classes, hopefully in time for astroid 1.4. Regarding the patch, why not using functools.wraps? What benefits does wrapt bring to the table for this particular use case?
",,
6,issue_comment,170,pycqa,astroid,pylint-bot,2015-08-26 13:38:31,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

To preserve introspectability during debugging, mostly.   For instance, sometimes I want to examine things like the state of closure variables to make sure they are what I think they are. 

For now, since you're changing the monkey-patching anyways, I'll just use functools.wraps.  Does cachedpropery need introspection support if it's not visible during the runtime?  I'm leaning against it. 
",,
7,issue_comment,170,pycqa,astroid,pylint-bot,2015-08-26 13:43:25,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

And wrapt allows that, to examine the state of the closure variables? I think that the cachedproperty doesn't need introspection support, could be left as it is.
",,
8,issue_comment,170,pycqa,astroid,pylint-bot,2015-08-26 14:05:44,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Yes.

``` python

import functools
import inspect
import wrapt

@wrapt.decorator
def wrapt_pass_through(wrapped, instance, args, kwargs):
    return wrapped(*args, **kwargs)

def wraps_pass_through(f, *args, **kwargs):
    @functools.wraps
    def wrapper(*args, **kwargs):
        return f(*args, **kwargs)
    return wrapper

def foo():
    a = 1
    b = 2
    def f():
        return a + b
    return f

def wrapt_function(f):
    return wrapt_pass_through(f)

def wraps_function(f):
    return wraps_pass_through(f)

print(inspect.getclosurevars(foo()))
print(inspect.getclosurevars(wrapt_function(foo())))
print(inspect.getclosurevars(wraps_function(foo())))
```

If you run this script, the first two print statements will correctly print `ClosureVars(nonlocals={'a': 1, 'b': 2}, globals={}, builtins={}, unbound=set())`, while the third will crash with a TypeError because functools.wraps doesn't even return a normal function, it returns a partial object.  There are a variety of other interesting ways to crash when introspecting decorators made with functools.wraps.  It's also worth noting that because functools.wraps doesn't respect the descriptor protocol, it's possible to get into trouble by stacking decorators, though this is a theoretical concern, as far as I know, at the moment.
",,
9,issue_comment,170,pycqa,astroid,pylint-bot,2015-08-26 14:16:29,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

The main reason I asked about cachedproperty is that it does limited introspection support (it copies `__name__` and uses a property for `__doc__`), but that's not even as complete as functools.wraps (which also handles `__module__`, `__qualname__`, and some other things).  So far I haven't needed to debug cachedproperty, though.
",,
10,issue_comment,170,pycqa,astroid,pylint-bot,2015-08-27 17:05:18,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Does this issue still needs to be opened or can we close it?
",,
11,issue_comment,170,pycqa,astroid,pylint-bot,2015-08-27 17:59:09,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Resolved by https://bitbucket.org/logilab/astroid/pull-requests/86/improve-decorator-introspection-using/diff
",,
0,issue_title,298,pycqa,astroid,PCManticore,2015-12-19 21:47:59,"This patch adds /usr/lib/python{ver} and /usr/lib64/python{ver} to the list of places where a standard module library could be found.  Issues such as https://github.com/PyCQA/pylint/issues/725 are occurring because those modules are found in /usr/lib64/python2.7, which were not looked before by modutils.is_standard_module. @The-Compiler since you're more familiar with Unix systems that me, do you find this approach safe? Can there be extension packages installed there instead of /usr/local/lib/python{ver} on other OSes? The idea is to have a list of standard library places, so that is_standard_module(module_name) returns true for them, which in certain cases could lead to importing those modules if they are C extensions, so this might not be safe if third party modules get installed there.
",start issue,Add /usr/lib and /usr/lib64 to the list of stdlib paths
1,issue_closed,298,pycqa,astroid,PCManticore,2015-12-21 11:54:22,,closed issue,Add /usr/lib and /usr/lib64 to the list of stdlib paths
2,pull_request_title,298,pycqa,astroid,PCManticore,2015-12-19 21:47:59,"This patch adds /usr/lib/python{ver} and /usr/lib64/python{ver} to the list of places where a standard module library could be found.  Issues such as https://github.com/PyCQA/pylint/issues/725 are occurring because those modules are found in /usr/lib64/python2.7, which were not looked before by modutils.is_standard_module. @The-Compiler since you're more familiar with Unix systems that me, do you find this approach safe? Can there be extension packages installed there instead of /usr/local/lib/python{ver} on other OSes? The idea is to have a list of standard library places, so that is_standard_module(module_name) returns true for them, which in certain cases could lead to importing those modules if they are C extensions, so this might not be safe if third party modules get installed there.
",e60114b2828a0e8b3a6cf6755c78531fc0240f2a,Add /usr/lib and /usr/lib64 to the list of stdlib paths
3,pull_request_merged,298,pycqa,astroid,PCManticore,2015-12-21 11:54:22,Add /usr/lib and /usr/lib64 to the list of stdlib paths,5ea22e852d479448884ef3bdd0f27ee8f298c6d1,Pull request merge from PyCQA/astroid:fix_modutils to PyCQA/astroid:master
4,issue_comment,298,pycqa,astroid,The-Compiler,2015-12-20 12:17:12,"I'm not very familiar with this to be honest... isn't third-party stuff in `dist-packages` or `site-packages` usually?
",,
5,issue_comment,298,pycqa,astroid,PCManticore,2015-12-20 12:57:45,"Yeah, but on some OSes (Ubuntu for instance), they get installed in /usr/local/lib rather than /usr/lib. I'm not familiar either..
",,
6,issue_comment,298,pycqa,astroid,dmand,2015-12-20 13:14:13,"IIRC, latest versions of pip install packages into `~/.local/lib`.
",,
7,issue_comment,298,pycqa,astroid,PCManticore,2015-12-20 13:42:52,"We might solve https://github.com/PyCQA/pylint/issues/536 with a similar change.
",,
8,pull_request_commit,298,pycqa,astroid,PCManticore,2015-12-19 21:42:09,Add /usr/lib and /usr/lib64 to the list of stdlib paths,e60114b2828a0e8b3a6cf6755c78531fc0240f2a,
0,issue_title,149,pycqa,astroid,pylint-bot,2015-07-03 16:09:40,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

For improving the compatibility with the ast module, we could add a new function, called `astroid.parse`, which will be the equivalent of:

```
#!python

from astroid.builder import AstroidBuilder
b = AstroidBuilder(manager)
return b.string_build(code, __file__)
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/149
",start issue,"Add astroid.parse function, similar to ast.parse"
1,issue_closed,149,pycqa,astroid,pylint-bot,2015-12-09 05:54:09,,closed issue,"Add astroid.parse function, similar to ast.parse"
2,issue_comment,149,pycqa,astroid,pylint-bot,2015-07-23 11:53:25,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fixed.
",,
0,issue_title,137,pycqa,astroid,pylint-bot,2015-06-20 20:16:31,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Could be useful for these kind of checks:

```
#!python

a = (1, 2, 3)
x = a[:2]
print(x[0].lala) # int has no attribute lala
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/137
",start issue,Understand tuple/list/set slicing
1,issue_closed,137,pycqa,astroid,pylint-bot,2015-12-09 05:53:59,,closed issue,Understand tuple/list/set slicing
2,issue_comment,137,pycqa,astroid,pylint-bot,2015-08-20 21:25:32,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Issue #90 was marked as a duplicate of this issue.
",,
3,issue_comment,137,pycqa,astroid,pylint-bot,2015-08-20 21:54:52,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Understand slices of tuples, lists, strings and instances with support for slices.

Closes issue #137.
",,
0,issue_title,32,pycqa,astroid,pylint-bot,2014-05-25 17:31:22,"Originally reported by: **Edd Barrett (BitBucket: [vext01](http://bitbucket.org/vext01), GitHub: @vext01?)**

---

Hi,

I am in the process of updating pylint and dependencies in OpenBSD ports. I have ancountered a problem with astroid's install target.

In short, OpenBSD ports runs the build as a normal user, the install as root, and then removes the sources as the normal user. We package a ton of Python modules in this way.

The problem with astroid is, when `setup.py install` is run as root, it puts files owned by root in the build directory which then cannot be removed by the normal user. The install target should only copy files into the python library dirs and not modify the build directory.

You can reproduce this outside OpenBSD ports by making a virtualenv and running `setup.py install` as a root and then try to remove the source dir:

```
wilfred:tmp> rm -Rf astroid-1.1.1                                                                                                                                      
rm: astroid-1.1.1/build/lib/astroid/test/data2/clientmodule_test.py: Permission denied
rm: astroid-1.1.1/build/lib/astroid/test/data2/suppliermodule_test.py: Permission denied
rm: astroid-1.1.1/build/lib/astroid/test/data2/__init__.py: Permission denied
rm: astroid-1.1.1/build/lib/astroid/test/data2: Directory not empty
rm: astroid-1.1.1/build/lib/astroid/test/data/noendingnewline.py: Permission denied
rm: astroid-1.1.1/build/lib/astroid/test/data/absimport.py: Permission denied
rm: astroid-1.1.1/build/lib/astroid/test/data/SSL1/__init__.py: Permission denied
rm: astroid-1.1.1/build/lib/astroid/test/data/SSL1/Connection1.py: Permission denied
rm: astroid-1.1.1/build/lib/astroid/test/data/SSL1: Permission denied
...
```

Would appreciate a patch so I can continue updating pylint.

Cheers

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/32
",start issue,Install target modifies build directory.
1,issue_closed,32,pycqa,astroid,pylint-bot,2015-12-09 05:52:06,,closed issue,Install target modifies build directory.
2,issue_comment,32,pycqa,astroid,pylint-bot,2014-06-27 14:24:29,"_Original comment by_ **Edd Barrett (BitBucket: [vext01](http://bitbucket.org/vext01), GitHub: @vext01?)**:

---

Anyone have any comment on this?
",,
3,issue_comment,32,pycqa,astroid,pylint-bot,2014-06-27 14:27:52,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

This is due to custom things done in setup.py, I agree it should be fixed but that's not trivial, hence one have to find some time to find an alternative and implement it.
",,
4,issue_comment,32,pycqa,astroid,pylint-bot,2014-06-27 15:08:19,"_Original comment by_ **Edd Barrett (BitBucket: [vext01](http://bitbucket.org/vext01), GitHub: @vext01?)**:

---

Is there a workaround I can use in the meantime?
",,
5,issue_comment,32,pycqa,astroid,pylint-bot,2014-06-27 15:15:12,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

chmod/chown the build dir ? I fail to see a workaround on the python side :(
",,
6,issue_comment,32,pycqa,astroid,pylint-bot,2014-11-22 10:48:34,"_Original comment by_ **Torsten Marek (BitBucket: [tmarek](http://bitbucket.org/tmarek), GitHub: @tmarek?)**:

---

The build script has been cleaned up, this should not be an issue any more.
",,
0,issue_title,229,pycqa,astroid,pylint-bot,2015-10-27 15:42:56,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

_nose is inserting live objects directly into locals, without using EmptyNodes, in _nose_tools_trivial_transform and _nose_tools_transform.  Should I just use EmptyNodes to build these ASTs or could I introspect the functions to get FunctionDef nodes and put those into the AST instead?

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/229
",start issue,Malformed AST in brain/_nose
1,issue_closed,229,pycqa,astroid,pylint-bot,2015-12-09 05:55:30,,closed issue,Malformed AST in brain/_nose
2,issue_comment,229,pycqa,astroid,pylint-bot,2015-10-27 15:52:11,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Yes, for the enum this should be changed.

The issue with nose is a little bit trickier. Basically the code from the nose transforms tries to mimick a behavior where the methods of an unittest.TestCase instance are retrieved and passed into globals as functions, even though they are underlying methods with an implicit self argument already passed in. This is the exact code they're using.

```
#!python

class Dummy(unittest.TestCase):
    def nop():
        pass
_t = Dummy('nop')

for at in [ at for at in dir(_t)
            if at.startswith('assert') and not '_' in at ]:
    pepd = pep8(at)
    vars()[pepd] = getattr(_t, at)
    __all__.append(pepd)

```

Now there is a problem if you insert only a FunctionDef node, because now you have to find a way for handling the self argument. Because they're methods in disguise, just putting functions in the AST will lead to false positives in pylint, which considers that a function call with one of these functions either lacks an extra argument or it has too many.

I don't think that it works with EmptyNodes at all, I think we'll use capabilities, by not being able to introspect the arguments anymore, but I might be wrong and needs testing.
",,
3,issue_comment,229,pycqa,astroid,pylint-bot,2015-10-27 15:52:41,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Also, the issue should be split into two issues, since handling each of the cases require a different approach.
",,
4,issue_comment,229,pycqa,astroid,pylint-bot,2015-10-27 21:39:31,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I can use EmptyNodes to preserve the current behavior (a locals dictionary that contains the bound methods themselves), so I'm going to do that for now.  There is probably a better solution for the long run.
",,
5,issue_comment,229,pycqa,astroid,pylint-bot,2015-10-27 22:07:55,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Would it be possible to use a technique similar to the one that multiprocessing_transform() uses here?
",,
6,issue_comment,229,pycqa,astroid,pylint-bot,2015-10-28 00:05:21,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Probably, seems to solve similar needs.
",,
7,issue_comment,229,pycqa,astroid,pylint-bot,2015-10-28 00:07:30,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

But in fact they do the same thing basically, putting BoundMethods in a module. The difference is that one is putting them explicitly in .locals, while the other is relying on `__setitem__` to delegate to locals.
",,
8,issue_comment,229,pycqa,astroid,pylint-bot,2015-10-28 02:53:33,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

They're similar enough that there should probably be one shared function for doing this, somewhere.  Note that there is one difference between the current implementations: _nose.py is storing actual method objects, while multiprocessing_transform() is storing BoundMethod objects containing ASTs.  I switched both to using EmptyNodes in 4ae02a64aa57, but there's still some pattern duplication there.
",,
9,issue_comment,229,pycqa,astroid,pylint-bot,2015-10-28 07:48:11,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

What do you mean by actual method objects and objects containing ASTs? They both store BoundMethods with underlying FunctionDef objects, since methods() returns functions which aren't yet bound, not BoundMethods per se.
",,
10,issue_comment,229,pycqa,astroid,pylint-bot,2015-10-29 02:08:53,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Oh, I was confused.  When I was debugging these earlier, I thought the nose functions were storing the actual method, not a BoundMethod.  I think my comments about duplication stand, though.
",,
11,issue_comment,229,pycqa,astroid,pylint-bot,2015-11-03 15:34:29,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Is this issue still relevant?
",,
12,issue_comment,229,pycqa,astroid,pylint-bot,2015-11-03 16:35:49,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Primary issue fixed by 4ae02a6, which uses EmptyNodes for nose.
",,
0,issue_title,273,pycqa,astroid,pylint-bot,2015-11-30 17:30:39,"Originally reported by: **BitBucket: [notsqrt](http://bitbucket.org/notsqrt), GitHub: @notsqrt?**

---

Hi !

Just found a regression with astroid 1.4

In https://bitbucket.org/logilab/astroid/commits/9367f99b6d66f63b482f32da5d944e56fb2fdb02#Lastroid/as_string.pyF271, the visit_functiondef method switched from `%` to `.format`, which fails on unicode characters.

With python 2.7:

``` python
>>> b""%s"" % u""\u2019""
u'\u2019'
>>> b""{}"".format(u""\u2019"")
UnicodeEncodeError: 'ascii' codec can't encode character u'\u2019' in position 0: ordinal not in range(128)
```

Which means that docstrings in particular can't contain non-ascii characters..

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/273
",start issue,[regression] UnicodeEncodeError in AsStringVisitor.visit_functiondef
1,issue_closed,273,pycqa,astroid,pylint-bot,2015-12-09 05:56:09,,closed issue,[regression] UnicodeEncodeError in AsStringVisitor.visit_functiondef
2,issue_comment,273,pycqa,astroid,pylint-bot,2015-11-30 16:42:42,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Thanks!
",,
3,issue_comment,273,pycqa,astroid,pylint-bot,2015-11-30 17:33:19,"_Original comment by_ **BitBucket: [notsqrt](http://bitbucket.org/notsqrt), GitHub: @notsqrt?**:

---

Reverting to `%` is enough. Do you want a pull request ?
",,
4,issue_comment,273,pycqa,astroid,pylint-bot,2015-11-30 17:36:25,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Sure.
",,
5,issue_comment,273,pycqa,astroid,pylint-bot,2015-11-30 19:23:34,"_Original comment by_ **BitBucket: [notsqrt](http://bitbucket.org/notsqrt), GitHub: @notsqrt?**:

---

Can't get my head around mercurial ...

Here is a patch:

``` patch
diff -r 90a41f5f9e8f astroid/as_string.py
--- a/astroid/as_string.py  Sun Nov 29 22:45:14 2015 +0200
+++ b/astroid/as_string.py  Mon Nov 30 20:22:29 2015 +0100
@@ -287,13 +287,13 @@
             trailer = return_annotation + "":""
         else:
             trailer = "":""
-        def_format = ""\n{decorators}def {name}({args}){trailer}{docs}\n{body}""
-        return def_format.format(decorators=decorate,
-                                 name=node.name,
-                                 args=node.args.accept(self),
-                                 trailer=trailer,
-                                 docs=docs,
-                                 body=self._stmt_list(node.body))
+        def_format = ""\n%sdef %s(%s)%s%s\n%s""
+        return def_format % (decorate,
+                             node.name,
+                             node.args.accept(self),
+                             trailer,
+                             docs,
+                             self._stmt_list(node.body))

     def visit_generatorexp(self, node):
         """"""return an astroid.GeneratorExp node as string""""""
diff -r 90a41f5f9e8f astroid/tests/unittest_regrtest.py
--- a/astroid/tests/unittest_regrtest.py    Sun Nov 29 22:45:14 2015 +0200
+++ b/astroid/tests/unittest_regrtest.py    Mon Nov 30 20:22:29 2015 +0100
@@ -282,6 +282,23 @@
         ''')
         self.assertRaises(exceptions.InferenceError, next, node.infer())

+    def test_unicode_in_docstring(self):
+        # Crashed for astroid==1.4.1
+        # Test for https://bitbucket.org/logilab/astroid/issues/273/
+
+        # In a regular file, ""coding: utf-8"" would have been used.
+        node = extract_node(u'''
+        from __future__ import unicode_literals
+
+        class MyClass(object):
+            def method(self):
+                ""With unicode : %s ""
+
+        instance = MyClass()
+        ''' % u""\u2019"")
+
+        next(node.value.infer()).as_string()
+

 class Whatever(object):
     a = property(lambda x: x, lambda x: x)
```
",,
6,issue_comment,273,pycqa,astroid,pylint-bot,2015-12-01 16:53:05,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Use printf-style formatting in as_string, in order
 to avoid a potential problem with encodings when using .format.

Closes issue #273.
",,
7,issue_comment,273,pycqa,astroid,pylint-bot,2015-12-01 16:53:05,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Use printf-style formatting in as_string, in order
 to avoid a potential problem with encodings when using .format.

Closes issue #273.
",,
8,issue_comment,273,pycqa,astroid,pylint-bot,2015-12-01 16:56:06,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Ah, I forgot to credit you, I'm sorry. I added your username in the ChangeLog though (https://bitbucket.org/logilab/astroid/commits/3f46c677c4b8f72372bcc840e6534aa0120a7613), since I can't edit the commits after being pushed.
",,
9,issue_comment,273,pycqa,astroid,pylint-bot,2015-12-01 19:00:29,"_Original comment by_ **BitBucket: [notsqrt](http://bitbucket.org/notsqrt), GitHub: @notsqrt?**:

---

Perfect !
Thanks !
",,
10,issue_comment,273,pycqa,astroid,pylint-bot,2015-12-09 03:50:27,"_Original comment by_ **BitBucket: [metaist](http://bitbucket.org/metaist), GitHub: @metaist?**:

---

Thank you! This was a major headache today when a dependency (path.py) used a Unicode character in its docs and suddenly pylint was dying.
",,
0,issue_title,222,pycqa,astroid,pylint-bot,2015-10-21 07:50:23,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We should use a special node instead, so that the AST does not contain non-AST nodes.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/222
",start issue,Don't use None to specify that arguments can't be determined in raw_building
1,issue_closed,222,pycqa,astroid,pylint-bot,2015-12-09 05:55:24,,closed issue,Don't use None to specify that arguments can't be determined in raw_building
2,issue_comment,222,pycqa,astroid,pylint-bot,2015-10-26 00:10:30,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Since I need to fix this, what node should I use?
",,
3,issue_comment,222,pycqa,astroid,pylint-bot,2015-10-26 00:19:57,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Just define something that suggests that it's unknown. Maybe UnknownNode or something similar? This should be ignored by all other operations, such as inference or calling as_string on it. Also, it would be good to be in its own changeset, so that we can track better where it got changed.
",,
4,issue_comment,222,pycqa,astroid,pylint-bot,2015-10-26 02:27:04,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

This is closed by e956e29392a8 and 5fe25086c708, which adds the Unknown node with some stub functions and uses it for non-introspectable signatures.
",,
0,issue_title,107,pycqa,astroid,pylint-bot,2015-06-10 00:27:56,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given the following code, it will print YES instead of the HTTPConnection class. That's because we can't handle the `from six.moves import ..`, due to the fact that there's no six.moves module.

```
#!python

from astroid.test_utils import extract_node
n = extract_node('''
from six.moves import http_client
http_client = six.moves.http_client
http_client.HTTPConnection #@
''')
print(n.infered())
```

This works fine:

```
#!python

from astroid.test_utils import extract_node
n = extract_node('''
import six
http_client = six.moves.http_client
http_client.HTTPConnection #@
''')
print(n.infered())
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/107
",start issue,six.moves is not correctly understood when using from imports
1,issue_closed,107,pycqa,astroid,pylint-bot,2015-12-09 05:53:35,,closed issue,six.moves is not correctly understood when using from imports
2,issue_comment,107,pycqa,astroid,pylint-bot,2015-06-10 17:09:42,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Improve the inference of six.moves.

This patch improves especially the inferrence when using `from ... import ...`
syntax. Also, we added a new fail import hook for six.moves, which fixes the
import-error false positive from pylint. Closes issue #107.
",,
3,issue_comment,107,pycqa,astroid,pylint-bot,2015-07-27 15:06:12,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Improve the inference of six.moves.

This patch improves especially the inferrence when using `from ... import ...`
syntax. Also, we added a new fail import hook for six.moves, which fixes the
import-error false positive from pylint. Closes issue #107.
",,
0,issue_title,188,pycqa,astroid,pylint-bot,2015-09-18 20:01:50,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Found by an user. The traceback and a reproducer: https://gist.github.com/federicobond/9f233baf054f7f957440

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/188
",start issue,astroid.exceptions.AstroidError: Could not find <Import() l.400 [os] at 0x10d551a90> in <TryExcept() l.394 [os] at 0x10d545950>'s children
1,issue_closed,188,pycqa,astroid,pylint-bot,2015-12-09 05:54:44,,closed issue,astroid.exceptions.AstroidError: Could not find <Import() l.400 [os] at 0x10d551a90> in <TryExcept() l.394 [os] at 0x10d545950>'s children
2,issue_comment,188,pycqa,astroid,pylint-bot,2015-10-03 12:26:44,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add a test for issue #188, which was triggered because the transforms weren't executed in a separated step. Closes issue #188.
",,
3,issue_comment,188,pycqa,astroid,pylint-bot,2015-11-18 18:52:31,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add a test for issue #188, which was triggered because the transforms weren't executed in a separated step. Closes issue #188.
",,
0,issue_title,129,pycqa,astroid,pylint-bot,2015-06-20 15:15:14,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

By using @six.add_metaclass decorator, we can add a new metaclass for the decorated class.
Class.metaclass can be smarter and it can detect this case.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/129
",start issue,Understand @six.add_metaclass
1,issue_closed,129,pycqa,astroid,pylint-bot,2015-12-09 05:53:52,,closed issue,Understand @six.add_metaclass
2,issue_comment,129,pycqa,astroid,pylint-bot,2015-07-07 09:51:41,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Understand metaclasses added with six.add_metaclass decorator. Closes issue #129.
",,
3,issue_comment,129,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Understand metaclasses added with six.add_metaclass decorator. Closes issue #129.
",,
0,issue_title,270,pycqa,astroid,pylint-bot,2015-11-29 20:39:13,"Originally reported by: **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**

---

After updating astroid from 1.3.8 to 1.4.0 and pylint from 1.4.4 to 1.5.0, with this code:

``` python
def foo(arg):
    bar = [arg] * 2
```

I get:

```
Traceback (most recent call last):
  File ""/usr/lib64/python3.5/runpy.py"", line 170, in _run_module_as_main
    ""__main__"", mod_spec)
  File ""/usr/lib64/python3.5/runpy.py"", line 85, in _run_code
    exec(code, run_globals)
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/pylint/__main__.py"", line 3, in <module>
    pylint.run_pylint()
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/pylint/__init__.py"", line 23, in run_pylint
    Run(sys.argv[1:])
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/pylint/lint.py"", line 1315, in __init__
    linter.check(args)
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/pylint/lint.py"", line 734, in check
    self._do_check(files_or_modules)
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/pylint/lint.py"", line 865, in _do_check
    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/pylint/lint.py"", line 945, in check_astroid_module
    walker.walk(ast_node)
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/pylint/utils.py"", line 938, in walk
    self.walk(child)
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/pylint/utils.py"", line 938, in walk
    self.walk(child)
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/pylint/utils.py"", line 935, in walk
    cb(astroid)
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/pylint/checkers/base.py"", line 1946, in visit_assign
    if var_type == astroid.YES or var_type.as_string() == 'None':
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/astroid/bases.py"", line 611, in as_string
    return to_code(self)
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/astroid/as_string.py"", line 79, in __call__
    return node.accept(self)
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/astroid/bases.py"", line 395, in accept
    return func(self)
  File ""/home/florian/proj/qutebrowser/git/.tox/pylint/lib/python3.5/site-packages/astroid/as_string.py"", line 341, in visit_list
    return '[%s]' % ', '.join([child.accept(self) for child in node.elts])
TypeError: sequence item 0: expected str instance, _Yes found
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/270
",start issue,TypeError in visit_list (1.3.8 -> 1.4.0 regression)
1,issue_closed,270,pycqa,astroid,pylint-bot,2015-12-09 05:56:05,,closed issue,TypeError in visit_list (1.3.8 -> 1.4.0 regression)
2,issue_comment,270,pycqa,astroid,pylint-bot,2015-11-29 20:16:33,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add support for handling Uninferable nodes when calling as_string

Some object, for instance List or Tuple can have, after inference,
Uninferable as their elements, happening when their components
weren't couldn't be inferred properly. This means that as_string
needs to cope with expecting Uninferable nodes part of the other
nodes coming for a string transformation. The patch adds a visit
method in AsString and `accept` on Yes / Uninferable nodes.
Closes issue #270.
",,
3,issue_comment,270,pycqa,astroid,pylint-bot,2015-11-29 20:34:27,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add support for handling Uninferable nodes when calling as_string

Some object, for instance List or Tuple can have, after inference,
Uninferable as their elements, happening when their components
weren't couldn't be inferred properly. This means that as_string
needs to cope with expecting Uninferable nodes part of the other
nodes coming for a string transformation. The patch adds a visit
method in AsString and `accept` on Yes / Uninferable nodes.
Closes issue #270.
",,
4,issue_comment,270,pycqa,astroid,pylint-bot,2015-12-01 06:20:07,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

this has nothing to do with what''s discussed here beside that it appears
in the traceback. I see ""var_type.as_string() == 'None'"" appearing, and it
seems to me that it shouldn't be the proper way to check that you've a node
representing node. Unless I'm missing something ?
",,
5,issue_comment,270,pycqa,astroid,pylint-bot,2015-12-01 07:24:47,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I don't think I understand. This problem was caused by a change in the inference, where the elements of a sequence couldn't be determined when doing multiplication, so that `[unknown, unknown] * 2` became a list of for YES / Uninferable nodes after inferring the binary operation. as_string wasn't aware of this and crashed.

Indeed, var_type.as_string() == 'None' doesn't strike me as well as a proper way to do this check, it is coming from the new redefined-variable-type checker though. 
",,
0,issue_title,103,pycqa,astroid,pylint-bot,2015-06-02 11:18:20,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/103
",start issue,Understand getattr builtin
1,issue_closed,103,pycqa,astroid,pylint-bot,2015-12-09 05:53:29,,closed issue,Understand getattr builtin
2,issue_comment,103,pycqa,astroid,pylint-bot,2015-06-06 12:49:13,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add inference support for getattr builtin.

Closes issue #103.
",,
0,issue_title,20,pycqa,astroid,pylint-bot,2014-03-03 11:08:46,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given the following:

```
#!python

import lxml.etree.ErrorDomains
```

Pylint fails (for Python 3.4) with the following:

```
#!python

Traceback (most recent call last):
  File ""C:\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\scoped_nodes.py"", line 284, in getattr
    return [self.import_module(name, relative_only=True)]
  File ""C:\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\brain\py2gi.py"", line 113, in _new_import_module
    return _orig_import_module(self, modname, relative_only, level)
  File ""C:\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\scoped_nodes.py"", line 339, in import_module
    return MANAGER.ast_from_module_name(absmodname)
  File ""C:\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\manager.py"", line 132, in ast_from_module_name
    return self.ast_from_module(module, modname)
  File ""C:\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\manager.py"", line 187, in ast_from_module
    return AstroidBuilder(self).module_build(module, modname)
  File ""C:\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\builder.py"", line 104, in module_build
    node = self.inspect_build(module, modname=modname, path=path)
  File ""C:\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\raw_building.py"", line 233, in inspect_build
    self.object_build(node, module)
  File ""C:\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\raw_building.py"", line 281, in object_build
    self.object_build(class_node, member)
  File ""C:\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\raw_building.py"", line 265, in object_build
    if (not _io_discrepancy(member) and
  File ""C:\Python34\lib\site-packages\astroid-1.0.1-py3.4.egg\astroid\raw_building.py"", line 45, in _io_discrepancy
    member_self.__name__ == '_io' and
AttributeError: 'dict' object has no attribute '__name__'
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/20
",start issue,Problem with _io_discrepancy from astroid.raw_building for Python 3.4
1,issue_closed,20,pycqa,astroid,pylint-bot,2015-12-09 05:51:52,,closed issue,Problem with _io_discrepancy from astroid.raw_building for Python 3.4
2,issue_comment,20,pycqa,astroid,pylint-bot,2014-03-04 07:56:33,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Check if the parent is a module. Closes #20.
",,
0,issue_title,52,pycqa,astroid,pylint-bot,2014-10-30 09:05:23,"Originally reported by: **Denis Laxalde (BitBucket: [dlax](http://bitbucket.org/dlax), GitHub: @dlax?)**

---

See https://www.logilab.org/ticket/269083
astroid's version of modutils needs a similar fix.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/52
",start issue,pylint crash in modutils
1,issue_closed,52,pycqa,astroid,pylint-bot,2015-12-09 05:52:30,,closed issue,pylint crash in modutils
2,issue_comment,52,pycqa,astroid,pylint-bot,2014-10-30 13:28:00,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

[modutils] Ensure module is actually in sys.modules in pkg_resources support

Wrap the long line along the way.

Closes #52.
",,
0,issue_title,35,pycqa,astroid,pylint-bot,2014-07-02 13:10:25,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given the following code, astroid detects A().descriptor as a bound method, while it's actually the result of calling A().descriptor(). It should be smarter about this and it should know that A.descriptor is a descriptor, not a function.

```
#!python

class lazy_attribute(object):
    def __init__(self, func):
        self._func = func
        self.__name__ = func.__name__
        self.__doc__ = func.__doc__

    def __get__(self, obj, klass=None):
        return self
        if obj is None:
            return None

        result = obj.__dict__[self.__name__] = self._func(obj)
        return result

    def __call__(self):
        return 400

class A:
   @lazy_attribute
   def descriptor(self):
        return 24
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/35
",start issue,astroid doesn't understand descriptors very well
1,issue_closed,35,pycqa,astroid,pylint-bot,2015-12-09 05:52:09,,closed issue,astroid doesn't understand descriptors very well
2,issue_comment,35,pycqa,astroid,pylint-bot,2015-05-03 08:37:23,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

This should be solved by https://bitbucket.org/logilab/astroid/commits/2dccb781ac497c1915872d3307b564e952476dcd. Actually understanding descriptors probably won't happen in astroid at any point.
",,
0,issue_title,166,pycqa,astroid,pylint-bot,2015-07-29 19:34:04,"Originally reported by: **h w (BitBucket: [vvh](http://bitbucket.org/vvh), GitHub: @vvh?)**

---

Hi,

at our build environment we do a test with each commit. Since 2015-07-27 we have an issue with dependencies:

```
#!python
Traceback (most recent call last):
  File ""/usr/lib/python3/dist-packages/pkg_resources.py"", line 2806, in <module>
    working_set.require(__requires__)
  File ""/usr/lib/python3/dist-packages/pkg_resources.py"", line 696, in require
    needed = self.resolve(parse_requirements(requirements))
  File ""/usr/lib/python3/dist-packages/pkg_resources.py"", line 598, in resolve
    raise VersionConflict(dist,req) # XXX put more info here
pkg_resources.VersionConflict: (logilab-common 1.0.2 (/usr/local/lib/python3.3/dist-packages), Requirement.parse('logilab-common<=0.63.0'))
```

Where as installation went fine:

```
#!python
Running setup.py egg_info for package pylint

    warning: no files found matching '*.html' under directory 'doc'
Downloading/unpacking logilab-common>=0.53.0 (from pylint)
  Running setup.py egg_info for package logilab-common

    warning: no files found matching '*.py' under directory 'test/input'
    warning: no files found matching '*' under directory 'doc/html'
Downloading/unpacking astroid>=1.3.6 (from pylint)
  Running setup.py egg_info for package astroid

Downloading/unpacking six (from pylint)
  Downloading six-1.9.0.tar.gz
  Running setup.py egg_info for package six

    no previously-included directories found matching 'documentation/_build'
Requirement already satisfied (use --upgrade to upgrade): distribute in /usr/lib/python3/dist-packages (from logilab-common>=0.53.0->pylint)
Installing collected packages: pylint, logilab-common, astroid, six
  Running setup.py install for pylint
    changing mode of build/scripts-3.3/pylint from 644 to 755
    changing mode of build/scripts-3.3/pylint-gui from 644 to 755
    changing mode of build/scripts-3.3/symilar from 644 to 755
    changing mode of build/scripts-3.3/epylint from 644 to 755
    changing mode of build/scripts-3.3/pyreverse from 644 to 755
    ('running 2to3 on', '/usr/local/lib/python3.3/dist-packages/pylint/test')
    Skipping implicit fixer: buffer
    Skipping implicit fixer: idioms
    Skipping implicit fixer: set_literal
    Skipping implicit fixer: ws_comma
    Can't parse /usr/local/lib/python3.3/dist-packages/pylint/test/input/func_exec_used_py30.py: ParseError: bad input: type=22, value='=', context=('', (6, 21))
    Can't parse /usr/local/lib/python3.3/dist-packages/pylint/test/input/func_syntax_error.py: ParseError: bad input: type=4, value='\n', context=('', (1, 8))
    Can't parse /usr/local/lib/python3.3/dist-packages/pylint/test/input/syntax_error.py: ParseError: bad input: type=1, value='print', context=('', (2, 0))

    warning: no files found matching '*.html' under directory 'doc'
    changing mode of /usr/local/bin/symilar to 755
    changing mode of /usr/local/bin/pylint-gui to 755
    changing mode of /usr/local/bin/epylint to 755
    changing mode of /usr/local/bin/pylint to 755
    changing mode of /usr/local/bin/pyreverse to 755
    Installing pylint script to /usr/local/bin
    Installing epylint script to /usr/local/bin
    Installing pylint-gui script to /usr/local/bin
    Installing symilar script to /usr/local/bin
    Installing pyreverse script to /usr/local/bin
  Running setup.py install for logilab-common
    changing mode of build/scripts-3.3/pytest from 644 to 755
    Skipping installation of /usr/local/lib/python3.3/dist-packages/logilab/__init__.py (namespace package)

    warning: no files found matching '*.py' under directory 'test/input'
    warning: no files found matching '*' under directory 'doc/html'
    Installing /usr/local/lib/python3.3/dist-packages/logilab_common-1.0.2-nspkg.pth
    changing mode of /usr/local/bin/pytest to 755
  Running setup.py install for astroid

  Running setup.py install for six

    no previously-included directories found matching 'documentation/_build'
Successfully installed pylint logilab-common astroid six
```

When I try to point pip3 to the last working version of pylint I get:

```
#!python
Downloading/unpacking pylint==1.4.4
  Running setup.py egg_info for package pylint

    warning: no files found matching '*.html' under directory 'doc'
Downloading/unpacking logilab-common>=0.53.0 (from pylint==1.4.4)
  Running setup.py egg_info for package logilab-common

    warning: no files found matching '*.py' under directory 'test/input'
    warning: no files found matching '*' under directory 'doc/html'
Downloading/unpacking astroid>=1.3.6 (from pylint==1.4.4)
  Running setup.py egg_info for package astroid

Downloading/unpacking six (from pylint==1.4.4)
  Downloading six-1.9.0.tar.gz
  Running setup.py egg_info for package six

    no previously-included directories found matching 'documentation/_build'
Downloading/unpacking distribute (from logilab-common>=0.53.0->pylint==1.4.4)
  Running setup.py egg_info for package distribute

Downloading/unpacking setuptools>=0.7 (from distribute->logilab-common>=0.53.0->pylint==1.4.4)
  Running setup.py egg_info for package setuptools

Cleaning up...
Exception:
Traceback (most recent call last):
  File ""/usr/lib/python3/dist-packages/pip/basecommand.py"", line 134, in main
    status = self.run(options, args)
  File ""/usr/lib/python3/dist-packages/pip/commands/install.py"", line 236, in run
    requirement_set.prepare_files(finder, force_root_egg_info=self.bundle, bundle=self.bundle)
  File ""/usr/lib/python3/dist-packages/pip/req.py"", line 1139, in prepare_files
    req_to_install.assert_source_matches_version()
  File ""/usr/lib/python3/dist-packages/pip/req.py"", line 394, in assert_source_matches_version
    version = self.installed_version
  File ""/usr/lib/python3/dist-packages/pip/req.py"", line 390, in installed_version
    return self.pkg_info()['version']
  File ""/usr/lib/python3/dist-packages/pip/req.py"", line 357, in pkg_info
    data = self.egg_info_data('PKG-INFO')
  File ""/usr/lib/python3/dist-packages/pip/req.py"", line 297, in egg_info_data
    data = fp.read()
  File ""/usr/lib/python3.3/encodings/ascii.py"", line 26, in decode
    return codecs.ascii_decode(input, self.errors)[0]
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 11291: ordinal not in range(128)
```

When I pin logilab-common to 0.62.0 then everything works fine.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/166
",start issue,"pkg_resources.VersionConflict: (logilab-common 1.0.2 (/usr/local/lib/python3.3/dist-packages), Requirement.parse('logilab-common<=0.63.0'))"
1,issue_closed,166,pycqa,astroid,pylint-bot,2015-12-09 05:54:26,,closed issue,"pkg_resources.VersionConflict: (logilab-common 1.0.2 (/usr/local/lib/python3.3/dist-packages), Requirement.parse('logilab-common<=0.63.0'))"
2,issue_comment,166,pycqa,astroid,pylint-bot,2015-07-30 07:04:02,"_Original comment by_ **h w (BitBucket: [vvh](http://bitbucket.org/vvh), GitHub: @vvh?)**:

---

Wrong tracker.
",,
0,issue_title,179,pycqa,astroid,pylint-bot,2015-08-22 16:03:38,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

It should be ""instantiate_class"".

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/179
",start issue,"[easy] ""instanciate_class"" is misspelled"
1,issue_closed,179,pycqa,astroid,pylint-bot,2015-12-09 05:54:36,,closed issue,"[easy] ""instanciate_class"" is misspelled"
2,issue_comment,179,pycqa,astroid,pylint-bot,2015-08-25 17:43:10,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

We could go on the same deprecation route as with infered and inferred. Send a patch?
",,
3,issue_comment,179,pycqa,astroid,pylint-bot,2015-08-25 17:49:40,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Will do, though not until after the zipper. 
",,
4,issue_comment,179,pycqa,astroid,pylint-bot,2015-11-06 23:50:48,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Renamed in b68ee1186e5f and 310954a.
",,
0,issue_title,36,pycqa,astroid,pylint-bot,2014-07-07 21:50:44,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

While testing https://bitbucket.org/logilab/pylint/pull-request/119/emit-an-error-when-a-list-index-is-a-non/, I discovered the following bug in astroid.

```
#!python

  File ""C:\Python34\lib\site-packages\pylint-1.2.1-py3.4.egg\pylint\checkers\typecheck.py"", line 544, in visit_index
    parent_type = safe_infer(node.parent.value)
  File ""C:\Python34\lib\site-packages\pylint-1.2.1-py3.4.egg\pylint\checkers\utils.py"", line 86, in safe_infer
    value = next(inferit)
  File ""C:\Python34\lib\site-packages\astroid-1.1.1-py3.4.egg\astroid\bases.py"", line 313, in wrapped
    for res in _func(node, context, **kwargs):
  File ""C:\Python34\lib\site-packages\astroid-1.1.1-py3.4.egg\astroid\bases.py"", line 115, in _infer_stmts
    for infered in stmt.infer(context):
  File ""C:\Python34\lib\site-packages\astroid-1.1.1-py3.4.egg\astroid\bases.py"", line 313, in wrapped
    for res in _func(node, context, **kwargs):
  File ""C:\Python34\lib\site-packages\astroid-1.1.1-py3.4.egg\astroid\inference.py"", line 358, in infer_ass
    stmts = list(self.assigned_stmts(context=context))
  File ""C:\Python34\lib\site-packages\astroid-1.1.1-py3.4.egg\astroid\protocols.py"", line 213, in assend_assigned_stmts
    return self.parent.assigned_stmts(self, context=context)
AttributeError: 'Starred' object has no attribute 'assigned_stmts'
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/36
",start issue,AttributeError: 'Starred' object has no attribute 'assigned_stmts'
1,issue_closed,36,pycqa,astroid,pylint-bot,2015-12-09 05:52:11,,closed issue,AttributeError: 'Starred' object has no attribute 'assigned_stmts'
2,issue_comment,36,pycqa,astroid,pylint-bot,2014-07-07 21:32:21,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Reproducing using:

```
#!python

for (*a, val) in ((1, 2, 3), (4, 5, 6)):
   a[0]
```
",,
3,issue_comment,36,pycqa,astroid,pylint-bot,2015-01-08 18:52:50,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Issue #69 was marked as a duplicate of this issue.
",,
4,issue_comment,36,pycqa,astroid,pylint-bot,2015-01-08 18:54:17,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Another reproducing case:

```
#!python

def func(sequence):
    head, *tail = sequence
    return reversed(tail)
```
",,
5,issue_comment,36,pycqa,astroid,pylint-bot,2015-02-21 16:50:21,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Implement the assigned_stmts operation for Starred nodes.

This was omitted when support for Python 3 was added in astroid.
It currently works only for Starred nodes in assignments and only
for the most common of cases, such as `a, *b = (1, 2, 3)`.
Closes issue #36.
",,
0,issue_title,91,pycqa,astroid,pylint-bot,2015-04-16 09:47:39,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given the following code, pylint fails with a traceback when it tries to look for not-context-manager error:

```
#!python

from django.db.backends.oracle.base import DatabaseWrapper as DjDatabaseWrapper


class DatabaseWrapper(DjDatabaseWrapper):

    def _close(self):
        if self.connection is not None:
            with self.wrap_database_errors:
                return self.pool.release(self.connection)

```

The traceback is:

```
#!python

Traceback (most recent call last):
  File ""C:\Python34\Scripts\pylint-script.py"", line 9, in <module>
    load_entry_point('pylint==1.4.3', 'console_scripts', 'pylint')()
  File ""e:\projects\repos\pylint\pylint\__init__.py"", line 23, in run_pylint
    Run(sys.argv[1:])
  File ""e:\projects\repos\pylint\pylint\lint.py"", line 1343, in __init__
    linter.check(args)
  File ""e:\projects\repos\pylint\pylint\lint.py"", line 754, in check
    self._do_check(files_or_modules)
  File ""e:\projects\repos\pylint\pylint\lint.py"", line 877, in _do_check
    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)
  File ""e:\projects\repos\pylint\pylint\lint.py"", line 958, in check_astroid_module
    walker.walk(ast_node)
  File ""e:\projects\repos\pylint\pylint\utils.py"", line 877, in walk
    self.walk(child)
  File ""e:\projects\repos\pylint\pylint\utils.py"", line 877, in walk
    self.walk(child)
  File ""e:\projects\repos\pylint\pylint\utils.py"", line 877, in walk
    self.walk(child)
  File ""e:\projects\repos\pylint\pylint\utils.py"", line 877, in walk
    self.walk(child)
  File ""e:\projects\repos\pylint\pylint\utils.py"", line 874, in walk
    cb(astroid)
  File ""e:\projects\repos\pylint\pylint\checkers\typecheck.py"", line 652, in visit_with
    infered.getattr('__enter__')
  File ""e:\projects\repos\astroid-1\astroid\bases.py"", line 264, in getattr
    return super(UnboundMethod, self).getattr(name, context)
AttributeError: 'super' object has no attribute 'getattr'

```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/91
",start issue,"UnboundMethod calls getattr from the parent, there's no getattr on the parent"
1,issue_closed,91,pycqa,astroid,pylint-bot,2015-12-09 05:53:19,,closed issue,"UnboundMethod calls getattr from the parent, there's no getattr on the parent"
2,issue_comment,91,pycqa,astroid,pylint-bot,2015-04-17 17:40:19,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

UnboundMethod.getattr calls the getattr of its _proxied object.

It previously crashed, since it called super(...).getattr(..) and the
first ancestor in its mro was bases.Proxy and bases.Proxy doesn't implement
the .getattr method. Closes issue #91.
",,
3,issue_comment,91,pycqa,astroid,pylint-bot,2015-11-11 15:14:12,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

UnboundMethod.getattr calls the getattr of its _proxied object.

It previously crashed, since it called super(...).getattr(..) and the
first ancestor in its mro was bases.Proxy and bases.Proxy doesn't implement
the .getattr method. Closes issue #91.
",,
0,issue_title,100,pycqa,astroid,pylint-bot,2015-06-02 11:14:43,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Definitely helpful for flow control analysis. Can be done the same as for isinstance and others.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/100
",start issue,Understand callable buitin
1,issue_closed,100,pycqa,astroid,pylint-bot,2015-12-09 05:53:27,,closed issue,Understand callable buitin
2,issue_comment,100,pycqa,astroid,pylint-bot,2015-06-17 15:56:19,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fixed in repo's tip.
",,
0,issue_title,78,pycqa,astroid,pylint-bot,2015-01-29 15:05:26,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given the following code, astroid and pylint fails with a RuntimeError, since the patching from test is taken in consideration.

```
#!python

import string
Template = string.Template

class A(Template):
    pass

class B(A):
    pass

def test(x=False):
    if x:
        string.Template = A
    else:
        string.Template = B
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/78
",start issue,RuntimeError when a class is the ancestor of itself
1,issue_closed,78,pycqa,astroid,pylint-bot,2015-12-09 05:52:59,,closed issue,RuntimeError when a class is the ancestor of itself
2,issue_comment,78,pycqa,astroid,pylint-bot,2015-01-29 14:06:16,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fix a crash which occurred when a class was the ancestor
 of itself.

Closes issue #78.
",,
0,issue_title,184,pycqa,astroid,pylint-bot,2015-09-10 15:27:45,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

This can help with this kind of code:

```
#!python

from astroid.test_utils import extract_node
f = extract_node('''
__([1, 2, 3, 4][slice(2)])
''')
print(f)
i = next(f.infer())
print(i, i.as_string())

```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/184
",start issue,Understand the slice builtin
1,issue_closed,184,pycqa,astroid,pylint-bot,2015-12-09 05:54:40,,closed issue,Understand the slice builtin
2,issue_comment,184,pycqa,astroid,pylint-bot,2015-09-10 21:42:49,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Understand the `slice` builtin. Closes issue #184.
",,
0,issue_title,83,pycqa,astroid,pylint-bot,2015-03-16 19:40:26,"Originally reported by: **Arfrever Frehtes Taifersar Arahesis (BitBucket: [arfrever](http://bitbucket.org/arfrever), GitHub: @arfrever?)**

---

Astroid has some test failures with Jython.

It seems that many of them are due to assumption that byte-compiled modules have `.pyc` suffix, but Jython uses `$py.class`.

I attach output of test suite of Astroid 1.3.6.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/83
",start issue,Test failures with Jython
1,issue_closed,83,pycqa,astroid,pylint-bot,2015-12-09 05:53:05,,closed issue,Test failures with Jython
2,issue_comment,83,pycqa,astroid,pylint-bot,2015-03-30 18:46:46,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add some fixes which enhances the Jython support.

The fix mostly includes updates to modutils, which is
modified in order to properly lookup paths from live objects,
which ends in $py.class, not pyc as for Python 2,
Closes issue #83.
",,
3,issue_comment,83,pycqa,astroid,pylint-bot,2015-03-30 18:57:32,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

This is just a partial fix, since there are some problems with Jython and its objects: http://bugs.jython.org/issue2304 and http://bugs.jython.org/issue2303. In fact, there are many more objects in Jython which don't provide a **module** or where it is set to None. This impedes the inference in certain cases, mostly for builtin functions, but it's something that should be tackled in Jython, not in pylint. Nevertheless, except a couple of tests which are deactivated for Jython, astroid seems to be working for it.
",,
4,issue_comment,83,pycqa,astroid,pylint-bot,2015-03-30 20:29:13,"_Original comment by_ **Arfrever Frehtes Taifersar Arahesis (BitBucket: [arfrever](http://bitbucket.org/arfrever), GitHub: @arfrever?)**:

---

By the way, what is the status of `logilab.common.modutils` module?
Is it still maintained? Is it deprecated? Is it scheduled for deletion?
(It has the same problems with $py.class.)
",,
5,issue_comment,83,pycqa,astroid,pylint-bot,2015-03-30 20:33:31,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

We don't use it for pylint / astroid, since we have our own included version. I doubt this change will help them.
",,
0,issue_title,277,pycqa,astroid,pylint-bot,2015-12-03 12:14:27,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Giving the following code:

```
#!python

from astroid.builder import AstroidBuilder
b = AstroidBuilder()
import lxml.etree
f = b.inspect_build(lxml.etree)
f.wildcard_import_names()
```

astroid crashes with

```
#!python

Traceback (most recent call last):
  File ""a.py"", line 5, in <module>
    f.wildcard_import_names()
  File ""astroid\scoped_nodes.py"", line 471, in wildcard_import_names
    explicit = next(all.assigned_stmts())
TypeError: mulass_assigned_stmts() takes at least 2 arguments (1 given)

```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/277
",start issue,mulass_assigned_stmts crash
1,issue_closed,277,pycqa,astroid,pylint-bot,2015-12-09 05:56:15,,closed issue,mulass_assigned_stmts crash
2,issue_comment,277,pycqa,astroid,pylint-bot,2015-12-05 11:52:23,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

assigned_stmts methods have the same signature from now on.

They used to have different signatures and each one made
assumptions about what could be passed to other implementations,
leading to various possible crashes when one or more arguments
weren't given. Closes issue #277.
",,
3,issue_comment,277,pycqa,astroid,pylint-bot,2015-12-05 11:52:23,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

assigned_stmts methods have the same signature from now on.

They used to have different signatures and each one made
assumptions about what could be passed to other implementations,
leading to various possible crashes when one or more arguments
weren't given. Closes issue #277.
",,
4,issue_comment,277,pycqa,astroid,pylint-bot,2015-12-05 11:52:23,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

assigned_stmts methods have the same signature from now on.

They used to have different signatures and each one made
assumptions about what could be passed to other implementations,
leading to various possible crashes when one or more arguments weren't given.
Closes issue #277.
",,
0,issue_title,67,pycqa,astroid,pylint-bot,2014-12-11 15:17:05,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

For this code, Pylint emits an assigning-non-slot, since Class.slots() tries to infer them, even if it is old style class. 

```
#!python

class A:
    __slots__ = ['a']

    def __init__(self):
        self.b = 42

A()
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/67
",start issue,Class.slots() should raise an error on Python 2 or return YES
1,issue_closed,67,pycqa,astroid,pylint-bot,2015-12-09 05:52:47,,closed issue,Class.slots() should raise an error on Python 2 or return YES
2,issue_comment,67,pycqa,astroid,pylint-bot,2015-03-14 13:33:44,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Class.slots raises NotImplementedError for old style classes.

Closes issue #67.
",,
0,issue_title,285,pycqa,astroid,The-Compiler,2015-12-11 12:00:32,,start issue,Delete .hgtags
1,issue_closed,285,pycqa,astroid,PCManticore,2015-12-11 12:05:20,,closed issue,Delete .hgtags
2,pull_request_title,285,pycqa,astroid,The-Compiler,2015-12-11 12:00:32,,e1e66a66c2ae02b667d85817e48475e73f4f951b,Delete .hgtags
3,pull_request_merged,285,pycqa,astroid,PCManticore,2015-12-11 12:05:20,Delete .hgtags,ee052f2284599c4ade06b141d88539bbbd472c09,Pull request merge from PyCQA/astroid:The-Compiler-patch-1 to PyCQA/astroid:master
4,issue_comment,285,pycqa,astroid,PCManticore,2015-12-11 12:05:43,"Ignore the build failures for now, there are some issues with pypy and pylint.
",,
5,pull_request_commit,285,pycqa,astroid,The-Compiler,2015-12-11 12:00:26,Delete .hgtags,e1e66a66c2ae02b667d85817e48475e73f4f951b,
0,issue_title,238,pycqa,astroid,pylint-bot,2015-10-30 23:09:51,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---
- SuperError and SuperArgumentsTypeError is only ever raised in objects.Super.super_mro() and caught (outside the tests) in objects.Super.igetattr().  SuperError is only raised for trying to call super in an old-style class.  Is there somewhere else that the types of these two error cases need to be different?  Otherwise, I propose we combine them.
- All MroErrors are only caught as MroError .  InconsistentMroError and DuplicateBasesError are both raised in only one place each, two functions in scoped_nodes that are both only called in ClassDef.mro.  Again, do these error types need to be different?  If not, I think we should only have one MroError.
- The names of UnresolvableName and NotFoundError should be changed to reflect that they're related to NameError and AttributeError.  Maybe NameInferenceError and AttributeInferenceError?
- Is there a need for a separate InferenceError and ResolveError?  If not, maybe they should be combined.  If so, maybe InferenceError should get a more specific name to indicate how it's distinct from the other subclasses of ResolveError.  What cases does it cover that the others don't?
- Why is OperationError not an exception, if indicates a TypeError occurred in inference?  Since it's not actually an exception, having it named Error is confusing---if it should stay a different object, the name should be changed to something less confusing.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/238
",start issue,Rename and combine exceptions
1,issue_closed,238,pycqa,astroid,pylint-bot,2015-12-09 05:55:38,,closed issue,Rename and combine exceptions
2,issue_comment,238,pycqa,astroid,pylint-bot,2015-10-30 22:21:08,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---
- MroErrors are actually handled in pylint separately. They should be left as is.
- SuperErrors can be merged together
- ResolveError is a bit more general than InferenceError, since it handles some extra cases, NotFoundError and MroError for instance, which aren't necessarily equivalent with InferenceError. In my opinion they shouldn't be conflated together as is.
- NameInferenceError and AttributeInferenceError sounds good to me.
- OperationError is not an exception, its intention is to never be raised anywhere, just to be a container for an error. Having it inherit from Exception would be as well misleading, but I'm fine with changing its name to denote its real purpose.
",,
3,issue_comment,238,pycqa,astroid,pylint-bot,2015-10-31 02:15:04,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Should I use the same proxy generator as for the nodes to make sure the old names are still available?
",,
4,issue_comment,238,pycqa,astroid,pylint-bot,2015-10-31 09:31:06,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I think it's overkill for this case, a simple `old_name = new_name` assignment in exceptions.py should be enough.
",,
5,issue_comment,238,pycqa,astroid,pylint-bot,2015-11-03 02:29:50,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

This is fixed in structured_exceptions, 4d21fd4.
",,
0,issue_title,16,pycqa,astroid,pylint-bot,2014-02-11 06:24:06,"Originally reported by: **BitBucket: [idella5](http://bitbucket.org/idella5)**

---

with
numpy-1.8.0
astroid-1.0.1
pypy-2.0.2

``` python
going into /mnt/gen2/TmpDir/portage/dev-python/astroid-1.0.1/work/astroid-1.0.1/test

======================================================================
ERROR: test_socket_build (unittest_builder.BuilderTC)
----------------------------------------------------------------------
Traceback (most recent call last)
  File ""/usr/lib64/pypy2.0/site-packages/logilab/common/testlib.py"", line 664, in _proceed
    testfunc(*args, **kwargs)
  File ""/mnt/gen2/TmpDir/portage/dev-python/astroid-1.0.1/work/astroid-1.0.1/test/unittest_builder.py"", line 442, in test_socket_build
    self.assertIn('connect', fclass)
  File ""/usr/lib64/pypy2.0/lib-python/2.7/unittest/case.py"", line 798, in assertIn
    if member not in container:
TypeError: '_Yes' object is not iterable

                              no stdout                               
                              no stderr                               

in gentoo linux

do you need anything else in the way of data?

----------------------------------------
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/16
```
",start issue,"1 test fail, test_socket_build, under pypy(2.0.2) in testsuite"
1,issue_closed,16,pycqa,astroid,pylint-bot,2015-12-09 05:51:49,,closed issue,"1 test fail, test_socket_build, under pypy(2.0.2) in testsuite"
2,issue_comment,16,pycqa,astroid,pylint-bot,2015-01-18 10:17:50,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

It doesn't replicate anymore using the tip and

Python 2.7.8 (f5dcc2477b97, Sep 18 2014, 11:33:30)
[PyPy 2.4.0 with GCC 4.6.3]
",,
0,issue_title,283,pycqa,astroid,PCManticore,2015-12-11 11:16:19,"``` python
======================================================================

FAIL: test_file_from_module (unittest_manager.AstroidManagerTest)
check if the unittest filepath is equals to the result of the method

----------------------------------------------------------------------
Traceback (most recent call last):
  File ""/home/travis/build/PyCQA/astroid/.tox/pypy/site-packages/astroid/tests/unittest_manager.py"", line 139, in test_file_from_module
    self.manager.file_from_module_name('unittest', None)[0])
AssertionError: '/opt/python/pypy-2.5.0/lib-python/2.7/unittest/__init__.pyc' != '/opt/python/pypy-2.5.0/lib-python/2.7/unittest/__init__.py'
----------------------------------------------------------------------

Ran 629 tests in 18.997s
```

Travis build: https://travis-ci.org/PyCQA/astroid/jobs/96246836
",start issue,pypy tests are failing on travis
1,issue_closed,283,pycqa,astroid,PCManticore,2015-12-11 12:31:19,,closed issue,pypy tests are failing on travis
2,issue_comment,283,pycqa,astroid,PCManticore,2015-12-11 12:31:28,"Closed with 386a880632679c320bc57a3a0b5d4d548d92408b
",,
0,issue_title,228,pycqa,astroid,pylint-bot,2015-10-26 19:36:33,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

(This is part of a series of issues I'm going to open to talk about necessary reworkings that aren't obvious.)

``` python
======================================================================
ERROR: test_inferred_dont_pollute (unittest_builder.BuilderTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""~/code/astroid/.tox/py34/lib/python3.4/site-packages/astroid/tests/unittest_builder.py"", line 539, in test_inferred_dont_pollute
    self.assertNotIn('custom_attr', nonetype.locals)
  File ""~/code/astroid/astroid/bases.py"", line 79, in __getattr__
    return getattr(self._proxied, name)
  File ""~/code/astroid/astroid/decorators.py"", line 79, in __get__
    val = self.wrapped(inst)
  File ""~/code/astroid/astroid/node_classes.py"", line 1220, in _proxied
    return builtins.getattr(type(self.value).__name__)[0]
  File ""~/code/astroid/astroid/scoped_nodes.py"", line 102, in decorator
    nodes = [n for n in func(*args, **kwargs) if not isinstance(n, cls)]
  File ""~/code/astroid/astroid/scoped_nodes.py"", line 433, in getattr
    raise exceptions.NotFoundError(name)
astroid.exceptions.NotFoundError: NoneType
```

This test is raising ultimately because for None, `type(self.value).__name__` evaluates to `NoneType`, which is the type of the None singleton, only there's no name in the builtins module for `NoneType`.  This will also be a problem for NotImplemented.

Fundamentally, this problem and others like it are arising because astroid is using AST nodes to represent both ASTs and live objects.  However, there's no one-to-one mapping between ASTs and live objects: because None and NotImplemented only exist in the AST as Name(name=None) and Name(name=NotImplemented), using Const to represent them is kind of a hack.  In the far future, we should maybe talk about better-distinguishing the two layers of astroid objects, AST nodes and live objects, and clarifying what kinds of objects only exist in one layer or the other.

For now, my best suggestion is to create a new node that subclasses Const called Singleton that overrides the _proxied property.  Alternately, we could talk about shifting to a different proxy structure, perhaps in combination with replacing bases.Proxy with a different proxy (#205).  Other solutions, like dispatching on the type of the object in _proxied or modifying the builtins AST to add names, look more hackish to me.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/228
",start issue,[modular_locals bugs] Issues with Const._proxied and singletons
1,issue_closed,228,pycqa,astroid,pylint-bot,2015-12-09 05:55:29,,closed issue,[modular_locals bugs] Issues with Const._proxied and singletons
2,issue_comment,228,pycqa,astroid,pylint-bot,2015-10-26 21:01:42,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Having a Singleton node makes sense to me, so I would pretty much prefer this solution.

Yes, at some point we'll have to discuss about separating ASTs from live objects, but we shouldn't worry right now about this. I don't know why issue #205 has any relevancy here, the underlying proxy mechanism should be just an implementation detail from Const's point of view.
",,
3,issue_comment,228,pycqa,astroid,pylint-bot,2015-10-28 03:50:57,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Added Singleton node in 45b5ba2 to resolve some of these problems.
",,
0,issue_title,21,pycqa,astroid,pylint-bot,2014-03-18 18:51:30,"Originally reported by: **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**

---

it currently uses dir(object), which leads to a lot of duplicated information (eg inherited methods).

We should probably use `__dict__`, `__bases__` and so on.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/21
",start issue,rewrite inspect build
1,issue_closed,21,pycqa,astroid,pylint-bot,2015-12-09 05:51:53,,closed issue,rewrite inspect build
2,issue_comment,21,pycqa,astroid,pylint-bot,2015-11-14 05:19:48,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Done in 3e3b3e936b69
",,
0,issue_title,43,pycqa,astroid,pylint-bot,2014-07-29 07:52:00,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

When inferring the argument of a function for instance, you won't get the parent of that argument, which is the Arguments node.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/43
",start issue,protocols._arguments_infer_argname doesn't attach a parent to the generated nodes
1,issue_closed,43,pycqa,astroid,pylint-bot,2015-12-09 05:52:18,,closed issue,protocols._arguments_infer_argname doesn't attach a parent to the generated nodes
2,issue_comment,43,pycqa,astroid,pylint-bot,2014-07-29 08:38:42,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Set the parent of vararg and kwarg nodes when inferring them. Closes issue #43.
",,
3,issue_comment,43,pycqa,astroid,pylint-bot,2014-07-29 08:39:44,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Now this can be used to close https://bitbucket.org/logilab/pylint/issue/288/w1307-false-positive-with-n-identifier.
",,
0,issue_title,4,pycqa,astroid,pylint-bot,2013-08-14 11:16:08,"Originally reported by: **Anonymous**

---
1. Create a script named ""2to3.bat"" (containing ""python ""%~dp0..\Tools\Scripts\2to3.py"" %*"") in PYTHONINSTALLDIR\Scripts, so that the setup.py provided with pylint actually works on Windows (that would be a bug too... but the Windows Python installer should take care of this in a perfect world)
2. Unzip astroid-1.0.0.tar.gz, open a command window and change current working directory to astroid-1.0.0
3. Type 'python setup.py build'
4. Here is the result:

D:\Downloads\astroid-1.0.0>python setup.py build
running build
running build_py
creating build
creating build\lib
creating build\lib\astroid
copying .\as_string.py -> build\lib\astroid
copying .\bases.py -> build\lib\astroid
[...]
copying .\test\data\SSL1__init__.py -> build\lib\astroid\test\data\SSL1
creating build\lib\astroid\test\data2
copying .\test\data2\clientmodule_test.py -> build\lib\astroid\test\data2
copying .\test\data2\suppliermodule_test.py -> build\lib\astroid\test\data2
copying .\test\data2__init__.py -> build\lib\astroid\test\data2
Skipping implicit fixer: buffer
Skipping implicit fixer: idioms
Skipping implicit fixer: set_literal
Skipping implicit fixer: ws_comma
package init file '.\test__init__.py' not found (or not a regular file)
running 2to3 on build\lib\astroid\brain
error: Le fichier spécifié est introuvable

For what it's worth, the 3 steps above work with logilab-common-0.60.0.tar.gz but not with astroid-1.0.0.tar.gz.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/4
",start issue,Building astroid on Windows/Python3 fails
1,issue_closed,4,pycqa,astroid,pylint-bot,2015-12-09 05:51:31,,closed issue,Building astroid on Windows/Python3 fails
2,issue_comment,4,pycqa,astroid,pylint-bot,2013-08-17 12:11:36,"_Original comment by_ **BitBucket: [pierre_raybaut](http://bitbucket.org/pierre_raybaut)**:

---

With the following patch applied to setup.py, it's working:

--- D:/Downloads/astroid-1.0.0-original/astroid-1.0.0/setup.py  Mon Jul 29 17:04:26 2013
+++ D:/Downloads/astroid-1.0.0/setup.py Sat Aug 17 14:05:50 2013
@@ -140,7 +140,10 @@
                     # process manually python file in include_dirs (test data)
                     from subprocess import check_call
                     print('running 2to3 on', dest) # parens are NOT optional here for py3k compat
-                    check_call(['2to3', '-wn', dest])
-                    script2to3 = '2to3'
-                    if os.name == 'nt':
-                        script2to3 += '.bat'
- ```
                 check_call([script2to3, '-wn', dest])
  ```
  
  def install(**kwargs):
     """"""setup entry point""""""
",,
3,issue_comment,4,pycqa,astroid,pylint-bot,2013-08-17 12:12:25,"_Original comment by_ **BitBucket: [pierre_raybaut](http://bitbucket.org/pierre_raybaut)**:

---

```
#!diff

--- D:/Downloads/astroid-1.0.0-original/astroid-1.0.0/setup.py  Mon Jul 29 17:04:26 2013
+++ D:/Downloads/astroid-1.0.0/setup.py Sat Aug 17 14:05:50 2013
@@ -140,7 +140,10 @@
                     # process manually python file in include_dirs (test data)
                     from subprocess import check_call
                     print('running 2to3 on', dest) # parens are NOT optional here for py3k compat
-                    check_call(['2to3', '-wn', dest])
+                    script2to3 = '2to3'
+                    if os.name == 'nt':
+                        script2to3 += '.bat'
+                    check_call([script2to3, '-wn', dest])

 def install(**kwargs):
     """"""setup entry point""""""

```
",,
4,issue_comment,4,pycqa,astroid,pylint-bot,2013-09-04 15:07:09,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

see https://bitbucket.org/logilab/pylint/issue/51/building-pylint-windows-installer-for
",,
5,issue_comment,4,pycqa,astroid,pylint-bot,2013-10-18 15:29:16,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

an alternative fix on this pb has been integrated
",,
0,issue_title,25,pycqa,astroid,pylint-bot,2014-04-21 10:58:08,"Originally reported by: **BitBucket: [DXist](http://bitbucket.org/DXist), GitHub: @DXist?**

---

After update of astroid to 1.1.0 I get ""maximum recursion depth exceeded"". Reproduced on Python 2.7.5 and Python 2.7.6.

```
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 678, in _is_metaclass
    for baseobj in base.infer():
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 313, in wrapped
    for res in _func(node, context, **kwargs):
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 337, in wrapper
    for node in func(*args, **kwargs):
File ""/PYTHON2.7/site-packages/astroid/inference.py"", line 213, in infer_getattr
    for owner in self.expr.infer(context):
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 313, in wrapped
    for res in _func(node, context, **kwargs):
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 337, in wrapper
    for node in func(*args, **kwargs):
File ""/PYTHON2.7/site-packages/astroid/inference.py"", line 213, in infer_getattr
    for owner in self.expr.infer(context):
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 313, in wrapped
    for res in _func(node, context, **kwargs):
File ""/PYTHON2.7/site-packages/astroid/inference.py"", line 146, in infer_name
    frame, stmts = self.lookup(self.name)
File ""/PYTHON2.7/site-packages/astroid/node_classes.py"", line 119, in lookup
    return self.scope().scope_lookup(self, name)
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 816, in scope_lookup
    return frame._scope_lookup(node, name, offset)
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 141, in _scope_lookup
    return pscope.scope_lookup(node, name)
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 273, in scope_lookup
    return self._scope_lookup(node, name, offset)
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 130, in _scope_lookup
    stmts = node._filter_stmts(self.locals[name], self, offset)
File ""/PYTHON2.7/site-packages/astroid/node_classes.py"", line 146, in _filter_stmts
    myframe = self.frame()
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 443, in frame
    return self.parent.frame()
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 443, in frame
    return self.parent.frame()
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 443, in frame
    return self.parent.frame()
RuntimeError: maximum recursion depth exceeded
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/25
",start issue,RuntimeError: maximum recursion depth exceeded
1,issue_closed,25,pycqa,astroid,pylint-bot,2015-12-09 05:51:58,,closed issue,RuntimeError: maximum recursion depth exceeded
2,issue_comment,25,pycqa,astroid,pylint-bot,2014-04-21 16:01:35,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Could you provide a sample code on which it fails with this?
",,
3,issue_comment,25,pycqa,astroid,pylint-bot,2014-04-21 22:54:01,"_Original comment by_ **Michael Barrientos (BitBucket: [mbarrien](http://bitbucket.org/mbarrien), GitHub: @mbarrien?)**:

---

Same error happened to me due to some monkey patching within our code and running it through pylint. The following exhibits the error in pylint 1.2.0/astroid 1.1.0, but not in pylint 1.1.0/astroid 1.0.1.

###

# In base.py

```
#!python

class Base(object):
    pass
```

# In derived.py

```
#!python

import base

_real_Base = base.Base

class Derived(_real_Base):
    pass

def run():
    base.Base = Derived
```

###

From what I saw in my investigation, when astroid analyzes the class Derived, inside somewhere in infer(), it incorrectly infers that Base's list of base classes also includes Derived, which ends up with a loop in the class hierarchy.

The following does NOT cause an error when base.py and derived.py are merged in the same file.

# In all.py

```
#!python

class Base(object):
    pass

_real_Base = Base

class Derived(_real_Base):
    pass

def run():
    Base = Derived
```

(Our actual case involved monkey patching some code for suppressing some WSGI logging in Django, so this is not just a theoretical case.)
",,
4,issue_comment,25,pycqa,astroid,pylint-bot,2014-04-22 07:16:03,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Merged in PCManticore/astroid/ancestors (pull request #31)

Skip the same infered nodes as the base class in _is_metaclass. Closes issue #25
",,
5,issue_comment,25,pycqa,astroid,pylint-bot,2014-04-22 07:16:03,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Merged in PCManticore/astroid/ancestors (pull request #31)

Skip the same infered nodes as the base class in _is_metaclass. Closes issue #25
",,
6,issue_comment,25,pycqa,astroid,pylint-bot,2014-04-22 07:16:03,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Skip the same infered nodes as the base class in _is_metaclass. Closes issue #25.
",,
7,issue_comment,25,pycqa,astroid,pylint-bot,2014-04-22 07:17:29,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I added a potential fix. DXist, could you tell me that this also fixes your problem?
",,
8,issue_comment,25,pycqa,astroid,pylint-bot,2014-04-22 07:38:35,"_Original comment by_ **BitBucket: [DXist](http://bitbucket.org/DXist), GitHub: @DXist?**:

---

Yes. That fixes my problem. Thank you!
",,
9,issue_comment,25,pycqa,astroid,pylint-bot,2014-04-23 14:35:48,"_Original comment by_ **David Shea (BitBucket: [davidshea](http://bitbucket.org/davidshea), GitHub: @davidshea?)**:

---

Issue #26 was marked as a duplicate of this issue.
",,
0,issue_title,189,pycqa,astroid,pylint-bot,2015-09-21 17:05:06,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

There is a PEP, https://www.python.org/dev/peps/pep-0473/, sadly languishing in obscurity, that proposes making Python exceptions structured rather than the way they are at the moment, where contextual information is included in the message, if at all.  For custom exceptions, I don't see any reason not to implement the idea right now, to make it easier to extract information from exceptions and to include more context.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/189
",start issue,Make astroid exceptions structured
1,issue_closed,189,pycqa,astroid,pylint-bot,2015-12-09 05:54:50,,closed issue,Make astroid exceptions structured
2,issue_comment,189,pycqa,astroid,pylint-bot,2015-09-21 17:13:21,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Do you have anything in mind? e.g. what kind of changes they will need. It sounds good for me, we'll need to find the proper information type that we need to put into the exceptions.
",,
3,issue_comment,189,pycqa,astroid,pylint-bot,2015-09-21 20:40:00,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I'd have to study the exceptions to come up with complete ideas, but one basic approach is to take the information that's currently being put in strings, break it out into other attributes of the exception, and then have the exception have some kind of `__str__`/`__repr__` that returns the formatted string for display in stack traces.
",,
4,issue_comment,189,pycqa,astroid,pylint-bot,2015-11-06 17:15:02,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

e17cea5afccd finishes finishes the structured exceptions patch, adding lazy message generation, handling of keyword arguments to astroid exceptions, and some general improvements to exceptions.
",,
0,issue_title,89,pycqa,astroid,pylint-bot,2015-04-16 09:01:11,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Since we have a way to retrieve the mro, we could try to understand `super()` calls. This can be used to find errors, such as in this case:

```
#!python

class A(object):
    def do_test(self):
        pass


class B(A):
    def __init__(self):
        super(B, self).do_tes()


B()
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/89
",start issue,Understand super
1,issue_closed,89,pycqa,astroid,pylint-bot,2015-12-09 05:53:18,,closed issue,Understand super
2,issue_comment,89,pycqa,astroid,pylint-bot,2015-05-28 16:29:04,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add a new _inference object_ called Super

This patch also adds support for understanding super calls.
astroid understands the zero-argument form of super, specific to
Python 3, where the interpreter fills itself the arguments of the call. Also, we
are understanding the 2-argument form of super, both for bounded lookups
(super(X, instance)) as well as for unbounded lookups (super(X, Y)),
having as well support for validating that the object-or-type is a subtype
of the first argument. The unbounded form of super (one argument) is not
understood, since it's useless in practice and should be removed from
Python's specification. Closes issue #89.
",,
3,issue_comment,89,pycqa,astroid,pylint-bot,2015-11-19 14:27:03,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add a new _inference object_ called Super

This patch also adds support for understanding super calls.
astroid understands the zero-argument form of super, specific to
Python 3, where the interpreter fills itself the arguments of the call. Also, we
are understanding the 2-argument form of super, both for bounded lookups
(super(X, instance)) as well as for unbounded lookups (super(X, Y)),
having as well support for validating that the object-or-type is a subtype
of the first argument. The unbounded form of super (one argument) is not
understood, since it's useless in practice and should be removed from
Python's specification. Closes issue #89.
",,
0,issue_title,17,pycqa,astroid,pylint-bot,2014-02-16 15:39:10,"Originally reported by: **BitBucket: [dirkbaechle](http://bitbucket.org/dirkbaechle), GitHub: @dirkbaechle?**

---

Hi there,

the attached script BuilderTests.py throws a TypeError

```
#!python

  TypeError: '_Yes' object is not iterable

```

when run through pylint (see attached issue.log for the full output), while the normal invocation with ""python BuilderTests.py"" shows the expected results.

Output of ""pylint --version"" is (installed from latest sources):

```
#!python

  No config file found, using default configuration
  pylint 1.1.0, 
  astroid 1.0.1, common 0.61.0
  Python 2.7.3 (default, Sep 26 2013, 20:03:06) 
  [GCC 4.6.3]

```

The given setup of classes and methods has a practical application, it's used in several unit tests for the build system SCons (www.scons.org).

Best regards,

Dirk

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/17
",start issue,"TypeError, due to definition of __call__ method through Proxy class"
1,issue_closed,17,pycqa,astroid,pylint-bot,2015-12-09 05:51:49,,closed issue,"TypeError, due to definition of __call__ method through Proxy class"
2,issue_comment,17,pycqa,astroid,pylint-bot,2014-04-08 12:11:21,"_Original comment by_ **Sylvain Thénault (BitBucket: [sthenault](http://bitbucket.org/sthenault), GitHub: @sthenault?)**:

---

fix crash when class has some **call** method that is not inferable. Closes #17
",,
0,issue_title,158,pycqa,astroid,pylint-bot,2015-07-11 16:01:04,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

NodeNG's `__repr__` includes a call to `self.root().name`, which will fail on an AST fragment whose root doesn't have a name attribute.  This is mostly an inconvenience when trying to debug the process of building ASTs.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/158
",start issue,repr fails on AST fragments
1,issue_closed,158,pycqa,astroid,pylint-bot,2015-12-09 05:54:17,,closed issue,repr fails on AST fragments
2,issue_comment,158,pycqa,astroid,pylint-bot,2015-07-11 15:36:20,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Could you give me an example where the root doesn't have a name attribute? I presume this is the case for nodes for which their root is not a Module, which is wrong, .root() should always return a Module.
",,
3,issue_comment,158,pycqa,astroid,pylint-bot,2015-07-11 21:52:42,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I first encountered this problem in debugging astroid, which may well have involved an incorrectly-generated AST.  However, I'm more thinking about Macropy and similar code generation applications which can involve splicing pieces of an AST into another AST or building an AST from the bottom up rather than the top down.
",,
4,issue_comment,158,pycqa,astroid,pylint-bot,2015-07-13 06:16:04,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Right, it makes sense for an AST not to have Module as root. Care to work on a patch?
",,
5,issue_comment,158,pycqa,astroid,pylint-bot,2015-07-18 14:40:52,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I will work on a patch once I'm finished with the node constructor patch.
",,
6,issue_comment,158,pycqa,astroid,pylint-bot,2015-07-18 22:09:55,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

No problem. I'll do more reviews for your PR next week, since I'm pretty full with EuroPython right now.
",,
7,issue_comment,158,pycqa,astroid,pylint-bot,2015-09-18 17:58:35,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Fixed by https://bitbucket.org/logilab/astroid/commits/7b127880987d8896349e070debaccc587a3c6570
",,
0,issue_title,294,pycqa,astroid,ceridwen,2015-12-12 17:31:32,"While I was debugging the merge of modular-locals into 2.0, there was a call to nodes.const_factory in const_infer_binary_op, which didn't exist any more.  I'm not sure where, but there was an except: clause catching the AttributeError inappropriately at some point during the inference, which made it very hard to debug.
",start issue,Narrow exception handling for AttributeErrors in the inference to avoid concealing bugs
1,issue_closed,294,pycqa,astroid,PCManticore,2016-01-03 08:44:16,,closed issue,Narrow exception handling for AttributeErrors in the inference to avoid concealing bugs
0,issue_title,37,pycqa,astroid,pylint-bot,2014-07-20 20:47:55,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Will help me for debugging.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/37
",start issue,Add function annotations for as_string
1,issue_closed,37,pycqa,astroid,pylint-bot,2015-12-09 05:52:11,,closed issue,Add function annotations for as_string
2,issue_comment,37,pycqa,astroid,pylint-bot,2015-07-01 00:28:09,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add annotation support for function.as_string(). Closes issue #37.
",,
3,issue_comment,37,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add annotation support for function.as_string(). Closes issue #37.
",,
0,issue_title,288,pycqa,astroid,ceridwen,2015-12-12 00:16:16,"There are some examples/instructions here:
https://www.topbug.net/blog/2012/05/27/use-travis-ci-with-jython/
https://github.com/baztian/travis-jython-template/blob/master/.travis.yml
",start issue,Add Jython to Travis CI
1,issue_closed,288,pycqa,astroid,PCManticore,2015-12-30 14:41:42,,closed issue,Add Jython to Travis CI
2,issue_comment,288,pycqa,astroid,PCManticore,2015-12-30 14:42:46,"Added and it was quite painful, due to things not working out of the box in pip's case with Jython 2.7.0. Issue #301 should be dealing with fixing the problems we're having on Jython.
",,
0,issue_title,287,pycqa,astroid,dashea,2015-12-11 20:10:20,"Running _import_gi_module('gi.repository.GLib') with astroid-1.4.1 fails with a syntax error while trying to parse the generated module stub, and I found that the modcode contained properties such as:

`IO_ERR = <flags G_IO_ERR of type GLib.IOCondition>`

This is due to the switch from `type(x) == y` to `isinstance(x, y)` in a079c3d4abecee064c3ab4c44f086b618f06fa8c. GLib.IO_ERR, for example, returns gi.repository.GLib.GIOCondition for type(), but also inherits from int.
",start issue,Check for flags/enum types before checking for int
1,issue_closed,287,pycqa,astroid,PCManticore,2015-12-11 20:58:49,,closed issue,Check for flags/enum types before checking for int
2,pull_request_title,287,pycqa,astroid,dashea,2015-12-11 20:10:20,"Running _import_gi_module('gi.repository.GLib') with astroid-1.4.1 fails with a syntax error while trying to parse the generated module stub, and I found that the modcode contained properties such as:

`IO_ERR = <flags G_IO_ERR of type GLib.IOCondition>`

This is due to the switch from `type(x) == y` to `isinstance(x, y)` in a079c3d4abecee064c3ab4c44f086b618f06fa8c. GLib.IO_ERR, for example, returns gi.repository.GLib.GIOCondition for type(), but also inherits from int.
",b0fdfe55e8428f3a9a141f70632607d6bf0d9bb2,Check for flags/enum types before checking for int
3,pull_request_merged,287,pycqa,astroid,PCManticore,2015-12-11 20:58:49,Check for flags/enum types before checking for int,47dea8e4fd97e1f69b24ce311eb4df995d283187,Pull request merge from dashea/astroid:gi-stub-enum to PyCQA/astroid:master
4,issue_comment,287,pycqa,astroid,PCManticore,2015-12-11 20:58:43,"Thanks! We could add some tests for this plugin in order to prevent future regressions. I must admit though that this is a black box for me, since I'm not familiar with gi.
",,
5,pull_request_commit,287,pycqa,astroid,dashea,2015-12-11 20:04:21,"Check for flags/enum types before checking for int

gobject-introspection enum and flag types inherit from int, so the check
for a unusable string represenation needs to happen before checking if
the values can be used as integers. This fixes syntax errors in the
generated stubs for gobject-introspection modules containing flag and
enum types.",b0fdfe55e8428f3a9a141f70632607d6bf0d9bb2,
0,issue_title,85,pycqa,astroid,pylint-bot,2015-04-07 14:39:38,"Originally reported by: **Mikko Vatanen (BitBucket: [mikkov](http://bitbucket.org/mikkov), GitHub: @mikkov?)**

---

Installing on Centos6.6 / Python 2.6 with pip prints the following error messages:

[root@dev~]# pip install --upgrade pylint

... cut ...

  Running setup.py install for astroid
    SyntaxError: ('invalid syntax', ('/usr/lib/python2.6/site-packages/astroid/tests/unittest_inference.py', 524, 44, '        self.assertSetEqual({n.**class** for n in xxx.infered()},\n'))

```
SyntaxError: ('invalid syntax', ('/usr/lib/python2.6/site-packages/astroid/tests/unittest_scoped_nodes.py', 620, 39, ""        expected_methods = {'__init__', 'class_method', 'method', 'static_method'}\n""))

SyntaxError: ('invalid syntax', ('/usr/lib/python2.6/site-packages/astroid/tests/unittest_modutils.py', 248, 41, ""            {os.path.join(package, x) for x in ['__init__.py', 'module.py', 'module2.py', 'noendingnewline.py', 'nonregr.py']})\n""))

SyntaxError: ('invalid syntax', ('/usr/lib/python2.6/site-packages/astroid/tests/unittest_brain.py', 73, 33, '        self.assertSetEqual({""a"", ""b"", ""c""}, set(base.instance_attrs))\n'))

SyntaxError: ('invalid syntax', ('/usr/lib/python2.6/site-packages/astroid/modutils.py', 69, 61, '        get_python_lib(standard_lib=True, prefix=sys.prefix),\n'))
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/87
",start issue,Syntax errors on Python 2.6
1,issue_closed,85,pycqa,astroid,pylint-bot,2015-12-09 05:53:17,,closed issue,Syntax errors on Python 2.6
2,issue_comment,85,pycqa,astroid,pylint-bot,2015-04-07 13:49:59,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

We don't support Python 2.6 anymore, since Pylint 1.4 and astroid 1.3.
",,
0,issue_title,190,pycqa,astroid,pylint-bot,2015-09-22 12:56:42,"Originally reported by: **Rohit Bhattacharjee (BitBucket: [rohitativy](http://bitbucket.org/rohitativy), GitHub: @rohitativy?)**

---

Hi,

I have same code in two files in a project, and this is by design, since these are test cases. On running pylint on my project I am being thrown a `duplicate-code` warning by pylint even though I have disabled the pylint check for duplicate-code in both of my files locally `# pylint: disable=duplicate-code` .
I can suppress this warning globally by running `pylint <foldername> --disable=duplicate-code` which I don't want because I really don't want duplicate-code to exist in the project; they can only exist if the user has any specific requirements.

regards
Rohit

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/190
",start issue,Pylint unable to suppress duplicate-code warning across files
1,issue_closed,190,pycqa,astroid,pylint-bot,2015-12-09 05:54:51,,closed issue,Pylint unable to suppress duplicate-code warning across files
2,issue_comment,190,pycqa,astroid,pylint-bot,2015-09-22 11:00:04,"_Original comment by_ **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**:

---

This has nothing to do with astroid and is a duplicate of [#214 in pylint](https://bitbucket.org/logilab/pylint/issues/214/the-duplicate-code-r0801-cant-be-disabled) to which Claudiu and I already linked you to via IRC and mailinglist...
",,
3,issue_comment,190,pycqa,astroid,pylint-bot,2015-09-24 18:34:40,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Thanks, Florian.
",,
4,issue_comment,190,pycqa,astroid,bittner,2016-10-13 16:53:23,"Interestingly, I do have the same issue today. I have two test classes (in two files) that are almost identical in one place, but this is by design; as usual this with tests, I suppose. How can I disable the `duplicate-code` warning locally?

The issue linked to Bitbucket above is not accessible anymore. -- Please advise.
",,
5,issue_comment,190,pycqa,astroid,moylop260,2016-10-14 13:00:37,"This issue is a pylint one.
Duplicated with: https://github.com/PyCQA/pylint/issues/214

FYI I'm waiting testers to receive feedback of the following fix: https://github.com/PyCQA/pylint/pull/1055
",,
0,issue_title,49,pycqa,astroid,pylint-bot,2014-09-13 14:26:48,"Originally reported by: **Cole Robinson (BitBucket: [crobinso](http://bitbucket.org/crobinso), GitHub: @crobinso?)**

---

The pygi plugin fails to detect glib with pygobject3-3.13.91. Example:

$ cat test.py

```
#!python

from gi.repository import GLib
from gi.repository import GObject

# These exist
print GLib.idle_add
print GObject.threads_init

# These don't exist
print GLib.foobarbaz
print GObject.bazbarfoo
```

$ pylint test.py --rcfile src/virt-manager/tests/pylint.cfg

```
#!bash

************* Module test
E:  1, 0: No name 'GLib' in module 'gi.repository' (no-name-in-module)
E: 10, 6: Module 'gi.repository.GObject' has no 'bazbarfoo' member (no-member)
```

I'll submit a patch shortly

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/49
",start issue,pygi plugin fails to detect glib with pygobject3-3.13.91
1,issue_closed,49,pycqa,astroid,pylint-bot,2015-12-09 05:52:27,,closed issue,pygi plugin fails to detect glib with pygobject3-3.13.91
2,issue_comment,49,pycqa,astroid,pylint-bot,2014-09-13 12:40:35,"_Original comment by_ **Cole Robinson (BitBucket: [crobinso](http://bitbucket.org/crobinso), GitHub: @crobinso?)**:

---

pull request: https://bitbucket.org/logilab/astroid/pull-request/53
",,
3,issue_comment,49,pycqa,astroid,pylint-bot,2014-09-16 11:14:56,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Closed by https://bitbucket.org/logilab/astroid/pull-request/54/brain-gi-fix-glib-detection/
",,
