,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,413,idan,oauthlib,tbartelmess,2016-04-13 19:15:41,,start issue,access -> accessed
1,issue_closed,413,idan,oauthlib,thedrow,2016-04-20 08:29:26,,closed issue,access -> accessed
2,pull_request_title,413,idan,oauthlib,tbartelmess,2016-04-13 19:15:41,,22a5747998c3e359ac5186426045a1696e228f8c,access -> accessed
3,pull_request_merged,413,idan,oauthlib,thedrow,2016-04-20 08:29:26,access -> accessed,34e5a07f7be4ae29823cb8129c1177fe3c3d55cf,Pull request merge from tbartelmess/oauthlib:patch-1 to idan/oauthlib:master
4,issue_comment,413,idan,oauthlib,thedrow,2016-04-20 08:29:30,"Thanks!
",,
5,pull_request_commit,413,idan,oauthlib,tbartelmess,2016-04-13 19:15:37,access -> accessed,22a5747998c3e359ac5186426045a1696e228f8c,
0,issue_title,416,idan,oauthlib,joelstevenson,2016-04-20 01:22:00,"Rebasing the work done by @ib-lundgren in 2014 onto the current version of master and providing some additional work to get OpenID Connect generally useable.  Authorization Code flow is the primary target but existing work on Implicit and Hybrid is still included.
",start issue,Openid connect
1,issue_closed,416,idan,oauthlib,thedrow,2016-08-28 07:28:42,,closed issue,Openid connect
2,pull_request_title,416,idan,oauthlib,joelstevenson,2016-04-20 01:22:00,"Rebasing the work done by @ib-lundgren in 2014 onto the current version of master and providing some additional work to get OpenID Connect generally useable.  Authorization Code flow is the primary target but existing work on Implicit and Hybrid is still included.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,Openid connect
3,pull_request_merged,416,idan,oauthlib,thedrow,2016-08-28 07:28:42,Openid connect,d5315c19ccc3fdd4ba70b1c94a727e8573f3ad78,Pull request merge from joelstevenson/oauthlib:openid_connect to idan/oauthlib:master
4,issue_comment,416,idan,oauthlib,thedrow,2016-04-20 08:27:19,"Nice job. Have you tested this yourself?
",,
5,issue_comment,416,idan,oauthlib,joelstevenson,2016-04-22 21:00:07,"@thedrow I'm developing it in the context of a Django app using Django-OAuth2-Toolkit, with a small few patches to DOT to support any changes made here to the oauthlib (mostly the validator) .  So far so good.
",,
6,issue_comment,416,idan,oauthlib,thedrow,2016-04-24 05:54:16,"Ok let me know when you guys are ready.
",,
7,issue_comment,416,idan,oauthlib,joelstevenson,2016-05-11 20:22:42,"@thedrow @bjmc @clintonb @ib-lundgren I think this is pretty much ready - but does anyone have any lingering concerns or suggestions?
",,
8,issue_comment,416,idan,oauthlib,thedrow,2016-05-13 06:32:27,"How much API does this PR break if at all?
",,
9,issue_comment,416,idan,oauthlib,thedrow,2016-05-13 06:34:38,"Also, this feature really needs to be documented. 
",,
10,issue_comment,416,idan,oauthlib,joelstevenson,2016-06-06 17:14:05,"Sorry for the delay - I hope to get to that this week.
",,
11,issue_comment,416,idan,oauthlib,clintonb,2016-08-17 13:39:11,"@joelstevenson @thedrow @ib-lundgren is this still under active development? What can we do to get it delivered?
",,
12,issue_comment,416,idan,oauthlib,joelstevenson,2016-08-17 16:45:31,"@clintonb I need to provide some documentation describing what aspects of OIDC are supported.  Thanks for the ping - I will do so today.
",,
13,issue_comment,416,idan,oauthlib,joelstevenson,2016-08-18 22:55:28,"@thedrow the OpenID Connect auth flows don't break any existing API, as such, though they do extend it when an OpenID Connect auth request is received.  The OIDC code is only active when/if the request has a scope including `openid`.  For all other requests OAuthLib will behave as if unchanged.  

If OAuthLib users are passing the `scope` parameter through unfiltered (which is likely I'd imagine), and a request comes through that triggers the OIDC code then it will result in a `NotImplementedError` from one of:

```
RequestValidator.validate_silent_authorization()
RequestValidator.validate_silent_login()
RequestValidator.validate_user_match()
RequestValidator.get_id_token()
```

Until their validator subclass provides an implementation.
",,
14,issue_comment,416,idan,oauthlib,bjmc,2016-08-25 14:50:35,"Is there anything else needed to push this across the finish line?
",,
15,issue_comment,416,idan,oauthlib,thedrow,2016-08-25 17:29:21,"@bjmc Just a few more minor issues.
@joelstevenson Can you take a look at the comments?
Also, you can add yourself to the AUTHORS file :)
",,
16,issue_comment,416,idan,oauthlib,thedrow,2016-08-28 07:29:18,"@joelstevenson Great job! Thank you for your contribution.
I'll release this feature tonight (Israel Time) :)
",,
17,issue_comment,416,idan,oauthlib,joelstevenson,2016-08-30 16:00:58,"@thedrow .  Cheers, I'm happy to help!  Most of the work was from @ib-lundgren so a big thanks to him for bootstrapping the whole effort.
",,
18,issue_comment,416,idan,oauthlib,thedrow,2016-09-03 08:58:38,"Released!
",,
19,pull_request_commit_comment,416,idan,oauthlib,clintonb,2016-04-20 01:31:59,"Why the changes to this file?
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'tox.ini')"
20,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-04-20 01:43:13,"Woops, I didn't mean to include that.  End of day mistake.

> On Apr 19, 2016, at 6:32 PM, Clinton Blackburn notifications@github.com wrote:
> 
> In tox.ini:
> 
> > @@ -1,10 +1,12 @@
> >  [tox]
> > -envlist = py26,py27,py32,py33,py34,py35,pypy,pypy3
> > Why the changes to this file?
> 
> â€”
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'tox.ini')"
21,pull_request_commit_comment,416,idan,oauthlib,thedrow,2016-04-20 08:25:52,"Why is this comment here?
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'tox.ini')"
22,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-04-20 14:16:13,"Should this have a `#Start of OpenIDConnect` comment? Also, maybe rephrase this because it's new now, but it won't always be new.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/authorization_code.py')"
23,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-04-20 14:20:54,"IIRC, the [OpenIDConnect spec allows](https://openid.net/specs/openid-connect-core-1_0.html#Authentication) specifying multiple, space-separated response types.

Should this line be something like:

`if not set(request.response_type.split()).issubset(self.response_types):`
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/implicit.py')"
24,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-04-20 14:26:17,"This feels a bit hacky. If I understand correctly, in this scenario, we've already generated an access token, but then we're just throwing it away and not returning it to the user? I guess that's fine, but it seems like we should be able to do better and avoid creating access tokens we don't need. Can we dispatch on response_type earlier in the flow somewhere?
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/openid_connect.py')"
25,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-04-20 14:30:59,"Why is this the default on the GrantTypeBase?
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(12, '', u'oauthlib/oauth2/rfc6749/grant_types/base.py')"
26,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-04-20 14:33:09,"Can we modify the request object to do this split() for us and have `request.response_type` always be a set? Or will that break things elsewhere?
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/base.py')"
27,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-04-21 00:25:58,"Shouldn't be.  I'll pull that out too.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'tox.ini')"
28,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-04-22 19:10:55,"Ah yes quite possibly.  I'll review this.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/implicit.py')"
29,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-04-22 19:11:33,"Quite possibly, I'll look into what it will take.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/openid_connect.py')"
30,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-04-22 19:18:14,"It looks like this was added to satisfy the default fragment response type in the OpenID spec, but I think this partially conflicts with the defaults defined in the OAuth2 Multiple Response Modes spec.  It may not impact existing OAuth2 flows (at least didn't reflect as an error in the tests) but I'll review to see if this can be less far reaching and scoped more toward OpenID specific requests.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(12, '', u'oauthlib/oauth2/rfc6749/grant_types/base.py')"
31,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-04-22 19:19:40,"Sounds like a good thing to do, at least during OpenID specific requests.  I'll review.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/base.py')"
32,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-04-26 00:37:20," I think splitting `request.response_type` will impact server implementations by basically changing it out from under them.  We could split and cache it in a private property like `_request_type` but I don't know that it's worth it here.  Thoughts?
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/base.py')"
33,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-04-26 00:44:44,"`response_mode` defaults to ""fragment"" for all grants other than AuthorizationCode.  That grant overrides it and Implicit and Hybrid don't so it's mostly DRY.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(12, '', u'oauthlib/oauth2/rfc6749/grant_types/base.py')"
34,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-04-26 15:58:17,"I think splitting at all might be the wrong behavior: After reading [this document](https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#Combinations) referenced from the OIDC spec, it sounds like we shouldn't be treating the response type as a space-separated list of values, but rather an enum that can take specific values of: `code token`, `code id_token`, `id_token token` or `code id_token token`.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/base.py')"
35,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-04-26 18:08:47,"True, I guess it's a question of how rigid we want to be about ordering of values in the `response_type`: should we recognize `token code` and `code token` as the same or only accept it in the `code token` form?  I'm inclined to be accepting of both given that there aren't semantic differences between them, but I can see an argument being made for cleaving to the letter of the spec too.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/base.py')"
36,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-04-26 18:54:01,"I agree it's instinctively appealing to accept both `token code` and `code token`, but I wonder if that could lead to issues down the road, or conflicts with future versions of the spec?

How do other people feel? @clintonb @thedrow ?
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/base.py')"
37,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-05-02 12:00:56,"This reads really ugly. Can we just use `response_types.items()` for both Python 2 and Python 3? I know it's slightly less memory-efficient in Py2, but `response_types` is going to be pretty darn small, so I doubt it matters.

Failing that, I think we should use [`six`](https://pythonhosted.org/six/) to support multi-version Python, instead of scattering compatibility code throughout our code base.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/endpoints/authorization.py')"
38,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-05-02 12:03:48,"Could we use a `FrozenSet` instead of a comma-separated string for this purpose?
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/endpoints/authorization.py')"
39,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-05-02 12:10:30,"Should this take a `nonce` explicitly? Or is it expected that implementors will get the nonce off the request object? If so, it might be good to document that.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(50, '', u'oauthlib/oauth2/rfc6749/request_validator.py')"
40,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-05-02 12:14:22,":+1: Supporting the `claims` parameter.

Maybe I'm not understanding, but are we sure this should be done as part of `token_type_handler.validate_request()` or should it be another method on the RequestValidator?
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/endpoints/resource.py')"
41,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-05-02 18:02:59,"Yeah good question.  Currently the `validate_request()` method calls through to the request_validator's  `validate_bearer_token()` method where the validator currently has the chance to load the token from whatever persistent store it is using and populate request attributes from the stored token's data.  Both flask_oauthlib and the django-oauth-toolkit are doing this and setting the `client`, `user`, and `access_token` properties of the `request` (my patched version of DOT also sets `scopes` from the database because they may not come in via the HTTP request).  Assuming other clients are taking the same approach I didn't want to introduce new interface methods for clients to implement without a strong reason too.

Now that I've been poking around in DOT and oauthlib for a while I can envision various interface level changes but I've been trying to minimize the impact on the RequestValidator interface definition to keep the update path clear.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/endpoints/resource.py')"
42,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-05-02 18:10:25,"In general it appears that the expectation has been that clients will be pulling any relevant parameters off of the `request`.  I'll make a note in the docs about the nonce in implicit and hybrid workflows.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(50, '', u'oauthlib/oauth2/rfc6749/request_validator.py')"
43,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-05-02 18:23:56,"Fair points.  On further rumination I think supporting randomly ordered response_type values is not a significant use case and the code will be cleaner overall if we simply look for `response_type` values as defined in the spec's registry.  Code reverting this is pushed.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/endpoints/authorization.py')"
44,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-05-02 18:28:46,"I think that's probably the right decision. Nobody can really complain at us for following the letter of the spec.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/endpoints/authorization.py')"
45,pull_request_commit_comment,416,idan,oauthlib,thedrow,2016-05-02 18:36:32,"If there will be any API breakage I'll release this as oauthlib 2.0 and libraries will upgrade when they see fit.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/endpoints/resource.py')"
46,pull_request_commit_comment,416,idan,oauthlib,bjmc,2016-05-02 18:42:21,"I'll also note that we could probably safely add methods to RequestValidator as long as the RequestValidator base class contains no-op stubs of the relevant methods. Presumably implementers would be subclassing the Base, and so they wouldn't have any breakage.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/endpoints/resource.py')"
47,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-05-02 19:31:13,"Reviewing the flow here it looks like my comment 

> the validate_request() call is a chance for the client library to finalize the scopes on the request 

there is wrong.  `request.scopes` ought to be the scopes _required to access_ the Resource and can be defined by the client library prior to calling our `verify_request()`.  It's a bit confusing - if anything I'd rename the `scopes` argument of `verify_request()` to be `required_scopes`.  That would only slightly clarify it though - the `request.scopes` property is overloaded to mean both ""scopes listed in the incoming HTTP request"" in other request flows like Authorization and Token requests and ""scopes required to access the requested resource"" as in this protected resource request flow.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/endpoints/resource.py')"
48,pull_request_commit_comment,416,idan,oauthlib,joelstevenson,2016-05-03 18:48:06,"I'm ok with leaving this in `validate_request()` given the way the `request` is currently being populated within that code flow but if there's a clear desire to move it into a new `RequestValidator` method where this `claims` parameter parsing takes place let me know. 
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/endpoints/resource.py')"
49,pull_request_commit_comment,416,idan,oauthlib,thedrow,2016-08-25 17:19:08,"Why use `not var in list` instead of `var not in list`?
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/endpoints/revocation.py')"
50,pull_request_commit_comment,416,idan,oauthlib,thedrow,2016-08-25 17:20:42,"Here `not var in tuple` appears again.
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/base.py')"
51,pull_request_commit_comment,416,idan,oauthlib,thedrow,2016-08-25 17:21:21,"Is the comment above still correct?
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/implicit.py')"
52,pull_request_commit_comment,416,idan,oauthlib,thedrow,2016-08-25 17:24:51,"Again `not var in list`...
",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,"(None, '', u'oauthlib/oauth2/rfc6749/grant_types/openid_connect.py')"
53,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-07-06 17:20:36,"Move save token to grant type and allow token modification.

request_validator.save_bearer_token was previously called from inside
token_handler.create_token but is now called from the respective
grant type after being created by token_handler.create_token.
This makes it easier to allow extensions grants to modify the token
via the newly introduced token modifier methods that will be invoked
prior to the save.

This is consistent with how auth code is created and saved plus it
removes the hidden dual purpose of create_token.",8f9c984202976e62d7e376338fddc4ef39be74e0,
54,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-07-06 17:24:54,Move save_bearer_token to the grant types.,e63492b00ef585ed13af5f28f0bebe5b342d54a8,
55,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-07-06 17:25:24,Add the first few OpenID connect error classes.,67369baee81dfbfb6d89dd8404da8c91f14ba209,
56,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-07-06 17:26:19,A few initial OpenID Connect validation methods for silent logins and user matching,09b79fec5943a4ca0ff635b7525c00c07cae40af,
57,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-07-06 17:26:49,Add token modifier and save to refresh token grant as well.,3d0ebb6ac6d482218f6f58ea76ec69bec925b109,
58,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-07-06 17:27:10,"Initial sketch of OpenID Connect grant extensions.

Only drafted some of the parameters introduced and little validation has
been implemented so far. The id_token creation is also on the TODO list
but a lot of it is created by @intelie in his fork already.",d48c291a34263893b1d4f45036f7b9aaaa63bccd,
59,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-01 13:58:00,Support for extra token validators and code modifiers.,cfb2682c07c79d7b636b0f44d4633a3e531e0512,
60,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-01 13:58:19,New validator method get_auth_code_scopes.,1ce0a4fe77413633c1b6d701aae0c94c220b4713,
61,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-01 14:00:35,"Small steps on the OpenID grant types.

Direct response if prompt is none.
Sketched out methods for implicit and hybrid.
New method for adding access tokens in hybrid auth step.",96946d64eb4ecb0b3615587fa30b03e7f3845cc6,
62,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:28:10,Auth code authorization resp test.,d38502160d0f455575bec354a2e303221086bfac,
63,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:28:44,Implicit authorization response mode test.,7879224c905f7f56f1fc0710765a6ce4d5edc0d0,
64,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:30:19,Response mode support.,077b4a0516e6975d0ef732262fb8f313f7371094,
65,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:31:09,Raise OIDCNoPrompt exception upon authorization if requested.,a445778860405d117111e24a078f25a9c399c608,
66,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:31:41,Convenience (for testing) imports.,958e70fcc1dafe30bc6f571a142791784d8fbb3c,
67,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:32:36,Remove get_auth_code_scopes. Obsoleted by validate_auth_code,c03d208c42b2d18b19b9020e2aaff5b1ee9b0556,
68,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:32:56,OpenID Connect core tests.,e3290bfaf9393278aa3d6ebb47e39c952e532002,
69,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-07-06 17:20:36,"Move save token to grant type and allow token modification.

request_validator.save_bearer_token was previously called from inside
token_handler.create_token but is now called from the respective
grant type after being created by token_handler.create_token.
This makes it easier to allow extensions grants to modify the token
via the newly introduced token modifier methods that will be invoked
prior to the save.

This is consistent with how auth code is created and saved plus it
removes the hidden dual purpose of create_token.",d8fd9714b2c8c3179f6f6b04299a97bccce3c357,
70,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-07-06 17:25:24,Add the first few OpenID connect error classes.,6290435070bd7b27c3e7c52c0cb22fb454ad452f,
71,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-07-06 17:26:19,A few initial OpenID Connect validation methods for silent logins and user matching,1b4bc8a9bac3be2aab6c33b7d56f4cbd6370404b,
72,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-07-06 17:26:49,Add token modifier and save to refresh token grant as well.,16566e35a535edf99b1d2dd5fcf4386b85c4a414,
73,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-07-06 17:27:10,"Initial sketch of OpenID Connect grant extensions.

Only drafted some of the parameters introduced and little validation has
been implemented so far. The id_token creation is also on the TODO list
but a lot of it is created by @intelie in his fork already.",21cbb8f711cb7ba71ef0c5706ff37c595d2d7cbd,
74,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-01 13:58:00,Support for extra token validators and code modifiers.,4da15da8e4ac49b42f7d5ab2c9b42de2f2d194c6,
75,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-01 13:58:19,New validator method get_auth_code_scopes.,4fec68d3e587db718fafd2554ef6094893b93431,
76,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-01 14:00:35,"Small steps on the OpenID grant types.

Direct response if prompt is none.
Sketched out methods for implicit and hybrid.
New method for adding access tokens in hybrid auth step.",ec3f231adcf474185cf09fdc79655b8d0311e68e,
77,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:28:10,Auth code authorization resp test.,90ca7103ccb49131367cfe87c9161a1641affb63,
78,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:28:44,Implicit authorization response mode test.,d66e937b30004e54ef0680103e3fc9abb3e8d87f,
79,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:30:19,Response mode support.,e0ed5d8ac3174dd7adf023baaaeb35aaefa0081c,
80,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:31:09,Raise OIDCNoPrompt exception upon authorization if requested.,0348a5731c6324641d0c56abd51107e343d1e94d,
81,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:31:41,Convenience (for testing) imports.,d42e8154b1a970ea921d0368bd4711d79ec44759,
82,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:32:36,Remove get_auth_code_scopes. Obsoleted by validate_auth_code,93548975c1f51ff4b346b6c7975dd9e57223a5e4,
83,pull_request_commit,416,idan,oauthlib,ib-lundgren,2014-10-03 13:32:56,OpenID Connect core tests.,77c7774589e7e2348947ba3fb6a070795bba1819,
84,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-04-16 00:43:46,First pass attempt at updating openid_connect branch,29597b9df3046611f037059cf392e48090bc796f,
85,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-04-16 00:46:13,Merge branch 'openid_connect' of https://github.com/joelstevenson/oauthlib into openid_connect,4c160d739a322964b873ca60f90df5384e337c44,
86,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-04-19 21:59:31,More wiring to get OpenID Connect code fully integrated.,fde41caa25203f456a4650ae1e5501725622cbb7,
87,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-04-20 00:53:38,Fixup implicit flow authorization response and test,872b66c0057ae72c3be202ded54f3a3f5122f37e,
88,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-04-21 00:26:43,Remove some comments.,bd3dcb88fb957bfa3e43409af8b59245e88d2163,
89,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-04-25 23:49:25,"Handle multi-valued response_types as specified in http://openid.net/specs/oauth-v2-multiple-response-types-1_0.html#Combinations
Handle new 'none' response_type
Implicit flow won't generate a token unless it is asked for (skipped for ""id_token"" response_type",21f39752241c56ca4538d09e225f4653b9446d9e,
90,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-04-26 00:24:50,Iterate correctly over response_types dict without using six,69decb87e64d0f6b61283f3c1910bd6672a1da3f,
91,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-04-26 18:15:10,Remove some comments related to new code for OIDC feature.,dae2c64b66c530e50c0a15bdd6cab072c733af85,
92,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-04-26 18:15:54,Merge branch 'openid_connect' of https://github.com/joelstevenson/oauthlib into openid_connect,0fee646124b4af3cdf16189c64ac64777bc1c919,
93,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-04-29 16:29:22,Prevent save_token() from being called twice within create_token_response().  We call save_token() after any token modifiers have run so we can tell the token_handler's create_token() method not to save the token and do that explicitly ourselves.,2f7fd6cde2e10a9980ad4ef2e438d6b93769e613,
94,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-04-29 19:55:19,Parse request.claims in ResourceEndpoint.verify_request() when the token's scope includes openid and there are claims submitted in the request.,5546a120153899d8d712a048f664dcb55bb4b791,
95,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-04-29 22:32:04,Use a single if statement in ResourceEndpoint.verify_request() claims check,9e6de5cc1ebd3d257d8fe7931924736ca731b301,
96,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-05-02 17:10:52,Check the response type against exact response_type registry formats in GrantTypeBase.add_token(),c9393ce3fb370af303afe741ce61ee1f73a17833,
97,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-05-02 18:21:11,"Pairing with the previous commit, revert the change related to response_type in AuthorizationEndpoint so that they must appear in the order specified in the spec.  Just keeps the code clean and simple this way.",071ecaf8221fdc8cc2793238f067c78a26e2763d,
98,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-05-02 18:24:38,Minor cleanup,1a186cec18a503ee2f26026138a5614fb582e46f,
99,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-05-06 21:52:49,Reworking the handling of claims.  @bjmc was quite right to question the haste-y inclusion in the Resource endpoint.  It is an optional parameter to the Authorization Code endpoint and so needs to be stored with both the generated authorization code grant and any subsequent access token issued to that authorization code.,9a8f73d2dd088d5ea01313de2a1fe5a877994a79,
100,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-08-18 22:29:01,"Move the claims handling into OpenIDConnectBase._inflate_claims() and a new AuthCodeGrantDispatcher to route requests to either the default AuthorizationCodeGrant or OpenIDConnectAuthCode depending on scope when the request's response_type is a simple (ambiguous) 'code'.
Include basic docs about OpenID Connect auth flow support",447465547cc9a14350d024ed25b374614c475eec,
101,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-08-18 22:41:40,Short description doc for AuthCodeGrantDispatcher,a6cc9a8caf54d800fcf4fcb31be08a87fd4bf973,
102,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-08-25 23:25:39,"Test for membership should be ""not in"".
Commenting.",e5b57dd0167857dd4282de51bd5ac58aaf73213b,
103,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-08-25 23:27:02,AUTHORS file,925b2591194b764d2973045d85c693020583aac8,
104,pull_request_commit,416,idan,oauthlib,joelstevenson,2016-08-26 23:39:52,"Test for membership should be ""not in"", here too.",06c0bd8e2deb7c9c2e4c5d7874bc94c90e334d4d,
