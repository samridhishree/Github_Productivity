,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,492,idan,oauthlib,noirbizarre,2017-10-23 12:07:15,2.0.6 version has been published on PyPI but there is no trace of it on github,start issue,Missing commits and changelog for 2.0.6
1,issue_closed,492,idan,oauthlib,lepture,2017-10-27 07:05:55,,closed issue,Missing commits and changelog for 2.0.6
2,issue_comment,492,idan,oauthlib,lepture,2017-10-27 07:05:45,"It's here: https://github.com/idan/oauthlib/tree/2.x

There is a mistake when releasing 2.0.5. Master branch is going to be 3.x.",,
3,issue_comment,492,idan,oauthlib,lepture,2017-10-27 07:07:30,"BTW, I'm going to creating a new authentication library, which should be a ready to use library with nice API. Flask and Django will be built into the library by default.

https://www.patreon.com/lepture",,
0,issue_title,498,idan,oauthlib,ViktorHaag,2017-10-27 16:03:48,"This pull incorporates changes from PR #388 as it appears orphaned.

I cleaned up the comments for the HMAC-SHA256 signing method, and added tests for the SHA1 and SHA256 signing methods (I verified the signature generation code against node's `oauth-1.0a` and `crypto` modules, to be satisfied that the test signature values were valid).",start issue,Add support for HMAC-SHA256 (builds on PR#388)
1,issue_closed,498,idan,oauthlib,thedrow,2017-11-14 15:44:45,,closed issue,Add support for HMAC-SHA256 (builds on PR#388)
2,pull_request_title,498,idan,oauthlib,ViktorHaag,2017-10-27 16:03:48,"This pull incorporates changes from PR #388 as it appears orphaned.

I cleaned up the comments for the HMAC-SHA256 signing method, and added tests for the SHA1 and SHA256 signing methods (I verified the signature generation code against node's `oauth-1.0a` and `crypto` modules, to be satisfied that the test signature values were valid).",be7d482a5d5696ea8aa468dc8f31a0188bc74033,Add support for HMAC-SHA256 (builds on PR#388)
3,pull_request_merged,498,idan,oauthlib,thedrow,2017-11-14 15:44:45,Add support for HMAC-SHA256 (builds on PR#388),cfb82feb03fcd60b3b66ac09bf1b478cd5f11b7d,Pull request merge from ViktorHaag/oauthlib:hmac-sha256 to idan/oauthlib:master
4,issue_comment,498,idan,oauthlib,lepture,2017-10-27 17:44:45,"Actually there is a way to register your own signature method.
https://github.com/idan/oauthlib/blob/master/oauthlib/oauth1/rfc5849/__init__.py#L52

This **HMAC-SHA256** is not a part of the specification in RFC. This patch should not be included in this repo.",,
5,issue_comment,498,idan,oauthlib,thedrow,2017-11-14 15:44:36,"I have given this some thought.
I don't see the harm in providing this implementation to our users.
It's a pretty common usecase.",,
6,issue_comment,498,idan,oauthlib,thedrow,2017-11-14 15:45:34,"Thank you @ViktorHaag @mick88 
Feel free to add yourselves to the AUTHORS file.

@lepture If you strongly disagree let's chat about this over email.
We can always revert before making a new release.",,
7,pull_request_commit_comment,498,idan,oauthlib,lepture,2017-10-27 17:41:27,There is no such thing in RFC5849.,be7d482a5d5696ea8aa468dc8f31a0188bc74033,"(18, '', u'oauthlib/oauth1/rfc5849/signature.py')"
8,pull_request_commit_comment,498,idan,oauthlib,ViktorHaag,2017-10-27 18:21:43,"Agreed. Note that my comment didn't claim it was in RFC5849, but defined in RFC4634 (as one of the suite of accepted Secure Hash Algorithms beyond SHA-1).

I took 5849's provision of three signature methods as _not exclusive_. In section 3.4, it says ""OAuth _does not mandate_ a particular signature method"" (my emphasis), and so it seems useful, with little harm, to add support for SHA2-family signing methods.

If the maintainers would prefer to have clients add support for more modern signing methods via extension, rather than provided in the library, I can understand that decision. I would have thought having the support in-library would at least help clients ensure consistency, but it's clearly not my decision.",be7d482a5d5696ea8aa468dc8f31a0188bc74033,"(18, '', u'oauthlib/oauth1/rfc5849/signature.py')"
9,pull_request_commit_comment,498,idan,oauthlib,lepture,2017-10-27 18:43:48,"@ViktorHaag See my comment. There is a register function to extend signature methods. The folder is named as rfc5849, things beyond this scope should not be included.

cc @thedrow @ib-lundgren ",be7d482a5d5696ea8aa468dc8f31a0188bc74033,"(18, '', u'oauthlib/oauth1/rfc5849/signature.py')"
10,pull_request_commit_comment,498,idan,oauthlib,ViktorHaag,2017-10-27 19:14:35,"Yes, I understand your point. I had assumed from the comments in #388, that the blocking factor here was a lack of testing and documentation, and not the idea in the first place. It was or that reason that I decided to help by ""finishing"" the original PR. If the maintainer group would prefer not to include it, that's fine: I'm glad there is a way to extend the package usefully.",be7d482a5d5696ea8aa468dc8f31a0188bc74033,"(18, '', u'oauthlib/oauth1/rfc5849/signature.py')"
11,pull_request_commit,498,idan,oauthlib,mick88,2015-08-31 13:44:13,Add support for HMAC-SHA256,9d8b4329cc223982ac72b987789178064f858db5,
12,pull_request_commit,498,idan,oauthlib,mick88,2015-08-31 13:59:38,"Add explicit declaration of HMAC-SHA1 and point HMAC at it

To avoid confusion, HMAC constant name should explicitly state which SHA variant is used, but for backwards compatibility, SIGNATURE_HMAC is still needed",ab1b728a50b86a786247559fb423d01260dd438c,
13,pull_request_commit,498,idan,oauthlib,mick88,2015-08-31 14:09:04,Merge branch 'hmac-sha256',6edc359c8fab227eff8d2b34521bff7409d48e55,
14,pull_request_commit,498,idan,oauthlib,ViktorHaag,2017-10-26 15:20:46,Merge branch 'master' of https://github.com/idan/oauthlib,d27af15e098ed29cca5c234cf99fd447658999cb,
15,pull_request_commit,498,idan,oauthlib,ViktorHaag,2017-10-27 15:58:05,add support for HMAC-SHA256 including tests and comments,b9c647087377b5dd2411fc9f7e72ebbb0a82fd86,
16,pull_request_commit,498,idan,oauthlib,ViktorHaag,2017-10-27 15:58:55,Merge branch 'master' of https://github.com/idan/oauthlib,c5f8e91b62dab6a213c671aebf4e384f64b43970,
17,pull_request_commit,498,idan,oauthlib,ViktorHaag,2017-10-27 15:59:11,Merge branch 'master' into hmac-sha256,b457f88aad6c1b01021369cc8b8b357ab13e3917,
18,pull_request_commit,498,idan,oauthlib,ViktorHaag,2017-10-27 17:11:27,constructor tests verify client built with correct signer method,be7d482a5d5696ea8aa468dc8f31a0188bc74033,
0,issue_title,388,idan,oauthlib,mick88,2015-08-31 14:03:22,,start issue,Add support for HMAC-SHA256
1,issue_closed,388,idan,oauthlib,lepture,2017-10-27 17:42:52,,closed issue,Add support for HMAC-SHA256
2,pull_request_title,388,idan,oauthlib,mick88,2015-08-31 14:03:22,,ab1b728a50b86a786247559fb423d01260dd438c,Add support for HMAC-SHA256
3,issue_comment,388,idan,oauthlib,thedrow,2015-10-25 11:09:03,"Looks really nice but needs test coverage.
",,
4,issue_comment,388,idan,oauthlib,ViktorHaag,2017-10-27 17:14:03,Superseded with PR #498 ?,,
5,issue_comment,388,idan,oauthlib,lepture,2017-10-27 17:42:52,"This should not be included in this library. It is not in RFC. However, we can provide a way to extend signature methods.",,
6,pull_request_commit_comment,388,idan,oauthlib,thedrow,2016-12-06 13:27:16,If I remember correctly this needs to be converted to bytes in order to be Python 3 compatible. ,ab1b728a50b86a786247559fb423d01260dd438c,"(52, '', u'oauthlib/oauth1/rfc5849/signature.py')"
7,pull_request_commit_comment,388,idan,oauthlib,thedrow,2016-12-06 13:28:26,This will break backwards compatibility. Please include both `SIGNATURE_HMAC_SHA1` & `SIGNATURE_HMAC`.,ab1b728a50b86a786247559fb423d01260dd438c,"(11, '', u'oauthlib/oauth1/rfc5849/__init__.py')"
8,pull_request_commit_comment,388,idan,oauthlib,kevin-brown,2016-12-06 14:40:02,Are those two the exact same? (line 32),ab1b728a50b86a786247559fb423d01260dd438c,"(11, '', u'oauthlib/oauth1/rfc5849/__init__.py')"
9,pull_request_commit_comment,388,idan,oauthlib,thedrow,2016-12-07 20:36:57,Yes they are.,ab1b728a50b86a786247559fb423d01260dd438c,"(11, '', u'oauthlib/oauth1/rfc5849/__init__.py')"
10,pull_request_commit,388,idan,oauthlib,mick88,2015-08-31 13:44:13,Add support for HMAC-SHA256,9d8b4329cc223982ac72b987789178064f858db5,
11,pull_request_commit,388,idan,oauthlib,mick88,2015-08-31 13:59:38,"Add explicit declaration of HMAC-SHA1 and point HMAC at it

To avoid confusion, HMAC constant name should explicitly state which SHA variant is used, but for backwards compatibility, SIGNATURE_HMAC is still needed",ab1b728a50b86a786247559fb423d01260dd438c,
0,issue_title,496,idan,oauthlib,jdufresne,2017-10-27 13:18:34,"For Travis CI documentation on including a bdist_wheel distribution, see:

https://docs.travis-ci.com/user/deployment/pypi/#Uploading-different-distributions

Fixes #493

---

I don't have a good way to test this. I'm simply going by the documentation.",start issue,"When deploying a release to PyPI, include the wheel distribution"
1,issue_closed,496,idan,oauthlib,lepture,2017-10-27 15:56:29,,closed issue,"When deploying a release to PyPI, include the wheel distribution"
2,pull_request_title,496,idan,oauthlib,jdufresne,2017-10-27 13:18:34,"For Travis CI documentation on including a bdist_wheel distribution, see:

https://docs.travis-ci.com/user/deployment/pypi/#Uploading-different-distributions

Fixes #493

---

I don't have a good way to test this. I'm simply going by the documentation.",3e4d4c04be4f132521b64f2c17a7c8824bfe3c3b,"When deploying a release to PyPI, include the wheel distribution"
3,pull_request_merged,496,idan,oauthlib,lepture,2017-10-27 15:56:29,"When deploying a release to PyPI, include the wheel distribution",4b85d90a54572f54b8b19d036d76d043cf116699,Pull request merge from jdufresne/oauthlib:travis-wheel to idan/oauthlib:master
4,pull_request_commit,496,idan,oauthlib,jdufresne,2017-10-27 13:01:56,"When deploying a release to PyPI, include the wheel distribution

For Travis CI documentation on including a bdist_wheel distribution,
see:

https://docs.travis-ci.com/user/deployment/pypi/#Uploading-different-distributions

Fixes #493",3e4d4c04be4f132521b64f2c17a7c8824bfe3c3b,
0,issue_title,493,idan,oauthlib,jdufresne,2017-10-24 02:55:35,"Universal wheel support was added some time ago:

https://github.com/idan/oauthlib/commit/06c7c58bac102838c46a5bef47e3d1758f7095c0

I noticed that a wheel package is not available on PyPI, only a `.tar.gz` file:

https://pypi.python.org/pypi/oauthlib

To upload the wheel, when you'd normally run `python setup.py sdist upload`, run instead `python setup.py sdist bdist_wheel upload`.

See https://pythonwheels.com/ for additional details. On that page, oauthlib is listed as one of the most used packages with a wheel.",start issue,Missing wheel package on PyPI
1,issue_closed,493,idan,oauthlib,lepture,2017-10-27 15:56:29,,closed issue,Missing wheel package on PyPI
2,issue_comment,493,idan,oauthlib,lepture,2017-10-27 07:09:27,It's uploaded by Travis CI. ,,
