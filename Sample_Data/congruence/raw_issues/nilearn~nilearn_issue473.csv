"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","473","nilearn","nilearn","banilo","2015-03-01 13:33:42","find_xyz_cut_coords() is currently crashing for very small values in nifti image due to failure of largest_connected_component() call.
","start issue","bugfix in findcuts()"
"issue_closed","473","nilearn","nilearn","AlexandreAbraham","2015-03-13 21:53:10","","closed issue","bugfix in findcuts()"
"pull_request_title","473","nilearn","nilearn","banilo","2015-03-01 13:33:42","find_xyz_cut_coords() is currently crashing for very small values in nifti image due to failure of largest_connected_component() call.
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","bugfix in findcuts()"
"pull_request_merged","473","nilearn","nilearn","AlexandreAbraham","2015-03-13 21:53:10","bugfix in findcuts()","351b60ba65a1cb269d632381b4413dbbe57805d7","Pull request merge from banilo/nilearn:findcutsbug to nilearn/nilearn:master"
"issue_comment","473","nilearn","nilearn","banilo","2015-03-01 13:38:09","Should we add a regression test?
","",""
"issue_comment","473","nilearn","nilearn","lesteve","2015-03-01 13:47:20","> Should we add a regression test?

Yes please
","",""
"issue_comment","473","nilearn","nilearn","banilo","2015-03-10 12:47:24","How about now?
","",""
"issue_comment","473","nilearn","nilearn","GaelVaroquaux","2015-03-10 14:05:19","Failing test
","",""
"issue_comment","473","nilearn","nilearn","banilo","2015-03-10 14:11:07","The test with the sparse matrix is failing due to np.nan_to_num()

``` python
    sparse_adjacency_matrix = sparse.coo_matrix(adjacency_matrix)
    plot_connectome(sparse_adjacency_matrix, node_coords,
                    **kwargs)
```

So?
","",""
"issue_comment","473","nilearn","nilearn","GaelVaroquaux","2015-03-10 14:16:28","Apply it only on the ""data"" attribute of the sparse matrix. You can test for sparse matrix with scipy.sparse.isspmatrix

Sent from my phone. Please forgive brevity and mis spelling

On Mar 10, 2015, 15:11, at 15:11, Danilo Bzdok notifications@github.com wrote:

> The test with the sparse matrix is failing due to np.nan_to_num()
> 
> ``` python
>    sparse_adjacency_matrix = sparse.coo_matrix(adjacency_matrix)
>    plot_connectome(sparse_adjacency_matrix, node_coords,
>                    **kwargs)
> ```
> 
> So?
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nilearn/nilearn/pull/473#issuecomment-78060355
","",""
"issue_comment","473","nilearn","nilearn","lesteve","2015-03-10 15:37:30","Could you rebase on master so that we can get the coverage and python 3 support?
","",""
"pull_request_commit_comment","473","nilearn","nilearn","bthirion","2015-03-01 20:41:33","Could you add a comment ? I'm not sure I understand what you do here. 
+ a test...
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(None, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","AlexandreAbraham","2015-03-09 13:41:57",":+1: This is not clear for me either.
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(None, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","banilo","2015-03-09 22:30:40","For some obscure reason the 'mask' happened to contain only zeros for a certain nifti image, which is why largest_connected_component crashed. Unfortunately, I have not succeeded in creating the same situation in a test :(
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(None, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","GaelVaroquaux","2015-03-10 09:01:06","What you are doing here is absolutely to me :). However, it seems that a comment would be welcome.

I addition, I would write the line above: 'if not np.any(mask)'.

Once this is in, and a test, I am :+1: for merge. And thanks, this is very useful!
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(None, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","AlexandreAbraham","2015-03-10 11:31:31","Isn't `if not np.any(mask)` slower? In that case, we should also change line 73.
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(None, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","GaelVaroquaux","2015-03-10 11:34:40","Did you time this with %timeit?

Sent from my phone. Please forgive brevity and mis spelling

On Mar 10, 2015, 12:31, at 12:31, Alexandre Abraham notifications@github.com wrote:

> > @@ -76,6 +76,8 @@ def find_xyz_cut_coords(img, mask=None,
> > activation_threshold=None):
> >          activation_threshold = fast_abs_percentile(my_map[my_map !=
> > 0].ravel(),
> >                                                     80)
> >      mask = np.abs(my_map) > activation_threshold - 1.e-15
> > -    if mask.sum() == 0:
> 
> Isn't `if not np.any(mask)` slower? In that case, we should also change
> line 73.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/nilearn/nilearn/pull/473/files#r26113990
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(None, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","AlexandreAbraham","2015-03-10 11:37:41","I've done it: the max/min version is twice as fast for a 50x50x50 image.
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(None, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","GaelVaroquaux","2015-03-10 11:55:11","> I've done it: the max/min version is twice as fast for a 50x50x50 image.

Thanks for checking!
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(None, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","lesteve","2015-03-10 12:57:01","minor comment: `* 1e-7`

More importantly isn't this test supposed to fail without your fix in find_cuts.py? Spoiler: it doesn't seem to, at least for me ...
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(None, '', u'nilearn/plotting/tests/test_find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","lesteve","2015-03-11 07:32:37","I guess because that's a boolean array you only need the mask.max() == 0
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(5, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","lesteve","2015-03-11 07:43:01","I believe the lines above (l.73) are now redundant and should be removed:

``` python
# Testing min and max is faster than np.all(my_map == 0)
if (my_map.max() == 0) and (my_map.min() == 0):
    return .5 * np.array(data.shape)
```
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(5, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","lesteve","2015-03-11 08:09:55","I actually double-check the claim that checking .max() and .min() was faster than using .any(), it seems to be true for float arrays but not boolean ones.

I'd be in favour of `if not mask.any()`

``` python
import numpy as np
arr = np.random.random((64, 64, 64))
%timeit arr.max()
%timeit arr.any()
bool_arr = arr > 0.5
%timeit bool_arr.max()
%timeit bool_arr.any()
%timeit np.any(bool_arr)
```

``` python
In [75]: import numpy as np

In [76]: arr = np.random.random((64, 64, 64))

In [77]: %timeit arr.max()
10000 loops, best of 3: 126 µs per loop

In [78]: %timeit arr.any()
1000 loops, best of 3: 868 µs per loop

In [79]: bool_arr = arr > 0.5

In [80]: %timeit bool_arr.max()
The slowest run took 6.30 times longer than the fastest. This could mean that an intermediate result is being cached 
100000 loops, best of 3: 9.85 µs per loop

In [81]: %timeit bool_arr.any()
The slowest run took 6.49 times longer than the fastest. This could mean that an intermediate result is being cached 
100000 loops, best of 3: 9.63 µs per loop

In [82]: %timeit np.any(bool_arr)
The slowest run took 5.46 times longer than the fastest. This could mean that an intermediate result is being cached 
100000 loops, best of 3: 14.1 µs per loop
```

Interestingly enough `np.any` has a 50% overhead compared to `.any`. While we are playing with micro-optimisations, `any(arr.flat)` could be a candidate but I guess it depends how many False you have to iterate through before finding the first True or the end of the array.
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(5, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","lesteve","2015-03-11 08:21:52","Better comment? Something like: test with no data above the activation threshold
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(None, '', u'nilearn/plotting/tests/test_find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","AlexandreAbraham","2015-03-11 08:24:57","> I believe the lines above (l.73) are now redundant and should be removed 

Are you sur that `fast_abs_percentile` won't crash if the array is empty?
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(5, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","lesteve","2015-03-11 08:36:12","> Are you sur that fast_abs_percentile won't crash if the array is empty?

Good point, let's leave it like that for now then.
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(5, '', u'nilearn/plotting/find_cuts.py')"
"pull_request_commit_comment","473","nilearn","nilearn","banilo","2015-03-13 15:10:05","> Better comment?

Done!
","1b82fc6801488be0b72b2380f419fe38a2c0bd12","(None, '', u'nilearn/plotting/tests/test_find_cuts.py')"
"pull_request_commit","473","nilearn","nilearn","banilo","2015-03-13 15:08:12","bugfix in find_cuts()","1b82fc6801488be0b72b2380f419fe38a2c0bd12",""
