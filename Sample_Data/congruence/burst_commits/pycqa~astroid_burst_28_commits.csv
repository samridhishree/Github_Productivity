,rectype,issueid,project_owner,project_name,actor,time,text,action,title,provenance,paths,plus_1,urls,issues,userref,code,formatted_time
298,commit_messages,,pycqa,astroid,cpennington,2017-03-08 19:30:55,Add a test of binary operations on types with unknown bases,26d4c4de343ba74ae46838a7b4995dc180202652,,"api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']",False,[],[],[],[],2017-03-08
585,commit_messages,,pycqa,astroid,cpennington,2017-03-08 15:21:25,"Quickstart _infer_binary_operation to raise errors that occur during startup.

Since https://github.com/PyCQA/astroid/commit/3e27213914271309a4716662b09fda91fca9efa1,
is_subtype and is_supertype raise exceptions when they can't find a
relationship between types. This is caught by the callers of
_infer_binary_operation. However, the error is only thrown after the
generator return by _infer_binary_operation is started.

Prior to this patch, the generator is only started inside the else
clause of:

try:
    results = _infer_binary_operation(lhs, rhs, self, context, _get_binop_flow)
except exceptions._NonDeducibleTypeHierarchy:
    yield util.Uninferable
else:
    for result in results:
        yield result

To address this, the quickstart decorator pulls the first value from the
generator when it's called, and then buffers that first result until it is
needed by the later iteration.",480e6d53210b4c160b4347cbb4987d92842a5c45,,"api.github.com,git_clone","[u'[""astroid/inference.py""]']",False,[u'https://github.com/PyCQA/astroid/commit/3e27213914271309a4716662b09fda91fca9efa1'],[],[],[],2017-03-08
1816,commit_messages,,pycqa,astroid,ceridwen,2017-03-08 20:41:42,"Move discover -s ... -p ... into the default value for {posargs} in tox.ini, to allow running specific tests with `tox -- astroid.tests.unittest_regrtest.NonRegressionTests.test_ssl_protocol`",dc7cdd223f7d0897d7c5f6c3dd89143ca3128bc7,,"api.github.com,git_clone","[u'[""tox.ini""]']",False,[],[],[],[],2017-03-08
2494,pull_request_commit,410.0,pycqa,astroid,cpennington,2017-03-08 19:30:55,Add a test of binary operations on types with unknown bases,dfc8141c0ec3df56180c84b3633e966c61b2f585,,api.github.com,,False,[],[],[],[],2017-03-08
2495,pull_request_commit,410.0,pycqa,astroid,cpennington,2017-03-08 15:21:25,"Quickstart _infer_binary_operation to raise errors that occur during startup.

Since https://github.com/PyCQA/astroid/commit/3e27213914271309a4716662b09fda91fca9efa1,
is_subtype and is_supertype raise exceptions when they can't find a
relationship between types. This is caught by the callers of
_infer_binary_operation. However, the error is only thrown after the
generator return by _infer_binary_operation is started.

Prior to this patch, the generator is only started inside the else
clause of:

try:
    results = _infer_binary_operation(lhs, rhs, self, context, _get_binop_flow)
except exceptions._NonDeducibleTypeHierarchy:
    yield util.Uninferable
else:
    for result in results:
        yield result

To address this, the quickstart decorator pulls the first value from the
generator when it's called, and then buffers that first result until it is
needed by the later iteration.",3179195b225baed9c27e774124ba3a5ba9269959,,api.github.com,,False,[u'https://github.com/PyCQA/astroid/commit/3e27213914271309a4716662b09fda91fca9efa1'],[],[],[],2017-03-08
2496,pull_request_commit,411.0,pycqa,astroid,cpennington,2017-03-08 15:25:08,"Add a brain for the json module.

This implements the fix suggested in https://github.com/PyCQA/pylint/issues/922
for the result of `json.load` being inferred as a `bool`.",713ef82146e2e8538fba75f1c9d5e00712516b1e,,api.github.com,,False,[u'https://github.com/PyCQA/pylint/issues/922'],"[{u'raw': u'https://github.com/PyCQA/pylint/issues/922', u'refstyle': u'url', u'parts': [u'PyCQA', u'pylint', u'922', u'']}]",[],[],2017-03-08
2497,pull_request_commit,411.0,pycqa,astroid,cpennington,2017-03-08 20:08:34,fixup! Add a brain for the json module.,25bb64117665e1b11b3383166ee73c1910b43213,,api.github.com,,False,[],[],[],[],2017-03-08
2498,pull_request_commit,412.0,pycqa,astroid,cpennington,2017-03-08 19:10:15,"Fix an infinite loop that could occur during inference of __nonzero__.

For example:

class AccessResponse(object):
    def __init__(self, has_access):
        self.has_access = has_access

    def __nonzero__(self):
        return self.has_access

not AccessResponse(False)",50cad740924a2ba984a3b0dd7d02719f23a92981,,api.github.com,,False,[],[],[],[],2017-03-08
2499,pull_request_commit,412.0,pycqa,astroid,cpennington,2017-03-08 20:17:36,Add a test for variable-value __nonzero__ methods,46e5ac18f1c6d6fc0f53f6eb19ec0c45c8aaca0d,,api.github.com,,False,[],[],[],[],2017-03-08
