"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","417","pycqa","astroid","cpennington","2017-03-15 15:00:04","On https://github.com/edx/edx-platform/tree/master/common/lib/xmodule/xmodule, this resulted in the following performance improvement (with no change in the errors detected):

Before:

```
Command exited with non-zero status 30
308.18user 11.97system 5:22.79elapsed 99%CPU (0avgtext+0avgdata 583616maxresident)k
0inputs+440outputs (0major+169620minor)pagefaults 0swaps
```

After:

```
Command exited with non-zero status 30
233.37user 12.33system 4:09.24elapsed 98%CPU (0avgtext+0avgdata 611180maxresident)k
0inputs+416outputs (0major+175975minor)pagefaults 0swaps
```","start issue","Cache the computation of which modules haven't been added to the path_importer_cache yet"
"issue_closed","417","pycqa","astroid","ceridwen","2017-03-17 16:42:31","","closed issue","Cache the computation of which modules haven't been added to the path_importer_cache yet"
"pull_request_title","417","pycqa","astroid","cpennington","2017-03-15 15:00:04","On https://github.com/edx/edx-platform/tree/master/common/lib/xmodule/xmodule, this resulted in the following performance improvement (with no change in the errors detected):

Before:

```
Command exited with non-zero status 30
308.18user 11.97system 5:22.79elapsed 99%CPU (0avgtext+0avgdata 583616maxresident)k
0inputs+440outputs (0major+169620minor)pagefaults 0swaps
```

After:

```
Command exited with non-zero status 30
233.37user 12.33system 4:09.24elapsed 98%CPU (0avgtext+0avgdata 611180maxresident)k
0inputs+416outputs (0major+175975minor)pagefaults 0swaps
```","265dd95c1f6cef3ef8a1b5609c580c4da39d8629","Cache the computation of which modules haven't been added to the path_importer_cache yet"
"pull_request_merged","417","pycqa","astroid","ceridwen","2017-03-17 16:42:31","Cache the computation of which modules haven't been added to the path_importer_cache yet","31f21cd2a45be5f8e7d198fb8605b9122051f8e5","Pull request merge from cpennington/astroid:faster-zipimporter-caching to PyCQA/astroid:master"
"issue_comment","417","pycqa","astroid","ceridwen","2017-03-16 15:01:28","Assuming @cpennington answers my question, I'm going to merge this tomorrow if there are no other comments.","",""
"issue_comment","417","pycqa","astroid","cpennington","2017-03-16 15:45:21","I'll try it out and see. I'm not sure if the expensive part in the existing code is the conversion to sets, or the set difference.","",""
"issue_comment","417","pycqa","astroid","cpennington","2017-03-16 16:03:37","@ceridwen: Ok, I ran the numbers, and converting to tuples and then caching is faster than converting to sets and then caching.","",""
"issue_comment","417","pycqa","astroid","ceridwen","2017-03-16 16:48:32","Can you add a comment to that effect?","",""
"issue_comment","417","pycqa","astroid","cpennington","2017-03-16 17:33:18","@ceridwen: done.","",""
"pull_request_commit","417","pycqa","astroid","cpennington","2017-03-15 14:59:28","Cache the computation of which modules haven't been added to the path_importer_cache yet","265dd95c1f6cef3ef8a1b5609c580c4da39d8629",""
