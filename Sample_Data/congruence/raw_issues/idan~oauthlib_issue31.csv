"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","31","idan","oauthlib","dstufft","2012-05-01 13:35:59","After digging into the quote/unquote function I couldn't determine an actual reason for all the advanced logic. It appears that simply encoding/decoding achieves the desired result.

All the tests pass and such. Would probably be good to check with @dgouldin to see if there was a reason for the original method over this way. If there are edge cases where this way doesn't work it'd likely be good to set them down in tests. Additionally there was a test that the quote function returns unicode, which this PR adds, but i question wether it should return unicode since unicode characters are not valid in a URI anyways.

If this way does work it's likely there are other functions in here that could use a similar technique.

If this way doesn't work, the root cause of the problem was that keys to the dictionary are bytestrings ""\xf8"" instead of unicode characters u""\xf8"" and ""\xf8"" != u""\xf8"" so a KeyError occurs.
","start issue","Simplify the quote and unquote function"
"issue_closed","31","idan","oauthlib","ib-lundgren","2012-06-13 11:31:21","","closed issue","Simplify the quote and unquote function"
"pull_request_title","31","idan","oauthlib","dstufft","2012-05-01 13:35:59","After digging into the quote/unquote function I couldn't determine an actual reason for all the advanced logic. It appears that simply encoding/decoding achieves the desired result.

All the tests pass and such. Would probably be good to check with @dgouldin to see if there was a reason for the original method over this way. If there are edge cases where this way doesn't work it'd likely be good to set them down in tests. Additionally there was a test that the quote function returns unicode, which this PR adds, but i question wether it should return unicode since unicode characters are not valid in a URI anyways.

If this way does work it's likely there are other functions in here that could use a similar technique.

If this way doesn't work, the root cause of the problem was that keys to the dictionary are bytestrings ""\xf8"" instead of unicode characters u""\xf8"" and ""\xf8"" != u""\xf8"" so a KeyError occurs.
","0761483f88fdd41f1b51f43bf69d91bd703df37e","Simplify the quote and unquote function"
"issue_comment","31","idan","oauthlib","dgouldin","2012-05-01 15:27:14","Yeah, a week or two ago I found all the stdlib functions that don't return unicode, pulled them into our code base, and modified them to work with unicode.  If you look at python 2.7's implementation of quote and unquote you'll see they're almost identical.  I didn't write these from scratch.

I'm open to the idea of utf-8 encoding and then decoding (explicitly calling .decode('utf-8'), not unicode()) if the consensus is it's cleaner that way.
","",""
"issue_comment","31","idan","oauthlib","ib-lundgren","2012-06-13 11:31:21","Closing as this was fixed quite some time ago with explicit encoding/decoding.
","",""
"pull_request_commit","31","idan","oauthlib","dstufft","2012-05-01 13:27:47","Simplify the quote and unquote function","0761483f88fdd41f1b51f43bf69d91bd703df37e",""
