,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
1,issue_title,175,nilearn,nilearn,eickenberg,2014-03-19 18:13:15,"Addressing issue https://github.com/nilearn/nilearn/issues/174

Proposed is a test to show that resample_img doesn't do what one would expect it to do when a 4D affine is given and no target shape specified. It keeps the old shape, leading to potentially a total loss of the relevant data from field of view.

Remedy to follow
",start issue,nilearn.image.resample_img given 4D affine but not target_shape behaviour to be changed
2,issue_closed,175,nilearn,nilearn,GaelVaroquaux,2014-04-22 09:39:26,,closed issue,nilearn.image.resample_img given 4D affine but not target_shape behaviour to be changed
3,pull_request_title,175,nilearn,nilearn,eickenberg,2014-03-19 18:13:15,"Addressing issue https://github.com/nilearn/nilearn/issues/174

Proposed is a test to show that resample_img doesn't do what one would expect it to do when a 4D affine is given and no target shape specified. It keeps the old shape, leading to potentially a total loss of the relevant data from field of view.

Remedy to follow
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,nilearn.image.resample_img given 4D affine but not target_shape behaviour to be changed
4,issue_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-25 10:19:17,"@eickenberg : I agree with your analysis on the decision tree of the function and the proposed fix.

If you could proceed to applying your changes without any changes to the tests, it would be great. Thanks!
",,
5,issue_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-25 10:27:35,"> The case ""3x3 transformation matrix + shape given"" is not treated neither in
> the old nor in the proposed version.
> 
> It seems very ambiguous. Where would you place the origin? In this case
> I would raise an exception...

Yes.

> @GaelVaroquaux could you comment on @bthirion's proposition to impose the
> different behaviours using an explicit argument?

I'd rather not.
",,
6,issue_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-25 10:34:46,"> Well if you want to resample to a given size and shape, then you might
> still provide a valid affine (with any translation vector) but then use
> shape= 'minimal_bbox' to trigger a resampling with fixed FOV.

But the translation vector is hard to compute. Such a function is in
practice very hard to use. I find it counter intuitive to give a random
translation vector and then tell the function to ignore it. I find it
much more natural to not give a translation vector at all.

> I think we should not go into multiple conventions for spatial
> transforms to encode your use case otherwise we will have to spend some
> time explaining people what this means and what it does.

I think that this is a theoretical argument and that people haven't had
any difficulty using this code. It's success compared to alternative
resampling implementation tell us that the API is not too poorly defined.

We could have a separate function for 3x3 and 4x4 transformations, but a
lot of the code would be shared.
",,
7,issue_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-25 10:50:11,"> In the usecases I can imagine, the 3x3 matrix never comes from nowhere. It
> would most often come from a 4x4 matrix cropped to 3x3.

No, it often comes from nowhere. For instance you want to work on a voxel
size of (3 x 3 x 4), eg to reduce your dataset. You don't care about the
offset, you just want to specify the voxel size.
",,
8,issue_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-26 15:12:35,"Re the ""tricky ting"":could you please mention it in the ""notes"" section of the docstring.
",,
9,issue_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-26 18:48:58,"The idea of cropping/uncropping for resampling is an excellent one. I'd love to have it in, but let's keep it for another time. Do you want to add an enhancement issue, so that we don't forget about this?
",,
10,issue_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-28 00:06:14,"Ok is because we need to support old versions of scikit-learn I which this function was not present. Could you simply use assert_raises. Thanks

<div>-------- Original message --------</div><div>From: eickenberg notifications@github.com </div><div>Date:27/03/2014  15:54  (GMT+01:00) </div><div>To: nilearn/nilearn nilearn@noreply.github.com </div><div>Cc: Gael Varoquaux gael.varoquaux@normalesup.org </div><div>Subject: Re: [nilearn] nilearn.image.resample_img given 4D affine but not
  target_shape behaviour to be changed (#175) </div><div>
</div>The CI is failing because sklearn.utils.assert_raise_message seemingly cannot be imported in the particular environement used by Travis (everything passes on two Ubuntus here with sklearn installed)

â€”
Reply to this email directly or view it on GitHub.
",,
11,issue_comment,175,nilearn,nilearn,GaelVaroquaux,2014-04-10 09:44:12,"> I am very bad at Gimp/inkscape etc, so I'll try to code one :)

That's the spirit!
",,
12,issue_comment,175,nilearn,nilearn,GaelVaroquaux,2014-04-21 12:46:31,"My comments before merge are the following:
- Add your name to the author list of the resampling.py file
- Investigate to see if you can use the np.pad function in the tests
- A couple of sentences of description of the example.
- Restyle the function definition of test_resampling_result_axis_permutation

Optional but desired: integrate the example in the user documentation: building_blocks/data_preparation.html#resampling

This is great work. Thanks a lot!
",,
13,issue_comment,175,nilearn,nilearn,GaelVaroquaux,2014-04-22 09:39:26,"I have merged by rebase. @eickenberg : I have improved a bit the docs, and specifically linking to the example, you can have a look in the following commit: https://github.com/nilearn/nilearn/commit/5532a1b13a98f3bce10eae4e5be27af42c39470e
",,
14,issue_comment,175,nilearn,nilearn,eickenberg,2014-04-15 20:36:57,"Could I get a verdict on the example I added to the example galery? It may not live up to standards. I didn't use real images.
",,
15,issue_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 21:05:22,"Good job. I did not run the tests because I could not with my personal laptop, but I tried to review as carefully as possible and everything seems OK.

I wonder if every use case handled by the code is actually useful, but I guess the proposed modifications made it more robust and convenient at least for some cases.
",,
16,issue_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:12:39,"Thanks @VirgileFritsch for the review!
",,
17,issue_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-17 15:50:15,"> Could I get a verdict on the example I added to the example galery? It may not live up to standards. I didn't use real images.

It is nice and I have nothing against it, except:
1. the colors change between the reference and the transformed images.
2. I would rather like plotting the four images on a grid so that I do not have to move the windows to browse them :) (Also I think it is more convenient for the documentation to have only one figure to handle)
",,
18,issue_comment,175,nilearn,nilearn,eickenberg,2014-04-17 17:31:54,"Addressed color change by adding an equal `vmax` everywhere. However, placing everything in subplots, 2x2 makes it look somewhat ugly, so I removed that part again. Actually I coded this example so that it is visible in the online galery and wasn't expecting anybody to run it locally ... Maybe I am mistaken
",,
19,issue_comment,175,nilearn,nilearn,eickenberg,2014-04-17 17:33:16,"My primary concern with the example is its clarity and whether it is sufficiently complex. The bounding box examples all happen in mm space, which is simple, even if the voxels do not live in mm space
",,
20,issue_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-18 12:35:22,":+1: for merging.
",,
21,issue_comment,175,nilearn,nilearn,eickenberg,2014-04-21 16:33:08,"all points addressed. Thanks @GaelVaroquaux for the review.
",,
22,issue_comment,175,nilearn,nilearn,eickenberg,2014-04-22 16:26:53,"Ah, cool, thanks! I wasn't sure whether or not to use some sort of tag in the .rst file.
",,
23,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-20 09:41:04,"Problem fixed, but this may call for a change of the decision tree structure inside resample_img (some branches may be useless), see comment in commit 2
",,
24,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-20 21:31:30,"if you know what affine you need, it should choose a box containing the
data, not use the old shape. if this smells like a yagni feature we can
always just raise an exception

On Thursday, March 20, 2014, bthirion notifications@github.com wrote:

> Please clarify the use case, this is unclear to me.
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/nilearn/nilearn/pull/175#issuecomment-38220738
> .
",,
25,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-20 22:29:26,"A usecase of the scenario 4D target affine given, but not target shape, is that we need our image to be indexed according to the coordinate system defined by the affine (eg when resampling a functional image to an anatomical image), but we do not need more voxels than strictly necessary to see the data (which eg may be spatially very restricted wrt to the size of the anatomical).

If this usecase is questionable, then the 3D target affine given and no target shape needs to be reexamined as well.

In any case, what nilearn was doing up until now, which is using the old shape of the functional file for the resampled image,  does not make any sense at all (cf the test I added in the first commit). So either we remove the optionality of the arguments target_affine and target_shape, or raise if affine 4D given and not target shape, or we make it do sensible things if some data are missing. The latter case is what is implemented now.
",,
26,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-21 08:59:21,"GaÃ«l and I discussed the necessity of raising an exception if none of the data points to be transformed is in the positive orthant of the target affine.

This should also be the case then for transformations with prescribed shape, in which case some refactoring of the decision tree in the function is necessary (this is the case anyway).

Another possibility we have is to warn if only part of the data will be visible in the positive orthant of the affine. This functionality can detect unwanted croppings, but may become annoying if cropping was intended. I would like to hear your opinion on this before making the changes.

All of these propositions are easy to implement - I just want to make sure I'm doing the right thing.
",,
27,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-21 15:11:45,"The beginning of the function regulates some cases:

target shape given but not target affine ==> raise
target shape given but not with exactly 3 entries ==> raise
neither target shape nor target affine given ==> return img or copy of img
if target affine is really close to affine and shapes identical ==> return img or copy of img

This leaves us in the situation where there is definitely a target affine given which is different from the current one. I'll now describe how things were, how they are now, and how I think they should be.

Status was: (Starting from l205, after the intro)
- if no target shape given, put original shape as target shape (<-- the useless behaviour we discussed)
- if affine shape is (3, 3), estimate bounding box, which includes estimating affine offset (origin) and shape (whether it is given or not).

So affine shape (3, 3) overrides target_shape = orig_shape whether it was specified or not

Status in PR:
- if no target shape given, then if affine shape is (4, 4), estimate bounding box sensibly, keeping origin defined by affine, and including all data that is in positive orthant of affine. Else set target shape to original shape (<--- this case will always be overwritten now)
- if affine shape is (3, 3) do what is done above

So here, as we see, even if temporarily target shape is set to original shape, it will never stay that way, so this branch should be removed.

My proposition:
- calculate bounding box of data under the new affine
- if 4D affine is given, then if any of the 3 max values of the bounding box is < 0, raise BoundingBoxException, because whether shape is given or not, none of the data will be seen, since none of it is in the positive orthant of the given affine.
  (- optionally: if 4D affine is given, and any of the min values of the bounding box are < 0, possibly warn that some data will be cropped)
- if 4D affine is given and no shape specified, calculate shape using bounding box
- if 3D affine is given and no shape specified, calculate shape and affine origin using bounding box
- proceed to resampling

One case is missing totally. What if 3D affine is given and shape specified? This should possibly raise an Exception, since we don't know how the user would like the origin placed ...
",,
28,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-21 21:22:33,"Thanks! I was just about to put the result of our conversation here right now
",,
29,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-25 10:26:51,"The case ""3x3 transformation matrix + shape given"" is not treated neither in the old nor in the proposed version.

It seems very ambiguous. Where would you place the origin? In this case I would raise an exception...

@GaelVaroquaux could you comment on @bthirion's proposition to impose the different behaviours using an explicit argument?
",,
30,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-25 10:47:08,"In the usecases I can imagine, the 3x3 matrix never comes from nowhere. It would most often come from a 4x4 matrix cropped to 3x3.

Another tricky thing that comes to my mind is the following: Assume you want to transform image 1 to the space of image 2 and you decide that you would like a minimal bounding box around image 1. The question now is, intuitively, would you want the newly calculated translation vector to respect the voxel space (ie the discretisation grid) of image 2? In this case you need the translation vector and the bounding box will lie within a voxel of the optimal bounding box which disrespects the voxel space.

If I am not expressing myself clearly, please let me know :)
",,
31,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-26 08:38:05,"Code refactored. Some differences with respect to what was planned:
- bounding box cannot be calculated for 3x3 transformation matrix using get_bounds. It has to be embedded in a 4x4 transformation matrix first
- as a consequence, the refactored part of the code reads like this (but see extensive comments as well):

1) Make a private target_affine_ containing target_affine if it is 4x4 or embedding target_affine if it is 3x3
2) Calculate bounding box
3) Update target_affine_ and bounding box if target_affine is 3x3
4) If target_shape is not given, calculate it from bounding box
5) Check whether data can be seen after transformation to target_affine [This checks only whether there exists an axis along which all voxel index values would be negative for the transformed data]

I also added to the preliminaries that 3x3 transformation matrix and given shape raises an exception.
",,
32,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-26 10:19:38,"Re the ""tricky thing"" I mentioned 2 posts up: If anybody ever needs this, it is easily done in two steps: resample_img given 4x4 transformation matrix followed by a call to the crop_img function. This respects the voxel grid and the bounding box is as close as possible without cropping nonzero data.
",,
33,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-26 15:39:01,"Prose is up.
",,
34,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-26 15:43:46,"Also (not that I want to complicate things, just being rigorous), resampling may be sped up by cropping away anything unnecessary before the resampling step, as we did transparently with the masker (https://github.com/nilearn/nilearn/commit/b45a266ff06481f415f5b9ff1d257d89a3e2dc9f).

If I am not mistaken, this step would fit completely transparently into resample_img as well. This may be better kept for another time, though.
",,
35,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-27 11:03:24,"Thanks for the comments. Added some stronger tests. Will take care of cosmetics next.

Even stronger tests are possible, but these definitely caught the bugs.
",,
36,issue_comment,175,nilearn,nilearn,eickenberg,2014-03-27 14:54:56,"The CI is failing because sklearn.utils.assert_raise_message seemingly cannot be imported in the particular environement used by Travis (everything passes on two Ubuntus here with sklearn installed)
",,
37,issue_comment,175,nilearn,nilearn,eickenberg,2014-04-10 08:57:25,"I am very bad at Gimp/inkscape etc, so I'll try to code one :)
",,
38,issue_comment,175,nilearn,nilearn,eickenberg,2014-04-11 12:26:07,"I added an example visualizing some transforms.
The problem I see is that the code is maybe doing something contravariant to what I am explaining. I did my best to avoid that, though.
",,
39,issue_comment,175,nilearn,nilearn,eickenberg,2014-04-11 12:32:01,"test_canica_square_img failed on one of the two test builds
",,
40,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-26 18:52:05,"I think that you have a logic problem here (missing '_' on the left hand side of the equation).

The fact that no test fails is probably telling us that our test suite is too light.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
41,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-03-26 18:53:44,"Ouch! Thanks!
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
42,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-03-26 18:54:37,"OK, I prefer writing the failing test before correcting this
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
43,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-26 18:55:45,"> OK, I prefer writing the failing test before correcting this

Definitely good policy! Thanks a lot for caring about code quality.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
44,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-26 19:00:18,"Actually, I am wondering if it is not simply telling us that this branch of the 'if' is not useful.

I believe that target_affine_ is used to compute the bouding box, however, if the shape is (3, 3), the bounding box is recomputed. So I think that the 2 if statements that follow each other could be merged in one, and the variable target_affine_ is not necessary.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
45,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-26 19:08:34,"OK, after reading completely and slowly the full code of the function, my conclusions are:
- The typo you put in matters. The code is indeed currently wrong, which tells me that our test suite is incomplete
- I still believe that the 2 successive if statements should be merged, because there is no point computing the bounds twice when the shape is 3 x 3.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
46,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-26 19:09:42,"I am dense, horribly dense, and slow... Forget point 2 above...
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
47,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-26 19:10:41,"Maybe we shouldn't be testing our resampling code with 'eye' as an affine.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
48,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-26 19:13:23,"Also, PEP8 tells you that the 'd' in '4D' should not be capitalized.

And you know how important it is to follow the Book.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
49,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-26 19:15:33,"I think that a comment more explicit, that does not refer to a 'now' (ie before was different) but more to the expected behavior, would be good here.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
50,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-26 19:16:50,"sklearn.utils.testing has an assert_raises_message, which is what I think you are looking for.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
51,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-03-26 19:17:12,"Unecessary empty line.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
52,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-03-27 12:50:07,"This test is only to see whether an error is raised if the transformed data does not lie within the possible voxel space defined by target_affine.

Will make function PEP8 compliant
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
53,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:14:03,"Why is the import here if commented?
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(11, '', u'nilearn/image/tests/test_resampling.py')"
54,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-15 20:17:43,"These tests could be uncommented when sklearn backward compatibility is removed. Bad practice? (I thought this could raise attention to old forms of testing, since this often goes unnoticed in the future). I have no problem removing it if it is confusing/ugly/not the done thing
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(11, '', u'nilearn/image/tests/test_resampling.py')"
55,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:26:02,"Isn't the syntax `[.., 0]` more conventional? (or is it less? or equally?).
I do not know actually, but would like to ;)
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
56,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-15 20:29:30,"I guess I could use it. The fact that I know exactly how many axes I have and that they are not too many (<=3~4) made me use [:, :, 0]. But this is feeling, not convention. I don't know if there are conventions
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
57,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-15 20:30:54,"In the past stuff like `[..., 0, :]` has played evil tricks on me, so I have not used it whenever possible. Again, personal preference, not convention. I am happy to change it.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
58,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:32:13,"_geometric_ transformation?
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
59,pull_request_commit_comment,175,nilearn,nilearn,AlexandreAbraham,2014-04-15 20:32:33,"Generally, I use the syntax `[..., 0]` when `ndim > 4`. It is more convenient but it is less informative and more error prone. For example here, you know immediatly that the data is 3D. If the data becomes 4D because of an error, then an error will be raised here.

Plus, in the particular case of imshow, I like to know exactly which dimensions are displayed.

So I prefer `[:, :, 0]` in this case.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
60,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:32:55,"image (lowercaps ""i"")
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
61,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-15 20:34:23,"good point
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
62,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-15 20:34:31,"thanks
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
63,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:35:25,"Need to update `target_affine` argument description accordingly.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
64,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:41:21,"Affine _shape_ should be (4, 4)
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
65,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:44:34,"`data.shape` has not been checked, so `data.shape[:3]` could fail.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(105, '', u'nilearn/image/resampling.py')"
66,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:46:01,"Is the call to `np.array` necessary?
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
67,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:47:17,"Indentation.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
68,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:51:57,"Unnecessary ""will"". ""Pad"" (uppercase ""P"").
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
69,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:52:36,""""""" on a new line
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
70,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:55:55,"I do not like this because if `len(args) % 2 == 1`, it is probably an error from the user. Allowing him to avoid specifying only the second padding value of the last axis is weird --> why the ""max"" value and not the ""min""? why the last axis only would be concerned?
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
71,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:58:21,"I was told that this abbreviation is not OK and that we should better use a mere ""import nibabel"". But as far as I am concerned, I tend to use ""import nibabel as nb"" in my own code (by habit).
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
72,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 20:59:15,"+1 could be on the previous line.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
73,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 21:00:19,"I can find no `affine2` so `affine1` could simply be `affine`.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
74,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-15 21:02:01,"OK. Thanks for explanation.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
75,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:05:53,"OK, kept the current version
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
76,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:06:11,"addressed
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
77,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:06:27,"addressed
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
78,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:07:16,"Did the update, realized that a big description is in ""Notes"", removed the update and added a ""(see Notes)"" 
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
79,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:07:27,"addressed
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
80,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:08:35,"Not addressed, because `check_niimg` is used in `resample_img`. Although `check_niimg` does not check for image size, if we wanted to check, it should probably be there, right?
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(105, '', u'nilearn/image/resampling.py')"
81,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:08:56,"removed call to `np.array`
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
82,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:09:18,"indented properly
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/resampling.py')"
83,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:09:28,"addressed
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
84,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:10:51,"adressed
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
85,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:11:23,"replaced by a `ValueError` if bad number of arguments is passed
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
86,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:11:43,"changed nb -> nibabel
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
87,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:12:01,"was did
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
88,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-16 11:12:18,"gave all affines explicit names
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
89,pull_request_commit_comment,175,nilearn,nilearn,VirgileFritsch,2014-04-17 15:03:45,"I guess not because your use case is more restrictive, but since a lot of things would break with, say, 2D nii images, I think you can ignore my comment ;)
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(105, '', u'nilearn/image/resampling.py')"
90,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-17 15:08:44,"Except in flatworld
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(105, '', u'nilearn/image/resampling.py')"
91,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-04-21 11:43:34,"How much of this function boils down to np.resize?
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(26, '', u'nilearn/image/tests/test_resampling.py')"
92,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-04-21 11:45:03,"There should not be an empty line here. Also, I believe that the comment that you put above the function definition should be put right after it. (Python style conventions).
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
93,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-04-21 11:45:43,"Please comment a bit more and tell us what we should learn from the example in the docstring.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
94,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-21 11:48:27,"This function does _zero-padding_ of an `np.ndarray`. As far as I can tell, `np.resize` just makes a new array of desired size and fills it with the ravelled original data, repeating if necessary. Not sure how I could use it for this.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(26, '', u'nilearn/image/tests/test_resampling.py')"
95,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-21 11:49:22,"as a comment or as a doc string?
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
96,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-21 11:52:41,"This is where it becomes tricky. Describing the images I can definitely underline exactly what the function is supposed to do, but maybe the example is too simple: I chose mm space to be represented by `np.eye(4)`. The data are described by a different affine, from which I then transform to millimeter space using 3 different techniques. Can this cause a potential confusion between the target space of the transformation and millimeter space? This is my worry, but I am not entirely sure how to do this better.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
97,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-04-21 12:29:20,"> This function does zero-padding of an np.ndarray. As far as I can tell,
> np.resize just makes a new array of desired size and fills it with the
> ravelled original data, repeating if necessary. Not sure how I could
> use it for this.

Good point. How about np.pad?
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(26, '', u'nilearn/image/tests/test_resampling.py')"
98,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-04-21 12:30:12,"> as a comment or as a doc string?

As you whish. If it were not a test, I would say a docstring, but in
tests, docstrings are printed by nosetest, so they may be
counterproductive.

G
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
99,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-04-21 12:42:13,"I think that your example is good. I think that you just need one or two more lines in the header describing what it does. Maybe you could put a voxel size of 1.5 if you want to avoid having 1mm = 1voxel. But in general I think that it is good. Actually I think that it should be linked to in the documentation, in building_blocks/data_preparation.html#resampling and the images should be included.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
100,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-21 15:31:19,"I checked in IPython and I don't have `np.pad` :) -- it is a new feature in 1.7. What are the backwards compatibility requirements with regards to numpy?
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(26, '', u'nilearn/image/tests/test_resampling.py')"
101,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-21 15:33:39,"addressed
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'nilearn/image/tests/test_resampling.py')"
102,pull_request_commit_comment,175,nilearn,nilearn,GaelVaroquaux,2014-04-21 15:34:33,"> I checked in IPython and I don't have np.pad :) -- it is a new feature in 1.7.
> What are the backwards compatibility requirements with regards to numpy?

OK, that answers my question. No need to look further.
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(26, '', u'nilearn/image/tests/test_resampling.py')"
103,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-04-21 16:30:36,"Addressed
",5dc268c263a105ee66e02a8cbd0fe948e2e0b765,"(None, '', u'plot_affine_transformation.py')"
104,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-03-19 18:08:29,"Created a test showing that new bounding box after resampling using 4D affine, but without specifying new shape can completely miss the data.",70b9f961e894212d856c0f7a7504b57e48b23836,
105,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-03-20 09:37:28,fixed shape adaptation problem,e63b3cbcd9e606c00a86a2ae785cbcca1f0375d2,
106,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-03-20 09:49:58,added test for new shape,d124028b4bcb2652bed13035ca9154b4d44180d8,
107,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-03-25 18:20:03,"TDD, provided cases where Exceptions should be raised. Added BoundingBoxException",61865e54db9b6ba529fcea959750475534da9bee,
108,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-03-26 08:30:47,"Refactored resample_img, raising appropriate exceptions when necessary",5f18d1ad806461f0047504598e3a03d88970b597,
109,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-03-26 15:38:19,Added documentation,d35722bc58bde516f0674289b5486eae11278013,
110,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-03-27 08:35:57,Wrote failing test for 3x3 affine issue,d00a702359896b3d702eb97afc2ff279d206b40b,
111,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-03-27 11:00:09,Added tests for axis permutation matrices,b9d9ae39e606607df7fe25cf07dda801da60a1cb,
112,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-03-27 11:00:34,Tests passing,437e260ed0d9452c7319b91a009c33b8f7b5eeec,
113,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-03-27 13:00:31,Addressing Gael's comments,1b6569848e850db9ad9fc139f9940eaa82ccedc4,
114,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-03-27 13:06:25,Removed target_affine_ by overwriting target_affine and setting missing_offset=True/False,a4c600c8e644f7a295454d8c5a04c89a22e0a5ef,
115,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-03-28 10:08:37,Commented assert_raise_message and added assert_raises in order to be compliant with backwards compatibility requirements wrt sklearn,764855a9506c24ef06f67c745ed89eecefecda61,
116,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-11 12:23:22,added an example for visualizing affine transform,d21e17529f9e358e30d51a6674aeec8fe9519510,
117,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 08:37:44,elaborated on bounding box error,02aba54a00e3a9d64f65b4894ce11df0c1b1a662,
118,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 08:38:58,Image image typo,46c93e1050b93226e16ae70c9684ab8a137b6c35,
119,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 09:21:10,embellished docstring,0969429e985743fc899b19ee784ddc9c22aed3a9,
120,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 09:33:36,corrected error message,9cc78545cc42faaef1022ed6aaba4de2f84c7eeb,
121,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 09:35:37,"removed docstring embellishment, added reference to notes",444a99250e23ac89d10705c59baf3ea6dbfc93fb,
122,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 09:38:47,removed np.array(list) where not necessary,052d851f608dafe374f9f7d3f633b9e757caf0e8,
123,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 09:39:24,indentation,8991db07857eccdd8e92e1f44e4e2a271ab74264,
124,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 09:40:13,typo docstring pad,c4928b84d1766b44c351c8f589a0f4a9c8b0b429,
125,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 09:42:22,raised exception in padding instead of fumbling parameters to the right number,cfbada088ccf6c66c048cd1fbf9c5e52b6f77b9b,
126,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 09:43:29,nb --> nibabel,69a848e369aa18f9254b381536fd3ea5437dee53,
127,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 09:49:59,squeezed operations,8aacb366e5a78b0ca11b40cb59b8b13a37f1ce9b,
128,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 09:59:26,"affine1 -> source_affine, made target_affine_*x* explicit",3480c29ecfc4f669f4f0f50f6441f32206be387c,
129,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-16 11:10:42,pad docstring,6733734d978ad7959322bc6ae233f038f271ea68,
130,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-17 17:27:45,added vmax in plots to fix colors,20066175f089bb6f85f21e3b5a2ac76601f910c6,
131,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-21 15:33:17,transferred comment before test into test,89929f5789c53f574634868fc1ab44b272c9f30a,
132,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-21 16:07:57,Separated mm space affine from first transformation affine to avoid confusion,91cf308070c2296ecb452187b07a0cd38a1830a7,
133,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-21 16:27:12,Added explanation to example,d9fd0408071fbb7a9a51279254de07e6418fe45a,
134,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-21 16:30:14,added reference to example in docs,d8fae6f1fd24bff56bcd6cf8f04505ea811f7704,
135,pull_request_commit,175,nilearn,nilearn,eickenberg,2014-04-21 16:32:19,added name to authors,5dc268c263a105ee66e02a8cbd0fe948e2e0b765,
136,pull_request_commit_comment,175,nilearn,nilearn,eickenberg,2014-03-20 09:39:46,"This line may be obsolete (it is called if the affine shape is 3x3, but is in this case overwritten later)
",e63b3cbcd9e606c00a86a2ae785cbcca1f0375d2,"(17, 218, u'nilearn/image/resampling.py')"
0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
1,issue_title,179,nilearn,nilearn,AlexandreAbraham,2014-03-31 15:33:35,"When fetching a dataset, the programmer provides a list of the files to be downloaded. If he provides two files with the same name, eg `http://web.fr/xxx/archive.zip` and `http://web.fr/yyy/archive.zip`, then a local file archive.zip.part will be created when the first file is downloaded, extracted and deleted, and it is the same for the second file.

This induces two problems:
- if something goes wrong, we may start downloading `http://web.fr/yyy/archive.zip`, and then resuming system may resume a download of `http://web.fr/xxx/archive.zip` using `archive.zip.part` file, thinking that it is the same file
- if someday we want to download file in parallel, this cannot work.

We have now to decide if it's a programmer related issue, and then we can give him a way to rename a file, or if it's a nilearn issue, and then we have to solve it.

A solution would be to assign a unique name to the file when downloading it. What I have in mind is:
- using the E-tag header value if available
- using a hash combining the download URL and file-size otherwise.

We can also download the first bytes of the files before resuming: headers often contains a hash of the file. I don't think that it is a reliable solution.

@GaelVaroquaux any thoughts on this one?
@VirgileFritsch this is the bug that I was talking of. As all your zip files are names brainomics_data.zip, this may append. 
",start issue,Fetching may fail if several files having the same name are requested
2,issue_closed,179,nilearn,nilearn,AlexandreAbraham,2014-04-23 00:58:40,,closed issue,Fetching may fail if several files having the same name are requested
3,issue_comment,179,nilearn,nilearn,GaelVaroquaux,2014-04-21 14:30:20,"Is it a problem that we are currently facing? If not, let's just close
this issue and move on: we have already way too many problems to worry
about.
",,
4,issue_comment,179,nilearn,nilearn,GaelVaroquaux,2014-04-21 14:45:35,"> I raised it because we had this problem with Virgile. For the localizer
> fetcher, several files are downloaded and they are all named 'brainomics.zip'.
> This is not urgent though... For the moment, in case of problem, the file will
> be overwritten and downloaded again.

OK, so we do have the problem, and it must indeed be solved...
",,
5,issue_comment,179,nilearn,nilearn,GaelVaroquaux,2014-04-21 15:53:52,"> My concern is that we forget that before I leave and that someday, this bug
> pops up and is so mystical that people will spend quite a lot of time looking
> for the origin.

Yes, but we are quite busy right now. I guess that I am more interested
in moving nilearn forward than having the perfect dataset download API.
",,
6,issue_comment,179,nilearn,nilearn,GaelVaroquaux,2014-04-21 16:00:53,"> Took me 2 minutes to fix the problem for the localizer dataset and raise a
> warning if the urls given to the fetcher may trigger this problem. If it's a
> bit complicated to solve, it is very easy to detect.

That's a great solution! That's exactly the kind of compromises that we
need.
",,
7,issue_comment,179,nilearn,nilearn,AlexandreAbraham,2014-04-21 14:44:07,"I raised it because we had this problem with Virgile. For the localizer fetcher, several files are downloaded and they are all named 'brainomics.zip'. This is not urgent though... For the moment, in case of problem, the file will be overwritten and downloaded again.
",,
8,issue_comment,179,nilearn,nilearn,AlexandreAbraham,2014-04-21 15:48:37,"Solving it in the specific case of the localizer dataset is simple. Basically, because of cubicweb, we give the name of the file to download (I won't go into the details). So we just have to name them brainomics1.zip, brainomics2.zip...

My concern is that we forget that before I leave and that someday, this bug pops up and is so mystical that people will spend quite a lot of time looking for the origin.
",,
9,issue_comment,179,nilearn,nilearn,AlexandreAbraham,2014-04-21 15:58:28,"Took me 2 minutes to fix the problem for the localizer dataset and raise a warning if the urls given to the fetcher may trigger this problem. If it's a bit complicated to solve, it is very easy to detect. I'll push that later, let's say that this bug is temporarly fixed.
",,
0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
1,issue_title,81,nilearn,nilearn,AlexandreAbraham,2013-06-19 22:51:27,"In `_utils.class_inspect.get_scope_name`, the behavior of `stack_level` is not very handy. In fact, it specifies _exactly_ the number of frames to climb up. However, this number is contextual and can't be determined in advance. I suggest to just climb up the frames until we find a calling object.
",start issue,Change behavior of stack_level to stop at first calling object
2,issue_closed,81,nilearn,nilearn,GaelVaroquaux,2014-04-21 10:58:11,,closed issue,Change behavior of stack_level to stop at first calling object
3,pull_request_title,81,nilearn,nilearn,AlexandreAbraham,2013-06-19 22:51:27,"In `_utils.class_inspect.get_scope_name`, the behavior of `stack_level` is not very handy. In fact, it specifies _exactly_ the number of frames to climb up. However, this number is contextual and can't be determined in advance. I suggest to just climb up the frames until we find a calling object.
",1f4ef816585817d61757da6c0c02b3a6b075d2f5,Change behavior of stack_level to stop at first calling object
4,issue_comment,81,nilearn,nilearn,GaelVaroquaux,2013-08-01 13:10:37,"LGTM
",,
5,issue_comment,81,nilearn,nilearn,GaelVaroquaux,2014-04-21 10:57:49,"> Well, this is old, we should decide if we merge it or not. I think that
> stack_level won't be used a lot in practice so this may be a bit YAGNI.
> 
> @GaelVaroquaux : what do you think ?

OK, let's avoid YAGNI and close this guy.
",,
6,issue_comment,81,nilearn,nilearn,pgervais,2013-08-26 09:14:15,"This is very similar to #99. Maybe something could be factored out?
",,
7,pull_request_commit,81,nilearn,nilearn,AlexandreAbraham,2013-06-19 22:46:46,Change behavior of stack_level to stop at first calling object,0e7368491dd9fad8639224ae397c0edb3e9ed1bc,
8,pull_request_commit,81,nilearn,nilearn,AlexandreAbraham,2013-06-19 23:19:06,Rename stack_level into max_stack_level,1f4ef816585817d61757da6c0c02b3a6b075d2f5,
9,pull_request_commit_comment,81,nilearn,nilearn,GaelVaroquaux,2013-06-19 23:09:13,"You should say that you go up by at most 'stack_level'. Maybe that variable should be renamed 'max_stack_level'.
",0e7368491dd9fad8639224ae397c0edb3e9ed1bc,"(8, 65, u'nilearn/_utils/class_inspect.py')"
0,rectype,issueid,project_owner,project_name,actor,time,text,action,title
1,issue_title,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 20:16:21,"Addresses cleanly #187 with a mix of mask and imputation via extrapolation.

@schwarty, @bthirion, @eickenberg: care to review?
",start issue,Nan in resample
2,issue_closed,188,nilearn,nilearn,GaelVaroquaux,2014-05-16 14:55:56,,closed issue,Nan in resample
3,pull_request_title,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 20:16:21,"Addresses cleanly #187 with a mix of mask and imputation via extrapolation.

@schwarty, @bthirion, @eickenberg: care to review?
",c4dc4f94ed8170322212a130b8c198821d06aae3,Nan in resample
4,issue_comment,188,nilearn,nilearn,GaelVaroquaux,2014-04-26 11:15:13,"Is there any reason not to merge this PR?
",,
5,issue_comment,188,nilearn,nilearn,GaelVaroquaux,2014-05-16 14:46:26,"I have taken in account the various comments and merged. Thanks all!

Pff, this nan behavior was really getting in our way.
",,
6,issue_comment,188,nilearn,nilearn,eickenberg,2014-04-27 19:48:12,"LGTM
",,
7,issue_comment,188,nilearn,nilearn,AlexandreAbraham,2014-05-01 20:44:44,"I agree with Virgile: we should do something to avoid code duplication. Apart from that, LGTM.
",,
8,pull_request_commit_comment,188,nilearn,nilearn,eickenberg,2014-04-22 20:29:39,"Do you count `np.inf` as NaN? Or would you disambiguate between them? It all depends on definition/ convention
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(None, '', u'nilearn/image/resampling.py')"
9,pull_request_commit_comment,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 20:30:19,"> Do you count np.inf as NaN? Or would you disambiguate between them? It all
> depends on definition/ convention

I can indeed improve the warning message.
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(None, '', u'nilearn/image/resampling.py')"
10,pull_request_commit_comment,188,nilearn,nilearn,eickenberg,2014-04-22 20:44:43,"I assume this transforms as gracefully as possible? I looked in the scipy code until I found that `_nd_image.geometric_transform` is written in C if I am not mistaken. My question is whether binary values are handled well using this function. It seems to have worked well using the nifti_masker, at least in my experience it has always worked.
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(79, '', u'nilearn/image/resampling.py')"
11,pull_request_commit_comment,188,nilearn,nilearn,eickenberg,2014-04-22 20:45:46,"same question as above with respect to explicit mention of `Inf`
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(None, '', u'nilearn/image/resampling.py')"
12,pull_request_commit_comment,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 20:46:20,"> My question is whether binary values are handled well using this
> function. It seems to have worked well using the nifti_masker, at least
> in my experience it has always worked.

That's why I use an interpolation order of 0: this setting handles
discrete values well (and in particular binary values).
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(79, '', u'nilearn/image/resampling.py')"
13,pull_request_commit_comment,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 20:47:16,"> same question as above with respect to explicit mention of Inf

I believe that I have addressed this (valid) concern. You should probably try
reloading the page of the PR.
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(None, '', u'nilearn/image/resampling.py')"
14,pull_request_commit_comment,188,nilearn,nilearn,eickenberg,2014-04-22 20:53:37,"From what I understood, the proposal was to give an option whether to keep the NaNs or keep the imputed values. Here it seems that NaNs are set back always.

Also, less importantly, previous `-np.inf` and `np.inf` will all end up being `np.nan` at the output of this function. Again, a question of convention
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(117, '', u'nilearn/image/resampling.py')"
15,pull_request_commit_comment,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 20:57:18,"> From what I understood, the proposal was to give an option whether to keep the
> NaNs or keep the imputed values. Here it seems that NaNs are set back always.

Indeed. I didn't feel confident to do this robustly, as it could require
extrapolating arbitrarily far from the data, and I'd rather that such an
operation be done by the user, as it is bound to be fragile.

> Also, less importantly, previous -np.inf and np.inf will all end up being
> np.nan at the output of this function. Again, a question of convention

Yes, it would be significantly more work to try to keep them, so I gave
up :). I think that right now we have a somewhat sensible behavior to
non-finite values, and I think that we can stop here. At least now we
won't be completely breaking pipelines when there are NaNs.
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(117, '', u'nilearn/image/resampling.py')"
16,pull_request_commit_comment,188,nilearn,nilearn,eickenberg,2014-04-22 21:00:08,"If `iterations` were a large value, this recursion would create a lot of copies of the mask, but I don't think this problem is relevant in the usecases of this function.
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(11, '', u'nilearn/masking.py')"
17,pull_request_commit_comment,188,nilearn,nilearn,eickenberg,2014-04-22 21:03:17,"Could you explain the reasoning behind `iterations=2`? Is 4 the most probable max side length of NaN clusters? It is true that a NaN cluster of 5x5x5 voxels within the data part of the image seems like an indicator that something else has gone wrong.
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(69, '', u'nilearn/image/resampling.py')"
18,pull_request_commit_comment,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 21:05:57,"> Could you explain the reasoning behind iterations=2?

I am not expecting resampling by more than a factor of 4 (going from 4mm
voxels to 1mm voxels). But what this really boils down to is a trade-off
between computing speed and quality in most common cases.

It might be improvable by looking at the largest eigen value of the
scaling part of the affine matrix :).
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(69, '', u'nilearn/image/resampling.py')"
19,pull_request_commit_comment,188,nilearn,nilearn,eickenberg,2014-04-23 08:15:19,"OK, so your reasoning is with respect to maximal size that one voxel can take once rescaled and that rescaling won't probably exceed an upsampling of 4, which seems reasonable.

I was more concerned about blocks of NaNs in the data that are larger than 4x4x4, even if there is no rescaling. But I don't know if this is something that can happen
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(69, '', u'nilearn/image/resampling.py')"
20,pull_request_commit_comment,188,nilearn,nilearn,GaelVaroquaux,2014-04-23 08:17:34,"> OK, so your reasoning is with respect to maximal size that one voxel can take
> once rescaled and that rescaling won't probably exceed an upsampling of 4,
> which seems reasonable.

Yes.

> I was more concerned about blocks of NaNs in the data that are larger than
> 4x4x4, even if there is no rescaling. But I don't know if this is something
> that can happen

This might happen, and it would be a problem if we actually tried to do
inpainting of missing values in the NaNs, but we are not doing this. We
need to extrapolate only to avoid border effects near the NaNs.
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(69, '', u'nilearn/image/resampling.py')"
21,pull_request_commit_comment,188,nilearn,nilearn,VirgileFritsch,2014-04-28 12:29:41,"The code below seems to be the same as the code above. I think it would be better to make any volume a 4D volume (possibly with only one single element in the fourth, optional dimension). I think a `np.reshape` would do the trick, although there might exist some more clever and efficient alternatives.

Another option would be to put the duplicated code in a function (e.g.`resample_one_volume`).
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(85, '', u'nilearn/image/resampling.py')"
22,pull_request_commit_comment,188,nilearn,nilearn,VirgileFritsch,2014-04-28 12:31:06,"maybe ""they do NOT"" ;)
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(28, '', u'nilearn/image/tests/test_resampling.py')"
23,pull_request_commit_comment,188,nilearn,nilearn,VirgileFritsch,2014-04-28 12:33:01,"Weird line return?
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(35, '', u'nilearn/image/tests/test_resampling.py')"
24,pull_request_commit_comment,188,nilearn,nilearn,VirgileFritsch,2014-04-28 12:33:58,"Too many blank lines
",c4dc4f94ed8170322212a130b8c198821d06aae3,"(71, '', u'nilearn/image/tests/test_resampling.py')"
25,pull_request_commit,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 18:42:50,"ENH: basic handling of NaNs in resampling

Right now there is no clever imputation, just filling with zeros",434f231f6dae40a226b16b9afb20654bee32ba6f,
26,pull_request_commit,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 19:57:13,"ENH: NaN in resampling: extrapolation

extrapolation before resampling avoids completing with zeros, which has
side effects in the resampling.",ef46230700ea6e50f31d6563d8db4a395ec0e52a,
27,pull_request_commit,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 20:13:39,ENH: warn properly on NaNs in resample,90b2316b1309f046c3234c9b0b125ec783b36664,
28,pull_request_commit,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 20:21:54,BUG: support old scikit-learn versions,f1936ddec050d0c76477df259da9d15d90cc64af,
29,pull_request_commit,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 20:32:55,DOC: better warning messages,c8ecf6495c9cb9dfdde00fb4eae04b1b2b6c9de8,
30,pull_request_commit,188,nilearn,nilearn,GaelVaroquaux,2014-04-22 20:33:50,BUG: fix old versions of scikit-learn,c4dc4f94ed8170322212a130b8c198821d06aae3,
