"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","677","nilearn","nilearn","salma1601","2015-07-15 15:39:11","Classification on ADHD with different measures of connectivity. Addresses most comments of PR #227, except moving functions _cov_to_corr and prec_to_partial to nilearn._utils.
I am wondering if the name 'tangent' is a good one.
","start issue","Tangent classif"
"issue_closed","677","nilearn","nilearn","GaelVaroquaux","2015-11-22 09:53:14","","closed issue","Tangent classif"
"pull_request_title","677","nilearn","nilearn","salma1601","2015-07-15 15:39:11","Classification on ADHD with different measures of connectivity. Addresses most comments of PR #227, except moving functions _cov_to_corr and prec_to_partial to nilearn._utils.
I am wondering if the name 'tangent' is a good one.
","e78cf53782f2dd712f6dde023591b696609ab5f6","Tangent classif"
"pull_request_merged","677","nilearn","nilearn","GaelVaroquaux","2015-11-22 09:53:14","Tangent classif","03242ab2a381f0417441001339a6a0ebafc534ad","Pull request merge from salma1601/nilearn:tangent_classif to nilearn/nilearn:master"
"issue_comment","677","nilearn","nilearn","GaelVaroquaux","2015-07-16 17:02:51","I haven't had time to look at this pull request in detail, but I am very excited about the direction it is taking.

One general comment that I have is that we are going to have to work on the phrasing and terminology to be a bit less frightening to non math people. Words like 'tangent' or 'embedding' should be a bit less emphasized, for instance in names of examples or objects.
","",""
"issue_comment","677","nilearn","nilearn","GaelVaroquaux","2015-07-16 17:26:35","Another comment: the example (which is actually really cool) takes quite a while to run.

I think that we should restrict it to only SVM. It will make it faster, and simpler to read.
","",""
"issue_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-16 10:31:23","> Should we merge this one @AlexandreAbraham @GaelVaroquaux ? I don't see any
> outstanding issues and I can do the Python 3 fixes after the merge.

There is an outstanding naming issue, isn't it? With a conclusion, I
believe, but I am not sure that it has been implement.

I'd like to do a pass on this. Maybe this afternoon? I do agree that the
PR is pretty much mergeable.
","",""
"issue_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-16 16:26:50","One last thing (hopefully): it would be great to have a subsection about
this functionality in the reference documentation. For instance at the
end of doc/connectivity/connectome_extraction.rst in a new section, that
would link to the example.
","",""
"issue_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-22 09:53:11","Merging. Thank you!
","",""
"issue_comment","677","nilearn","nilearn","salma1601","2015-07-19 13:49:44","> words like 'tangent' or 'embedding' should be a bit less emphasized, for instance in names of examples or objects.

Hi @GaelVaroquaux 
what about  

``` python
from nilearn.connectivity import ConnectivityMatrix
matrix = ConnectivityMatrix(type='robust dispersion')
```

to explain that individual matrices are not covariance matrices (they can show negative or positive values on the diagonal) and also encourage users to use this matrix type if noisy data ?
","",""
"issue_comment","677","nilearn","nilearn","AlexandreAbraham","2015-08-07 21:01:07","So, the only thing blocking this PR are naming and a bunch of details?
","",""
"issue_comment","677","nilearn","nilearn","salma1601","2015-11-22 21:34:41","Youpi :+1: 
I can bring my pastries Tuesday !
","",""
"issue_comment","677","nilearn","nilearn","AlexandreAbraham","2015-07-16 08:18:57","Yeah, Salma's back in the place!
","",""
"issue_comment","677","nilearn","nilearn","AlexandreAbraham","2015-07-16 08:26:44","Minor details. LGTM otherwise. @GaelVaroquaux any remark regarding naming?
","",""
"issue_comment","677","nilearn","nilearn","AlexandreAbraham","2015-10-22 13:03:49","Apart from very minor details, :+1:.
","",""
"issue_comment","677","nilearn","nilearn","AlexandreAbraham","2015-10-22 14:15:33","Since the PR is fully functional, I suggest that we merge it (after resolving the naming issue) and that I take care of the last details.
","",""
"issue_comment","677","nilearn","nilearn","AlexandreAbraham","2015-11-16 08:47:51","+1 for me!
","",""
"issue_comment","677","nilearn","nilearn","AlexandreAbraham","2015-11-22 09:58:37","Who's gonna bring champagne tomorrow?
","",""
"issue_comment","677","nilearn","nilearn","lesteve","2015-09-22 08:00:04","@salma1601 if you rebase on master, the libgfortran error should go away.
","",""
"issue_comment","677","nilearn","nilearn","lesteve","2015-11-16 08:43:08","Should we merge this one @AlexandreAbraham @GaelVaroquaux ? I don't see any outstanding issues and I can do the Python 3 fixes after the merge.
","",""
"issue_comment","677","nilearn","nilearn","salma1601","2015-09-17 10:35:27","@KamalakerDadi could you please take a look and give me feedback ? I also hesitated a lot on the naming, so if someone have other suggestions/comments ...
","",""
"issue_comment","677","nilearn","nilearn","salma1601","2015-11-16 11:20:40","> There is an outstanding naming issue, isn't it? With a conclusion, I believe, but I am not sure that it has been implement.

I renamed using ""tangent"" and stopped after addressing Gaël's comments.
I didn't address Loïc's (python 3 + colormap)
","",""
"issue_comment","677","nilearn","nilearn","salma1601","2015-11-16 19:46:23","Ok I can take care of that.
","",""
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-07-16 08:18:43","No hardcoded path in examples please.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-07-16 08:19:24","Have you tried putting low_pass and high_pass filters? Also, why don't you standardize?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-07-16 08:19:36","you should import joblib from sklearn.externals. There is no guarantee that users have joblib installed.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-07-16 08:21:30","`memory='nilearn_cache'` and do not specify `memory_level`
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","banilo","2015-07-16 09:29:59","Perhaps just paste the value into a new variable, instead of accessing `scores[measure][classifier_name]`three times
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","banilo","2015-07-16 09:33:13","why only close? Should this not be equal?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-07-16 09:50:07","In a perfect world, yes. In the world of computer, we have numercial instability.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-07-16 10:42:24","Yes here I am !
I removed filtering and confounds regression on purpose: tangent behaves better with noisy data. Its score falls down when filtering.
I don't standardize because 
- I want to show the difference between covariance and correlation measure
- standardizing ruins tangent score
- the tangent mean has not unit diagonal even if individual time series are standardized
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-07-16 10:43:31","why not specify memory_level ? I have an ugly warning when not
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-07-16 10:43:38","fixed
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-07-16 10:43:51","fixed
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-07-16 12:10:59","My bad. I thought that when you specify the cache, memory_level=1 was
forced. Leave it then but it looks like an issue to me (nilearn issue, not
yours of course).

On Thu, Jul 16, 2015 at 12:43 PM, salma1601 notifications@github.com
wrote:

> In examples/connectivity/plot_adhd_tangent.py
> https://github.com/nilearn/nilearn/pull/677#discussion_r34775249:
> 
> > +
> > +""""""
> > +
> > +# Fetch dataset
> > +import nilearn.datasets
> > +atlas = nilearn.datasets.fetch_atlas_msdl()
> > +dataset = nilearn.datasets.fetch_adhd()
> > +
> > +# Extract and preprocess regions time series
> > +import nilearn.input_data
> > +import joblib
> > +mem = joblib.Memory('/home/sb238920/CODE/Parietal/nilearn/nilearn_cache/adhd')
> > +masker = nilearn.input_data.NiftiMapsMasker(
> > -    atlas.maps, resampling_target=""maps"", detrend=True,
> > -    low_pass=None, high_pass=None, t_r=2.5, standardize=False,
> > -    memory=mem, memory_level=1)
> 
> why not specify memory_level ? I have an ugly warning when not
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nilearn/nilearn/pull/677/files#r34775249.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-07-16 17:34:47","This line fails on my laptop (numpy version=1.9.1).  Is this an issue with my configuration ?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-07-17 10:25:35","Please be more precise: this is a scalar function that takes non-negative inputs...
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-07-17 10:26:24","M should be n_dim or something more explicit.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-07-17 10:26:58","can't it be an (p, n) matrix with p>n or p<n ?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-07-17 13:28:29","Do we really need the option. In the current code base, the default is used systematically. 
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-07-17 13:30:29","Same question here.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-07-17 14:03:05","But... x -> 1./x does not invert the matrix
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-07-17 14:16:34","Typically you would use a seed value. Why don't you do this ?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/tests/test_embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-07-17 14:17:06","idem
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/tests/test_embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-07-19 13:51:54","I don't know why it's failing for you, what is your python version ?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-07-19 13:54:19","It doesn't take non-negative inputs, I use it with `np.exp`
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-07-19 13:54:42","changed to n_features
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-07-19 13:59:11","Yes it can, but what would be the benefit of this generalization ?
This function is used to transform the eigenvalues of a symmetric matrix, while keeping the same eigenvectors, so vecs is always a square matrix.
May be the naming of the parameters should be more explicit to explain better what I am doing?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-07-19 14:00:26","You are right, I removed it. I used it with the option to transform p-values.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-07-19 14:03:44","`_map_sym` applies the given function (x -> 1./x) to the matrix eigenvalues, keeping the eigenvectors, so actually this inverses the matrix.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-07-19 14:03:57","Fixed
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/tests/test_embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-07-21 09:24:21","But clearly, the function would work even if the vecs are not square matrices... and there is no checking to enforce this rule. 
eigen_vectors / eigen_values would definitely be a better wording. 

----- Mail original -----

> De: ""salma1601"" notifications@github.com
> À: ""nilearn/nilearn"" nilearn@noreply.github.com
> Cc: ""bthirion"" bertrand.thirion@inria.fr
> Envoyé: Dimanche 19 Juillet 2015 15:59:11
> Objet: Re: [nilearn] Tangent classif (#677)
> 
> In nilearn/connectivity/embedding.py :
> 
> > +
> > +
> > +def _map_eig(function, vals, vecs):
> > -    """"""Return the symmetric matrix with eigenvectors vecs and eigenvalues
> > -    obtained by applying the function to vals.
> >   +
> > -    Parameters
> > -    ----------
> > -    function : function
> > -        The function to apply.
> >   +
> > -    vals : numpy.ndarray, shape (M, )
> > -        Input argument of the function.
> >   +
> > -    vecs : numpy.ndarray, shape (M, M)
> > -        Unitary matrix.
> 
> Yes it can, but what would be the benefit of this generalization ?
> This function is used to transform the eigenvalues of a symmetric matrix,
> while keeping the same eigenvectors, so vecs is always a square matrix.
> May be the naming of the parameters should be more explicit to explain better
> what I am doing?
> 
> —
> Reply to this email directly or view it on GitHub .
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-07-24 15:25:01","Do we really want an example that relies on full ADHD?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-07-24 15:27:12","Can't you put the parameter directly instead of instantiating a dictionary?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-07-24 15:31:08","Works for me, numpy 1.9.2. Can you put the stacktrace? Note that this problem is not yours, we shouldn't give path to CSV files to the user, we should load them directly.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-07-24 15:49:09","Please use `labels[['x', 'y', 'z']].tolist()`, calling vstack is really ugly...
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-07-24 21:13:39","## In [2]: %run plot_adhd_tangent.py

ValueError                                Traceback (most recent call last)
/home/bertrand/mygit/nilearn/examples/connectivity/plot_adhd_tangent.py in <module>()
     46 import numpy as np
     47 import nilearn.plotting
---> 48 labels = np.recfromcsv(atlas.labels)
     49 region_coords = np.vstack((labels['x'], labels['y'], labels['z'])).T
     50 for measure in ['tangent', 'correlation', 'partial correlation']:

/usr/local/lib/python2.7/dist-packages/numpy/lib/npyio.pyc in recfromcsv(fname, *_kwargs)
   1904     kwargs.setdefault(""delimiter"", "","")
   1905     kwargs.setdefault(""dtype"", None)
-> 1906     output = genfromtxt(fname, *_kwargs)
   1907 
   1908     usemask = kwargs.get(""usemask"", False)

/usr/local/lib/python2.7/dist-packages/numpy/lib/npyio.pyc in genfromtxt(fname, dtype, comments, delimiter, skiprows, skip_header, skip_footer, converters, missing, missing_values, filling_values, usecols, names, excludelist, deletechars, replace_space, autostrip, case_sensitive, defaultfmt, unpack, usemask, loose, invalid_raise)
   1686             # Raise an exception ?
   1687             if invalid_raise:
-> 1688                 raise ValueError(errmsg)
   1689             # Issue a warning ?
   1690             else:

ValueError: Some errors were detected !
    Line #2 (got 5 columns instead of 4)
    Line #3 (got 5 columns instead of 4)
    Line #4 (got 5 columns instead of 4)
    Line #5 (got 5 columns instead of 4)
    Line #6 (got 5 columns instead of 4)
    Line #7 (got 5 columns instead of 4)
    Line #8 (got 5 columns instead of 4)
    Line #9 (got 5 columns instead of 4)
    Line #10 (got 5 columns instead of 4)
    Line #11 (got 5 columns instead of 4)
    Line #12 (got 5 columns instead of 4)
    Line #13 (got 5 columns instead of 4)
    Line #14 (got 5 columns instead of 4)
    Line #15 (got 5 columns instead of 4)
    Line #16 (got 5 columns instead of 4)
    Line #17 (got 5 columns instead of 4)
    Line #18 (got 5 columns instead of 4)
    Line #19 (got 5 columns instead of 4)
    Line #20 (got 5 columns instead of 4)
    Line #21 (got 5 columns instead of 4)
    Line #22 (got 5 columns instead of 4)
    Line #23 (got 5 columns instead of 4)
    Line #24 (got 5 columns instead of 4)
    Line #25 (got 5 columns instead of 4)
    Line #26 (got 5 columns instead of 4)
    Line #27 (got 5 columns instead of 4)
    Line #28 (got 5 columns instead of 4)
    Line #29 (got 5 columns instead of 4)
    Line #30 (got 5 columns instead of 4)
    Line #31 (got 5 columns instead of 4)
    Line #32 (got 5 columns instead of 4)
    Line #33 (got 5 columns instead of 4)
    Line #34 (got 5 columns instead of 4)
    Line #35 (got 5 columns instead of 4)
    Line #36 (got 5 columns instead of 4)
    Line #37 (got 5 columns instead of 4)
    Line #38 (got 5 columns instead of 4)
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-07-27 08:41:48","Could it be that the csv has been fixed? Try deleting ~/nilearn_data/msdl_atlas and rerunning the example.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-07-27 08:53:14","This is a fair point I fixed the examples accordingly in c8555ec.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-07-27 09:03:13","Yes, this indeed solves the issue. This example is _really_ nice.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-08-25 08:32:49","Why not leaving the inversion job to scipy?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/embedding.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-09-17 10:33:28","I speeded up the example by replacing the StratifiedShuffleSplit by StratifiedKFold. I can decrease the subjects number to 24, the classification results remain OK. But does it make sense to run a classification on 24 subjects?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-09-17 10:33:40","done
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_adhd_tangent.py')"
"pull_request_commit_comment","677","nilearn","nilearn","KamalakerDadi","2015-09-21 13:28:06","This idea of the example compares different measures. But, the end-result is shown as classification accuracy which is actually overtaken. Will it be good to show example only about measures ? If this is the case, we can also reduce number of ADHD subjects which obviously can save time. Just an idea. 
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","KamalakerDadi","2015-09-21 13:28:08","It would be nice if we can strict to showing only measures to partial correlation, covariances, correlation. This way we can also save some time in running.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","KamalakerDadi","2015-09-21 13:30:32","Can we change ""matrix_operations"" to ""connectome_matrices"" since its the base to use for learning any functional connectomes ?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/matrix_operations.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-09-21 13:41:42","> This idea of the example compares different measures. But, the end-result is shown as classification accuracy which is actually overtaken. Will it be good to show example only about measures ?

That's right, but I added this classification example to illustrate the advantage of using the robust dispersion measure over the other standard measures. May be I can add a comment on that?

> we can also reduce number of ADHD subjects which obviously can save time.

I can of course reduce the number of subjects (if  it makes sense to run a classification on 24 subjects for instance).
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-09-21 13:42:43","OK, I am removing precision and covariance measures.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","KamalakerDadi","2015-09-21 14:11:14","> May be I can add a comment on that?

In that case, yes may be you should also add few lines about the application.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","KamalakerDadi","2015-09-21 14:14:13","> if it makes sense to run a classification on 24 subjects for instance

Example wise, I feel it is OK.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","KamalakerDadi","2015-09-22 10:39:44","@salma1601 You might have forgot to change here and below.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'doc/modules/reference.rst')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-09-22 13:53:03","yes, thanks
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'doc/modules/reference.rst')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 13:36:11","You don't need the + here. Strings are concatenated as long as you have parentheses around them, e.g.:

```
 In [1]: ('some content '
   ...:  'and some more content')
Out[1]: 'some content and some more content'
```
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 13:38:37","You should if, elif, ..., else and raise a ValueError if prop is not in {'square', 'symmetric', 'spd'}. To be perfectly honest, in this particular case, I'd rather have three functions with explicit names than one with a `prop` string argument.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 13:40:14","It seems that eigenvalues and eigenvectors are generally spelled in one word, in which case removing the underscore from these variable names would make sense.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 13:45:26","I find the or None a bit misleading (I originally thought the ""or None"" applied to the shape ...). Maybe just remove it, since you have optional and you explain what happens if init=None below.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 13:47:17","Use array or matrix consistently, rather than a mix of both.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 13:49:49","""all of shape"", rather than ""shape of each"" ?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 13:56:25","Not a big fan in general of documenting default in docstrings since it is redundant with the signature. In this case it seems way to verbose and also wrong since it defaults to sklearn.covariance.EmpiricalCovariance(assume_centered=True).
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 13:57:30","IIRC you need a backslash at the end of this line if you want the sphinx documentation to format properly.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 13:58:48","Why the backquotes ?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 13:59:05","> Why the backquotes ?

Same thing for all the attributes
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 13:59:43","Maybe you could put that in a ""References"" section ?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 14:04:31","Not sure where the sqrt(2) comes from but it is not mentioned in the docstring.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 14:06:24","I may be wrong, but there must be a simpler way to implement this function, in particular without having to copy the input array (`symmetric = symmetric.copy()` l.205 of the current diff).
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-05 14:10:17","It would be nice if the error message could mention both the allowed connectivity kinds and the one that the user provided.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-06 06:43:31","Just wondering, what's the difference between tol=None and tol=0, i.e. is it common elsewhere, for example scikit-learn, to allow tol=None?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-10-06 15:47:41","I saw this in decoding/searchlight.py and group_sparse_covariance.py
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-10-06 15:48:02","changed
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-10-06 15:57:46","again I saw it in group_sparse_covariance.py. I added a similar explanation in the docstring.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-10-22 12:40:27","I would add a `raise_error=True` parameter to `is_spd` instead of declaring a whole new function.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-10-22 12:42:34","Could you please be more verbose? You could print the metrix shape and the expected one.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-10-22 12:43:13","Same here.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-10-22 14:14:37","I remember having a debate on the naming of the method. Is ""robust dispersion"" the consensus naming?
Ping @bthirion @GaelVaroquaux.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-10-22 14:18:44","> I remember having a debate on the naming of the method. Is ""robust dispersion""
> the consensus naming?

I am a bit uneasy about calling it 'robust dispersion', because I don't
think that it maps to anything that has been published in the brain
imaging literature.

The terms that have been employed in the brain imaging literature to
denote this have been so far centered around the ideas of 'manifold',
'tangent' and 'riemannian'. I think that these would be 3 valid
suggestions for a naming. My favorite is 'manifold' because it is more
big picture, and because I can never spell 'riemannian' right.

So +1 for manifold on my side.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","KamalakerDadi","2015-10-22 15:13:57","With no magic, I prefer to be as standard `riemannian manifold`. 
A seperate example on `plot_riemannian_manifold_functional_connectivity` would be really great to motivate users. ;)
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-10-22 20:46:32","Sorry, I like neither 'Riemannian' nor 'manifold' because these terms are not specific enough. Almost all objects you can think of are Riemannian manifolds,  so this does not tell you anything. I think we had the same discussion 5 years ago, but the main point here is that the computations are made in the geometry implied by the 'affine invariant' metric. So I would use 'tangent' or 'affine invariant'. 
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-10-22 20:50:37","Think of it as a marketting problem, not a mathematical one. People need
to be able to remember the name, and link it to publications, possibly
via Google. In that sense 'affine invariant' is not great, because the
terms hasn't been used in fMRI and EEG.

'tangent' is OK, as I think that it conveys the right idea. But in fMRI,
Bernard has been pushing forward Riemannian, and people in EEG too.
That's was I was thinking of 'manifold'. But I am OK with 'tangent'.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","bthirion","2015-10-22 21:29:23","Sure, but the community we're talking to does not read MICCAI proceedings and does not value that much Riemannian poetry. Now I can live with whatever suits you best.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-10-22 21:31:48","> Now I can live with whatever suits you best.

It's not about what suits me best, it's about finding what's best for the
future of this code.

Note that 'tangent' is quite fine with me. It's the vocabulary that I
tend to use in talks, or in my review paper with Cameron Craddock.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-10-27 13:42:22","> People need to be able to remember the name, and link it to publications, possibly via Google

I think 'tangent' meets this goal and I prefer it to 'manifold', 'affine invariant' and 'Riemannian'.
Of course I am not fully satisfied by it since for me when I hear tangent I want to ask tangent to what. I am also not satisfied with 'robust dispersion' but couldn't come up with a better suggestion.

So +1 for 'tangent'   
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-10-27 13:46:07","OK, we have a consensus on tangent! Let's go for it, then. 
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-27 13:47:34","Side-comment as a note to myself. This example does not work with Python 3 because np.genfromtxt loads all the strings as bytes so `phenotypic['site']` is never in `['""NYU""', '""OHSU""', '""NeuroImage""']`. I remember trying to convince np.genfromtxt to return strings to no avail a little while ago.

Also it is not great that  the site name is doubly quoted i.e. `""'NYU'""` rather than `""NYU""` ... Should we try to fix this in the dowloader ?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-10-27 13:51:30","For the record, I don't think this is needed. For example see https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt#class-docstring.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-02 08:28:01","I think that we should use as a currentmodule nilearn.connectivity, and the 'nilearn.connectivity.connectivity_matrices' module should pretty much be hidden from users.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'doc/modules/reference.rst')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-02 08:29:16","I would be in favor of renaming 'nilearn.connectivity' to 'nilearn.connectome'
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/__init__.py')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-02 08:32:28","This if/else tell me that we have a suboptimal design in the ConnectivityMeasure object. It seems to me that it should expose a 'mean_' attribute always.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-02 08:33:42","OK, I just realized that when kind is not 'tangent', it doesn't need to compute the mean to do the fit_transform... Then I understand better.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-02 08:38:01","I think that we should just call this attribute 'mean_'
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-02 08:39:06","Any reason that we are not using a LedoitWolf by default? My reflex would be to do that.

My reflex would also be not to turn 'assume_centered' on by default.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-11-02 09:35:08","> Any reason that we are not using a LedoitWolf by default?
> for a bad reason: I always observed that 'tangent' gives better results with EmpiricalCovariance
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-02 10:26:35","> > ```
> > Any reason that we are not using a LedoitWolf by default?
> > ```
> 
> ```
> for a bad reason: I always observed that 'tangent' gives better results
> with EmpiricalCovariance
> ```

You mean that it makes tangent space look better compared to the others?
Here, we are interested in getting overall good performance in every
scenario. The defaults in nilearn should be as robust as possible.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'nilearn/connectivity/connectivity_matrices.py')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-11-02 13:01:46","For the doc to be generated, it is necessary to specify the whole path. As in `.. currentmodule:: nilearn.plotting.displays` for the `OrthoSlicer`.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'doc/modules/reference.rst')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-02 13:02:40","> For the doc to be generated, it is necessary to specify the whole path. As in
> .. currentmodule:: nilearn.plotting.displays for the OrthoSlicer.

OK. I thought that an import path was enough.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'doc/modules/reference.rst')"
"pull_request_commit_comment","677","nilearn","nilearn","AlexandreAbraham","2015-11-02 13:08:32","I am not the best one to talk about doc generation but if you look at the doc generated by CircleCI, most of sections are empty because the import is not precise enough.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'doc/modules/reference.rst')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-11-02 13:39:16","I am not sure off the top of my head either. There is a bug in sphinx 1.3.1 and we should probably try with sphinx 1.2 before drawing any conclusion. See #712. 

BTW I am going to update circle.yml directly in master.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'doc/modules/reference.rst')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-11-02 14:40:56","when I write only .. currentmodule:: nilearn.connectome in the file reference.rst, my doc is not generated
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'doc/modules/reference.rst')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-11-03 08:53:20","@salma1601 you can prefix the strings with b, i.e. `b'""NYU""'`, etc... Not great but this would make this example work with Python 3.

I still think the downloader should be fixed to not have the site names contain quotes.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(None, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-11-03 09:35:34","People using this code to compare conditions/groups may fit separately the individual time-series for each condition/group. This will not be meaningful for the tangent measure. Shall comment about this ?
","e78cf53782f2dd712f6dde023591b696609ab5f6","(42, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-11-03 12:06:20","Another Python 3 fix needed:

``` python
classes = ['%s%s' % (site, adhd) for ...]
```

site is of type bytes and str(adhd) of type str.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(72, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-11-03 12:06:56","It'd be great to use a red/blue colormap for showing the correlation matrix as in other examples.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(56, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-17 17:42:40","I think that this still needs addressing.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(72, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-11-17 17:53:12","I very nicely said that I could do it post-merge somewhere below.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(72, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","GaelVaroquaux","2015-11-17 17:53:58","> I very nicely said that I could do it post-merge somewhere below.

OK sure.

So we are only missing the doc thingy
","e78cf53782f2dd712f6dde023591b696609ab5f6","(72, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","lesteve","2015-11-17 17:55:23","Obviously I'd be more than happy if @salma1601 does it.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(72, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit_comment","677","nilearn","nilearn","salma1601","2015-11-17 20:42:26","I can work on it by Thursday.
","e78cf53782f2dd712f6dde023591b696609ab5f6","(72, '', u'examples/connectivity/plot_connectivity_measures.py')"
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-01 08:52:20","classification on different connectivity measures","d9644019bfa793b7f87d16a6005df0f8a1dbcb51",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-02 12:03:16","added classifiers, fixed same cv across experiments","9b5be80e771b791637e07b896c292e5a25e7be33",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-02 20:00:49","fixed random state","c81a77a36b3b91b2745ee7c02177428d2c92e1fa",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-01 08:52:20","classification on different connectivity measures","613499eb6ca3bc47b050d7c42e58a66b154483b2",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-02 12:03:16","added classifiers, fixed same cv across experiments","136f8718fce569dd8829d9a5c00c9dd8b727443c",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-02 20:00:49","fixed random state","e98cd373f27b99ecd222838fce35ff80bba4df42",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-04 11:12:55","minor changes","bb9b21fedf9692150f1e77c1350c6bce880d7850",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-12 16:00:54","best score","3daebb18d2a89ef304790d46fabeef096e59b531",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-15 15:17:19","classif","4c44eac4148a8b8e411287ef30569319bc0fd067",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-15 15:20:56","Merge branch 'tangent_classif' of github.com:salma1601/nilearn into tangent_classif

Conflicts:
	examples/connectivity/plot_adhd_tangent.py
	nilearn/connectivity/embedding.py
	nilearn/connectivity/tests/test_embedding.py","ca1a95631c474c5e3349a92e727ea5eec6191f52",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-15 17:47:30","replaced mean_cov_ by tangent_mean_","ed65e487d088ace9153b9727448b0b68713d0fb6",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-15 18:12:25","removed nose.tools.assert_is_instance","695c7c9693eab26f6f4c1ad9548daf4817ab24da",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-15 18:34:32","removed nose.tools.assert_greater","b4c16e10eb52d463c21e52a257b6e999fa5ca539",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-15 18:47:48","Fix","6764c0173c2c32c5f0f1940172bf96627f114df4",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-16 10:34:41","remove joblib import and fix caching","22f2e7cf22b22f7681977e91b8d4b275c17aec7f",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-19 14:24:53","kept only SVM classifier","cd7af42c5eb8836eb053f619aa269dc56f006d6c",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-19 14:25:29","addressed comments","eaed2c8a781462fa322f48425795919244a5d957",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-07-19 15:30:12","renaming variable","eb8e2447f4621f67a8853e96653e1fe2708347ef",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-09-04 18:16:59","Merge branch 'master' into tangent_classif","9f24288cbe5e3cc68ed2ab449e19ec0419342b4a",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-09-15 16:55:23","addressed comments","ab2c5d3a8c733e5febcfce970a9b967fb8edba1e",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-09-16 12:47:47","more explicit naming","96140b6643854ef22c3faf3355bf5d4279bdba34",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-09-16 12:50:54","Merge branch 'master' into tangent_classif","ca1ccf68182088c2a3ee91baed81936930ba6bed",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-09-17 10:09:45","renaming, changing output of transform to matrices","8b42cd3061847d7a1484e71031c92a1c02cd4cd9",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-09-17 10:15:20","fix doc","21c34bbe74daeaac542d94028085e0feab2694a9",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-09-17 10:27:07","removed vec_to_sym","7f7dce8557d18795a0b49210cdeb80741f7c27ed",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-09-21 15:14:16","reduced subjects number and measures","eb6d3e371a623a96303cbeef54c131b10ca3c3a0",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-09-21 15:23:07","renaming and doc cosmetics","8add7c79ecdaf211859731d097efcd98ec7faf88",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-09-21 15:37:09","added comment on classif performance","6d3b6eb5a06ab747ea669225d44016c0bec79c72",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-09-22 09:35:15","Merge branch 'master' into tangent_classif","cc07ca866ea71bafc4db4e865166f34c935f8e93",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-09-22 12:11:49","updated doc","f3e7fd0d14bc8ffe8340d6a982e654b92c8c592c",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-10-06 15:43:23","addressed Loic's comments","d5af4c37893a7ead45a966eb89a3e4018a97e556",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-10-06 15:43:53","Merge branch 'master' into tangent_classif","16da5795189cc99e2cedc3c46e9a9104da2c97ed",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-10-06 15:56:35","tolerance None explained","610a1b53e445d3c2693c6e0cde9bc73b61d0c4f7",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-11-02 13:15:25","addressed Gael's comments","8875d710970ab6000d93dce159bd8e018bd79bc1",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-11-02 13:15:57","Merge branch 'master' into tangent_classif","0e46bdfedcfe48b8257e06f9d62df2a6a9e10ed8",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-11-02 13:54:55","Merge branch 'master' into tangent_classif","e5c3ba50204a4b63f8bb64fb82fbe37c84348093",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-11-03 09:34:01","prefixing strings with b for python 3 compatibility","bf335d778ce5f86b7e521b0407691e6099393d2f",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-11-19 14:47:40","narrative doc on tangent measure","ac2ee789e5703c0953cfb966386d263013315404",""
"pull_request_commit","677","nilearn","nilearn","sb238920@is223297.intra.cea.fr","2015-11-19 14:48:38","Merge branch 'master' into tangent_classif","e78cf53782f2dd712f6dde023591b696609ab5f6",""
