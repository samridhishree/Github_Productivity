"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","478","nilearn","nilearn","AlexandreAbraham","2015-03-03 12:54:41","This PR is a first step toward fixing #380. I have simply moved all nibabel related code (except for test code and a special hack in MultiPCA) to an indenpendant module. Since this code is already tested by most of nilearn functions, I simply added a test for a special case that wasn't covered.

I think that the discussion will mostly focus on the naming conventions. I'd like to merge it fast as it will massively impact further PR. We should also be careful for the upcoming PR: nibabel must never be imported except for test (because nilearn input are nibabel objects) and specific Nifti1Image manipulation (in the latter case, the code should be in the dedicated module).
","start issue","Put specific nibabel code in a separate module"
"issue_closed","478","nilearn","nilearn","AlexandreAbraham","2015-03-18 14:53:09","","closed issue","Put specific nibabel code in a separate module"
"pull_request_title","478","nilearn","nilearn","AlexandreAbraham","2015-03-03 12:54:41","This PR is a first step toward fixing #380. I have simply moved all nibabel related code (except for test code and a special hack in MultiPCA) to an indenpendant module. Since this code is already tested by most of nilearn functions, I simply added a test for a special case that wasn't covered.

I think that the discussion will mostly focus on the naming conventions. I'd like to merge it fast as it will massively impact further PR. We should also be careful for the upcoming PR: nibabel must never be imported except for test (because nilearn input are nibabel objects) and specific Nifti1Image manipulation (in the latter case, the code should be in the dedicated module).
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","Put specific nibabel code in a separate module"
"pull_request_merged","478","nilearn","nilearn","AlexandreAbraham","2015-03-18 14:53:09","Put specific nibabel code in a separate module","f79dd6e2aa61274e94854b43278f0d5a48bae3e0","Pull request merge from AlexandreAbraham/nilearn:isolate_nibabel to nilearn/nilearn:master"
"issue_comment","478","nilearn","nilearn","bcipolli","2015-03-03 18:30:19","I would suggest to name it `_new_img`, if it's an internal-only / hidden API.  Or, if it's planned to recommend users to use this function, I suggest adding a docstring to `new_img` about what object type is returned.
","",""
"issue_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-03 19:02:07","It is already located in `utils` which is hidden. However, I must admit that I didn't get the naming conventions in there (for example `_get_shape`).
","",""
"issue_comment","478","nilearn","nilearn","bthirion","2015-03-03 21:50:56","Looks good otherwise. I don't see any travis output ?
","",""
"issue_comment","478","nilearn","nilearn","bthirion","2015-03-03 21:54:33","There are still many calls to Nifti1Image throughout all the codebase...
","",""
"issue_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-03 23:36:41","Yes, I noticed that on my way back home ;). I fixed the last occurences.
","",""
"issue_comment","478","nilearn","nilearn","lesteve","2015-03-04 08:16:24","Naming suggestions:
- maybe something like create_img or make_img ?
- about the filename why not nibabel_image.py rather than niimage.py to make it more explicit that it is a nibabel wrapper? Also niimage.py doesn't follow the same naming convention than niimg_conversions.py in _utils
","",""
"issue_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-04 09:04:45","> maybe something like create_img or make_img ?

Not a big fan, I prefer `new_img`.

> why not nibabel_image.py

Because we don't want to be tied to nibabel. If one day we change the image format nilearn relies on, all we will have to do is to change the dependency on that file.

> Also niimage.py doesn't follow the same naming convention than niimg_conversions.py in _utils

I agree, `niimg_conversions` is definitely a bad name ;)
","",""
"issue_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-05 08:54:39","I am going to rename niimage -> niimg (but it could be img)

@GaelVaroquaux any thoughts on this one? I'd like to merge it fast as it is just code refactoring.
","",""
"issue_comment","478","nilearn","nilearn","eickenberg","2015-03-05 21:02:26","In reading through all the changed code, I feel that `new_img` is actually really nice on the eyes. 

@GaelVaroquaux I totally understand your apprehension about thin wrappers since they definitely add a layer, however thin it is. As somebody who has difficulties getting into new codebases and their practices, this type of thing would definitely be an added one for me.

But really, `new_img` seems very elegant to me, at least much more elegant than `nibabel.Nifti1Image` -- which to new users may actually be equally shocking simply by its unwieldiness.

`nibabel.Nifti1Image` still works for anybody who wants to use it, and one can always see `new_img` as a simple alias, so I really think this change is worth it.

Wrt `new_img_like`, maybe tackling it right now is a good idea. Do we need a discussion about the `mode=` that had been put forward? (I am not sure which ones there would be.)
","",""
"issue_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-05 21:11:14","You would achieve the same effect by doing: `from nibabel import Nifti1Image as niimg` for example. Aliasing is not the best practice but it is maybe better than a wrapper.
","",""
"issue_comment","478","nilearn","nilearn","eickenberg","2015-03-05 21:15:24","I realized that while typing the word _alias_, originally intended to be more figurative than real. Small caps for a class is not cool, and `Niimg` ... would look weird wrt all the other true functions that contain the word `niimg`. I think I am overthinking this.
","",""
"issue_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 12:55:31","OK, this PR is back on track again (because I like to nilearn a bit after lunch). I'm afraid that my renaming of the file erased the comments but I will address them when I have time.

Changes:
- Remove the one-liner `save_img` (since SpatialImage provides the `to_filename` method
- Refactor the one-liner `new_img` into `new_img_like` that actually does something. The constructor of the original type of the image is used to be able to support any type (this is the way nibabel handles it). I also put in there some small tweaks.
- Propagate the changes through all the code. Tests are passing but review is welcome as I sometimes had to change things a little bit.
","",""
"issue_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 13:03:16","Rebased on master for python3 compliance.
","",""
"issue_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 15:48:10","Rebased. Any other objection on this one? I think that I've addressed all the comments and that it is now actually a step forward cleaning code in nilearn ;).
","",""
"issue_comment","478","nilearn","nilearn","lesteve","2015-03-09 18:06:01","By the way the error you are seeing in Travis has been fixed in master so you probably want to do a rebase.
","",""
"issue_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-11 09:47:39","Squashed last commits.
","",""
"issue_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-12 08:48:45","Sidenote: doc must be rewritten but I will do that after @GaelVaroquaux's #483 has been merged.
","",""
"pull_request_commit_comment","478","nilearn","nilearn","bthirion","2015-03-03 21:44:37","dosctring ?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","bthirion","2015-03-03 21:47:32","dosctring ?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-05 16:29:12","Can you give us a docstring that says what's in this module?

Also license information as a comment.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-05 16:29:49","Please define input and output types in the docstring.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-05 16:30:34","I tend to have a strong bias against such a wrapper function that does nothing more than the function it wraps. The reason is that it makes the code opaque.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-05 16:31:23","Why? Why such a  one-liner. Why not teach our users to use 'to_filename' (which is a pretty bad method name, but let's move forward.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","banilo","2015-03-05 18:57:33","General remark: there appears to be quite some inconsistency in when and how this function is used in nilearn code.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","banilo","2015-03-05 18:58:44","rather ""line above""?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","banilo","2015-03-05 19:00:44","I might have asked this question before: Why is there no is_niimg(obj) in nilearn? ...one that verifies whether the object is Nifti1Image/iterable/list?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","banilo","2015-03-05 19:03:17","> Why such a one-liner.

+1
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","banilo","2015-03-05 19:07:26","I like new_img() already.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/plotting/img_plotting.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-05 19:32:10","You mean that it is sometimes used from `niimg_conversion` module? I've seen that in the tests, I will fix it. 
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-05 19:35:25","No, I think that this comment refer to the last line of the function.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-05 19:36:35","I think it's because it boils down to loading the data itself so doing the equivalent of `check_niimg`.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-05 19:48:40","As said in the description, this PR does nothing but moving the code around. Since nibabel related functions were scattered all around the code, I moved them all there. While doing that, I seized the occasion to remove all `nibabel` related code and put aliases here. I think this is a good practice to _abstract_ this dependency but I can revert it back to what it was.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-05 19:49:49","This is the purpose of the PR: remove any reference to nibabel all around the code. A `niimg` being an object exposing `get_data()` and `get_affine()` method, I wrapped the call to `to_filename()`.
Also all this code is located in `_utils` so users should not use it.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-05 19:51:27","> This is the purpose of the PR: remove any reference to nibabel all around the
> code.

I don't think that this is a worthwhile goal per-se: it will simply make
the code opaque. It is good thing to explicitely know that we are using
nibabel.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-05 20:00:01","OK, so I can close this PR and we let the code related to nifti images in niimg_conversion.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-05 20:34:52","> OK, so I can close this PR and we let the code related to nifti images in
> niimg_conversion.

Well, maybe this PR was bringing in useful cleanups?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-05 20:45:10","There is no code engineering in this PR, only moving around some code (mainly from niimg_conversion to niimage) and adding a test. If we don't want to isolate nibabel in a file, there is no reason to refactor the code. If we want to keep something from this PR, I think it would be easier to create a new (clean) one.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-05 20:46:28","I have no issue with moving code around. It's just the thin abstractions
introduced that I don't like. Based on my experience of discovering a new
codebase, they render a codebase opaque to an outsider.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","eickenberg","2015-03-05 20:50:49","Once the header-related `new_img_like` (or however it will be called) becomes reality, the function name `new_img` will probably be looked for by users that know the former. Yes, this is `__future__` talk :) but in that light this addition seems very much consistent.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-05 20:52:41","> Once the header-related new_img_like (or however it will be called) becomes
> reality, the function name new_img will probably be looked for by users that
> know the former. Yes, this is **future** talk :) but in that light this
> addition seems very much consistent.

OK, then let's tackle this problem now. I don't want to design abstractions
for future usage, as this is a very slippery slope.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-05 20:57:52","> Once the header-related new_img_like (or however it will be called) becomes reality, the function name new_img will probably be looked for by users that know the former.

Do you plan to make `new_img_like` available to the users? I thought that it would be internal cuisine.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-05 20:58:37","> Do you plan to make new_img_like available to the users? I thought that it
> would be internal cuisine.

Agreed.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimage.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 14:43:33","Since SpatialImage should provide `shape` property, I am in favor of removing this one.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 14:44:08","Should this be replaced by `isinstance(nibabel.spatialimages.SpatialImage)?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 14:45:00","I am not satisfied with that but I don't know how to say here that the type is depending on an input.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 14:45:42","This is wrong.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 15:57:57","Just cosmit refactoring: I return in this condition instead of having a huge condition block.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(68, '', u'nilearn/_utils/testing.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 15:59:29","Treating the first file first each time greatly simplify the code.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/image/image.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 15:59:44","We have to ensure that the mask is bool.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/image/resampling.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-06 16:01:01","> We have to ensure that the mask is bool.

I think that sklearn.utils.fixes.as_type(mask, np.bool) would be more
memory-friendly.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/image/resampling.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 23:42:02","Memory consumption is the same (we need a boolean copy of img.get_data()). From my experience, direct operations are faster than `astype`.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/image/resampling.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-07 08:22:18","> Memory consumption is the same (we need a boolean copy of
> img.get_data()).

Because it is impossible to have booleans in nifti, right? Elsewhere it
would indeed be different.

That just reminded me what is the ""right"" way to do it in the nilearn
codebase: _utils.numpy_conversions._asarray(arr, dtype=np.bool). This
code does some tricks to avoid a memory copy when converting from int8 to
bool. Philippe wrote that because he was annoyed that we couldn't store
booleans in nifti files.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/image/resampling.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-07 13:55:51","Fixed.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/image/resampling.py')"
"pull_request_commit_comment","478","nilearn","nilearn","eickenberg","2015-03-09 15:56:11","Is this still necessary?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","lesteve","2015-03-09 17:26:54","Should the exception type be a bit more specific, like AttributeError?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","lesteve","2015-03-09 17:57:38","Sorry I don't get this, the only use I could find of using _MNI152Template was without any arguments in the `__init__`.

Also just curious, what's the advantage of having _MNI152Template be an image?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/plotting/img_plotting.py')"
"pull_request_commit_comment","478","nilearn","nilearn","lesteve","2015-03-09 18:02:23","Should ""Nifti1Image object"" be replaced by ""Image object"" or ""SpatialImage object""?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(20, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","lesteve","2015-03-09 18:58:58","I agree unless someone comes up with a compelling use case of using an `img` which is not a `nibabel.SpatialImage`.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","lesteve","2015-03-09 19:05:23","Can you use ""Niimg-like object"" which is the convention we tried to use everywhere else previously? Bonus points if you add the doc URL too.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","lesteve","2015-03-09 19:21:48","I assumed that new_img_like would only take an `img` object rather than a niimg-like one. Is this added functionality actually used in the code?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 19:30:22","Does anybody know what problem solves this function? From what I understand, if the data is memmaped, it loads it into memory. First:
- Why is this behavior needed?
- Why not using directly the functions provided by nibabel to do so?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 19:30:46","Not sure if all SpatialImage have a cache...
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(20, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 19:31:47","Ok, I'll wait a bit before changing that part.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-09 19:32:30","> Does anybody know what problem solves this function? From what I understand, if
> the data is memmaped, it loads it into memory. First:

I think that the goal is to prevent memory leaks: when 'get_data' is
called, the niftiimage object has the data attached to it. If a reference
is kept on this object, outside of the function, we have a memory leak,
as the function just loaded data that won't be removed.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 19:33:45","No idea what is the difference between an `img` and a `niimg-like`.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","lesteve","2015-03-09 19:46:17","> No idea what is the difference between an img and a niimg-like.

Hint: one is almost like the other. More seriously `img` is passing the `is_img` check (so it is an object with get_data and get_affine at the moment) whereas niimg-like can go through `check_niimg` so can be an `img` or a string pointing to a nifti file plus the variation with the list of nifti filenames. The URL we added in a lot of docstrings is here: http://nilearn.github.io/building_blocks/manipulating_mr_images.html#niimg.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 20:56:30","OK. The official nibabel way to do that is `np.array(img.dataobj)`.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-09 21:17:08","> OK. The official nibabel way to do that is np.array(img.dataobj).

I don't think that it was possible when we wrote this code. I remember
having a lengthy discussion with Matthew Brett about this.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","banilo","2015-03-09 22:40:07","The same of this function is not exacgtly self-explanatory.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(51, '', u'nilearn/_utils/niimg_conversions.py')"
"pull_request_commit_comment","478","nilearn","nilearn","banilo","2015-03-09 22:41:10","Merge conflicts?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(12, '', u'nilearn/_utils/testing.py')"
"pull_request_commit_comment","478","nilearn","nilearn","banilo","2015-03-09 22:43:10","Merge conflicts?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(8, '', u'nilearn/image/resampling.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 23:27:53","OK. I have 2 versions of nibabel: 1.3.0 (has no cache) and 2.0 (has cache and dataobj) so I don't know which version is targeted by this code. I try to do the mean on 10 images from ADHD. I limited the memory. Here is the script:

```
from nilearn import datasets
from nilearn.image import mean_img
import resource


def limit_memory(maxsize):
    soft, hard = resource.getrlimit(resource.RLIMIT_AS)
    resource.setrlimit(resource.RLIMIT_AS, (maxsize, hard))


limit_memory(165152864 * 5)
data = datasets.fetch_adhd(n_subjects=10)
mean_img(data.func)
```

Given that paths are passed to `mean_img`, the caching system should not change anything between the versions. Both should be able to do the mean given the memory limit as they only need to load images one by one.

The result is that they both endup in memory error after 8 images. There must be a leak somewhere but I can't find out where. I'll keep the code as-is but we should maybe investigate that and add some tests.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-09 23:29:43","> OK. I have 2 versions of nibabel: 1.3.0 (has no cache) and 2.0 (has cache and
> dataobj) so I don't know which version is targeted by this code.

1.3.0 is targetted. 2.0 wasn't out when we wrote this code.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 23:38:45","Do you think that we should open an issue about potential memory leaks?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-09 23:39:41","> Do you think that we should open an issue about potential memory leaks?

Yes. With the example that you gave. It's a good one.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-09 23:40:11","You should reinitialize a few entries of the header. For instance, the cal_max and cal_min. But you should actually go over the nifti documentation to check what the different fields of the header: not all should be copied.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 23:40:16",">  Is this added functionality actually used in the code?

Yes, but I can easily fix these cases. However, if one day we want to expose it to the user, I guess that eating niimgs will be mandatory.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 23:40:48","No, I just added a blank line for cosmetic pruprose.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(12, '', u'nilearn/_utils/testing.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-09 23:41:28","> Yes, but I can easily fix these cases. However, if one day we want to
> expose it to the user, I guess that eating niimgs will be mandatory.

The danger is that I have the impression here that you are exhausting the
first image of the iterator. So this code has a nasty side effect.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 23:48:52","I'd rather not do that in this PR. It has already gone far beyond what I wanted to do and I guess that the question of which header to keep / update / reset will be subject to debate. For the moment, I mimic the behavior of the current state of nilearn.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 23:56:44","In fact, this code works with a list but not with a generator. This will be the subject of another PR. In the current state, nilearn is absolutely not iterator/generator friendly as first elements are exhausted here and there. My goal with this PR was to clean the code and prepare the ground for further refactorings. I can deal with these problems in this PR of course but it will take more time.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-10 00:14:26","Some code like that may help but there will still be a side effect on the generator provided:

```
def _iter_first(first, iterable):
    yield first
    for i in iterable:
        yield i


def sneak_peek(iterable):
    first = next(iterable)
    return _iter_first(first, iterable), first
```
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-10 06:23:06","> Some code like that may help but there will still be a side effect on the
> generator provided:

I think that this is better than the current situation, which is too
fragile.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-10 07:10:51","> I'd rather not do that in this PR. It has already gone far beyond what I wanted
> to do and I guess that the question of which header to keep / update / reset
> will be subject to debate. 

Well, the problem is that not resetting some values will give you bugs
that are very hard to debug with the softwares that respect these values.

I suggest that you put 'cal_min', 'cal_max' to zero (which means None in
Nifti terms), or better, to the min and max.

In general, I might even do the following:
{'scl_slope':0, 'scl_inter':0, 'glmax':0, 'glmin':0, 'cal_max':0,
'cal_min':0}

Once again: these things are really tricky, and if you don't do it right,
you'll end up with bugs. I am actually very weary of the nifti header.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","lesteve","2015-03-10 07:34:18","> 1.3.0 is targetted.

then README.rst and nilearn/version.py should be updated. We are currently requiring nibabel 1.1.0 [there](https://github.com/nilearn/nilearn#dependencies).
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-10 08:25:55","> ```
> 1.3.0 is targetted.
> ```
> 
> then README.rst and nilearn/version.py should be updated. We are currently
> requiring nibabel 1.1.0 there.

OK, my answer was wrong. The question was: is it version 1.3.0 or version
2.0 that is targetted. I replied 1.3.0 but I should have replied 2.0.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-10 10:10:23","Oh we upgrade to 2.0, cool !
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-10 10:26:48","Sorry, typo (doing too much email), I meant 1.1. Of course we don't update to 2.0. It's way too recent.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-10 10:38:25","I know ;).
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-12 13:06:25","Could you use the nibabel update header function here (with a try/except if it's not available in old nibabel versions).
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(91, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-16 16:35:08","So, apparently, update_header only takes care of shape/affines and is called automatically at image creation. If we want things to be done the right way, we should implement our own function to update these values.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(91, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","lesteve","2015-03-17 17:23:44","Still don't get this.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/plotting/img_plotting.py')"
"pull_request_commit_comment","478","nilearn","nilearn","GaelVaroquaux","2015-03-17 17:25:23","> So, apparently, update_header only takes care of shape/affines and is
> called automatically at image creation. If we want things to be done
> the right way, we should implement our own function to update these
> values.

OK, then let's keep what you have.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(91, '', u'nilearn/_utils/niimg.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-18 12:23:33","What happens is that this template is added to the plots using `add_overlay`. However, `add_overlay` has an epsilon threshold used to remove numerical noise. This threshold is applied to the image, and thus a new image is created using new_img_like. However, the empty constructor in the template forbids allocation using this code:
`ref_img.__class__(data, affine, header=header)`. This is why I chose a polymorphic constructor to solve this problem.

Several options:
- The polymorphic constructor
- Have a custom type that does not allow modifications
- Use a clever code to fallback to Nifti1Image if a constructor fails in `new_img_like`
- Make the template derive from Nifti1Image and make clever code to find a suitable constructor in super classes in `new_img_like`
- Maybe other options I don't see.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(None, '', u'nilearn/plotting/img_plotting.py')"
"pull_request_commit_comment","478","nilearn","nilearn","banilo","2015-03-18 14:07:13","Why is that necessary?
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/tests/test_niimg_conversions.py')"
"pull_request_commit_comment","478","nilearn","nilearn","lesteve","2015-03-18 14:16:59","I guess so that you can use `bla.shape` rather than `bla.shape()`. Also IIRC properties are not settable by default so that trying `bla.shape = (3, 2, 1)` will fail.
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/tests/test_niimg_conversions.py')"
"pull_request_commit_comment","478","nilearn","nilearn","AlexandreAbraham","2015-03-18 14:31:39",":octocat: agrees with ""le steve""
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/tests/test_niimg_conversions.py')"
"pull_request_commit_comment","478","nilearn","nilearn","banilo","2015-03-18 22:48:40","> agrees with ""le steve""

hey...that's my trick
","4f65e42284f2750f88acd1390d7f74f7ce1110cc","(19, '', u'nilearn/tests/test_niimg_conversions.py')"
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-03 12:11:43","Export nifti related function in a separate file","252a6254aee84f5f3b5376a477d303ebb21b3845",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-03 12:34:32","Remove nibabel imports and use niimage abstraction instead.","1c386be53957178b5ddb4282c0693872055e6ffb",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-03 12:40:16","Add default imports in _utils/__init__.py","0469852b631c44d7bcef49e208aff933afd7a766",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-03 12:50:29","Add test for missing code in niimage","090a98d987ee23475a101a0859495177adda6cd9",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-03 23:28:16","Fix missing occurences of nibabel","0c7b1278a4f3ae86159ecd549ce213163ce83dbc",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-03 23:34:59","Fix a last occurence.","1f50184f8d72ccb7e40f8455aeaeb0e490a076e1",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-03 23:59:30","Add docstrings","115a7d27b848cb02aface6dbfc0467904cb43342",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 00:33:54","Rename niimage to niimg","971420af1666f6988c4a37b4693dbf3dce44d1b4",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 12:48:01","Introduce the new_img_like","73cd600df8ce3f36514985699227e0a9939eb96c",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 13:08:03","Fix import that seems to bother Python3","1e45774c1b9b6039c6a171cb70d47d8aa6ed9e3d",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 13:19:25","Fix basestring for Python3","48cc1369ccc488499a8be36f43ab08922ebccd53",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 14:07:48","Fix last python3 problem","bc7db0c6460133c3ae6aedec0986ca097c603718",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-06 20:51:50","Add header and copyright","03e3b960ad5730a3488a5c2dadfda443b45fcb95",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-07 13:55:26","Fix astype in resampling.","c08e94fa07163ea16e23889458d786f252f151f8",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-09 19:23:00","Remove _get_shape","8a45b2b3da8957c84a6ec617e4f39686118e6014",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-10 07:46:29","Fix copy_header","b5d529ade954f627b62dd33a94313c5d58cb71c8",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-10 10:42:43","Change new_img_like to take img instead of niimg","32c470d1d151f66608530806bd7210e075a4187a",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-10 12:41:41","Get rid of is_img as it would become a one-liner","d9b89556d93f99f9ea6c743c95d8a0cc121d999b",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-10 12:54:24","Documentation fix.","4c70dd360405fd2d6da5dcafe9aeb586281f322a",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-10 18:06:22","Fix tests and error messages.","206f4bd996fe218b984353cdf7fe89267204c83c",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-18 13:58:04","Change signature of MNI template constructor","fc7cd1a0e9be4ac278a550700bf75fe0ac9167d1",""
"pull_request_commit","478","nilearn","nilearn","AlexandreAbraham","2015-03-18 14:51:59","Fix comment","4f65e42284f2750f88acd1390d7f74f7ce1110cc",""
