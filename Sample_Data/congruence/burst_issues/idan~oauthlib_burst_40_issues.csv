,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,375,idan,oauthlib,jvanasco,2015-08-11 19:13:24,"`invalidate_request_token` (https://github.com/idan/oauthlib/blob/master/oauthlib/oauth1/rfc5849/request_validator.py#L425-L449) says this:

`:returns: The rsa public key as a string.`

that's the same return value as `get_rsa_key` above.

the only function that calls this expects no return value:

https://github.com/idan/oauthlib/blob/master/oauthlib/oauth1/rfc5849/endpoints/access_token.py#L110-L113
",start issue,oauth1 - `invalidate_request_token` docstring error
1,issue_closed,375,idan,oauthlib,thedrow,2015-08-16 12:06:48,,closed issue,oauth1 - `invalidate_request_token` docstring error
0,issue_title,376,idan,oauthlib,jvanasco,2015-08-11 19:37:04,"fixes https://github.com/idan/oauthlib/issues/375
",start issue,fixed docsting on `invalidate_request_token`
1,issue_closed,376,idan,oauthlib,thedrow,2015-08-16 12:06:48,,closed issue,fixed docsting on `invalidate_request_token`
2,pull_request_title,376,idan,oauthlib,jvanasco,2015-08-11 19:37:04,"fixes https://github.com/idan/oauthlib/issues/375
",372b686b8a24aae94101e56a9c042813ef23971e,fixed docsting on `invalidate_request_token`
3,pull_request_merged,376,idan,oauthlib,thedrow,2015-08-16 12:06:48,fixed docsting on `invalidate_request_token`,57c88cf7f2de6fef79c1a2fbb3b0b68380ab1c41,Pull request merge from jvanasco/oauthlib:fix-docstring_invalidate to idan/oauthlib:master
4,issue_comment,376,idan,oauthlib,thedrow,2015-08-16 12:07:22,"Thanks for the contribution.
",,
5,pull_request_commit,376,idan,oauthlib,jvanasco,2015-08-11 19:35:50,fixed docsting on `invalidate_request_token`,372b686b8a24aae94101e56a9c042813ef23971e,
0,issue_title,381,idan,oauthlib,jvanasco,2015-08-12 16:40:11,"This adds logging of what the endpoint computed to the request as a dict on the  `validator_log` attribute.  

see https://github.com/idan/oauthlib/issues/378

This is most useful on protected resources, where it lets you know why the overall validation failed.
",start issue,adding validator_log to store what the endpoint computed
1,issue_closed,381,idan,oauthlib,thedrow,2015-08-16 12:06:23,,closed issue,adding validator_log to store what the endpoint computed
2,pull_request_title,381,idan,oauthlib,jvanasco,2015-08-12 16:40:11,"This adds logging of what the endpoint computed to the request as a dict on the  `validator_log` attribute.  

see https://github.com/idan/oauthlib/issues/378

This is most useful on protected resources, where it lets you know why the overall validation failed.
",58a2a735ac329f890c5dd4a042b35ee544084db0,adding validator_log to store what the endpoint computed
3,pull_request_merged,381,idan,oauthlib,thedrow,2015-08-16 12:06:23,adding validator_log to store what the endpoint computed,7f432f07174ac5599d0d3df1c68c26bb9c5cb762,Pull request merge from jvanasco/oauthlib:feature-validator_log to idan/oauthlib:master
4,issue_comment,381,idan,oauthlib,thedrow,2015-08-16 12:06:39,"Thanks for the contribution.
",,
5,pull_request_commit,381,idan,oauthlib,jvanasco,2015-08-12 16:37:21,adding validator_log to store what the endpoint computed,58a2a735ac329f890c5dd4a042b35ee544084db0,
0,issue_title,378,idan,oauthlib,jvanasco,2015-08-12 01:22:44,"I'd like to extend the `oauthlib.common.Request` object  to have a `validator_report` attribute.
this would just be a dict that logs the validity of the various tests

these endpoints drop some great into into the log, but don't keep it on the request -- which is necessary for error reporting
- validate_access_token_request
- validate_request_token_request
- validate_protected_resource_request
- validate_request
",start issue,oauth1 - extend `Request` object with a `validator_report`
1,issue_closed,378,idan,oauthlib,thedrow,2015-08-16 12:06:28,,closed issue,oauth1 - extend `Request` object with a `validator_report`
0,issue_title,295,idan,oauthlib,ib-lundgren,2014-11-13 12:36:53,"0.7.1 was pushed with unintended local changes which is very bad. Mistakes happen and this one could easily have been prevented.

A script should be created that at minimum ensures the current directory has no changes in it and the last commit message matches oauthlib.**version**.
",start issue,Create a release script to prevent human release errors
1,issue_closed,295,idan,oauthlib,thedrow,2015-08-16 12:15:31,,closed issue,Create a release script to prevent human release errors
2,issue_comment,295,idan,oauthlib,ib-lundgren,2014-11-13 12:44:34,"Also. It should check if Travis succeeded already for the release commit.
",,
0,issue_title,364,idan,oauthlib,dustinfarris,2015-07-21 14:41:31,"I have a public client/application, so I don't use client_secret.  Version 1.0.0 breaks this relationship by requiring client_secret anyway.

Breaking commit: https://github.com/idan/oauthlib/commit/539558a02edbadb8d6ef690fb0beb2510a5eeb17
",start issue,Getting AttributeError: client_secret
1,issue_closed,364,idan,oauthlib,thedrow,2015-08-16 12:04:03,,closed issue,Getting AttributeError: client_secret
2,issue_comment,364,idan,oauthlib,masci,2015-07-21 15:01:06,"@dustinfarris can you provide some detail on your issue? I think I know what the fix could be, just to be sure and build a dedicated test case. Thanks.
",,
3,issue_comment,364,idan,oauthlib,H0neyBadger,2015-07-21 15:01:51,"I confirm, I have the same issue.

tested on django-oauth-toolkit
with the following app

```
client_id=My_App
client_type: public
grant_type: password
```

curl command

```
curl -v -X POST -d ""grant_type=password&client_id=My_App&username=foo&password=bar"" ""http://localhost:8080/o/token/""
```

python exception :

```
Exception Type: AttributeError
Exception Value:    client_secret
Exception Location: oauthlib/common.py in __getattr__, line 409
```

Probably related to oauth2_provider/oauth2_validators.py line 146

``` python
126     def client_authentication_required(self, request, *args, **kwargs):
127         """"""
128         Determine if the client has to be authenticated
129
130         This method is called only for grant types that supports client authentication:
131             * Authorization code grant
132             * Resource owner password grant
133             * Refresh token grant
134
135         If the request contains authorization headers, always authenticate the client no matter
136         the grant type.
137
138         If the request does not contain authorization headers, proceed with authentication only if
139         the client is of type `Confidential`.
140
141         If something goes wrong, call oauthlib implementation of the method.
142         """"""
143         if self._extract_basic_auth(request):
144             return True
145
146         if request.client_id and request.client_secret:
147             return True
148
149         self._load_application(request.client_id, request)
150         if request.client:
151             return request.client.client_type == AbstractApplication.CLIENT_CONFIDENTIAL
152
153         return super(OAuth2Validator, self).client_authentication_required(request,
154                                                                            *args, **kwargs)
```
",,
4,issue_comment,364,idan,oauthlib,dustinfarris,2015-07-21 15:07:31,"@masci whenever my client tries to authenticate it sends

```
client_id=my-public-client
grant_type=password
password=mypassword
username=bob
```

I use django-oauth-toolkit which proxies this request to oauthlib.  As of oauthlib v1.0.0 this raises AttributeError with the following traceback:

```
Stacktrace (most recent call last):

  File ""django/core/handlers/base.py"", line 132, in get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File ""newrelic/hooks/framework_django.py"", line 499, in wrapper
    return wrapped(*args, **kwargs)
  File ""django/views/generic/base.py"", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File ""django/utils/decorators.py"", line 34, in _wrapper
    return bound_func(*args, **kwargs)
  File ""django/views/decorators/csrf.py"", line 58, in wrapped_view
    return view_func(*args, **kwargs)
  File ""django/utils/decorators.py"", line 30, in bound_func
    return func.__get__(self, type(self))(*args2, **kwargs2)
  File ""braces/views/_forms.py"", line 22, in dispatch
    return super(CsrfExemptMixin, self).dispatch(*args, **kwargs)
  File ""newrelic/hooks/framework_django.py"", line 872, in wrapper
    return wrapped(*args, **kwargs)
  File ""django/views/generic/base.py"", line 89, in dispatch
    return handler(request, *args, **kwargs)
  File ""django/utils/decorators.py"", line 34, in _wrapper
    return bound_func(*args, **kwargs)
  File ""django/views/decorators/debug.py"", line 76, in sensitive_post_parameters_wrapper
    return view(request, *args, **kwargs)
  File ""django/utils/decorators.py"", line 30, in bound_func
    return func.__get__(self, type(self))(*args2, **kwargs2)
  File ""oauth2_provider/views/base.py"", line 170, in post
    url, headers, body, status = self.create_token_response(request)
  File ""oauth2_provider/views/mixins.py"", line 124, in create_token_response
    return core.create_token_response(request)
  File ""oauth2_provider/oauth2_backends.py"", line 106, in create_token_response
    headers)
  File ""oauthlib/oauth2/rfc6749/endpoints/base.py"", line 64, in wrapper
    return f(endpoint, uri, *args, **kwargs)
  File ""oauthlib/oauth2/rfc6749/endpoints/token.py"", line 100, in create_token_response
    request, self.default_token_type)
  File ""oauthlib/oauth2/rfc6749/grant_types/resource_owner_password_credentials.py"", line 99, in create_token_response
    if self.request_validator.client_authentication_required(request):
  File ""oauth2_provider/oauth2_validators.py"", line 146, in client_authentication_required
    if request.client_id and request.client_secret:
  File ""oauthlib/common.py"", line 409, in __getattr__
    raise AttributeError(name)
```

Perhaps `client_secret` should be added to this list?: https://github.com/idan/oauthlib/blob/master/oauthlib/common.py#L385-L400
",,
5,issue_comment,364,idan,oauthlib,masci,2015-07-21 15:10:00,"Yep, I think that's the fix, had a similar problem, see #363 - I'm going to update the PR to cover your case.
",,
6,issue_comment,364,idan,oauthlib,dustinfarris,2015-07-21 15:14:10,"Thanks!
",,
7,issue_comment,364,idan,oauthlib,masci,2015-07-21 15:14:39,"Ok, I think this is an issue in DOT actually, I've already fixed `OAuth2Validator.client_authentication_required` method in a local branch but I need #363 to be merged before pushing the code
",,
8,issue_comment,364,idan,oauthlib,Turbo87,2015-07-25 15:48:18,"@masci for what it's worth: the same thing breaks in [Flask-OAuthlib](https://flask-oauthlib.readthedocs.org/en/latest/) too
",,
9,issue_comment,364,idan,oauthlib,masci,2015-07-28 13:05:10,"Issue is fixed in DOT v.0.9.0, still persists in Flask-OAuthlib, patch already in place in #368 waiting for merge
",,
10,issue_comment,364,idan,oauthlib,thedrow,2015-08-16 12:04:03,"1.0.2 is released and includes the fix for this issue.
",,
0,issue_title,379,idan,oauthlib,uggedal,2015-08-12 06:56:03,"I'm maintaining `oauthlib` for Void Linux and it would be great if you could publish a sdist tarball for the 1.0.2 release.
",start issue,Missing sdist tarball on pypi
1,issue_closed,379,idan,oauthlib,thedrow,2015-08-16 12:15:11,,closed issue,Missing sdist tarball on pypi
2,issue_comment,379,idan,oauthlib,thedrow,2015-08-16 12:15:11,"1.0.2 was released today. Travis has some problems with deploying to PyPi at the moment so I released manually.
Sorry about that.
",,
