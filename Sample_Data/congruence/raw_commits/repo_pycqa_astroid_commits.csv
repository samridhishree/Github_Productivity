"rectype","issueid","project_owner","project_name","actor","time","text","action","title","provenance","paths","plus_1","urls","issues","userref","code"
"commit_messages","","pycqa","astroid","shlomme","2014-11-09 16:15:01","Explicitly support metaclass-generating functions that return objects that are only
used to call __new__ on, but do not contribute to the inheritance hierarchy.

This is a really terrible hack, but I cannot think of a cleaner way short of teaching
astroid.scoped_nodes.Class about __new__ invocations on base classes, and having
full inference working on them as well.","000e412f2c42206c94ad0653b7b29616cf13ce75","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-06 17:03:13","less TODO but more for pylint

--HG--
branch : _ast_compat","000e9deb2f8c0049729d0e31bc3d0898caf77f13","","api.github.com,git_clone","[u'[""TODO._ast_compat""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-01-16 07:55:47","Changelog update.","0016a643646b05dec44837caef95cb3f9135ccec","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-03 14:33:05","[R] create a LookupMixin","008a089709bbd1baa29d12752300bfc361844d24","","api.github.com,git_clone","[u'[""lookup.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-08 23:43:03","Drop code that inspects sys.modules unconditionally, since it breaks the expectancy of a static analysis tool.","00ac0e72560f0776c9bc5c65976dcce986aac891","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 13:53:15","introduce a Delete node for compiler

--HG--
branch : _ast_compat","00cb0de42b9f99571368294cb796844e9ce52b30","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2014-11-28 15:39:14","Fix test_mechanize_open (issue #61)

There's no build_string function.

--HG--
branch : issue61","0106a6f7c677b68166e914fb3d138769cee12498","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[{u'raw': u'#61', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'61', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-02 20:38:06","Merge master","011cfcf1dca29cedb3032fcb7ae2534ab76e6c0b","","api.github.com,git_clone","[u'[""astroid/brain/brain_builtin_inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-07-24 11:30:37","temporarily add some prints to diagnose the drone.io failure","014c53df49a1bd388c5173f574d084d3e842fb50","","api.github.com,git_clone","[u'[""manager.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-07-24 06:52:53","Update some function definitions in py2stdlib's hashlib stub module
and make sure AST transforms without a predicate always match.

Test all this in a new testcase.","014ee2d795f0596e620b02ae36fefb0b47313a5a","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""rebuilder.py"", ""test/unittest_brain.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-11-29 20:11:22","Add support for handling Uninferable nodes when calling as_string

Some object, for instance List or Tuple can have, after inference,
Uninferable as their elements, happening when their components
weren't couldn't be inferred properly. This means that as_string
needs to cope with expecting Uninferable nodes part of the other
nodes coming for a string transformation. The patch adds a visit
method in AsString and ``accept`` on Yes / Uninferable nodes.
Closes issue #270.","01660061a050c2f0df9c60b91c82f2fe89a651b4","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/util.py"", ""astroid/as_string.py""]']","False","[]","[{u'raw': u'#270', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'270', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-29 14:47:59","Improve a test, by checking the actual infered objects.","017d9d3432ae97bdf114ba5937e9f9c7db1e1b8e","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-11 17:34:40","Remove doctype and future imports which aren't useful.","01801c5776cdd02ba85b41f556c615d5cdb3ff20","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""astroid/bases.py"", ""astroid/context.py"", ""astroid/modutils.py"", ""astroid/tests/unittest_objects.py"", ""astroid/scoped_nodes.py"", ""astroid/inference.py"", ""astroid/manager.py"", ""astroid/builder.py"", ""astroid/__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-01 19:28:32","steps for _nodes_compiler visit methods

--HG--
branch : rebuild","0192992e090f07686b94dbfc6aee819348e0802f","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-03 06:21:04","Add two new exceptions for handling MRO error cases.

DuplicateBasesError is emitted when duplicate bases are found in a class,
InconsistentMroError is raised when the method resolution is determined
to be inconsistent. They share a common class, MroError, which
is a subclass of ResolveError, meaning that this change is backwards compatible.","0199ae820b6438873f3e5c4ce2adbac05f69841b","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/exceptions.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-07 09:46:01","py3k: fix the removed Name node in excepthandler","01c8b0e3b980e6d9a343b75e98a1ad0e5b5bee84","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","brycepg","2017-12-27 19:21:54","Assign __module__ and __qualname__ to class locals implicitly

This prevents __qualname__ and __module__, when called as locals in the class definition,
from raising a false-positive no-member in pylint","025c9cc00c537f15f827c7b9698b9e58f8d813bf","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_builder.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-10-12 14:14:24","Fix Arguments' _other_fields","0267ac4220f87df7d27d6c6f25ede6beaf8740b5","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-14 14:17:52",".slots() will return an empty list for classes with empty slots.

Previously it returned None, which is the same value for
classes without slots at all. This was changed in order
to better reflect what's actually happening.","027767ab3240554dab070bfc4993d929d20b14d6","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-09 16:13:14","small attribute correction

--HG--
branch : _ast_compat","0286380c3132b574b33a538cd0c74c043f3913cb","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-01 11:18:28","py3k: fix builtins.property","0306f3b0a77b9d55f0e8273dc0bbea1d1cc0ece8","","api.github.com,git_clone","[u'[""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-17 13:02:32","as_string now works (only) on ASTNG nodes

--HG--
branch : _ast_compat","030b5708fb2f6123acb2d1be2d562bf98a1f6a0b","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-26 08:09:02","fix visit_class and visit_boolop; more explicit comment

--HG--
branch : rebuild","033b797d4357cd77f2eabfb544921c4c26c38d17","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-25 09:43:42","needed for consistency","034d057bdfd2064fbcce402e84da38f31c564976","","api.github.com,git_clone","[u'[""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2014-06-04 10:27:28","Add missing import","037c898b380b850407455e1820ce0de751e17225","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-28 16:37:48","Add inference tips for 'tuple', 'set' and 'list' builtins.

This patch adds some inference tips for the mentioned builtins,
making calls such as 'list([4, 5, 6])` be inferred the same as `[4, 5, 6]`.
Previosly, inferring those objects resulted in an Instance of the given builtin,
without having access to their elements. This is useful, for instance, when trying
to infer slots defined with set, list of tuple calls (instead of their syntactic equivalents).","0391c3f7e0f84ffb374e7ec9062707b80174290c","","api.github.com,git_clone","[u'[""astroid/node_classes.py"", ""astroid/tests/unittest_inference.py"", ""astroid/brain/builtin_inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-01 19:29:30","yet some more corrections

--HG--
branch : rebuild","0398f79f554bb963944c8c2a053af075d7b87941","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""node_classes.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-06-20 11:51:04","Allow selecting several statements/expressions in test_utils.extract_node.","03ce489bdcb712e23d82d1917153b9aae51dd1a8","","api.github.com,git_clone","[u'[""test_utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-11 13:35:23","Remove trailing whitespace.","03da989568ee42ad8107c72902774cd222308d11","","api.github.com,git_clone","[u'[""astroid/protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ioanatia","2017-06-09 10:19:28","Fix finder for namespace packages (#440)","03f3ea786885d794d3cdeaa82df4ce36d60d68e1","","api.github.com,git_clone","[u'[""astroid/interpreter/_import/spec.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[{u'raw': u'#440', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'440', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-25 09:51:21","absolute import is always activated since python2.7","040ce065183bc2545f5b71e03f686dd08d03bccf","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-03 08:42:12","[R] demonkeypatch callable and infer_call_result methods","0421f6558f7acd1ff10f66249f443af1fc22a518","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-14 11:36:06","fix: remove recursion in getattr and use recursion into ancestors

the getattr recursion can generate infinite loops.","04292fa253f27116175b224eb2ed5b5d9b278f7f","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-25 07:30:32","simplier egg, refactor tests","046ec2d77239635a8c58cfe6cb16b28ab69714d3","","api.github.com,git_clone","[u'[""test/data/MyPyPa-0.1.0-py2.5.zip"", ""test/unittest_manager.py"", ""test/data/MyPyPa-0.1.0-py2.5.egg""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 15:59:51","Module is not a statement

--HG--
branch : _ast_compat","04aeb4eba1a14c04060e3e94089e4084de2cbd77","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-10-23 16:03:16","backport stable","04cda80884f3d11db6e81724d0afa268332ba588","","api.github.com,git_clone","[u'[""test/data/absimport.py"", ""test/data/email.py"", ""test/unittest_nodes.py"", ""ChangeLog"", ""inspector.py"", ""__pkginfo__.py"", ""rebuilder.py"", ""brain/py2stdlib.py"", ""test/unittest_scoped_nodes.py"", "".hgtags"", ""brain/py2mechanize.py"", ""brain/py2qt4.py"", ""test/unittest_manager.py"", ""scoped_nodes.py"", ""debian/changelog"", ""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-16 14:06:07","Modify the AppVeyor badge link.","052169e003267ed2b9324018a0fa72198490f747","","api.github.com,git_clone","[u'[""README.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-02 18:03:17","[C] XXX this is very strange; if it is necessary, please explain","05357ec3a8bcc8c70c69eb6d89f2a8b9a5b5a634","","api.github.com,git_clone","[u'[""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-07 14:00:01","py3k : make all code snipets Python3k compatible","057c1c1edd9284e7139960ce04b352eaaf65e8f2","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_utils.py"", ""test/unittest_inference.py"", ""test/unittest_nodes.py"", ""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","laura.medioni@logilab.fr","2015-12-16 10:18:22","Add information about parent module to the elements defined in this module

solves issue #265","058a287405390f9c7562c9eb2b3a7c8fc589e7a1","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/__init__.py""]']","False","[]","[{u'raw': u'#265', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'265', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-04-17 11:18:22","Prepare 1.5.2","05c78c35d2fe3da814b8fd547bb322ba6b3d5e15","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-03 15:21:39","Merge with default.

--HG--
branch : slots","05df58447680a54ca4f6444edae06783efe312ea","","api.github.com,git_clone","[u'[""rebuilder.py"", ""ChangeLog"", ""test/unittest_python3.py"", ""bases.py"", ""test/unittest_scoped_nodes.py"", ""manager.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-16 12:37:13","Add inference support for `callable` builtin.","06529ca9536bbafd5655a539cee6e3cf1d0be5f9","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/brain/builtin_inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-16 20:57:09","Get the first element from the method list when obtaining nose.tools.trivial functions.

Closes Pylint issue #448.","0653f464058d36b599848f3c3d5de4dcd8f869ab","","api.github.com,git_clone","[u'[""astroid/brain/pynose.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#448', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'448', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 14:01:48","logilab-astng-debian-version 0.18.0-1","06680b46a170ff3afd678122845f29e072fa867c","","api.github.com,git_clone","[u'[""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-04-28 08:35:32","proper licensing information (LGPL-2.1). Hope I get it right this time.","06995a518498e39ad35573bc8cf9486dfe125700","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""test/data/SSL1/Connection1.py"", ""test/regrtest_data/package/__init__.py"", ""test/__init__.py"", ""test/data2/suppliermodule_test.py"", ""test/data2/clientmodule_test.py"", ""test/data/appl/myConnection.py"", ""MANIFEST.in"", ""mixins.py"", ""test/unittest_inference.py"", ""COPYING"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""scoped_nodes.py"", ""test/data/noendingnewline.py"", ""test/data2/__init__.py"", ""test/data/notall.py"", ""nodes_as_string.py"", ""test/unittest_lookup.py"", ""inspector.py"", ""test/regrtest_data/descriptor_crash.py"", ""test/unittest_utils.py"", ""test/unittest_scoped_nodes.py"", ""setup.py"", ""test/data/appl/__init__.py"", ""COPYING.LESSER"", ""test/data/format.py"", ""test/unittest_inspector.py"", ""bases.py"", ""test/unittest_builder.py"", ""debian/copyright"", ""builder.py"", ""node_classes.py"", ""_exceptions.py"", ""utils.py"", ""test/regrtest_data/import_package_subpackage_module.py"", ""test/data/__init__.py"", ""test/data/nonregr.py"", ""raw_building.py"", ""test/regrtest_data/package/subpackage/module.py"", ""test/unittest_nodes.py"", ""protocols.py"", ""test/data/SSL1/__init__.py"", ""nodes.py"", ""rebuilder.py"", ""test/data/module.py"", ""__init__.py"", ""_nodes_compiler.py"", ""test/regrtest_data/package/subpackage/__init__.py"", ""inference.py"", ""test/regrtest.py"", ""_nodes_ast.py"", ""test/regrtest_data/absimport.py"", ""manager.py"", ""test/data/module2.py"", ""test/data/all.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-09 20:37:30","Don't leak StopIteration when inferring invalid UnaryOps.","06a24026b9ea71df579577a95fae4516721a136a","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-03 10:57:44","Add inference tips for dict calls.

This patch properly infers dict constructor calls, as in dict(), dict(kwarg=value),
dict(<iterable>), dict(<mapping>) and dict(<iterable> or <mapping>, **kwarg) syntax.","06a982c039f57c2a317094f9a289b3e5b2033551","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/brain/builtin_inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 14:12:56","should not be necesary

--HG--
branch : _ast_compat","0707a2c3fce985ac05b46fee7a6405c32e3cef58","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-05 22:26:50","Fix pylint errors.","071dc35be425fdb7a33c8296eb09682a82a75960","","api.github.com,git_clone","[u'[""astroid/tests/unittest_python3.py"", ""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 23:13:40","test implicit relative import fails when absolute imports activated","07229f497338c842daa860b161363b8d1f2175ea","","api.github.com,git_clone","[u'[""test/regrtest_data/absimport.py"", ""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 12:02:00","bring a test partially back (after two years ;)","0758b049e10d7cbe95dd55a922656298f2122c6d","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-04-20 18:50:37","define a constant with all node classes","077579a01c73a9dc5b6ebe9be99fc7343fc9d537","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-26 18:28:49","more things not to forget

--HG--
branch : _ast_compat","07866ef38b2f8b37914dae89511b6fb8e3a70539","","api.github.com,git_clone","[u'[""TODO._ast_compat""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-01-27 13:56:40","vararg and kwarg are instances of _arg.arg for Python 3.4, not strings.

--HG--
branch : nameconstant_py34","0790b5662730f1678ae9cafd938652d7a3f883dc","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-08 23:06:38","Move YES to astroid.util.

YES is needed by other components of astroid, components which aren't
necessarily related to astroid.bases. In order to reduce circular
interdependencies between components, YES is moved into a new module,
tailored for various *utilities*.","07d5f4ef7293b8dc27151fc29d99d4a6b772e7be","","api.github.com,git_clone","[u'[""astroid/util.py"", ""astroid/bases.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_inference.py"", ""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/unittest_brain.py"", ""astroid/scoped_nodes.py"", ""astroid/protocols.py"", ""astroid/brain/builtin_inference.py"", ""astroid/helpers.py"", ""astroid/node_classes.py"", ""astroid/builder.py"", ""astroid/__init__.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-18 15:19:27","rename TODO

--HG--
branch : _ast_compat","07e82b09ca7fddb1911a7b5b3036d820ac5d4f80","","api.github.com,git_clone","[u'[""TODO._ast_compat"", ""TODO""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-17 20:45:59","Support multiple types of known properties in _wrap_attr.","085c77f52b34214ca0fea03223d584c3406a1cc0","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/bases.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-29 13:45:22","Fail when calling Super.super_mro if the object-or-type is not the expected type.","08b05056af12e103c2f37569ad5091ca5fd4d787","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/tests/unittest_objects.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-20 10:16:46","Add a base class with empty methods for Visitors

--HG--
branch : _ast_compat","08bbf64ec88f61b785639bf1126cab47d5951505","","api.github.com,git_clone","[u'[""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-04-25 14:23:11","Don't take in consideration invalid assignments, especially when __slots__ declaration forbids them.

Close issue #332","08c53a9416870b320eae50490dd5ceef0321c580","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/builder.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#332', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'332', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-26 22:04:26","Obtain the methods for the nose brain tip through an
 unittest.TestCase instance.

Closes Pylint issue #457.","08da0883fe46dd66848b47c7450295256bd5dc04","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/brain/pynose.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#457', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'457', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","hugovk","2017-10-12 09:03:50","Mark failing test as expected failure (#455)","08db26f34395e2c52023a5d33139975ff47ba8af","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[{u'raw': u'#455', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'455', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 14:42:38","AugAssign should have assigned_stmts methods

--HG--
branch : _ast_compat","08f95b4db950d92733729388a0eaf8c2eb3fb637","","api.github.com,git_clone","[u'[""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-08-22 20:14:38","Simplify brain module for the Python stdlib, but make sure that inference still works.","08fa7730240d57815f2c1cfc403137abb7199ded","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""test/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-06 15:13:19","py3k: import builtins from lgc.compat","093593a42b502e1741e2f88d8744092c19887e72","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-03 08:29:20","set parent for new nodes, not old; prepare calling leave_*

--HG--
branch : rebuild","09796d905b54d747ce85cff9285a820384eed6ea","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-11 14:39:00","republish 0.21.1 which has never been published actually","097d291e6ac3b9f08f947f6b9e84079b8f6a0d96","","api.github.com,git_clone","[u'[""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 09:27:46","no need for _add_local method

--HG--
branch : _ast_compat","09b92c5e521532066205a866508037b57f8f7fba","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-10-26 22:35:18","Make the source compatible with Python 2.7 and 3.3+.","09cd8b7eefb021f2d8327e42614bca7cbb8915f2","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_inference.py"", ""test/unittest_nodes.py"", ""protocols.py"", ""test/unittest_modutils.py"", ""setup.py"", ""utils.py"", ""bases.py"", ""test/unittest_brain.py"", ""mixins.py"", ""brain/py2stdlib.py"", ""builder.py"", ""node_classes.py"", ""inference.py"", ""test/unittest_lookup.py"", ""__pkginfo__.py"", ""test/unittest_scoped_nodes.py"", ""test/unittest_regrtest.py"", ""manager.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-21 16:02:46","make tests independent from current working directory","09f7c5223fc3dfb0f81e311bdf675c67649b63c2","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""test/unittest_inspector.py"", ""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""test/unittest_regrtest.py"", ""test/unittest_lookup.py"", ""test/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 14:17:26","more test

--HG--
branch : _ast_compat","0a4c7b22c678f4c16713199111518b8f832ac3d6","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 10:58:22","fix _ast ExtSlice dims: it's a list

--HG--
branch : rebuild","0a9d9ae43791213da38dd669802d6f5632cc447b","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-15 15:28:13","Convert line endings for some files back to DOS","0adbb4f00809a2f7a3e61299f8e2c8bd6a816bed","","api.github.com,git_clone","[u'[""astroid/helpers.py"", ""astroid/tests/unittest_objects.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 14:15:31","Assert is a statement node

--HG--
branch : _ast_compat","0ae8fc046952ec2cb56758012873e823f7584c9e","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-25 17:12:49","little simplification on lookup

--HG--
branch : _ast_compat","0af2571f46c92e31569f2829a78c9ca90716343e","","api.github.com,git_clone","[u'[""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 08:04:21","refactoring are_exclusive and tests

--HG--
branch : _ast_compat","0b10a8471a4cea90f1b47007fdd500bd7bc8dd23","","api.github.com,git_clone","[u'[""utils.py"", ""test/unittest_utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 09:10:44","check node not already in locals

--HG--
branch : _ast_compat","0b12d062de92c576c3b761ff38168a36021aa76f","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-15 15:22:22","Add a test for is_standard_module with datetime.

This is an interesting example, since datetime, on pypy,
is under lib_pypy, rather than the usual Lib directory.","0b17691a885059f9936c98c0048931daee7ef558","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","julien.jehannet@logilab.fr","2010-11-17 18:06:25","[debian] py3k: update debian rules with new debhelper API","0b1d8904095e0da5016a6f9241b0afdb88d29f04","","api.github.com,git_clone","[u'[""debian.py3k/control"", ""debian.hardy/rules"", ""test/unittest_inspector.py"", ""MANIFEST.in"", ""debian.intrepid/rules"", ""debian/rules"", ""debian.py3k/rules"", ""debian.lenny/rules""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-23 10:30:22","Disable stop-iteration-return until we'll drop support for python 2","0b26a57949bd8594bd4355083eedabe94f83e90d","","api.github.com,git_clone","[u'[""pylintrc""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-18 16:16:31","Fail gracefully when the string contains null bytes.","0b3f7dcbcad6e3c7c6b56a6bb5a39ae931f5a92a","","api.github.com,git_clone","[u'[""astroid/builder.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-10-18 15:29:52","fix some test failures with pypy platform (one remaining)","0b5063392d0328be5f132ed290b40990b9d72277","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-02 10:37:02","testcase for if.node

--HG--
branch : _ast_compat","0b5b94872b824eab9c40b0310fd45b3f5eacca0b","","api.github.com,git_clone","[u'[""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-08-05 12:13:47","Merged logilab/astroid into default","0b9211efae4ca1b29559a81ae82aed6f0a42d262","","api.github.com,git_clone","[u'[""doc/Makefile"", ""doc/extending.rst"", ""ChangeLog"", ""doc/make.bat"", ""debian/control"", ""doc/source/extending.rst"", ""debian/rules"", "".hgtags"", ""__pkginfo__.py"", ""doc/source/conf.py"", "".hgignore"", ""debian/changelog"", ""doc/source/index.rst"", ""doc/source/inference.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-10 17:08:57","cleanup: remove python < 2.5 support","0b95c6d89a5eb2d3855b2353bb9817cc7cae3ded","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""test/unittest_nodes.py"", ""rebuilder.py"", ""test/unittest_inference.py"", ""_nodes_compiler.py"", ""test/unittest_builder.py"", ""builder.py"", ""test/unittest_lookup.py"", ""test/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-22 14:56:26","py3k: handle file encoding and stream definition in builder

In Py3k, We can't do ""data = open(path, 'U').read()"" anymore since we need
to know the encoding to read the file (UnicodeError); instead we have
to first guess the encoding by reading the file as a byte stream.

We then define
+        node.file_encoding = encoding
+        node.file_stream = file_stream

to be used by the Pylint checkers","0bd84938bb037b70cee901157880df4bf9dd7f87","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-03 14:38:24","[R] move scope_lookup methods to the right classes","0be98653e8f7ae63c4961b640f7f3c77ae484ca5","","api.github.com,git_clone","[u'[""lookup.py"", ""scoped_nodes.py"", ""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 14:36:12","must *always* propagate context, else we may infinitly recurs

--HG--
branch : _ast_compat","0bfb18c9a9679a8bb658169a24aa8ac782362f91","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 09:08:50","use manager to avoid duplicate build (may lead to false error when using pytest on all test modules

--HG--
branch : _ast_compat","0c584a911ae6133a700d1c318587cbe15ef58125","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-02 08:51:18","Return YES if no types could be deduced for the type builtin.","0c5a7c0e4f383b87e191a98b71cd536f9663618a","","api.github.com,git_clone","[u'[""astroid/helpers.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-26 19:27:41","Fix a maximum recursion error occured during the inference, where statements with the same name weren't filtered properly. Closes pylint issue #295.","0cbbebe7328ae8df3a77e9481059d2ac7f673b0a","","api.github.com,git_clone","[u'[""test/unittest_regrtest.py"", ""node_classes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#295', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'295', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-08 23:17:25","More debugging","0cfa2ee15094154c323db8d28fb25fde6c2363ef","","api.github.com,git_clone","[u'[""setup.py"", ""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-26 10:48:16","redirections are done in nodes. accept method

--HG--
branch : _ast_compat","0d408f6cb9ab6b1072597123154040b265aaada2","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-16 22:34:50","Close all the streams returned by imp.find_module.","0d429e358674098fcba27afd48cd6c925c54d6a0","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-03-06 21:44:45","dict.values, dict.keys and dict.items are properly inferred","0d65b5bdc970367415dd68bdaae912cef999d16f","","api.github.com,git_clone","[u'[""astroid/interpreter/objectmodel.py"", ""astroid/tests/unittest_inference.py"", ""ChangeLog"", ""astroid/tests/unittest_object_model.py"", ""astroid/objects.py"", ""astroid/brain/brain_builtin_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-07-30 12:46:33","Added tag astroid-debian-version-1.0.0-1 for changeset aeb398869afc","0d829e6d17b915421cf39897fe528ff029fe39ab","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-22 09:26:12","remove usage of decorator to restore py2.3 compat

--HG--
branch : stable","0d91bc7550005785b46d920a595e8f793bf30f6b","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-11-09 08:55:14","test fix","0dd07304af0f8d0ebff713f989f57924b091f2d9","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-11-23 12:55:41","minimal subscription and loop inference","0dfe396a27afb8771be045c9044e660046140392","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-25 15:55:08","move default infer method to NodeNg

--HG--
branch : rebuild","0e0a115601ebbbaace352003299573450a4f1b31","","api.github.com,git_clone","[u'[""inference.py"", ""_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-04-25 21:43:47","Add future imports to Module.future_imports.","0e131af59e62e3730f85699041a4785695bbe906","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""builder.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 17:46:31","use _ast recursive representation for If nodes

--HG--
branch : _ast_compat","0ea46878c067f8d8bba90b847dd5a201fb872fa6","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""nodes_as_string.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-03-01 10:11:17","Raise InferenceError in Class.getitem. Close #395","0ec2bb51062520983d68206a71f635694a9373a1","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[{u'raw': u'#395', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'395', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-02 06:57:36","Add support for inferring methods masquerading as others for the binop protocols.","0ef9c937732cc29fdf063f896a090ec10287dea3","","api.github.com,git_clone","[u'[""astroid/inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-23 11:49:27","Remove the useless __docformat__ variable.","0f3cb07fda484d77d3c1ae03dda07132e06a16ee","","api.github.com,git_clone","[u'[""astroid/nodes.py"", ""astroid/raw_building.py"", ""astroid/modutils.py"", ""astroid/manager.py"", ""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 13:27:36","little cleanup

--HG--
branch : _ast_compat","0f41127903d544b14b68bee99d8752258b031125","","api.github.com,git_clone","[u'[""builder.py"", ""utils.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-13 16:12:12","Use the name of the operand for UnaryOperationError.__str__.","0f44b7e0e95684fe5b2a89ad1ae8f5c4d7cd839a","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","invalid-email-address","2015-04-24 08:21:23","remove set_context line","0f47d84443b7e459eb23afeee9bc0e5c02e4560c","","api.github.com,git_clone","[u'[""astroid/utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-07 09:06:31","#3670: subscription inference crash in some cases","0f580df4b28ea60de24f329fb333f05b4e36cfd3","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#3670', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'3670', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-12-04 09:37:33","Add brain definition for most string and unicode methods","0f59fea9baf829f2b178bd176878d0cecda90dee","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-20 20:58:36","Added tag astroid-1.3 for changeset a92a2a2b7c0e","0fb16471853b9f674c11e90b7fcc8a80ced82c0d","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2009-08-27 07:44:39","copied debian.lenny to debian.intrepid","0fc5da8baded0282663f62ae1fa449d453acc7cb","","api.github.com,git_clone","[u'[""debian.intrepid/preinst"", ""debian.intrepid/rules""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-04-12 07:57:21","2.3 test fixes","0fd5b636cbbf9441f06a6aaba72768fc30c93c6d","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-03 11:12:55","fix visit_assign checks for class/static methods

--HG--
branch : _ast_compat","10148fcd11ed6200ce0cd599bd315e59000a03c8","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-15 17:31:00","Added tag logilab-astng-debian-version-0.21.0-1 for changeset 8c96858bbfa6","107d160bb9ed494acc316bf64c4d996581bf6550","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-07 08:33:48","py3k: keyword ""cmp"" for list sorting is removed in 3.x","108363a220a5bc27b96bab4811e130fdcc48fa0d","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-14 11:26:16","UnaryOp as string : just use a space in case of 'not'

--HG--
branch : rebuild","109ad6e2e54d3013d4c76bb90ee92343c573307a","","api.github.com,git_clone","[u'[""nodes_as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-25 07:41:30","Don't use 0 and 1 anymore.","109dc2640c1e01a83f8076b52321bcdec033af08","","api.github.com,git_clone","[u'[""modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-14 17:44:57","[R] modify __bases__ instead of using the ""extend_class"" function
 *  avoid mixing oldstyle / newstyle : all classes inheritate from Proxy_
 *  add ""Instance"" class to the bases at the right place","10cd852a04181d95dece6e1f93d9859610c733c7","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes.py"", ""node_classes.py"", ""inference.py"", ""lookup.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-02 16:50:56","py3k: fix some obvious stuff","10f72783077d5ceaa90944e19e54acb5af9bc0ba","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""node_classes.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-08-13 10:48:51","Change metaclass discovery.

--HG--
branch : metaclass","1100458bb85aadbf49ad5c08ec43f75995bac1f5","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","julien.jehannet@logilab.fr","2009-07-20 18:40:15","[lenny] --install-layout not available","110acf80d6f1c199ebcc7ebe57c61d8fde312dcb","","api.github.com,git_clone","[u'[""debian.lenny/rules""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-14 19:26:06","replace some leave methods with delayed methods; further small fixes

--HG--
branch : rebuild","1117640f153008891574212fe2ba149722754675","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-12 17:06:03","py3k tests: have same tree for 2.x and 3.x","11187f5a3adb390329b628acf658d11245dc5bfc","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-07-24 15:24:14","Return a string depicting the metaclass, not the metaclass itself.","11852fba151b9d1bff2f262be743925052a91ddd","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-07-08 16:11:04","test and fix relative import inference pb, detected with python 3","11886551cfdcf969f0a661f8ab63c1fa1a6dd399","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-03 11:02:23","Merge pull request #339 from jwilk/spelling

Fix typos","119c8c6a70a166283b2f0cd5cfa18b45d8592ab9","","api.github.com,git_clone","[u'[""doc/source/inference.rst"", ""astroid/tests/unittest_inference.py"", ""astroid/brain/brain_namedtuple_enum.py"", ""astroid/tests/unittest_regrtest.py"", ""ChangeLog"", ""astroid/modutils.py"", ""astroid/test_utils.py"", ""astroid/tests/unittest_protocols.py"", ""pylintrc"", ""astroid/raw_building.py"", ""astroid/tests/unittest_nodes.py"", ""doc/source/extending.rst"", ""astroid/mixins.py"", ""astroid/node_classes.py"", ""astroid/inference.py"", ""astroid/tests/unittest_transforms.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/brain/brain_gi.py"", ""astroid/as_string.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[{u'raw': u'#339', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'339', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-24 14:15:19","merge with stable","11a308e0212d45b0d24b3384d39e8c0e6f5b254f","","api.github.com,git_clone","[u'[""inspector.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2008-05-13 10:24:51","merge","11bad6e288e4da559d45110046d380a9d9c54d6f","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2016-07-23 19:33:07","Fix double spaces in warning message (#349)","1207e112bbe14f01e78204f20cbe27c499e3c383","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[{u'raw': u'#349', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'349', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-07 17:38:02","[R] use __bases__ as list of node extensions","1269786cadbe70683a53724179ec2d2f05efc211","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","dashea","2015-07-08 14:43:10","Duplicate calls to gi.require_version.

gobject-introspection uses gi.require_version to choose which version of a
library to import from gi.repository, and pygobject now issues a warning if
gi.require_version is not used. Find calls to require_version and duplicate
them in py2gi.py so that the version data is present in the context of the
import.

--HG--
branch : pygobject-require_version","127cabb812041fe5252f2e56a7467f5c03cea34b","","api.github.com,git_clone","[u'[""astroid/brain/py2gi.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-14 16:29:02","Prepare 1.3.6 release.","12a6f507f0490ac5b69a2adbdf8ba1119d523ae3","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-18 20:06:22","Add the new file in the project files.","12b1aefc6045eb3d2b1e4beb35befd8a4b1dbf63","","api.github.com,git_clone","[u'[""astroid/rebuilder.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-04-02 17:32:47","Support rename=True in named tuple inference (#415)

Fixes PyCQA/pylint#1367
Fixes #351","12b673267dce7c899ca384792386ed9b657fe66a","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/tests/unittest_object_model.py"", ""astroid/brain/brain_namedtuple_enum.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#351', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'351', u'']}, {u'raw': u'#415', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'415', u'']}, {u'raw': u'PyCQA/pylint#1367', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1367', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 14:15:37","don't catch SystemExit / KeyboardInterrupt

--HG--
branch : _ast_compat","12c1ff899732f902a8f2563c1dc28132a8469afe","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-06 21:02:04","Add a more complicated example with regard to binary operators inference.","12cfa3c7d6826e71ea4b35d90ad516d6bf247a29","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-19 19:12:17","Enums created with functional syntax are now iterable. Close PyCQA/pylint#992","12de5c7222e0982f2220bd361a5482d46bd57bff","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_namedtuple_enum.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'PyCQA/pylint#992', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'992', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-19 10:01:31","test and fix line numbering for py2.5 For/While/With/TryExcept/TryFinally/With

--HG--
branch : _ast_compat","133b75d9ddd81c985035b1f69d119dc0055af221","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-22 20:55:27","Remove trailing whitespace.","13bedade732e58731ec7c3b9632c902ed11c0a93","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 15:58:50","fix parent for some nodes; add a _check_children helper function

--HG--
branch : rebuild","13c8cb6bf539e411f4c2913fe04648b4d947565c","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-14 22:27:20","Fix issues found in code review","13d62e91b318a0e96be977717a8f2f3d73d4bcc6","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/bases.py"", ""astroid/tests/unittest_objects.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-11-19 07:22:18","add XXX note","13fe47ebb5d5a8f8964b79a5bfe87073d2b21b60","","api.github.com,git_clone","[u'[""astroid/manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-12-18 14:25:08","0.19.3

--HG--
branch : stable","143223c00ca3cf56f96ed7f0a7bcfcadedf7c181","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-27 17:24:18","Add more up-to-date package information. Close #330","143353b04f0da46dbbc9cf71dd2999ec497645df","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[{u'raw': u'#330', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'330', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 09:05:34","a bit of reorganization (this is still a mess, we need more...)

--HG--
branch : _ast_compat","14502c5254e47d15c3165147e3cfda62c1cfa964","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-26 08:55:57","Remove trailing whitespace.","145eba7763c64bbfca5f08eff4c3c54db6cdd1b2","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-05 23:02:23","Remove trailing whitespace.","1467ad2fc844ac35275cec9d715a73a6cc6e4f33","","api.github.com,git_clone","[u'[""astroid/tests/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-04-08 12:07:46","fix crash when class has some __call__ method that is not inferable. Closes #17","147e785eb915d8ae7e8dcad334a7b6f6a8f769be","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""bases.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#17', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'17', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 15:44:59","new is_argument method

--HG--
branch : _ast_compat","14b9c6b2353f7110fcea264a52bd9556b71458c8","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-09-23 10:19:11","python 2.5 support, patch provided by Marien Zwart","151b0423f72506f17237885dd159c8a5e4933bca","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""raw_building.py"", ""__pkginfo__.py"", ""test/unittest_inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-18 19:08:50","The slots() method conflates all the slots from the ancestors into a list of current and parent slots.

We're doing this because this is the right semantics of slots,
they get inherited, as long as each parent defines a __slots__
entry.","152087df64cf0ce60dd518f7afbd62e68ac41e80","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-07 08:41:40","fix #3651: crash when callable as defaut arg","15267a0623a1bc798add06154fb5bf874c067a36","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""inference.py"", ""test/unittest_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#3651', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'3651', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-05 19:40:41","Changed the API for Class.slots.

It returns None when the class
 doesn't define any slots. Previously, for both
the cases where
 the class didn't have slots defined and when it had an empty list

of slots, Class.slots returned an empty list, which is ambiguous.","1527165f2b2324aff85bdca7d33bab37534829ed","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-12-15 12:02:29","Master is now 2.0","153b68a18cc1f0fb9604f1f6a6bdeb90df88f207","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-08-01 15:41:29","default is stable

--HG--
branch : stable","155a65f2872fbe870e08505209f9f890264f564d","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""ChangeLog"", ""test/unittest_python3.py"", ""MANIFEST.in"", ""__init__.py"", ""bases.py"", ""brain/py2stdlib.py"", ""node_classes.py"", "".hgtags"", ""__pkginfo__.py"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-11-11 11:45:05","Add pypy support for Python 3.3 in tox","15771d691d2dedadf70e1963285abe1017bd8c42","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-18 10:35:23","fix infer_global bug","15ac580ee2dd791c93f90875e70bd7cbfa216058","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-20 17:55:39","add Delete node for Ass* nodes in Delete context

--HG--
branch : rebuild","15d40aca46aa8e68fcb90df4e2e843c394dfcadc","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-15 15:44:35","[R] rename Proxy_ to BaseClass","15e7aad2d0ca47b8d8c3b56d6fef327d3b295e5c","","api.github.com,git_clone","[u'[""infutils.py"", ""_nodes.py"", ""_nodes_compiler.py"", ""node_classes.py"", ""_nodes_ast.py"", ""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-02 09:25:07","python2.7: test and fix as_string methods","15e9c4e353f7bb7c4d1df6b4aaefa0d6156e4943","","api.github.com,git_clone","[u'[""as_string.py"", ""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-04-17 11:30:53","Fix lint","1602965b4ef3ce54807de425bfc5bb2073d0c4d8","","api.github.com,git_clone","[u'[""astroid/manager.py"", ""pylintrc"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-10-12 10:47:12","Fix the remaining lint errors","1602d9989ce74773bd5d7f2d0d76861eb210d227","","api.github.com,git_clone","[u'[""astroid/util.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-11 13:53:00","fix building from living object: content of container should be turned into ast nodes","1617a8ea349cebaaa98505b3c0c6c3f3e39768f7","","api.github.com,git_clone","[u'[""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-07-31 12:13:10","Maarten patch update","16197bb28dcdeb4165ce4c846487997db1d55521","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-02 16:35:38","delay classmethod/staticmethod/__metaclass__ detection to leave_ hooks so we get an unified tree, not _ast/compiler specific

--HG--
branch : _ast_compat","168ad0af6a9dcac6ad66772e2429a97abe896170","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-20 21:45:54","Add verbose test logging again, there are still test ordering failures on Python 3.","16ceee118f3543258a05c38afba74787d235c375","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-03 10:54:08","Skip objects which aren't callable when inferring an instance's call result.","16e13e67cd6b79c903cd7042291f49c2661fb1a3","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-12-04 11:37:04","[brain] move code from py2stdlib to builtin_inference","16fb756f57ff43f0a8cf5b379c0dbcf5f576f80a","","api.github.com,git_clone","[u'[""astroid/brain/builtin_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-08-25 14:40:54","__bases__ and __mro__ handling","1715cb1a4892d1edb088d842e29d33219f070558","","api.github.com,git_clone","[u'[""builder.py"", ""scoped_nodes.py"", ""test/regrtest.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-30 11:25:34","Import test from pylint regarding a crash that used to occur a long time ago.","1770e6a2d981e2de8066b5198733f97b231ce1b1","","api.github.com,git_clone","[u'[""astroid/tests/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-02 13:05:07","remove all unnecessary delayed methods

--HG--
branch : rebuild","1792b0ed5ab7149e97bb9fa25a9e566381a09227","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-05-13 10:12:50","GeneratorExit should be explicitly catched to avoid yielding additional values","179594db3d8f91a7b506dcee8a0adfde5df3eec8","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 17:08:18","fix insertion of Delete statement w/ subscript

--HG--
branch : _ast_compat","17975394df655f49615739061075ba2ffd5b032a","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-08 23:10:25","Print some diagnostic data to find out why tests are not running on drone.io","17affb749d99dce10801ed0b0541c3561105c0bd","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-04-25 11:33:10","[pgkinfo] update project's url to bitbucket and kill deprecated ftp","18168efe72de77ef6033340ab38c5de4c10668f1","","api.github.com,git_clone","[u'[""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-29 08:02:53","merge with stable","1851f372f12e162e74664b5b43ee8dbaa3813f7e","","api.github.com,git_clone","[u'[""README""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-09-21 20:33:32","Add helper function for reraising exceptions","18fc67e6f514daf584137e20857ebd4ef22aa3ad","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/builder.py"", ""astroid/decorators.py"", ""astroid/bases.py"", ""astroid/test_utils.py"", ""astroid/util.py"", ""astroid/scoped_nodes.py"", ""astroid/mixins.py"", ""astroid/inference.py"", ""astroid/objects.py"", ""astroid/manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-21 11:54:22","Merge pull request #298 from PyCQA/fix_modutils

Add /usr/lib and /usr/lib64 to the list of stdlib paths","196fd3458e32f0d4ba38a34b9ec8cf786cd50f12","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[{u'raw': u'#298', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'298', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-09 20:15:19","Cleanup a couple of comments, add spaces.","197072f7ec489c70fe0c7952281e74a0fc92cfff","","api.github.com,git_clone","[u'[""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-11-04 10:54:15","Backout changeset 9c3f71, because it leads to too many false positives when using .split() in assignment unpacking.","1978860578c2c111f1cfa3345803c754c6aa93fd","","api.github.com,git_clone","[u'[""astroid/brain/brain_builtin_inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 09:11:16","test Ellipsis node

--HG--
branch : _ast_compat","199febc60a2f993705c65c5101bab3de6b4db0c2","","api.github.com,git_clone","[u'[""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","Lothiraldan","2012-07-25 11:04:28","Make Starred node extends ParentAssignTypeMixin as it can be part of Assign ast node in python-3k. Closes #83138.","19abe20cac050e5dc059fbd8cfec2277a01d0c13","","api.github.com,git_clone","[u'[""node_classes.py"", ""test/unittest_python3.py""]']","False","[]","[{u'raw': u'#83138', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'83138', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-25 10:16:00","fix #18953: inference fails with augmented assignment","19b5af02304e3339fdd2a26cfafc337960eeebce","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#18953', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'18953', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-08-20 08:00:25","sign and date

--HG--
branch : _ast_compat","19dc09cab4fd36f036174aa33ea967e07bab96c8","","api.github.com,git_clone","[u'[""README._ast_compatibily""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-10 16:53:05","Try to fix the caching problem in tests.","19e5185a619a47b857b868b34d787e42206e1bea","","api.github.com,git_clone","[u'[""astroid/tests/unittest_python3.py"", ""astroid/tests/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 14:31:53","typo","1a3ae545d823189b2fb44a4ba255f4a1a4e3d109","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-25 08:23:16","Skip a test on Windows and Python 3.","1a4198ea9b1d5ad9f1eef59f8f3639f098f68e6b","","api.github.com,git_clone","[u'[""test/unittest_modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-09 14:20:53","Add Changelog entry for namespace packages.","1a757073de2d0ca31af41c1470dcf09ad7d7f334","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-01-28 09:09:18","Don't go through relative_to_absolute_name if the module is not a package. Closes PyCQA/pylint#1084","1a9721ec74f586bccdc9d88c7b85bfa0ec34155d","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[{u'raw': u'PyCQA/pylint#1084', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1084', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-20 12:25:57","Simplify a test.","1aaa7dce165618bd4f28f0d1c0abf8544c65d684","","api.github.com,git_clone","[u'[""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-03 08:31:04","[C] ID_RGX never used","1ab963c638f896daf2a567be61aab4a7725c267f","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-11 14:07:38","cleanup","1aca7ac14eb78a65fa6b6cceb76b3a3e7a9cf711","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_manager.py"", ""test/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-26 08:39:43","delayed_assattr should be done at last; there are no more leave_ methods

--HG--
branch : rebuild","1af465dcb3bec6c57e6aa6c769179e9b44d5904e","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-10-07 10:25:34","0.23","1b181e534723555e5f0e1e158800643d4cb4d510","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-07-23 19:04:55","Add missing parameter to underlying bound method.","1b25fbaccb69651a11e220fc9e50e86cd3ac8d64","","api.github.com,git_clone","[u'[""astroid/brain/brain_functools.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-11-01 10:52:11","Correct the generator comprehension to return Instances only when the element is not Uninferable.","1b34d34e87a014d1ad96263169b25ecf34e900cb","","api.github.com,git_clone","[u'[""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-02 05:10:54","This bookmark adds structured exceptions to astroid.

Major changes:
* AstroidError has an __init__ that accepts arbitrary keyword-only
  arguments for adding information to exceptions, and a __str__ that
  lazily uses exception attributes to generate a message.  The first
  positional argument to an exception is assigned to .message.  The new
  API should be fully backwards compatible in general.
* Some exceptions are combined or renamed; the old names are still
  available.
* The OperationErrors used by pylint are now BadOperationMessages and
  located in util.py.
* The AstroidBuildingException in _data_build stores the SyntaxError
  in its .error attribute rather than args[0].
* Many places where exceptions are raised have new, hopefully more
  useful error messages.

The only major issue remaining is how to propagate information into decorators.","1b3a23614a3648978e8ed6258280f661caf73690","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_objects.py"", ""astroid/protocols.py"", ""astroid/helpers.py"", ""astroid/manager.py"", ""tox.ini"", ""astroid/util.py"", ""astroid/bases.py"", ""astroid/arguments.py"", ""astroid/brain/brain_six.py"", ""astroid/node_classes.py"", ""astroid/decorators.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/objects.py"", ""astroid/builder.py"", ""astroid/brain/brain_builtin_inference.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_brain.py"", ""astroid/mixins.py"", ""astroid/brain/brain_gi.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","brycepg","2017-12-30 19:53:50","Use latest release of pylint for linting instead of pylint master due to astroid version conflict","1b3ae1e3d55dcd93a56ac99c1fac9cc4bd3d4387","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-25 15:54:07","The nodes module contains only the new classes

--HG--
branch : rebuild","1b6a9dd4fb30e429a75dfe4c7d0c9b8ac7904176","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-01-28 07:56:25","use join","1b943acfb8ede52a1e7251c81e13b727fc42da0b","","api.github.com,git_clone","[u'[""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","flagist0","2014-11-13 08:22:41","Assign module path in TreeRebuilder.visit_module, as otherwise transformers
which are run by it won't get module path (it's needed to determine if transformer has to activate)","1bb9a3e9fb187aab73656255c612890986aab5a4","","api.github.com,git_clone","[u'[""astroid/rebuilder.py"", ""astroid/builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-08 09:33:55","tests: move general as_string tests out of ImportNodeTC","1bfd055441923d806b533eca4676db9408845cf3","","api.github.com,git_clone","[u'[""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-15 08:39:11","[R] remove 'extend_class' function","1c0faa2329eace8099cec54c3d5c1645cb879630","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-03 15:02:35","factorize Break node visit

--HG--
branch : rebuild","1c34df98f97aff525d3b9b459118e9914edb5ca9","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-10-20 14:58:02","Add missing pytest plugin. Patch by Robbie Coomber.

This was added at some point in pylint-brain, but we lost the plugin
after moving pylint-brain at last in astroid.","1c5cab5ce9c6bf5c2a161748d03a5fa44a69e15e","","api.github.com,git_clone","[u'[""brain/py2pytest.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-09 18:08:46","Raise an InferenceError when having multiple 'as' bindings from a context manager, but the result doesn't have those indices.","1c5e3c54b61140362ba55df9b5610def83d98b12","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-16 23:03:42","Added tag astroid-1.3.4 for changeset 912ee5c11020","1cb0066ff2df47303d693053feeeb5d9475ce980","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-25 14:55:00","we don't need to pass ast_mode to Treebuilder

--HG--
branch : rebuild","1cc5ebb248cbe36ed0260e85325df0090cb8db2d","","api.github.com,git_clone","[u'[""builder.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-03 11:18:31","Suppress deprecation messages.","1ce036d0e4a8f5db257aaf3e2dc810ea33b1a39a","","api.github.com,git_clone","[u'[""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-18 19:59:52","Add the ability to optimize small ast subtrees.

The first use of the AST peephole optimizer is the optimization of multiple
BinOp nodes. This removes recursivity in the rebuilder when dealing
with a lot of small strings joined by the
 addition operator. which are
now precomputed to the final string. Closes issue #59.","1cfd85c6ecb113e049af052acfb47b3430085ff2","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python2/data/joined_strings.py"", ""ChangeLog"", ""astroid/tests/testdata/python3/data/joined_strings.py"", ""astroid/tests/unittest_peephole.py"", ""astroid/rebuilder.py"", ""astroid/astpeephole.py""]']","False","[]","[{u'raw': u'#59', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'59', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-02-26 22:05:42","0.24.2","1d0c9785626507643fdb2216071902d4d2d358e9","","api.github.com,git_clone","[u'[""debian/changelog"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-07 00:34:46","Make import in the inference unittest from the right package based on the Python version.","1d36a2b30403fc71fb8c4803caae3cdd4d6ffb74","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-07-25 14:14:54","Remove logilab-common dependency.

--HG--
branch : no-logilab-common","1d859256a5f90f4885565fab32ea86cb12fa2788","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-16 14:16:26","bug: module's locals is module's globals

--HG--
branch : rebuild","1db8ac401fb68d8d860bc071865f6d880148d7e0","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 09:09:55","missing astng fields declaration for Ellipsis node

--HG--
branch : _ast_compat","1dc5e9a49359a7d59fa7b5645050a1f2c839aa0d","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-02 10:15:12","cleanup: BaseClass is no more needed","1dde1727e2b6ec58e8940c9e6677ea76da3d3489","","api.github.com,git_clone","[u'[""mixins.py"", ""scoped_nodes.py"", ""node_classes.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-06 09:27:38","py3k: skip wrong line number related to python bug","1de5f5715a0480f383a1efef0643c5f01a1c2964","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","marienz@gentoo.org","2007-03-02 01:48:07","Skip the pylint test if pylint is not available to avoid a circular dependency.","1dfcd74a23c67b014052989c69558d4410633f01","","api.github.com,git_clone","[u'[""test/regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-22 14:50:02","Prepare the 1.3.2 release.","1e07b0ae7778f6cff88758d30b94e4bdcb419c19","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-13 12:42:58","backport stable","1e68c66f949117f74a9c8f6cbda738b3b794bb45","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""ChangeLog"", ""_nodes_ast.py"", ""rebuilder.py"", ""_nodes_compiler.py"", ""builder.py"", "".hgtags"", ""__pkginfo__.py"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-03 17:07:50","handle Invert node as UnaryOp

--HG--
branch : _ast_compat","1e71a650d592cee9a829244ab2ed207cc6a9ddab","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""utils.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-06 11:51:22","Remove trailing whitespaces.","1e7735333910a0517b4642ab45bd97d348592d8b","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-07 09:11:03","[B] remove wrongly introduced method","1e968b236f6d3c0349c8796149e7c59250324e8f","","api.github.com,git_clone","[u'[""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-01 09:26:11","a sketch of the new Rebuilders including '# XXX old code'

--HG--
branch : rebuild","1e96ea4167cef70ea1c1f0ca936b6c50de1fd7d0","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-19 20:48:30","Update the list of disabled messages.","1e9760e7191162d4da7278f851b6d1b385e7d76d","","api.github.com,git_clone","[u'[""pylintrc""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-22 07:14:35","Merge with default.

--HG--
branch : ancestors","1ea8b6eeffa163666967fa26ae65e33cb3ace99b","","api.github.com,git_clone","[u'[""ChangeLog"", ""test/unittest_inference.py"", ""inference.py"", "".hgtags"", ""__pkginfo__.py"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-10-16 06:26:34","Add support for the wheel format. Closes issue #48.","1ed485519d63e3fa9cd87cf336f39445d3488396","","api.github.com,git_clone","[u'[""doc/release.txt"", ""setup.cfg""]']","False","[]","[{u'raw': u'#48', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'48', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-08-22 20:24:36","Guard against infinite recursion in _is_metaclass.

Unfortunately, I wasn't able to boil this down to a small-enough reproduction case, since
the case that I had depended on conditional imports.","1eeeb23a1813b5836ca1c5e852785f7c5feddb1f","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2008-09-10 12:15:18","Added tag logilab-astng-debian-version-0_17_3-1 for changeset a8afb875d806","1ef45205b0fcbe81f164c270270315f17db1352f","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-18 17:51:45","Use the new name of the AsStringVisitor.","1f3de3597ac6a60a8eddbad85ec6ef5870cd6e8e","","api.github.com,git_clone","[u'[""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-22 22:25:00","Patch astroid_cache in unittest_regrtest.setUp with the current builtins module, to prevent crashes when it's missing during tests.","1f6e4d633932f938224dbdf40fb29efb41ba0c10","","api.github.com,git_clone","[u'[""astroid/tests/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-09-02 17:01:42","remove sys.path.insert from project_from_files
This method is only used by Pyrevevers and we have to insert the
cwd to the PYTHONPATH there.","1fbb30774758b0e4056f3617cc0d7a51ac1247fa","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-12-15 08:51:52","Make attr.ib attributes instances of Unknown, not of Attribute

It does not make sense to have these as Attributes, since they aren't inferable per se.

Close #469","1fc60192e18c45dd5f2d2c7ffa40f2e7659399b6","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_attrs.py""]']","False","[]","[{u'raw': u'#469', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'469', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-12-18 11:32:19","Remove occurrences of no-else-return and consider-using-ternary","1fd67174a0769c467108236362ba53d98753a06c","","api.github.com,git_clone","[u'[""astroid/context.py"", ""astroid/test_utils.py"", ""astroid/raw_building.py"", ""astroid/scoped_nodes.py"", ""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/builder.py"", ""astroid/transforms.py"", ""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-10-07 14:48:47","Added tag logilab-astng-debian-version-0.23.0-1 for changeset 8b510baa9baa","2066c9fa61a6797ef3ffa891acf0b1e33db41506","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","AWhetter","2017-10-16 04:25:40","Public facing node documentation","206b4f4494e4ac4f5fe98a85381c63da24901970","","api.github.com,git_clone","[u'[""doc/index.rst"", ""doc/api/astroid.nodes.rst"", ""doc/api/astroid.rst"", ""astroid/nodes.py"", ""doc/api/astroid.exceptions.rst"", ""astroid/scoped_nodes.py"", ""doc/ast_objects.inv"", ""astroid/protocols.py"", ""astroid/node_classes.py"", ""doc/conf.py"", ""doc/api/base_nodes.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-27 11:09:54","remove double visit_str, visit_num

--HG--
branch : _ast_compat","206ca2098f4efa1e25f343ab84a054a87edff357","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-02-22 12:57:47","Don't crash when inferring nodes from with statements, with multiple context managers. Closes #18.","209ac5e51f3a7d1ee8f07dad17b6d35cba70137b","","api.github.com,git_clone","[u'[""test/unittest_regrtest.py"", ""protocols.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#18', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'18', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-08 08:06:59","open doesn't have a __module__ attribute on Jython. Handle this case.","20fec97948c53cb61e01a7ce0569f708082ff8e2","","api.github.com,git_clone","[u'[""astroid/raw_building.py"", ""astroid/tests/unittest_raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-07 08:57:50","fix some more _ast rebuilding

--HG--
branch : rebuild","21031c24049d189d9b2290306be5ff0c1590bd47","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-05-11 13:07:06","Added tag logilab-astng-version-0.20.1 for changeset f7b51764cde6

--HG--
branch : stable","2118b5f1b4fa5612903c3c8b4cb30c1c6b759aa8","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-28 13:47:55","py3k : introduce Starred node","215f5df431c2d213bfeb250f575dbec806678149","","api.github.com,git_clone","[u'[""nodes.py"", ""as_string.py"", ""node_classes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-13 08:53:01","Merged in PCManticore/astroid/args_fix (pull request #30)

Fix argument search for methods and classmethods.","2195d72ae7a41d740d26c652e46bc7f1f70a245f","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py""]']","False","[]","[{u'raw': u'#30', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'30', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-03-23 09:36:51","quick fix crash on case where __all__ is imported from another module","21d168d46450f0bdc85da731ed5765662e029a62","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","arusahni","2015-12-10 11:37:34","Port hgignore to gitignore.

For future iterations, we should switch to using pre-canned ignore lists
from https://gitignore.io.","21e06cccd59415a1bdf90a70e24b3fe0977ea743","","api.github.com,git_clone","[u'["".hgignore"", "".gitignore""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-10-28 14:45:52","Extend the inference of __all__ elements in wildcard_import_names.","22181e2b6ebaf3f6c4739188fd187069e11c661b","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-29 14:36:31","Mark an unimplemented test as an expected failure.

Do this in order to be visible that something is not implemented
and it is expected to fail.","222a0f04a76af6358f542f559b15913e521f3ec9","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-05-21 15:29:15","Merged in PCManticore/astroid/classmethod_subclasses (pull request #36)

Function nodes can detect if they are decorated with subclasses of builtin descriptors when determining their type (`classmethod` and `staticmethod`).","22610531a73df7fd66305c1166263855a9314a8b","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""rebuilder.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#36', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'36', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-02 15:02:46","Use a check on sys.version_info instead, to accomodate for Python 3.3","22722a563be489993abacca214d3b231ff249e36","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-06-25 11:35:46","fix _format_args, args may be None while default isn't","22d5df3a8cac4dbfc4fc7108f5e909d0df0bd8a6","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-03-28 07:53:41","[cleanup] don't call const_factory with astng nodes

--HG--
branch : stable","22e37ca5352d256103c0887908890c76826bc5f1","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-26 21:16:41","Remove trailing whitespace.","22f3b25c1898a32d81a5c4bf8c2b60d144d701f0","","api.github.com,git_clone","[u'[""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 14:02:14","Added tag logilab-astng-debian-version-0_18_0-1 for changeset 737d960676f3","22fe1b121351f7a01d70b4146e8603f3ccaa8f08","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-03-04 07:29:46","Drop yield_from API, add a new YieldFrom node instead.

--HG--
branch : yield_from","230bf69325eef9c58a24db614c2a104638b6fbeb","","api.github.com,git_clone","[u'[""rebuilder.py"", ""nodes.py"", ""ChangeLog"", ""test/unittest_python3.py"", ""node_classes.py"", ""scoped_nodes.py"", ""as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-06-18 15:42:00","namedtuple support using extended transformation function features. Closes #8766","235d2a18b0bf345c04d54dbcd4443f202231e253","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""test/unittest_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#8766', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'8766', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-02-03 09:08:00","Workaround for _io module, having __module__ as `io`.

--HG--
branch : nameconstant_py34","235f4b8931432884a6d10d365e52581e7223de55","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-11 13:13:06","Make the first steps towards detecting type errors for unary and binary operations.

In exceptions, one object was added for holding information about a possible
UnaryOp TypeError, object called `UnaryOperationError`. Even though the name
suggests it's an exception, it's actually not one. When inferring UnaryOps,
we use this special object to mark a possible TypeError,
object which can be interpreted by pylint in order to emit a new warning.
We are also exposing a new method for UnaryOps, called `type_errors`,
which returns a list of UnaryOperationsError.","23600f0202f8789e6701cc5dfdbce85e34a867c6","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""astroid/tests/unittest_inference.py"", ""ChangeLog"", ""astroid/protocols.py"", ""astroid/node_classes.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-30 23:44:43","Pin dependency of logilab.common to 0.63.2 for now.","236111323d59b98d3b1a231296273c7d2dfc239a","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 13:43:21","improve repr_tree and had a repr_tree method for nodes","23731ff0a3d4b8d4fd9f678d8ba4c00a6df7500a","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-25 18:28:50","Use specific assert in test, remove a required version.","2399043186f5424e83005c128cc017a260fadc44","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""test/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-25 16:54:57","remove all getChildNodes

--HG--
branch : _ast_compat","239e3d7564437e2ab840aea820214b384cd1b431","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""test/unittest_inference.py"", ""lookup.py"", ""manager.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-07 12:59:17","Remove a couple of useless TODOs.","23b6b8aa5361ab380acc6e8e124e795c823c3c6c","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","eevee","2014-03-21 21:47:46","Avoid an (expensive) exception in transform.","23dbb7c237fb7cf963c809bd33a3c3d2361a6102","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-04-30 12:09:07","Don't crash when a decorated method has the same name as the decorator, which is a builtin object (a property)","23e59f817bb2fe994e35d64bf06f0234af32053b","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_regrtest.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-24 08:05:26","Use the with statement to prevent resource warnings.","23ef32ac1627f160b2bef43645a7d7a00faee8ff","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 12:39:30","py3k: fix borg test","240a0268fa57fecba83686f43e80cfbd1490424d","","api.github.com,git_clone","[u'[""test/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-07 15:31:32","[R] move NodeNG, StmtMixIn, BlockRangeMixIn to _nodes.py","242a537c12af07aae4a1e1cc10fe728bf0ebe36b","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-07 09:51:30","Understand metaclasses added with six.add_metaclass decorator. Closes issue #129.","2444ab4b230d7d466cae383fe2225f4c5c5fe0e0","","api.github.com,git_clone","[u'[""astroid/brain/pysix_moves.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#129', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'129', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-01 11:20:24","Set the current function as parent for the Generator object inferred from `infer_call_result`.","2457ff92c02f7c98f0d488d3d82b3df2c04e367d","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","adimasci","2007-08-16 14:07:36","fix module inference bug","24a4ce568c3112913a22cae91a91396822b0cce9","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-14 00:12:11","Fix zip_import_data for Windows.","24a5cb1af5143bd704e023ff4937d705687596de","","api.github.com,git_clone","[u'[""astroid/manager.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 14:24:43","don't need to rebuild the tree each time in InferenceTC","24a6624acc5d4c63109be78e0874d8cdf7117656","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-23 16:12:56","From nodes have an attribute 'level'

--HG--
branch : rebuild","24af59c66acbf3c399614083212a83d099298655","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-09 15:38:50","fix #52006: ""True"" and ""False"" can be assigned

another fix: yield can yield nothing","24c1fb27e7cc025748e2e8406939c5bff82f13b0","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[{u'raw': u'#52006', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'52006', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-28 16:50:00","Support bytes as arguments for builtins like list, set and tuple.","24c221a630e0b3799e651c361005ad51bcaff84f","","api.github.com,git_clone","[u'[""astroid/brain/builtin_inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-17 16:25:56","compiler: fix Arguments line infos

--HG--
branch : rebuild","24c39e3880d6a1a11d3fb0a1416d6aa038997a2d","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 19:22:56","transform Name to AssName on AugAssign

--HG--
branch : _ast_compat","24d608a0c412c6ec02770361627565f34c3a851f","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-08 20:46:08","Add CallFunc.keywords, instead of putting together args and kwargs in CallFunc.args

This patch improves the similarity with the Python's AST. Until now,
CallFunc.args contained both the positional arguments and the keyword arguments,
which was misleading and always it was required to filter out keywords when working
with arguments.","24e5e1278c3e98c0cb1430cd04a3259a44a379bd","","api.github.com,git_clone","[u'[""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/brain/builtin_inference.py"", ""astroid/inference.py"", ""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-07-10 15:48:53","Refactor node classes to have constructors and change some names.

I corrected the spelling of 'infered' to 'infered' and changed some to
make them more consistent with the built-in ast module and to read
better in English.  I created aliases with proxy objects to maintain
backwards compatibility.

I also refactored the node classes so that they have __init__ and
postinit functions.  The postinit function has to be called after the
creation of a parent with the instances of its children because the
node __init__ functions have to take a parent instance to maintain the
doubly-linked structure of the AST.  This involved moving considerable
amounts of node-construction logic from rebuilder.py to
node_classes.py and scoped_nodes.py.","251f1e41ff98a86b9e14b064b116ad646dbb562b","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/bases.py"", ""astroid/tests/unittest_inference.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/nodes.py"", ""astroid/scoped_nodes.py"", ""astroid/brain/builtin_inference.py"", ""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","invalid-email-address","2015-04-26 09:37:14","add annotations to as_string method of Arguments","253ea2e5649654eb6b04b82480d7899e07dc24e9","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","lorenzph","2015-05-01 08:44:12","Ensure that generated enum values have the correct base classes

Enum values should share the same base classes as their defining class.
If this is not the case it may lead to wrong inference results when an
enum member is used - e.g. for the following snippet:

class X(enum.IntEnum):
    one = 1

print([1, 2][X.one])

pylint will detect a ""invalid-sequence-index"" error as the __index__
method of X.one is not detected.

--HG--
branch : enum-fixes","2548e981f8212cb2a11e2acce7e0de93b204177b","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_brain.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2009-07-02 08:11:27","updated contact address","25637c37d80b799af6ffed2a2c9f77122ac2b01b","","api.github.com,git_clone","[u'[""README""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-17 19:30:38","Clean the path importer cache correctly, do not nuke entries for the standard library.","2567e65146031c9dbf4b719e177f4dba082e7b0a","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/resources.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-06-25 11:31:58","fix so that defaults attribute of arguments node isn't None but an empty list","256f14f6c0c9cf1a1c84ae0b1fd038123fb41586","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-08-14 11:31:26","Add test for .as_string.

--HG--
branch : metaclass","2579966614a246ce3bb1bad67238f6a0b36f0ff6","","api.github.com,git_clone","[u'[""test/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-07-29 15:37:29","[debian] fix rules (no more a logilab'subpackage","25a6e43f067c2eb842c6acb2eb1909ba7b1775ac","","api.github.com,git_clone","[u'[""debian/rules""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-12 08:51:48","py3k: yet another little fixes","25e0960986903a5442d95a1519a4cfcd4a479176","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-12-08 16:37:40","test: don't depend on the way test is started","26054ab2b003b13fac7e7f509cec3dff42083ec9","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 08:03:50","Add locate child method

--HG--
branch : _ast_compat","261799287afe967a08c8b78eda8cffcf41070b25","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","GerardPaligot","2013-10-29 10:11:24","Update unittest_manager and add some tests for raw_building.py file.

--HG--
branch : dev","26277818675efa0aebb2a9eb617d516ced87d283","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""test/unittest_raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 05:56:36","d-t-w","2639c9df1fd1647ed003b42f45574f0cc8b43b6b","","api.github.com,git_clone","[u'[""nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-20 17:34:18","Introduce a base class for Set, List and Tuple in order to avoid code duplication. Closes issue #160.","267ed99da4f0482d4a964fc98dc6ad14d4bf77cb","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/node_classes.py""]']","False","[]","[{u'raw': u'#160', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'160', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-06-18 12:58:26","[rebuilder] visit_module is a particular visit function (main entry point), move it on top","2682f50ee379e7e6d7a0c5891ba7211fc8829ab3","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 17:31:41","modify test for If node

--HG--
branch : _ast_compat","26b13aaabaf9ef3cd4e94913d03b8ca397cda13f","","api.github.com,git_clone","[u'[""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-06-07 14:31:41","prepare 0.17.1","26ba7aab420892e1f03f3838b1c5b67cc9f99a91","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-12 17:08:51","AugAssign and Pass nodes are statements

--HG--
branch : _ast_compat","26c5c3e1849e814e1a258ad685e18befbb2b54b0","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","cpennington","2017-03-08 19:30:55","Add a test of binary operations on types with unknown bases","26d4c4de343ba74ae46838a7b4995dc180202652","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-25 09:30:20","no need for a TODO file, we've the tracker","26fe1fad35707c03677c63b5d947fe67aad7e48e","","api.github.com,git_clone","[u'[""TODO"", ""MANIFEST.in""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-08-22 20:16:30","Do not use deprecated assertion method.","2721b8efd9e2a22824ffb71916038a97b03b1826","","api.github.com,git_clone","[u'[""test/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-11 08:58:55","BORG : use the borg pattern for ASTNGManager, not singleton

Hence we can start breaking the circular imports","27399461aa3640831f1f6aaf853ffb876fd922b2","","api.github.com,git_clone","[u'[""test/unittest_inspector.py"", ""__init__.py"", ""test/unittest_builder.py"", ""builder.py"", ""inference.py"", ""test/unittest_manager.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-13 10:52:45","Support iterable of tuples as well as iterable of names.","273eb826f76fc19dd588f461b4dae0304f858ca2","","api.github.com,git_clone","[u'[""brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","anthony.truchet@logilab.fr","2013-07-29 14:30:31","[doc] Add atr's notes on inference and some TODOs","2793dec02f862d03ef23092a03c5f833b795d96d","","api.github.com,git_clone","[u'[""doc/source/conf.py"", ""doc/source/index.rst"", ""doc/source/inference.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-14 13:30:27","Class.slots raises NotImplementedError for old style classes.

Closes issue #67.","2808c3cf65a2660c4c28232ca48501cee7ce57c2","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#67', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'67', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-02-07 11:17:41","investigate why a non regression  test is failing. Answer: pygtk doesn't correctly fix __module__ on gobject's module objects (classic...)","282a9dc47d5dcf84396a631d04c64f0d1137532d","","api.github.com,git_clone","[u'[""builder.py"", ""test/regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-08 15:16:24","The func form of namedtuples with keywords is now understood

Close PyCQA/pylint#1530","28852aa3ac9a37b50f6b0fe8c215a3c601345caf","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_namedtuple_enum.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'PyCQA/pylint#1530', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1530', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-24 13:16:04","typo and comment for yield node ""asscontext""

--HG--
branch : rebuild","28935075abccecdfab3de2e0dd7fdf42cdae9992","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-29 13:09:56","Improve the detection for functions decorated with decorators
 which returns static or class methods.","28942c03a3317a32ebd9710a059a80175eb51a94","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-01-16 07:54:37","Make the compare only once.","2899329f569e425a34c105f66d556735a86d91b7","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 17:49:55","fix attribute names

--HG--
branch : _ast_compat","28b3b7b966616526b3b8977ae335307b388131f7","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""inference.py"", ""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-10-07 14:49:32","default is stable

--HG--
branch : stable","28c4fea1488a9a0763a4d2e27c99c5e7572323bd","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""utils.py"", ""rebuilder.py"", ""ChangeLog"", ""nodes.py"", ""debian/control"", ""bases.py"", ""__init__.py"", ""test/unittest_builder.py"", ""builder.py"", ""node_classes.py"", ""inference.py"", "".hgtags"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""test/unittest_regrtest.py"", ""manager.py"", ""as_string.py"", ""debian/changelog"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-27 08:14:37","custom rules necessary for hardy as well","28d96f1ac47b8b48e2bd9d42f8cd4cbb71cdac05","","api.github.com,git_clone","[u'[""debian.hardy/rules""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-01-15 12:13:33","Merge pull request #303 from mbdevpl/pkg_resources_fix

added 3 pkg_resources functions to brain","28e1fa07e0511234f18c34193cea6a6444e30659","","api.github.com,git_clone","[u'[""astroid/brain/brain_stdlib.py""]']","False","[]","[{u'raw': u'#303', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'303', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-08 21:16:44","Improve the understanding of arguments

This changeset introduces a better way to understand arguments
passed into call sites. The original logic was moved from
astroid.context.CallContext, which become only a container for
arguments and keyword arguments, to astroid.arguments.ArgumentInferator,
a new class for understanding arguments.","28ea8b3d8d476e6e74505b6017ad915967619bca","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/context.py"", ""astroid/inference.py"", ""astroid/arguments.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-27 10:48:12","Raise : visit_raise and init_raise ,

--HG--
branch : _ast_compat","28f7720b4b1957adde9ca97fdb1e633b5ec3b100","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-02-01 12:43:18","Merged in PCManticore/astroid/nameconstant_py34 (pull request #20)

Add support for Python 3.4","290b8359fbb4960b479798e6dbb53b7a1afba773","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""test/unittest_regrtest.py"", ""rebuilder.py""]']","False","[]","[{u'raw': u'#20', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'20', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-28 20:35:22","Remove InferenceContext's __repr__ implementation, since it makes it unusable to debug in a repl.","2938c902aa7da95c4ca38e86165673e8b6dedbce","","api.github.com,git_clone","[u'[""astroid/context.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-07 01:24:00","Add disable unused-import","296184150ce01a12c6598585a24dc6f7fcdc45bc","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-15 11:17:32","2to3 : use py2.x compatible fixers","2976a31a05f6738e0440885531e1a527cd2b807d","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""utils.py"", ""test/unittest_inspector.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-15 13:13:13","prepare 0.21.0","29922c39dbdcf3ac1ddfaf204e6730758e5d87e1","","api.github.com,git_clone","[u'[""debian.py3k/control"", ""__pkginfo__.py"", ""debian/changelog"", ""debian/control"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jayvdb","2015-10-19 07:42:41","Replace __future__.print_statement with print_function

1c35a97 fixed Python 2 only print statements, and imported
a mix of __future__.print_function and __future__.print_statement.
1826d98 fixed most of them, however this one still remains.

--HG--
branch : print_statement","29c597b8e2152096bd31d959e46953bd46811ce5","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python2/data/appl/myConnection.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 19:21:47","set inserted Delete node as asscontext

--HG--
branch : _ast_compat","29cb81e5e05923cd816e29cee27aaa5e9bb285c2","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-10 10:08:03","should have been done in stable

--HG--
branch : stable","29eddee404cf7726629295ade8f4ccd41583dad5","","api.github.com,git_clone","[u'[""manager.py"", ""scoped_nodes.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-28 15:43:10","Some style fixes.","2a0023a1299ebeb7814d26f40024f7544961e9cf","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-07 18:45:22","_build_excepthandler method and more

--HG--
branch : rebuild","2a27be854718f0aef9cbaab59355db4fb3fa49ff","","api.github.com,git_clone","[u'[""node_classes.py"", ""nodes_as_string.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2016-01-15 17:54:33","Propagate error information to @raise_if_nothing_inferred in unpack_infer()","2a68684744693e6fa3ed2064ac6a31e30377ac42","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[u'@raise_if_nothing_inferred']","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 10:38:39","give RebuildVisitor instance to tree rebuilder

--HG--
branch : _ast_compat","2a7730321badeea31a2742d454aa2780f281ab37","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2013-06-19 11:51:14","Fix language in a couple of error messages","2a8aa71a0133a34ca28d81117586ba45d6081cdb","","api.github.com,git_clone","[u'[""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-28 10:02:29","improve Ass* Nodes: catch AssTuple

--HG--
branch : _ast_compat","2a9fac63ae0f8a7d47a8c593f7e31e28e11865e6","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-18 17:50:46","Don't hard fail when calling .mro() on a class which has combined both newstyle and old style classes.

The class in question is actually newstyle (and the __mro__ can be retrieved using Python).
.mro() fallbacks to using .ancestors() in that case.","2aa95a8ed574568bf5fe303a739882eb69c3275d","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-31 08:11:51","Run test_multiprocessing_manager only if multiprocessing is available.","2b287e9b12a77bc3030ec5115be03deaccbf0e20","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-08-22 07:58:38","Add brain tips for _io.TextIOWrapper's buffer and raw attributes.","2b30ab777278358f754c6e7e2d5f761f76274d17","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_io.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-28 16:21:09","Added tag logilab-astng-debian-version-0.20.3-1 for changeset f2022f47efb0

--HG--
branch : stable","2b5ec36d23de27f5dee5ef090150a74bbd865c5d","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2008-10-01 17:48:49","don't rewrap instance","2b71d191001f8adc96ae0edd03a4fb3367376a9c","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-25 12:07:13","Don't break of the first unknown basename.","2baf182d5dde39921b6020e22544472d18917291","","api.github.com,git_clone","[u'[""brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","eevee","2014-03-22 02:04:31","Replace copy_context with some dynamic scoping.","2bf7e926b234bf8376a63f672380d2f1ae8eeb8d","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""protocols.py"", ""bases.py"", ""test/unittest_inference.py"", ""node_classes.py"", ""inference.py"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-22 17:20:33","prepare 0.20.0 release","2c23ddd29f07d8afb0c892bcde19ed5074e90700","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""debian/control"", ""utils.py"", ""protocols.py"", ""ChangeLog"", ""inspector.py"", ""_nodes_ast.py"", ""rebuilder.py"", ""__init__.py"", ""_nodes_compiler.py"", ""debian/copyright"", ""builder.py"", ""setup.py"", ""_exceptions.py"", ""__pkginfo__.py"", ""manager.py"", ""debian/changelog"", ""nodes_as_string.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-07-25 10:09:59","Return YES if the bases cannot be inferred for a metaclass invocation, until we have an unknown AST node.","2c75198fb217d7ada8516b578ddbb897e86625af","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 10:13:46","merge

--HG--
branch : _ast_compat","2cadeaebd227ab907115c4beae29849b3a09aed8","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-11 11:05:31","Enable the warnings in tests through a context manager

Previously, we were enabling blindly all the warnings in
tests files through `warnings.simplefilter`, which had the side effect
of not taking into account the values of the -W flag. This meant
that warnings which should have been silenced, weren't, leading to
a huge output when running the tests with Python 3.5.","2cebc765290c7f2f082bd20ac6fdeaac8b3dcf47","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/test_utils.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","dashea","2015-07-30 17:07:59","Add a timeout parameter to Popen.communicate in PY3K.

Python 3.3 adds a timeout parameter to communicate(), so allow it if using
Python 3.

--HG--
branch : py3-communicate","2cffd5060e35ca9aa2fbf2064c54426a8c373f51","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-12 15:51:36","Protect against a TypeError in Arguments.fromlineno.

The parent's fromlineno can be None when the parent
is a function retrieved from the builtins module,
which will not have the source code at hand.","2d0ec031f6921d21196de0fdad96b2eaf01104b3","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-28 17:26:56","bug _ast: store only AssAttr nodes in _delayed

--HG--
branch : rebuild","2d2df6ef93772693f82ea132d38fffafc0d4886c","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","eevee","2014-03-21 21:52:09","Avoid recursively inferring the same attr on the same class. Closes #7","2d7a87b404761c8493b1aa23963a21b553511455","","api.github.com,git_clone","[u'[""bases.py""]']","False","[]","[{u'raw': u'#7', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'7', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-11 15:41:30","cleanup","2db080a1ea411d124468bac5ddd7f5801f2992c4","","api.github.com,git_clone","[u'[""builder.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-11-04 10:55:29","Merge bookmark heads.","2dee604a1e2ff2f007021f8857386055766acd71","","api.github.com,git_clone","[u'[""astroid/brain/brain_stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-03-02 10:07:33","Add yield_from property for Yield nodes.

--HG--
branch : yield_from","2e0df240db0cf677b0821371af7c2dfc021452ab","","api.github.com,git_clone","[u'[""as_string.py"", ""test/unittest_python3.py"", ""rebuilder.py"", ""node_classes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","eevee","2014-03-24 23:09:34","Remove context.lookupname; make it an argument to infer() when appropriate.","2e13d989dbf9a097c679e4e1ca71e59fc9e5524f","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""protocols.py"", ""bases.py"", ""inference.py"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-10-20 14:41:05","Various speed improvements.

Patch by Alex Munroe.","2e2d04b4c270f31c1a9883e9ae41bb2d4cbca3fe","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""protocols.py"", ""ChangeLog"", ""rebuilder.py"", ""bases.py"", ""__init__.py"", ""mixins.py"", ""brain/py2stdlib.py"", ""test/unittest_inference.py"", ""node_classes.py"", ""inference.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-29 14:18:37","Fix all unused imports in the code base.

Also, this patch adds a new rule in the pylintrc for the CI gate.","2e642ceddec546da26ddf73960d80d4610a5afcc","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inspector.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/nodes.py"", ""pylintrc"", ""astroid/tests/unittest_brain.py"", ""astroid/scoped_nodes.py"", ""astroid/node_classes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","GerardPaligot","2013-10-24 13:48:13","Created new branch dev

--HG--
branch : dev","2e6e3585ffc0afdd9b4b3e7e80ef53d59f4c2612","","api.github.com,git_clone","[u'[]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 23:51:25","yield transform test fix","2e7a4fb6e384bd34575514fb527416f55f0dc2c1","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-18 17:54:32","accept method for a visitor; doc string bug

--HG--
branch : _ast_compat","2e7d545926e7b0178e03028343f5ca02a2a11a37","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-07-24 14:31:49","Add support for metaclass for Python 3.","2e7fb65c516c974a5bd3d80a9a6b9a09c3b05afd","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-03 19:26:18","Introduce a special attributes model

Through this model, astroid starts knowing special attributes of certain Python objects,
such as functions, classes, super objects and so on. This was previously possible before,
but now the lookup and the attributes themselves are separated into a new module,
objectmodel.py, which describes, in a more comprehensive way, the data model of each
object.","2e8c48123419e4aafc91e1f35bc9b3f35541cb68","","api.github.com,git_clone","[u'[""astroid/tests/unittest_object_model.py"", ""astroid/util.py"", ""astroid/bases.py"", ""astroid/interpreter/objectmodel.py"", ""ChangeLog"", ""astroid/interpreter/__init__.py"", ""astroid/raw_building.py"", ""astroid/scoped_nodes.py"", ""astroid/node_classes.py"", ""astroid/objects.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-03 12:26:33","Add a test for issue #188, which was triggered because the transforms weren't executed in a separated step. Closes issue #188.","2ea4dfbdbad28b51ee51c9050af0dff025b62cef","","api.github.com,git_clone","[u'[""astroid/tests/unittest_transforms.py""]']","False","[]","[{u'raw': u'#188', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'188', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-03 16:05:52","[R] demonkey patching block_range","2ec6ae811ff52ed61c43db078b2b84985e45d706","","api.github.com,git_clone","[u'[""nodes.py"", ""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-07-11 08:24:05","dtw","2f376caab0fc53db02c4a7179886c344e7dd814c","","api.github.com,git_clone","[u'[""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-16 14:08:58","Try to create the cache directory before using it.","2f50f2dfb10f9c127f3f2d20d5c5a500fee89685","","api.github.com,git_clone","[u'[""appveyor.yml""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-15 15:55:39","Generalize hooks for resolving imports that cannot be resolved normally,
and use the functionality in brain/py2gi.","2f849ffcfd34dbf3d7d9b160f54ef98fb0137761","","api.github.com,git_clone","[u'[""astroid/brain/py2gi.py"", ""astroid/manager.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-06 22:58:34","Merge upstream","2f88b3eb44b6e895f45dd45c709e29a8f365e04f","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/arguments.py"", ""astroid/brain/brain_stdlib.py"", ""astroid/protocols.py"", ""astroid/scoped_nodes.py"", ""astroid/brain/brain_builtin_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-11 15:55:38","add a ""optional_assign"" attribute to the NodeNG

This will make it possible to move LookupMixIn to mixins.py","2f9dc118e314135f0d684ea30817b318155b9d4c","","api.github.com,git_clone","[u'[""node_classes.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-05 12:34:32","mssing attach___dict__ for Module nodes

--HG--
branch : _ast_compat","2fa2eee3080cbb5c5269eca940b939c6a73c2190","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-30 10:57:03","Add missing start and shutdown methods to the SyncManager tips.","2fb5a5694dd57cf94ce56b7929a627283eec41bd","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 08:17:56","monkeypatch decorator might be python2.3 incompatible

--HG--
branch : _ast_compat","2fc11b8cc2703f767e3793a468d32d63ccbd2b06","","api.github.com,git_clone","[u'[""nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","invalid-email-address","2015-03-12 11:56:38","Work around the Python 2 part of issue https://bitbucket.org/logilab/astroid/issue/72/installing-astroid-via-setuptools-as-a","2fc233cfc4e46d15b87b8e2bf9e553cc70bc7c93","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python3/data/module2.py""]']","False","[u'https://bitbucket.org/logilab/astroid/issue/72/installing-astroid-via-setuptools-as-a']","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-01 16:00:45","Mark a test as an expected failure: not all staticmethod and classmethods are callable. Should be fixed when we'll understand classmethods and staticmethods.","2fd12166a520c226932ab986c93293c9aa778446","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-26 08:38:43","fix imports

--HG--
branch : rebuild","2fdddfbd16d53679edbbd9918a2661c7a02bfbf6","","api.github.com,git_clone","[u'[""node_classes.py"", ""_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-24 13:41:22","blockstart_tolineno comes also from compiler

--HG--
branch : rebuild","2fe3c8b7560f0c15684241165803ecd8e6f43e3c","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-01-14 12:33:03","0.17.2","2fe56a4fca03260b6d5a429eed4445716f745e0d","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-11-06 16:20:08","normalize distname","2feb5d5efe0e44b7c677a4774ea999a05182ea84","","api.github.com,git_clone","[u'[""debian/watch"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-07-25 14:19:37","Added tag astroid-1.2 for changeset 59b1c5e1bd8d","3010d26cb196e54f83e1b9ec56648e65b598946a","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-26 18:27:53","remove With in _nodes_compiler : astng will choose _ast

--HG--
branch : _ast_compat","3069f0e429a159691a77e9cf9196a17b558b31ec","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 09:55:27","fix: interferences between regr_test and inference tests

Also, fix test_python25_no_relative_import which was wrong:
__inii__.py was removed from tests, but saw no problem:
the import still failed because regr_data is not in sys.path","3079d34e842e41494d4664faf36ed40e3bb06c3f","","api.github.com,git_clone","[u'[""test/regrtest_data/package/absimport.py"", ""test/unittest_regrtest.py"", ""test/regrtest_data/package/import_package_subpackage_module.py"", ""test/unittest_inference.py"", ""test/regrtest_data/absimport.py"", ""test/regrtest_data/import_package_subpackage_module.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-12 12:47:55","ASTNGManager: remove useless ""borg=False"" option","30999b0f111aa5c8bb774509b3f957779a2f1706","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-30 09:27:19","Transform lambdas with a self argument at the class level to bound methods.","30b1e9197a3ceb9d882bb80d998937eb42c69710","","api.github.com,git_clone","[u'[""astroid/tests/unittest_scoped_nodes.py"", ""astroid/bases.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-04-11 10:31:46","as_string/repr_tree code cleanup: enhance the doc a bit + regroup code

- move _repr_tree from bases.py to as_string.py

- rename as_string function to to_code, though public API Node.as_string
  is left unchanged for now

--HG--
branch : stable","30b7c4eb775c1b325ec8e588cbbfa76119436547","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""as_string.py"", ""test/unittest_nodes.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-02 07:51:58","merge","3102291e5af0fca17c2d77a919a9d73155560c31","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-03 16:01:44","some improvements on AssAttr, AssList, AssTuple

--HG--
branch : _ast_compat","3104378356fde252168db05dd5a7ffac9183f5d3","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-29 18:14:56","Update the docstring of object_type in order to make it clearer for its actual purpose.","310687a606b5aaffcaaf9d29e20a83baf45267da","","api.github.com,git_clone","[u'[""astroid/helpers.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2017-03-14 01:14:18","Replace functools32 with backports.functools_lru_cache for consistency with pylint","313c0c34100118be87164214bd22b226a748166d","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/interpreter/objectmodel.py"", ""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","invalid-email-address","2011-07-08 16:04:13","fix file encoding detection with python2.x (closes #70494)

file encoding declaration shall be in a magic *comment*.

from PEP0263::

  More precisely, the first or second line must match the regular
  expression ""coding[:=]\s*([-\w.]+)"". The first group of this
  expression is then interpreted as encoding name. If the encoding
  is unknown to Python, an error is raised during compilation. There
  must not be any Python statement on the line that contains the
  encoding declaration.","314ad09be6c99de4e6902fb06fab8cff512a5a23","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""builder.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#70494', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'70494', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 14:14:54","merge","31541c11ec78ccecb045d80fcb87ff0b0c696b39","","api.github.com,git_clone","[u'[""setup.py"", ""debian/rules""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-17 07:52:31","work in progress

--HG--
branch : rebuild","3166a8c065484ab9a975057504c8582a2619ce38","","api.github.com,git_clone","[u'[""builder.py"", ""rebuilder.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 05:56:29","add deprecation warning","317c6a6e8aacc1c56dc2fdeaca18dcdcdfd86398","","api.github.com,git_clone","[u'[""README._ast_compatibility""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-18 15:52:04","Changelog: the refactoring fixed a pylint hang on the fly

--HG--
branch : rebuild","31b062e6a35340be66ee47aeab9a2135cd04ce27","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-22 07:15:58","Merged in PCManticore/astroid/ancestors (pull request #31)

Skip the same infered nodes as the base class in _is_metaclass. Closes issue #25","31c0d835f3e67024a8bafefc75202476aa2a040a","","api.github.com,git_clone","[u'[""test/unittest_regrtest.py"", ""scoped_nodes.py"", ""test/regrtest_data/recursion.py""]']","False","[]","[{u'raw': u'#25', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'25', u'']}, {u'raw': u'#31', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'31', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","hippo91","2017-11-03 09:53:00","Add of decorator to skip the tests if numy module is not present","31d927b66dd52d2861dbfd47d8793e1d16490be9","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain_numpy.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-28 19:00:11","Remove unused import.","31e260549b7b848f90d571f8038005345d7fd883","","api.github.com,git_clone","[u'[""astroid/objects.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","cpennington","2017-03-15 14:59:28","Cache the computation of which modules haven't been added to the path_importer_cache yet","31f21cd2a45be5f8e7d198fb8605b9122051f8e5","","api.github.com,git_clone","[u'[""astroid/interpreter/_import/spec.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-08 08:42:36","Some nodes got a new attribute, 'ctx', which tells in which context the said node was used.

The possible values for the contexts are `Load` ('a'), `Del` ('del a'),
`Store` ('a = 4') and the nodes that got the new attribute are Starred,
Subscript, List and Tuple. The builtin ast module provides contexts for
Name and Attribute as well, but we took a different approach in the past,
by having different nodes for each type of context. For instance, Name
used in a Del context is a DelName, while Name used in a Store
context is AssignName. Since this is ingrained in astroid since quite
some time, it makes no sense to change them as well, even though it's
a loss of consistency.
The patch introduces a new dependency to enum34 on older Python
versions, which is used for building the three possible enum values
for the contexts.

Closes issue #267.","31fd52cee82429f55674d3232d2f5c9eb45595af","","api.github.com,git_clone","[u'[""ChangeLog"", ""astroid/tests/unittest_nodes.py"", ""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/__init__.py"", ""astroid/__pkginfo__.py""]']","False","[]","[{u'raw': u'#267', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'267', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-07-18 09:30:01","Added tag logilab-astng-debian-version-0.24.0-1 for changeset d517d5a9bac9","3203eb1204a0ea5e385d5f5726c2993c1d832eb0","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-25 12:23:13","Fix trailing whitespace.","320d0ae58cde934193f83428fb1149f097a4bec2","","api.github.com,git_clone","[u'[""brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-21 14:08:32","fix #45959: AttributeError: 'NoneType' object has no attribute 'frame'

due to handling of __class__ when importing from living object (because
of missing source code or C-compiled object)

--HG--
branch : stable","326f84469c40d5f6ca656036f5212bba4ce09c34","","api.github.com,git_clone","[u'[""builder.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#45959', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'45959', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-02 07:48:16","Merged in lorenzph/astroid/enum-fixes (pull request #74)

Ensure that generated enum values have the correct base classes","328fa2e1b8d6e7a0dde737308b98e24249b36bd0","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_brain.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#74', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'74', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","hippo91","2017-11-03 08:39:13","Add of copyright and simplification of the mock to try to pass python3.3 CI","32abd38b0112b32a75cf0ea04bbf3b11df9512a7","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain_numpy.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-11-11 12:02:34","Fix lint","32c29818821259f9799ebcea91ad54e92c843d1b","","api.github.com,git_clone","[u'[""astroid/tests/unittest_manager.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-17 08:10:56","patching module modifications

--HG--
branch : stable_0.19.2","32d79ab7ef80eb56d9ec7cdb2e1e419e7c430097","","api.github.com,git_clone","[u'[""infutils.py"", ""inference.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-12-16 18:05:30","Merged logilab/astroid into default","32ea15226ef3c3c197d5d0ebd7ccbec38aea376b","","api.github.com,git_clone","[u'[""test_utils.py"", ""brain/py2stdlib.py"", ""ChangeLog"", ""test/unittest_brain.py"", ""test/unittest_raw_building.py"", ""test/unittest_builder.py"", ""brain/py2gi.py"", ""test/unittest_inference.py"", "".hgtags"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""test/fulltest.sh"", ""manager.py"", ""debian/changelog"", ""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-11-11 11:42:01","Add ChangeLog entries for @hippo91 changes","33148592a34a5b607ac750ce10c5c80965e67f9b","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[u'@hippo91']","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-28 12:33:56","update to unittest2 api

--HG--
branch : stable","331b873c7ff69011297de77ff72d1fbb90758f22","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""test/regrtest.py"", ""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""test/unittest_inference.py"", ""test/unittest_utils.py"", ""test/unittest_lookup.py"", ""test/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-23 13:33:47","merge","3354f2df804360b4a58fe4c4aa84980b3deeab5d","","api.github.com,git_clone","[u'[""debian.hardy/preinst"", ""utils.py"", ""protocols.py"", ""infutils.py"", ""nodes.py"", ""_nodes.py"", ""__init__.py"", ""_nodes_compiler.py"", ""test/unittest_builder.py"", ""test/unittest_inference.py"", ""node_classes.py"", ""inference.py"", ""_nodes_ast.py"", ""lookup.py"", ""manager.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-25 10:15:46","replace .op member of augmented assignment node as well when using _ast backend","335ca57beeee0bb529b5631c618c3261118a8cb8","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-10-03 14:31:51","backport fix done by Tobias Rzepka on pylint for python3 install on win32 platforms","33a2abbac9251557bc065cace47f43a2997bedcc","","api.github.com,git_clone","[u'[""setup.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-08 22:58:19","Do not import the astroid package when running setup, evaluate __pkginfo__ directly.","34503f135c853c8ae8a56bf478cc5d5508837b75","","api.github.com,git_clone","[u'[""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-21 23:50:53","Import proper base object semantics in Python 3.

In Python 3, classes automatically inherit from `object`.","34654dc7383560be738495a2f5b6e0b06516161a","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-12-18 15:29:05","Add Changelog entry regarding `metaclass`, add a new test for py3k.

--HG--
branch : metaclass","346ab431e3348d8af8b82e13685156019f07d78f","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""test/unittest_python3.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-18 17:44:16","fix assignment context for Assign node

--HG--
branch : rebuild","3471051ab9513a10d57cf2051837bb04b3063acd","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-12-04 16:58:43","fix w/ __name__ explicitly defined in class","348913d7abad079a3d874346335e6f974947bfd9","","api.github.com,git_clone","[u'[""test/unittest_lookup.py"", ""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-22 11:36:49","Fix a crash with invalid subscript index.

Don't try to infer 'self.config = {0: self.config[0]}' and similar
subscript constructions.","348e81ec68794534449ae86d553e8e5854985ce8","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-10 10:10:02","close changelog

--HG--
branch : stable","34932302029c79769f5eae06020c21af596a9c9a","","api.github.com,git_clone","[u'[""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-08-24 19:46:48","Use astroid_cache instead of MANAGER.builtins(), since that does not exist in this release.","34b23b7c3d307cc496a6daed6bac3625afdeabbc","","api.github.com,git_clone","[u'[""astroid/interpreter/objectmodel.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-10-18 15:33:49","1.0.1","34d0121454001ef9a390e292ca819f8cf8cde0ef","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-07-24 14:16:46","Fix names grabed using wildcard import in ""absolute import mode""
(ie with absolute_import activated from the __future__ or with python 3).

To do so, refactor do_import_module a bit so it may be easily used for wildcard
import as well.

Fix pylint issue #58.","34f9964e4bc3a209b1e137e6ae3dd7157fb7cdab","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""ChangeLog"", ""mixins.py"", ""test/unittest_manager.py"", ""builder.py"", ""inference.py"", ""test/data/module1abs/core.py"", ""test/data/module1abs/__init__.py""]']","False","[]","[{u'raw': u'#58', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'58', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-28 16:08:40","Add brain tips for multiprocessing.Manager and multiprocessing.managers.SyncManager.","35190c5044c3c1a6ef963bff98fb910413c40aaa","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_brain.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-24 16:25:13","compiler: fix order of visiting nodes
this affects the order in which nodes enter into locals,
which is important for _filter_stmts

--HG--
branch : rebuild","354658a06decf091f9aa42e511d12bd72cea01cc","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-21 23:23:13","Pass along the context when inferring the call result of a class to avoid infinite loops.","3547b480a53afc98f38ab3753a0d4d6f113d7af4","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-11 15:32:45","Small cleanup brought to the test files.","358221eedd85fba954e5dd65c8863852b3faee81","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-09-16 10:46:05","Check that EmptyNode has an underlying object in EmptyNode.has_underlying_object.","3586b1dd3432b27fd15515e1d4afd2421c5c433f","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""raw_building.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-10-12 09:47:20","__package__ is accessible in every module. Close PyCQA/pylint#1693","3592657a129019e1b88532da8efaf12a53835a91","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[{u'raw': u'PyCQA/pylint#1693', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1693', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-17 08:02:00","update Changelog

--HG--
branch : rebuild","35bfe023ac0dc796585f01b59018449c68cfb83d","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-28 14:32:12","some more small bugs

--HG--
branch : _ast_compat","35f5e3b1afbfb05dcadf9f143c816bc6086c6183","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-26 21:11:20","Update docstrings to reflect what's actually happening in some brain files.","360a81a2dd5ff98ed0b8fc45f899f546a81b6d32","","api.github.com,git_clone","[u'[""astroid/brain/_stdlib.py"", ""astroid/brain/_six.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-11 14:31:41","Bytes: are just constants like Str and Num","361e248001cdc69f2c3328cc1071646ca8f61f27","","api.github.com,git_clone","[u'[""inference.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-09 19:26:22","With the tox bug fixed, it's now possible to use one tox.ini for all testing","362dfc0f11b8df1a2420c65d88d955c1b094c891","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2013-06-19 11:56:29","rebuilder: fix handling of python3.3's Try ast nodes

We were setting the wrong parents, which upset pylint.
Fixes https://bitbucket.org/logilab/pylint/issue/10/pylint-028-throws-an-exception-after","3630cf510922ef1afd15ecf00bbf6e82adcd41b4","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[u'https://bitbucket.org/logilab/pylint/issue/10/pylint-028-throws-an-exception-after']","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-09-13 20:33:14","Final draft of state printing after merge

This patch adds __str__` and `__repr__` methods to InferenceContext and
alters the `__str__, `__repr__, and repr_tree() methods for NodeNG.
The `__str__` methods print out formatted information about the object's
fields; NodeNG's `__str__` method is not recursive.  InferenceContext's
__repr__` gives a compact representation of its fields.  I slightly
shortened NodeNG's `__repr__` method by removing a field that's usually
empty.  I rewrote repr_tree() to better format the information it
contains and to display *all* the fields for each AST node, with some
fields controlled by options to avoid spam.  I also fixed
https://bitbucket.org/logilab/astroid/issues/185/as_string-gives-wrong-result-for-keyword .","36795ba6d2d4fd9a06c6145fd5605053fd5b93af","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/tests/unittest_helpers.py"", ""ChangeLog"", ""astroid/tests/unittest_nodes.py"", ""astroid/nodes.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/arguments.py"", ""astroid/tests/unittest_inference.py"", ""astroid/brain/pysix_moves.py"", ""astroid/protocols.py"", ""astroid/brain/builtin_inference.py"", ""astroid/inference.py"", ""astroid/scoped_nodes.py"", ""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/context.py"", ""astroid/as_string.py""]']","False","[u'https://bitbucket.org/logilab/astroid/issues/185/as_string-gives-wrong-result-for-keyword']","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-07-24 21:40:42","Fix the test order issue by clearing the cache once more after unittest_regrtest.","36856a5f1a1c358309cb888d670a898bbfe014cd","","api.github.com,git_clone","[u'[""manager.py"", ""test/unittest_regrtest.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-19 18:49:30","Enums created with functional syntax are now iterable. Close PyCQA/pylint#1546","36cfe6846b316ae35c1a229de295d7f702b69614","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_namedtuple_enum.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'PyCQA/pylint#1546', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1546', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","hippo91","2017-11-03 08:37:44","Deletion of old numpy test (replaced by a dedicated class)","36e382b1874218d466db88cb8ecd2d10ab03d1c6","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-06 10:16:22","Use test_utils.build_module instead of building with AstroidBuilder in some tests.","3720745311e75222322d5586fee3d03170104f7d","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 13:38:07","save assignement nodes and call set_local after walking the tree

--HG--
branch : rebuild","374ad7c58fa14da8733a0690c7421a5fc8d21743","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 17:41:35","disable asscontext on 'Name' childnode

--HG--
branch : _ast_compat","374f1301ea6678d04011a629343d703534960bb4","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-01-29 16:26:14","Move test to unittest_regrtest.

--HG--
branch : nameconstant_py34","378ce876960987b0ad3dc83bdfe803718c96f605","","api.github.com,git_clone","[u'[""test/unittest_regrtest.py"", ""test/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-04 14:49:36","Improve the brain definition of string methods.

This patch drops the dynamic building of the methods and adds a couple
of arguments for some methods. Nevertheless, this approach will make astroid
to believe that some methods accept keyword arguments, while this is not
true.","379579fb327d88db7bbd669d067d97b0b7af1174","","api.github.com,git_clone","[u'[""astroid/brain/builtin_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-26 14:21:05","Revert tox.ini, again","37a3f6b9f8ecafd91444825e2e6502b49dc6bdef","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-02-07 10:55:46","are_exclusive test","37a602f1aae26355576ac055ab497763ecf3b899","","api.github.com,git_clone","[u'[""test/unittest_utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-13 15:07:45","Merge heads.","385ee740836f37a0bb43847e572ff4d7fabff92d","","api.github.com,git_clone","[u'[""brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-11 12:19:12","Make _get_file_from_object more robust by verifying explicitly the extension

This should fix a crash on PyPy, which occurred because
_get_file_from_object was  returning files with .pyc extension, without
stripping the 'c' from it.","386a880632679c320bc57a3a0b5d4d548d92408b","","api.github.com,git_clone","[u'[""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-05-22 12:53:34","threading.X objects are now correctly recognised as ctx managers (#433)

Closes PyCQA/Pylint#782","386fe2baabfc1ef2848211c3140521fa314d8748","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_threading.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#433', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'433', u'']}, {u'raw': u'PyCQA/Pylint#782', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'Pylint', u'782', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-04-15 12:43:46","improve node representations with lineno and module name
use it when raising TypeError on Const nodes","38723d055dab450a4f7ed808614104d7d701fb99","","api.github.com,git_clone","[u'[""node_classes.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-12-30 13:04:14","Add support for inferring unary binary op for classes","388e16ba6569d542a5460161695817554ef618a5","","api.github.com,git_clone","[u'[""astroid/inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-30 19:03:33","Use realpath where it is necessary.","389d30a5218ce3b060c9bba26e916293c4b9260f","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-07-10 19:41:16","Fix small formatting issues","38b409accf2568a9e1f948c22ba9a5ab8d6cad14","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/rebuilder.py"", ""astroid/nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-11 12:05:20","Merge pull request #285 from PyCQA/The-Compiler-patch-1

Delete .hgtags","38b736ca9da3fc6a7580fa79209b841794c84891","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[{u'raw': u'#285', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'285', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-04-08 10:11:14","backport gi related changes from pylint-brain, closes #19 and #22","38f6d99e811a49ecf7814cebd82d49b40bec90bb","","api.github.com,git_clone","[u'[""brain/py2gi.py""]']","False","[]","[{u'raw': u'#19', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'19', u'']}, {u'raw': u'#22', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'22', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-08 23:25:10","Add missing file.","39092fc9ddd63abc462532136f28b169331abb0f","","api.github.com,git_clone","[u'[""setup.py"", ""astroid/tests/__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-04-08 15:12:44","little sibling refactoring","3910d36689c85e15fd4d82d25c2abc521b667818","","api.github.com,git_clone","[u'[""nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","julien.jehannet@logilab.fr","2011-10-20 10:09:45","[py3k] make python3 package available in sid (closes: #81139)

Forget hardy distribution.","3916a848c3149d546a8f0e8c06406585378d7ee3","","api.github.com,git_clone","[u'[""debian.hardy/preinst"", ""debian.sid/rules"", ""debian.py3k/source/format"", ""debian.hardy/rules"", ""debian.sid/control"", ""debian.py3k/control"", ""README.Python3"", ""debian.py3k/rules"", ""setup.py"", ""debian.sid/source/format""]']","False","[]","[{u'raw': u'#81139', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'81139', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-11 07:14:43","Include a travis.yml file for configuring Travis builds

This patch also brings a couple of small changes to the
setup.py file, in order to make it work installing from
another directory.","3950486e27c67e1dc318446134cca44cc9724dc6","","api.github.com,git_clone","[u'["".travis.yml"", ""setup.py"", ""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-19 08:55:41","fix line  numbering of
* decorated function for _ast
* decorators node for compiler

--HG--
branch : _ast_compat","3993719a083006b98df1d06258f7a1b31b049e5f","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""test/unittest_builder.py"", ""scoped_nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-03-04 07:55:20","Check if the parent is a module. Closes #20.","39a761f8b8ea3fb5213c2db047eef2726643b8ee","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[{u'raw': u'#20', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'20', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-01 16:49:47","Use printf-style formatting in as_string, in order
 to avoid a potential problem with encodings when using .format.


Closes issue #273.","39bca36401136c3489332b053530b49cef9662e9","","api.github.com,git_clone","[u'[""astroid/tests/unittest_regrtest.py"", ""astroid/as_string.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#273', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'273', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-11-23 14:40:41","avoir .iter attribute conflict, skip yes objects while resolving loop parts","39c8f0480e6a676a2406dd513f38b0e3728ee9fa","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-08-24 08:02:01","Rename a couple of finders and document them.","39fdd0de8bca4264c7329aa3de947bbc99432a0d","","api.github.com,git_clone","[u'[""astroid/interpreter/_import/spec.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-10-05 10:35:46","test and fix absolute import handling. Closes #106191

--HG--
branch : stable","3a0220c7df48b26bacd926c163c05a7d6a8b16a2","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""test/data/absimport.py"", ""test/data/email.py"", ""test/unittest_nodes.py"", ""rebuilder.py""]']","False","[]","[{u'raw': u'#106191', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'106191', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","eevee","2014-07-31 23:32:21","merged with default","3a090e2819c85abacae5dd244733408cb110e427","","api.github.com,git_clone","[u'[""test/unittest_modutils.py"", ""test/unittest_python3.py"", ""bases.py"", ""test/data/find_test/__init__.py"", ""mixins.py"", ""brain/py2stdlib.py"", ""test/unittest_inference.py"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""scoped_nodes.py"", ""as_string.py"", ""test/data/find_test/module.py"", ""modutils.py"", ""rebuilder.py"", ""inspector.py"", "".hgtags"", ""test/unittest_scoped_nodes.py"", ""test/data/lmfp/__init__.py"", ""test/data/module.py"", ""test/data/lmfp/foo.py"", ""test/data/find_test/nonregr.py"", ""test/data/find_test/noendingnewline.py"", ""builder.py"", ""node_classes.py"", ""test/data/find_test/module2.py"", ""test/data/module1abs/core.py"", ""test/data/module1abs/__init__.py"", ""utils.py"", ""raw_building.py"", ""test_utils.py"", ""test/unittest_nodes.py"", ""protocols.py"", ""ChangeLog"", ""doc/release.txt"", ""test/unittest_regrtest.py"", ""inference.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-27 11:33:18","prepare 0.20.4","3a0be8bf3d32cdd8840195dacaa2d6bf0ad30602","","api.github.com,git_clone","[u'[""debian/control"", ""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-15 10:26:02","test: only test encoding for python2x

- remove also test/test_encoding.py (it's already in unittest_builder)","3a58ce2d33e143f96028cf62b803050759fd33ac","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/test_encoding.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-21 16:10:18","Add a new possible property-descriptor, lazy.

Since we don't understand descriptors at all, we're relying
on a list of possible property-descriptors, that is, decorators
which transforms a method into its value, the exact process that
a property does. While this is a bad approach, it works, at least
until we can provide support for this high level of understanding.
Closes #279","3a5d8d83c57ef15fae6a5cfc0a2769097090eb32","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/bases.py""]']","False","[]","[{u'raw': u'#279', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'279', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-04 10:34:06","fix init_assign error checking

--HG--
branch : _ast_compat","3a626baccb85e1e6dda35a83cc7db069a3d43b12","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-10-11 17:47:37","support source argument to force consideration of file as a python source file

--HG--
branch : stable","3a889f7b5f664cb7a53ebf09ce3fdd4ee05fa087","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-25 07:53:43","add argument to have a non-borg manager","3a8c5a1b56dd41a6e9c17100a075165e118dbe36","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-27 09:06:02","fix zipe-safe egg import: check if the imported module is a package

add a ""zip_import_data"" method to make ""astng_from_module_name"" more readable","3b2a642a2d7a438312f6d0bd30ce7a109bcac240","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","thedrow","2015-06-02 09:13:02","print_statement -> print_function.

--HG--
branch : fix-python3-tests","3b511138b0ff9b15f3029f09b42314025fd9814f","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python2/data/SSL1/Connection1.py"", ""astroid/tests/testdata/python2/data/notall.py"", ""astroid/tests/testdata/python2/data/module1abs/__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-07-20 16:14:02","Added tag logilab-astng-debian-version-0.22.0-1 for changeset 688b0d8d1f06","3b63bfe5dd9996c2519190bd6d6cc456328c021a","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-11-19 12:40:42","fix #5010: understand python 2.5 explicit relative imports","3b65cb823ac9a73608067a51f3970d8eed4cd5d1","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""inference.py"", ""test/unittest_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#5010', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'5010', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","mathieui","2017-11-02 12:52:44","Add brain_curses.py for curses attributes defined at runtime (#456)

Explanation for the need of curses brain: https://github.com/PyCQA/pylint/issues/1703
Most of the curses module attributes are defined at runtime (for
portability reasons, apparently), so there is a need for an astroid
brain in order to infer correctly.

The names currently in the brain were extracted from the python
documentation.","3b75bc7254dbccc139635c2b7ccf52b12a8eef19","","api.github.com,git_clone","[u'[""astroid/brain/brain_curses.py""]']","False","[u'https://github.com/PyCQA/pylint/issues/1703']","[{u'raw': u'#456', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'456', u'']}, {u'raw': u'https://github.com/PyCQA/pylint/issues/1703', u'refstyle': u'url', u'parts': [u'PyCQA', u'pylint', u'1703', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-15 14:41:27","fix 'open' builtin inference","3baaccc59c36c20bd68e75cccc62a9afa600b26f","","api.github.com,git_clone","[u'[""ChangeLog"", ""test/unittest_inference.py"", ""__init__.py"", ""test/unittest_builder.py"", ""builder.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-04 16:20:21","Move the choosing of the predicate at the beginning of the function.","3c11801b02bb385e70b8c510cff54bacf4f529a8","","api.github.com,git_clone","[u'[""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-03 14:44:45","Move objects.Slice back into nodes.Slice

We did this because objects.Slice had more capabilities than
nodes.Slice, such as inferring the slice attributes (start, stop,
step) and it was used mostly for inferring the slice() builtin.","3c1ba7ebc6a8bf13ae0be85fe4964ef51c48822a","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/node_classes.py"", ""astroid/brain/builtin_inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-13 20:36:22","Added tag logilab-astng-debian-version-0.21.1-1 for changeset 71d957477e3a","3c3c34d9706ff5f9cea065b5544f18a36bb8216c","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-07-14 02:16:48","Merge logilab/astroid","3c579ec31e996a143df2e33657c30eae0553c576","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/mixins.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-05-11 08:39:17","0.20.1

--HG--
branch : stable","3c5e69c0af5196e8e28b5fdaf7b6ad530291d87d","","api.github.com,git_clone","[u'[""debian/changelog"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-07-24 15:19:21","Enable verbose output to debug test failure on drone.io.","3c65ae5f2f8f4d03edd14ad8b5e29ffffb38ab79","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-06 18:43:23","Infer the third argument of the getattr builtin and return the inference result.","3c6e7442db768fdc2c6d3fe24f8d7fa6b17c16e6","","api.github.com,git_clone","[u'[""astroid/brain/builtin_inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-12 16:14:56","rename regrtest.py to make sure the tests are tested (and they don't work...)","3c99f7f35ed5c5f1fd6bf9d4182ad850d0e49fd3","","api.github.com,git_clone","[u'[""test/unittest_regrtest.py"", ""test/regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-06 22:55:24","Rename Uninferable and instantiate_class, fix broken tests, improve
testing.

* Rename YES to Uninferable
* Rename instanciate_class to instantiate_class.
* Use six in test_namedtuple_advanced_inference.
* Fix test_file_from_module failure on PyPy.
* Add enum34 to unittest_brain.
* Add unittest_brain dependencies tox.ini.","3ca0c7580187913bec11d0042a36906a2af36c91","","api.github.com,git_clone","[u'[""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_inference.py"", ""astroid/protocols.py"", ""astroid/helpers.py"", ""astroid/manager.py"", ""tox.ini"", ""astroid/util.py"", ""astroid/bases.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/arguments.py"", ""astroid/node_classes.py"", ""astroid/decorators.py"", ""astroid/__init__.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/builder.py"", ""astroid/brain/brain_builtin_inference.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_stdlib.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-06 23:56:24","Uncomment right tox.ini line","3cb28ab8f0b7afcecf06f317d6ec9f3e8b7b5da9","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-07-08 18:16:52","py3k: __builtin__ module renamed to builtins, we should consider this to properly build ast for builtin objects","3cb6ffe887497bd37af6dd57ed28b98de102ae65","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""ChangeLog"", ""bases.py"", ""__init__.py"", ""test/unittest_builder.py"", ""node_classes.py"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-11 11:47:04","Change the way how context caching and scoping is done.

This patch reverts some changes added by a couple of changesets, making
the context caching and scoping to work as before.
The changesets in question are:

 * 41b3bd589da0549ac061bc4c4b5d379cdbb1e10c
   Replace copy_context with some dynamic scoping.

 * 8d3c601
   Remove context.lookupname; make it an argument to infer() when appropriate.

 * partially reverts  048a42c.
   Fix some deep recursion problems.


There were some problems with these changes, which led to horrendous
performance when dealing with multiple inference paths of the same names,
as seen in these Pylint issues:

* https://bitbucket.org/logilab/pylint/issue/395/horrible-performance-related-to-inspect
* https://bitbucket.org/logilab/pylint/issue/465/pylint-hangs-when-using-inspectsignature
* https://bitbucket.org/logilab/pylint/issue/430/pylint-140-execution-time-and-memory

The reverted changes assumed that a context it's only passed to callees
and then destroyed, thus InferenceContext.push always returned another inference context,
with the updated inference path so far. This is wrong, since contexts are sometimes
reused, so the original context, the one before the .push call need to have the same
cache key in its path (this is actually what's happening in these mentioned issues,
the same object is inferred over and over again, but with different contexts).","3d342e85e127fd0f9300fbfd13666747dd9221bd","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/tests/unittest_inference.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/scoped_nodes.py"", ""astroid/protocols.py"", ""astroid/node_classes.py"", ""astroid/inference.py""]']","False","[u'https://bitbucket.org/logilab/pylint/issue/395/horrible-performance-related-to-inspect', u'https://bitbucket.org/logilab/pylint/issue/430/pylint-140-execution-time-and-memory', u'https://bitbucket.org/logilab/pylint/issue/465/pylint-hangs-when-using-inspectsignature']","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2009-08-27 08:33:13","copied debian.lenny to debian.hardy","3d37cea964aee425dec69f0c906e90adb810114b","","api.github.com,git_clone","[u'[""debian.hardy/preinst"", ""debian.hardy/rules""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-01 15:30:19","instance attribute support for functions","3d463da455e33e7ddc53a295b6a33db7b9e4288b","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""builder.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-17 11:56:04","refactor cache handling to avoid infinite recursion error while infering assignments during build, which potentially tried to rebuild a module we were currently building

--HG--
branch : rebuild","3d4d3d6c8cbe6c66098072e65766d3074905e417","","api.github.com,git_clone","[u'[""builder.py"", ""manager.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-06-18 15:14:58","work on thread safety

to start with, rebuilder should not be a class attribute","3d5fd4b0b810c42f0f779afbffffb0bd4df898c6","","api.github.com,git_clone","[u'[""builder.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-13 15:19:15","fix ifexp node: body and test are not list but single node in this case

--HG--
branch : rebuild","3d64315139a11a6baacdb14f257a843cfc8de046","","api.github.com,git_clone","[u'[""nodes_as_string.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-25 14:34:05","first sketch for handling remaining visits, delays, set_locals etc.

--HG--
branch : rebuild","3d6bc2479897ef548ee9fb69a5b94a7125c320b5","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 19:11:57","missing import

--HG--
branch : _ast_compat","3d74bd39cf0066e2712e07c225d65924f6f70d1c","","api.github.com,git_clone","[u'[""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-07-18 09:30:00","Added tag logilab-astng-version-0.24.0 for changeset e2ba7d936faf","3d97e3ac1b9261610dc2cf2eca8d32a940518bb6","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-18 09:03:13","remove two useless function calls on tree rebuilding.
* rename 'walk' to 'build'
* the tree starts always with a Module node, so we can call directly
'visit_module' in the 'build' method,
* hence remove '_visit_module'.

--HG--
branch : rebuild","3db03d809b40839fc146996f5e7b7f0f024cf38f","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""rebuilder.py"", ""scoped_nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-06 21:10:08","Use next()'s default argument","3dcb8ed17e9dd97ae1c39e5d9f743cf5e46861d1","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-03 14:44:31","Now is_subtype / is_supertype raises an internal exception when a type hierarchy can't be determined

It used to return Uninferable, but no call site was actually taking care of this
potential return. It is better though to simply raise an exception and to let
the call sites to handle them in which way they want to.","3e27213914271309a4716662b09fda91fca9efa1","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""astroid/helpers.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-19 11:30:48","basic operator inference","3e4869a60e5b1e4cf9ebfaebd9dfe2586adcf320","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-29 16:20:41","Move test specific to pylint into pylint.","3e655419214da71bff254943bd0c2accd44ffa29","","api.github.com,git_clone","[u'[""astroid/tests/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-02-05 12:51:58","Fix namespace population when wildcard import is used (#397)

Fix PyCQA/pylint#1312","3e6ef99928137a396a6ee9c75351f4194b2471e8","","api.github.com,git_clone","[u'[""astroid/builder.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[{u'raw': u'#397', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'397', u'']}, {u'raw': u'PyCQA/pylint#1312', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1312', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 10:48:30","discard If branches if exceptions specified","3e9d8e5bfac1ec9287c75cd8e1754d1749a2aa48","","api.github.com,git_clone","[u'[""infutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-08-01 22:32:39","Try to upgrade setuptools in order to have latest environment marker support.","3ea47e58341dee3534b4e24d1094b42e354636ef","","api.github.com,git_clone","[u'["".travis.yml""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-25 14:55:00","reintroduce empty classes for rebuilding all nodes

--HG--
branch : rebuild","3ee8488772571cff55588ac377f37ca050c3b739","","api.github.com,git_clone","[u'[""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-13 11:38:58","simplify _compare_get_children

--HG--
branch : _ast_compat","3ef9b6c7c46966f90463e9e6f09ab1f6c4e691c7","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-26 15:44:24","alphabetic sort and cleanup

--HG--
branch : _ast_compat","3f128de0ba6e2273cb0f0fda5343a0d724fbb827","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-26 09:36:01","get some constructors into node_classes

--HG--
branch : rebuild","3f1c25eb1c9897656bab55b210b00b56af3dcdc2","","api.github.com,git_clone","[u'[""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-11 14:08:59","we should catch everything when importing an inspected module to raise a proper building exception","3f39e88629cb81d4307d1251718feedf633c4b5b","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-09-02 13:13:08","Export copy method and name property for md5 objects.","3f68ca934407c53c5c46062619e9bb617396538b","","api.github.com,git_clone","[u'[""brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-10-05 10:47:29","backport pylint-brain 27:2c83031cb6a3. Closes #4294, #46273

--HG--
branch : stable","3f8a990f763010dbbd276b0e16538c8e0a9e7a64","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""brain/py2mechanize.py"", ""brain/py2qt4.py""]']","False","[]","[{u'raw': u'#4294', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'4294', u'']}, {u'raw': u'#46273', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'46273', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-16 09:21:15","Try to see if AppVeyor gets triggered.","3fb9024ad4637a56211e0b7d63f803860c70ef74","","api.github.com,git_clone","[u'[""pylintrc""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-10-18 15:35:55","Added tag astroid-debian-version-1.0.1-1 for changeset 0f3825899d58","3fb9ecef1628a326fd6f8b8a7a35da25c72ec3aa","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-30 17:57:04","move some methods around and merge others","3fbcf48d8cd9e07cdff74efa60f6b7933eb0bfc2","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-19 20:40:27","Fix pylint warnings over astroid, update the list of disabled messages in pylintrc.","3fc6f0048df6f0c6900896d88bbf8dc7f5b06836","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/tests/unittest_raw_building.py"", ""astroid/bases.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_inference.py"", ""astroid/modutils.py"", ""astroid/nodes.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_manager.py"", ""astroid/raw_building.py"", ""astroid/scoped_nodes.py"", ""astroid/protocols.py"", ""astroid/node_classes.py"", ""astroid/inference.py"", ""pylintrc"", ""astroid/manager.py"", ""astroid/astpeephole.py"", ""astroid/__init__.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 09:22:28","transform getattr nodes under aug assign

--HG--
branch : _ast_compat","3fd2d186808aebcc4388d2468317ae9766be80ea","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-08 10:49:50","functions for Delete node

--HG--
branch : _ast_compat","3fd77022e4c41f94ea3375792d9b513075e13402","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-05-22 12:53:45","tox.ini: do not force interpreter version when trying to run pylint (#432)","3fe2b276e01ca2c09675dffa789b839086f88587","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[{u'raw': u'#432', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'432', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-17 18:35:58","handle GenExpr / GeneratorExpr nodes

--HG--
branch : _ast_compat","3ff0b47f2637b4da5b5c4f4eb921f769cb11dd26","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-16 18:21:21","    * fix lookup of name in method bug (#3289)
    * fix decorator lookup bug (#3261)","401631ff4e15b37f763e15e9d6be8c791194bfa8","","api.github.com,git_clone","[u'[""lookup.py"", ""nodes.py"", ""test/unittest_lookup.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#3261', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'3261', u'']}, {u'raw': u'#3289', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'3289', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 11:54:08","compiler: fix some small bugs

--HG--
branch : rebuild","401cd98f5f0268a232a27bf29351fd0ad021ca1c","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-06-18 16:10:30","[transforms] extended transformation API helpers

* `AsStringRegexpPredicate`, predicate to use regexp on node.as_string result

* `inference_tip`, generic transform function to ease registration of custom
  inference function","4025b052d02bdcbe2d8da93bccb56e8bcc9ec112","","api.github.com,git_clone","[u'[""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-02 07:03:45","There's a new separate step for transforms.

Until now, the transforms were applied at the same time the tree was
being built. This was problematic if the transform functions were
using inference, since the inference was executed on a partially
constructed tree, which led to failures when post-building
information was needed (such as setting the _from_names
for the From imports).
Now there's a separate step for transforms, which are applied
using transform.TransformVisitor.

There's a couple of other related changes:

      * astroid.parse and AstroidBuilder gained a new parameter
        `apply_transforms`, which is a boolean flag, which will
        control if the transforms are applied. We do this because
        there are uses when the vanilla tree is wanted, without
        any implicit modification.

      * the transforms are also applied for builtin modules,
        as a side effect of the fact that transform visiting
        was moved in AstroidBuilder._post_build from
        AstroidBuilder._data_build.

Closes issue #116.","402d9298ad25d8ddd9f139a2e34b5efc0e72b7a1","","api.github.com,git_clone","[u'[""astroid/builder.py"", ""astroid/tests/unittest_regrtest.py"", ""ChangeLog"", ""astroid/tests/unittest_brain.py"", ""astroid/rebuilder.py"", ""astroid/manager.py"", ""astroid/transforms.py"", ""astroid/tests/unittest_transforms.py""]']","False","[]","[{u'raw': u'#116', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'116', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-01 14:33:50","support for generator attributes","403a13eb005df0c88f1345b4de37af83c1f654b6","","api.github.com,git_clone","[u'[""inference.py"", ""bases.py"", ""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-02 14:27:38","fix set_infos for _nodify_args
we have to set node.parent before we call save_assignments

--HG--
branch : rebuild","40404237fda76e16e18dd6c637c6907faa9338f8","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-02-22 15:47:16","fix Changelog","4077f9a81dc9125b32cb25f6abf5905ad5e2df04","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-16 08:50:57","Fix pylint warnings.","409aff824196f4c32e73ae961bdb189f1eae6173","","api.github.com,git_clone","[u'[""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-09 14:25:32","Add a test which shows that using namedtuple-generated classes with classes with the same name leads to an invalid MRO.","40f96b34571794b296586f7a1df6602d597e0a2d","","api.github.com,git_clone","[u'[""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-07-18 08:48:22","brain extensions subdir should be explicitly installed","412614cf37145d56a0c9caf2d131d40cbea5e7fe","","api.github.com,git_clone","[u'[""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-11-08 14:36:21","test fixes","414bcb7c671f17dec543c225e5b9e0b3c726267f","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""test/data/module.py"", ""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 08:50:46","update description and supported python versions

--HG--
branch : _ast_compat","416bfee13f588210483de5d102df48ab83d70391","","api.github.com,git_clone","[u'[""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-06-18 16:19:18","start some documentation for the new transformation API","419d28b175e39a4cee7f0533e4577837bce054b5","","api.github.com,git_clone","[u'[""doc/extending.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-08-01 21:17:15","Use proper environment markers for version specific dependencies.","41a0c77cab88a54787d49913030bebf482fa014c","","api.github.com,git_clone","[u'[""setup.py"", ""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-09-13 20:21:48","Final draft of improved state printing","41a102e0f4091ed18e607f2580fe5f60233ae8e7","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/bases.py"", ""astroid/tests/unittest_inference.py"", ""astroid/scoped_nodes.py"", ""astroid/node_classes.py"", ""astroid/__pkginfo__.py"", ""astroid/context.py"", ""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-03 16:15:41","Merged in PCManticore/astroid/slots (pull request #37)

Add `slots` method to Class nodes.","41aa1086a294c003fb50ef82d9bbbb4e1b17d113","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#37', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'37', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-07-31 06:37:49","update ChangeLog","4221d0341f040be53b0a9079e9b2302913c3273c","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-09 19:28:25","Fix typo.","4285387151f0096c2a2670afb4b4b430ca06679b","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-25 19:11:55","_nodes doesn't depend on _nodes_<mode>, so we can use nodes in _nodes_<mode>

--HG--
branch : rebuild","428a600c636e28cf77f42fdc961048eb5cfd620c","","api.github.com,git_clone","[u'[""manager.py"", ""_nodes.py"", ""scoped_nodes.py"", ""protocols.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-07-14 02:03:34","Move proxies to nodes.py and scoped_nodes.py","42c584aa47ff89310744b280336714ab0c39092d","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/nodes.py"", ""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-04-12 14:14:25","Arguments node gained a new attribute, kwonlyargs_annotations, for holding the keyword-only args annotations","42cb54487a993b61ab6c9a70100f09e16ea51bab","","api.github.com,git_clone","[u'[""astroid/interpreter/objectmodel.py"", ""ChangeLog"", ""astroid/tests/unittest_object_model.py"", ""astroid/node_classes.py"", ""astroid/tests/unittest_python3.py"", ""astroid/rebuilder.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-12 16:01:44","Get the correct __new__ for Python 2.","42cccc0b87261c1f9659a0afe03536c3c3a3734d","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","lorenzph","2015-05-04 20:42:57","Fix recursive class attribute lookups

Commit 83053ac added MRO lookup support for new-style only class
hierarchies. Due to a typo old-style / mixed-style class hierarchies
were either not traversed recursively or traversed with the wrong
context.

--HG--
branch : fix-recursive-attr-lookups","42e5d903325c249e810895d24e26830d36e5b4bc","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-26 14:19:48","remove Stmt node

--HG--
branch : _ast_compat","42eac7d838b74c2ce137a76bb0733c5b7e3569c3","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-06 15:11:50","AstroidBuildingException is now AstroidBuildingError.

The first name will exist until astroid 2.0.","433a5b874cb8bff40c26451a75586be512707bab","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""ChangeLog"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_manager.py"", ""astroid/brain/brain_six.py"", ""astroid/scoped_nodes.py"", ""astroid/inference.py"", ""astroid/manager.py"", ""astroid/builder.py"", ""astroid/brain/brain_gi.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-11-11 11:56:30","Remove file_stream since it was slated for removal for 1.6","434f7feb490479fc2000d3214126622b6eb41d97","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 09:56:12","move delayed_visits to rebuild.RebuildVisitor

--HG--
branch : _ast_compat","4351fb36e059d150ebeb9334dc6047fffbd1c20a","","api.github.com,git_clone","[u'[""builder.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2009-02-03 15:59:41","Sandro Tosi's packaging enhancements","435ca1bbbb8a76ed9dfaaa75b93f3ec3d212fbfd","","api.github.com,git_clone","[u'[""debian/control"", ""debian/copyright"", ""debian/rules"", ""debian/watch"", ""debian/pycompat"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 17:42:26","set tolineno to parent.tolineno is definitly a bad idea

--HG--
branch : _ast_compat","439dea370cdb048a0871510dae9818ec7fbaa5c4","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-03-27 11:26:17","Add missing modules in py2stdlib brain hashlib. Closes #123056

--HG--
branch : stable","43a095f3d82f6ded5b79786fce06d25c4cf25457","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#123056', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'123056', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 18:23:42","merge

--HG--
branch : _ast_compat","43cd0c615d7cfdcad19202a58ea99059ad4eb1c3","","api.github.com,git_clone","[u'[""inspector.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-07-23 13:31:22","Fix missing warnings import","43f27a00205f5b9b4a341a2c2e3f645dffe14904","","api.github.com,git_clone","[u'[""astroid/mixins.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-07-25 13:35:07","Get rid of logilab.common in unittest_modutils.py.

It was only used as an example package with subpackages - now we use
xml.etree.ElementTree for those checks instead.

--HG--
branch : no-logilab-common","44115d6fa8a7b0c09c650d1293cc19707bf3f278","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-03-28 17:24:19","minor cleanups: drop copyright by me, update others to 2013, droip those in dumb test data files, delete some trailing whitespaces

--HG--
branch : stable","441e188938ffc7065611fbe96898cb9d52701fa2","","api.github.com,git_clone","[u'[""test/data/SSL1/Connection1.py"", ""test/regrtest_data/package/__init__.py"", ""test/regrtest_data/package/absimport.py"", ""test/data2/suppliermodule_test.py"", ""test/data2/clientmodule_test.py"", ""__pkginfo__.py"", ""test/unittest_python3.py"", ""bases.py"", ""mixins.py"", ""test/data/appl/myConnection.py"", ""test/unittest_manager.py"", ""scoped_nodes.py"", ""test/data2/__init__.py"", ""test/data/notall.py"", ""inspector.py"", ""test/regrtest_data/package/import_package_subpackage_module.py"", ""test/unittest_utils.py"", ""test/unittest_scoped_nodes.py"", ""setup.py"", ""exceptions.py"", ""test/data/appl/__init__.py"", ""test/data/noendingnewline.py"", ""test/unittest_inspector.py"", ""test/unittest_builder.py"", ""builder.py"", ""node_classes.py"", ""utils.py"", ""test/data/__init__.py"", ""test/data/nonregr.py"", ""raw_building.py"", ""test/regrtest_data/package/subpackage/module.py"", ""protocols.py"", ""test/data/SSL1/__init__.py"", ""nodes.py"", ""test/regrtest_data/descriptor_crash.py"", ""__init__.py"", ""test/regrtest_data/package/subpackage/__init__.py"", ""test/unittest_regrtest.py"", ""inference.py"", ""manager.py"", ""test/data/all.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-04-08 12:57:39","merge with stable","442ac73be6a654f15f0774173316da29d253b3aa","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-16 15:00:16","prepare merge with default: get new scoped_nodes test

--HG--
branch : rebuild","446817cc666b114894143c4b155c2f1cf7e5ea0a","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-25 08:06:10","Change tox.ini file.

--HG--
branch : tox","446f43b1188506070eddef22b7374ee77573cef4","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-05 13:52:00","remove some code no more necessary since we don't support anymore python < 2.5","44c584702ed7ae46ac50a8accf55b5a2698505d3","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""inference.py"", ""bases.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-30 17:07:59","cleanup: replace method was only used for py < 2.5 and before we rebuild the tree","44cf7fcd61bebfb7004684edd2426865026e3572","","api.github.com,git_clone","[u'[""mixins.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 10:41:16","drop useless _init_ass_more function, transform AssName/AssAttr which are actually deletion into DelName and DelAttr

--HG--
branch : _ast_compat","44eaad2759fd111c0f755822d5292b3b785cf70e","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-07-07 16:02:49","Move the files outside of the source directory.","44f0065f7cd7224c917573fc7fc7a10c7d91e799","","api.github.com,git_clone","[u'[""doc/extending.rst"", ""doc/conf.py"", ""doc/index.rst"", ""doc/inference.rst"", ""doc/source/extending.rst"", ""doc/source/conf.py"", ""doc/source/index.rst"", ""doc/source/inference.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-12-04 11:47:25","don't commit/push without checking for unsaved buffer","4524d67223dac726c787aa5c4324bb661bea66cb","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py"", ""astroid/brain/builtin_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-17 14:06:48","move _astng_fields to concrete classes instead of defining them in nodes.py

--HG--
branch : rebuild","4531d7727d6f265c0b583bceba703555c0abb646","","api.github.com,git_clone","[u'[""nodes.py"", ""node_classes.py"", ""bases.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-30 18:15:35","move stuff around and make method _set_infos to function","454c449ea4d1423d5f9c7a20a27c9e3a5a1404a7","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-01 09:41:07","strait forward: the (re)building should work this way (optimistic)

--HG--
branch : rebuild","45b717c5efa3f1db37a558b2bdebd3516f5b5135","","api.github.com,git_clone","[u'[""builder.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-07 18:43:34","a lot of _nodes_compiler corrections

--HG--
branch : rebuild","45cb63c3d94f1b198c4e4e251eb3cc152110d2b8","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-29 17:39:09","Update the docs (and test ReadTheDocs hook)","45d4599c1bc6dea457c1d87057e2f44bf43db518","","api.github.com,git_clone","[u'[""doc/source/conf.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-04 10:52:32","Check only the name of `help` function. Closes issue #53.","45f6bd332eb480f78707f57d2014b58f35aefdd5","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[{u'raw': u'#53', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'53', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-16 19:26:12","Added tag astroid-1.3.3 for changeset 82ad34850236","460ed96d06bf2b1c1c3167a6f6336312657fca00","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-07-25 14:12:45","Remove pytest recommendation from README.

--HG--
branch : no-logilab-common","461d2398abb6d0f89b30ba48e487877036e57400","","api.github.com,git_clone","[u'[""README""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-07-19 16:14:27","Keep a consistent copyright notice across the board.","461e0161dda5bb8ce1f2817adcb6379f6a9e7b19","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/brain/brain_pkg_resources.py"", ""astroid/tests/unittest_inference.py"", ""astroid/brain/brain_collections.py"", ""astroid/nodes.py"", ""astroid/brain/brain_qt.py"", ""astroid/tests/unittest_objects.py"", ""astroid/rebuilder.py"", ""astroid/tests/unittest_peephole.py"", ""astroid/mixins.py"", ""astroid/helpers.py"", ""astroid/brain/brain_ssl.py"", ""astroid/brain/brain_mechanize.py"", ""astroid/manager.py"", ""astroid/interpreter/__init__.py"", ""astroid/raw_building.py"", ""astroid/builder.py"", ""astroid/bases.py"", ""astroid/brain/brain_subprocess.py"", ""astroid/modutils.py"", ""astroid/test_utils.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/arguments.py"", ""astroid/brain/brain_six.py"", ""setup.py"", ""astroid/tests/unittest_raw_building.py"", ""astroid/node_classes.py"", ""astroid/tests/__init__.py"", ""astroid/brain/brain_numpy.py"", ""astroid/tests/unittest_utils.py"", ""astroid/brain/brain_multiprocessing.py"", ""astroid/decorators.py"", ""astroid/transforms.py"", ""astroid/__init__.py"", ""astroid/as_string.py"", ""astroid/brain/brain_nose.py"", ""astroid/context.py"", ""astroid/brain/brain_hashlib.py"", ""astroid/tests/resources.py"", ""astroid/tests/unittest_object_model.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_transforms.py"", ""astroid/util.py"", ""astroid/tests/unittest_builder.py"", ""astroid/brain/brain_dateutil.py"", ""astroid/objects.py"", ""astroid/brain/brain_functools.py"", ""astroid/brain/brain_builtin_inference.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/tests/unittest_modutils.py"", ""astroid/brain/brain_namedtuple_enum.py"", ""astroid/interpreter/objectmodel.py"", ""astroid/tests/unittest_nodes.py"", ""doc/conf.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/brain/brain_threading.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/unittest_brain.py"", ""astroid/protocols.py"", ""astroid/tests/unittest_python3.py"", ""astroid/brain/brain_pytest.py"", ""astroid/astpeephole.py"", ""astroid/brain/brain_gi.py"", ""astroid/__pkginfo__.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jgarst","2016-10-24 16:18:01","add format string support (#365)

Format strings require support for two new nodes, FormattedValue, respectively JoinedStr.","462af82a642c437fd113b3be487c28bb435f3ac8","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/nodes.py"", ""astroid/node_classes.py"", ""astroid/tests/unittest_python3.py"", ""astroid/rebuilder.py"", ""astroid/as_string.py""]']","False","[]","[{u'raw': u'#365', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'365', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-01-31 16:32:05","add trove classifiers (tell about python 3 support for pypi)

--HG--
branch : stable","4683aac39450f3001a214aa890e4179ad514515d","","api.github.com,git_clone","[u'[""setup.py"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-17 08:38:49","move _check_children to utils; don't call it

--HG--
branch : rebuild","4693a2b1c7d948e2036ce8d324d5f08fd7a16efe","","api.github.com,git_clone","[u'[""utils.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 18:00:53","use assertIsInstance; add test_lookup_cond_branchese

--HG--
branch : _ast_compat","46a54b9eff186b56a4a32b8267e2e4ad2257cc1b","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-12-24 10:22:04","close the byte stream avoid warning w/ python3","46cf84884626d8e960d53ea74f2e3aac2f603122","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-15 12:02:36","Make modutils._search_zip thread safe.

The function was iterating on sys.path_importer_cache.items(), which
gets modified sometimes when using multiple threads. This patch
wraps the call to .items() in a list() call.","46dc65e8fdb2cfa2b254ad824a5b072808df6bad","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-11-06 16:18:56","normalize distname","46dc6e17ae8f8e98e4ca1611e54ffe5991ef6bab","","api.github.com,git_clone","[u'[""builder.py"", ""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2006-09-19 08:24:39","updated debian packaging","46eda95d6cd18c7b80091b184a7d635d572121c5","","api.github.com,git_clone","[u'[""debian/pycompat"", ""debian/control""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-25 16:22:57","Merge","476a0c264158dbe158c9a09706060c9265365bf6","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/tests/testdata/python3/data/module.py"", ""tox.ini"", ""astroid/bases.py"", ""astroid/tests/testdata/python2/data/module.py"", ""ChangeLog"", ""astroid/modutils.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/scoped_nodes.py"", ""astroid/raw_building.py"", ""astroid/objects.py"", ""astroid/mixins.py"", ""astroid/node_classes.py"", ""astroid/tests/unittest_builder.py"", ""README"", ""astroid/decorators.py"", ""astroid/__pkginfo__.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-03-29 06:47:05","[test] use @require_version when possible

--HG--
branch : stable","47731cf59428185a83745ef0fee58c14b99f42d1","","api.github.com,git_clone","[u'[""test/unittest_python3.py"", ""test/unittest_inference.py"", ""test/unittest_nodes.py"", ""test/unittest_lookup.py""]']","False","[]","[]","[u'@require_version']","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-08 22:47:14","Move all astroid modules into a its own directory, which is now the package.

python setup.py develop now works.","477b5ee2a3d0594504ca9fc2fe0f0f9cbeccd01b","","api.github.com,git_clone","[u'[""astroid/tests/data/appl/myConnection.py"", ""astroid/brain/py2pytest.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/tests/data_py3/find_test/module.py"", ""astroid/tests/data_py3/notall.py"", ""astroid/nodes.py"", ""test/regrtest_data/absimp/sidepackage/__init__.py"", ""astroid/tests/data/find_test/__init__.py"", ""astroid/brain/py2qt4.py"", ""brain/py2gi.py"", ""test/unittest_inference.py"", ""astroid/exceptions.py"", ""astroid/tests/regrtest_data/package/absimport.py"", ""test/data_py3/__init__.py"", ""test/unittest_manager.py"", ""as_string.py"", ""test/data/find_test/module.py"", ""test/regrtest_data/package/__init__.py"", ""astroid/tests/data/module1abs/__init__.py"", ""astroid/tests/unittest_regrtest.py"", ""test/data_py3/lmfp/foo.py"", ""astroid/tests/data_py3/module.py"", ""astroid/tests/unittest_raw_building.py"", ""test/regrtest_data/package/absimport.py"", ""astroid/tests/data/email.py"", ""astroid/tests/data_py3/MyPyPa-0.1.0-py2.5.egg"", ""brain/py2qt4.py"", ""test/data_py3/appl/__init__.py"", ""setup.py"", ""raw_building.py"", ""astroid/__init__.py"", ""astroid/inspector.py"", ""astroid/tests/data2/suppliermodule_test.py"", ""test/data_py3/lmfp/__init__.py"", ""test/data2/__init__.py"", ""builder.py"", ""astroid/tests/data/nonregr.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/unittest_utils.py"", ""test/unittest_modutils.py"", ""utils.py"", ""astroid/builder.py"", ""astroid/tests/data/notall.py"", ""astroid/tests/regrtest_data/unicode_package/core/__init__.py"", ""mixins.py"", ""astroid/tests/data_py3/module1abs/__init__.py"", ""test/data_py3/find_test/module2.py"", ""test/data_py3/find_test/__init__.py"", ""astroid/tests/data_py3/find_test/nonregr.py"", ""astroid/brain/py2gi.py"", ""astroid/protocols.py"", ""test/data_py3/SSL1/__init__.py"", ""test/data_py3/module2.py"", ""astroid/tests/regrtest_data/descriptor_crash.py"", ""test/data/module2.py"", ""astroid/tests/data/MyPyPa-0.1.0-py2.5.zip"", ""test/regrtest_data/absimp/__init__.py"", ""test/data_py3/module.py"", ""MANIFEST.in"", ""test/data/find_test/__init__.py"", ""test/data_py3/find_test/noendingnewline.py"", ""astroid/mixins.py"", ""__pkginfo__.py"", ""astroid/tests/data/module.py"", ""astroid/tests/regrtest_data/package/import_package_subpackage_module.py"", ""astroid/tests/data_py3/MyPyPa-0.1.0-py2.5.zip"", ""test/data_py3/MyPyPa-0.1.0-py2.5.zip"", ""astroid/tests/data_py3/noendingnewline.py"", ""astroid/modutils.py"", ""test/data/find_test/nonregr.py"", ""astroid/tests/data_py3/lmfp/foo.py"", ""test/regrtest_data/package/hello.py"", ""astroid/node_classes.py"", ""brain/py2mechanize.py"", ""brain/py2pytest.py"", ""test/data/appl/__init__.py"", ""test/data_py3/format.py"", ""astroid/tests/regrtest_data/package/hello.py"", ""test/data_py3/appl/myConnection.py"", ""test/regrtest_data/absimp/string.py"", ""test/unittest_inspector.py"", ""test/data/MyPyPa-0.1.0-py2.5.egg"", ""astroid/tests/data/absimport.py"", ""test/unittest_builder.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/data/find_test/module.py"", ""node_classes.py"", ""test/data/module1abs/__init__.py"", ""test/regrtest_data/unicode_package/core/__init__.py"", ""test/data_py3/MyPyPa-0.1.0-py2.5.egg"", ""astroid/tests/unittest_modutils.py"", ""test/regrtest_data/package/subpackage/module.py"", ""test/data_py3/noendingnewline.py"", ""astroid/tests/data_py3/format.py"", ""test/regrtest_data/descriptor_crash.py"", ""test/unittest_brain.py"", ""test/regrtest_data/package/subpackage/__init__.py"", ""astroid/tests/data_py3/nonregr.py"", ""astroid/tests/regrtest_data/package/subpackage/module.py"", ""astroid/tests/data_py3/find_test/module2.py"", ""astroid/tests/data_py3/__init__.py"", ""astroid/tests/data/SSL1/__init__.py"", ""test/data/all.py"", ""test/data/SSL1/Connection1.py"", ""test/data_py3/notall.py"", ""test/data/find_test/module2.py"", ""astroid/tests/unittest_inference.py"", ""test/data2/clientmodule_test.py"", ""brain/py2stdlib.py"", ""astroid/tests/data/lmfp/__init__.py"", ""astroid/tests/data/module2.py"", ""astroid/manager.py"", ""astroid/tests/regrtest_data/absimp/string.py"", ""astroid/bases.py"", ""modutils.py"", ""astroid/tests/data/format.py"", ""astroid/tests/data_py3/SSL1/Connection1.py"", ""astroid/brain/py2stdlib.py"", ""astroid/tests/data_py3/SSL1/__init__.py"", ""astroid/tests/data/find_test/nonregr.py"", ""test/data/__init__.py"", ""astroid/raw_building.py"", ""test/regrtest_data/package/import_package_subpackage_module.py"", ""astroid/tests/data_py3/find_test/noendingnewline.py"", ""astroid/tests/data_py3/find_test/__init__.py"", ""astroid/tests/unittest_manager.py"", ""astroid/as_string.py"", ""test/data_py3/find_test/module.py"", ""test_utils.py"", ""test/data/format.py"", ""test/unittest_lookup.py"", ""astroid/tests/regrtest_data/unicode_package/__init__.py"", ""astroid/tests/data/module1abs/core.py"", ""astroid/tests/data/__init__.py"", ""test/data/find_test/noendingnewline.py"", ""astroid/scoped_nodes.py"", ""test/data/module.py"", ""astroid/tests/data/MyPyPa-0.1.0-py2.5.egg"", ""test/data/module1abs/core.py"", ""astroid/tests/data/lmfp/foo.py"", ""test/data_py3/module1abs/__init__.py"", ""test/data/nonregr.py"", ""test/data/email.py"", ""astroid/tests/data_py3/module2.py"", ""protocols.py"", ""astroid/tests/regrtest_data/package/__init__.py"", ""scoped_nodes.py"", ""test/data/SSL1/__init__.py"", ""test/data_py3/email.py"", ""test/data_py3/nonregr.py"", ""astroid/tests/regrtest_data/absimp/__init__.py"", ""inference.py"", ""test/data/lmfp/foo.py"", ""test/data/absimport.py"", ""astroid/__pkginfo__.py"", ""astroid/tests/data/find_test/noendingnewline.py"", ""test/unittest_raw_building.py"", ""astroid/tests/data/noendingnewline.py"", ""test/data2/suppliermodule_test.py"", ""test/data/appl/myConnection.py"", ""test/unittest_python3.py"", ""astroid/tests/data_py3/module1abs/core.py"", ""astroid/tests/data2/clientmodule_test.py"", ""astroid/inference.py"", ""astroid/tests/regrtest_data/recursion.py"", ""test/data_py3/SSL1/Connection1.py"", ""astroid/tests/data_py3/email.py"", ""astroid/tests/data2/__init__.py"", ""test/data/noendingnewline.py"", ""astroid/tests/unittest_brain.py"", ""tox.ini"", ""astroid/tests/data/all.py"", ""astroid/tests/data_py3/lmfp/__init__.py"", ""test/data/notall.py"", ""astroid/tests/regrtest_data/absimp/sidepackage/__init__.py"", ""astroid/tests/data_py3/appl/myConnection.py"", ""astroid/test_utils.py"", ""test/unittest_regrtest.py"", ""astroid/tests/data/appl/__init__.py"", ""test/unittest_utils.py"", ""test/unittest_scoped_nodes.py"", ""astroid/tests/data_py3/all.py"", ""astroid/rebuilder.py"", ""test/data/lmfp/__init__.py"", ""exceptions.py"", ""test/data_py3/all.py"", ""astroid/tests/unittest_inspector.py"", ""test/data_py3/find_test/nonregr.py"", ""test/data_py3/absimport.py"", ""astroid/tests/data_py3/absimport.py"", ""test/regrtest_data/recursion.py"", ""astroid/tests/regrtest_data/package/subpackage/__init__.py"", ""astroid/brain/py2mechanize.py"", ""astroid/tests/data/SSL1/Connection1.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""test/data/MyPyPa-0.1.0-py2.5.zip"", ""test/unittest_nodes.py"", ""astroid/utils.py"", ""nodes.py"", ""rebuilder.py"", ""astroid/tests/data_py3/appl/__init__.py"", ""__init__.py"", ""bases.py"", ""astroid/tests/data/find_test/module2.py"", ""test/regrtest_data/unicode_package/__init__.py"", ""inspector.py"", ""astroid/tests/unittest_python3.py"", ""manager.py"", ""test/data_py3/module1abs/core.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-14 15:43:02","improve ancestors (don't yield two times the same ancestor)

fix two tests","479a8ee987e2d75489cd2e6c2849d1bc7c3c1ec4","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""test/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-02 09:53:33","reduce circular imports I: import exceptions directly

- rename exceptions module: it's exported to Pylint anyway","47a17eee2201e7c878ed75cd67c3fdae13dbe8e3","","api.github.com,git_clone","[u'[""utils.py"", ""protocols.py"", ""rebuilder.py"", ""inspector.py"", ""bases.py"", ""__init__.py"", ""mixins.py"", ""builder.py"", ""node_classes.py"", ""inference.py"", ""_exceptions.py"", ""manager.py"", ""exceptions.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-09 10:49:54","remove all argnames; None values for _ast

--HG--
branch : _ast_compat","47aab8af02f905efecc07b1398c118f53154b153","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""scoped_nodes.py"", ""inference.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 18:20:38","fix Decorators handling: use nodes attributes (as in compiler), not items

--HG--
branch : _ast_compat","47c774bfd3c05035abf03f287bdb640123d1820a","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-07 12:17:25","remove __init__.py from test directory

It is useless and only generates bad relative imports with py3k","47d0a62f1ea54d295386d743b8fbfc8de048e078","","api.github.com,git_clone","[u'[""test/__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-14 12:56:48","Merge.","47f2c71b8868e8c70056fc71938fb413fbce5a47","","api.github.com,git_clone","[u'[""astroid/raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-08 12:33:57","enum members knows about the methods from the enum class.","47f9f0d9530710dabd9b2ff18a24ed6208848c0a","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-22 11:51:52","test fix","4800e2da897bb5ebabdb59ab70b1797228a79fbb","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-20 21:55:34","No warnings are left, run the tests with warnings enabled.","48063025fe56a5c2683a5f9f269aed30a4a71dbf","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 16:19:44","unnecessary import

--HG--
branch : _ast_compat","48072a8b4223734ce084200c0496c0bed60d8f4c","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","cpennington","2017-03-08 15:21:25","Quickstart _infer_binary_operation to raise errors that occur during startup.

Since https://github.com/PyCQA/astroid/commit/3e27213914271309a4716662b09fda91fca9efa1,
is_subtype and is_supertype raise exceptions when they can't find a
relationship between types. This is caught by the callers of
_infer_binary_operation. However, the error is only thrown after the
generator return by _infer_binary_operation is started.

Prior to this patch, the generator is only started inside the else
clause of:

try:
    results = _infer_binary_operation(lhs, rhs, self, context, _get_binop_flow)
except exceptions._NonDeducibleTypeHierarchy:
    yield util.Uninferable
else:
    for result in results:
        yield result

To address this, the quickstart decorator pulls the first value from the
generator when it's called, and then buffers that first result until it is
needed by the later iteration.","480e6d53210b4c160b4347cbb4987d92842a5c45","","api.github.com,git_clone","[u'[""astroid/inference.py""]']","False","[u'https://github.com/PyCQA/astroid/commit/3e27213914271309a4716662b09fda91fca9efa1']","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-22 10:29:50","prepare version","48137d9b3331ed39e740887dca7ee51679640517","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""ChangeLog"", ""__init__.py"", ""test/unittest_builder.py"", ""__pkginfo__.py"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-01-28 09:45:26","Mark __init_subclass__ as classmethod  (#389)","48148a5092291323909052f7ce2fdfa97272057c","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[{u'raw': u'#389', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'389', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-02 18:04:53","[C] typos","481654202ba1e5400b3c75c4d8b71ad911faebb2","","api.github.com,git_clone","[u'[""inspector.py"", ""utils.py"", ""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-08 11:09:48","Handle builtins without a __module__, especially for Jython.","48200b3276dd642c1f2f1c42fd89f39433731609","","api.github.com,git_clone","[u'[""astroid/raw_building.py"", ""astroid/tests/unittest_raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-22 07:13:17","Skip the same infered nodes as the base class in _is_metaclass. Closes issue #25.

--HG--
branch : ancestors","4824cc633ad4bd3b6477cb621b38790fb3ff75da","","api.github.com,git_clone","[u'[""test/unittest_regrtest.py"", ""scoped_nodes.py"", ""test/regrtest_data/recursion.py""]']","False","[]","[{u'raw': u'#25', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'25', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-11-16 08:43:43","py3k test fixes. Closes #109988","48311880746d16b473098ee9ae6d0cb75181d5cc","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""setup.py"", ""test/unittest_nodes.py"", ""test/unittest_inference.py""]']","False","[]","[{u'raw': u'#109988', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'109988', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 11:09:07","take care args may be None

--HG--
branch : _ast_compat","48781518fd521b3804733e5c5eb692f540012cb6","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-24 21:42:49","Make pylint happyy.","489ad7eb63fd91c9254ea88e3991e2ed596b2456","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/tests/unittest_inference.py"", ""pylintrc"", ""astroid/tests/unittest_nodes.py"", ""astroid/rebuilder.py"", ""astroid/context.py"", ""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-28 16:21:32","backport stable","48a1f7647f341e0daa4e1f06cb9f31642bcaf4ce","","api.github.com,git_clone","[u'[""bases.py"", ""mixins.py"", ""test/unittest_inference.py"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""scoped_nodes.py"", ""rebuilder.py"", ""test/unittest_utils.py"", "".hgtags"", ""test/unittest_scoped_nodes.py"", ""debian/changelog"", ""test/unittest_builder.py"", ""builder.py"", ""node_classes.py"", ""test/unittest_lookup.py"", ""utils.py"", ""raw_building.py"", ""test/unittest_nodes.py"", ""ChangeLog"", ""nodes.py"", ""nodes_as_string.py"", ""_nodes_compiler.py"", ""test/regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-24 18:53:24","Add brain tip for understanding numpy.core's mutation of the __all__ variable

Since astroid doesn't understand properly augmented assignments, we have
false positives with pylint when trying to find numpy attributes defined
in some submodules, since numpy and numpy.core generates the __all__
list by appending values from the subimport's __all__.
This should fix pylint's issue #453.","48ae5588ea98868445fa9774a0c5da8bcd79d821","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/pynumpy.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#453', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'453', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-17 12:11:50","remove InferenceContext.startingfrom; use a set for path_wrapper

--HG--
branch : rebuild","48b2a7ccd271a0584c344c88928bcdbed335ceb8","","api.github.com,git_clone","[u'[""inference.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2014-06-30 08:32:28","Add changelog entry for Class.metaclass() changes","48e10cda3706bf563b9a95799119624bb3f29905","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-26 18:00:00","Disable the no-value-for-parameter message for now, since it's a false positive that needs to be fixed later on in Pylint.","48f1599827ecc948fea50619e0b2725187f298a4","","api.github.com,git_clone","[u'[""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-25 23:25:17","Remove the use of scandir. Unfortunately it's supported only by CPython.","490583096ca34577e83a0afcce4a30fe03b78f2f","","api.github.com,git_clone","[u'[""astroid/modutils.py"", ""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-17 12:28:40","don't use a stack for InferenceContext.path
The stack failed to detect infinite recursions.
This also closes http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=568968

--HG--
branch : rebuild","491de0250ce7225e1f37a5a6780bc4b0e4edc127","","api.github.com,git_clone","[u'[""manager.py"", ""bases.py"", ""test/unittest_inference.py""]']","False","[u'http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=568968']","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-08 23:56:13","Update .hgignore to hide build and test artifacts.","494664168fe9545f0d6b8a8cb1a7d3141383c842","","api.github.com,git_clone","[u'["".hgignore""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-10 14:00:24","cleanup: norm_read can be done directly","496e40ed0f16e9f90937dc49c82aa1f37652c1ba","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","dbaum","2016-01-14 17:14:39","Fix unpack_infer to fail if results are empty

This should prevent a StopIteration leaking when next is called
over unpack_infer.","4986a15c87d1cb2c62dd019795d7a13fef319ed3","","api.github.com,git_clone","[u'[""astroid/tests/unittest_utils.py"", ""astroid/node_classes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-23 22:53:08","Merge heads.","4994d925b0f8aeac339abb4f18afa199dd784f75","","api.github.com,git_clone","[u'[""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","dmand","2015-10-24 13:39:40","Use safe_infer for inference of elements in list multiplication operation

Now inference yields YES instead of list item value when multiple
values are inferred for one list item.

--HG--
branch : fix-list-multiplication","49bdf8277887ee440ffb57ad92582e1ab1d229ba","","api.github.com,git_clone","[u'[""astroid/protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-12-18 10:14:03","Make sure we don't convert a None object to a list.","49c9dcfd103fdf28b37f686a14be755ed1ff1058","","api.github.com,git_clone","[u'[""astroid/interpreter/_import/spec.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-12-08 13:31:33","closes #62295: avoid ""OSError: Too many open files""

by moving .file_stream as a Module property opening the file only when needed","49e14c536022b0f16888b3096e6d5a462518ceeb","","api.github.com,git_clone","[u'[""builder.py"", ""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#62295', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'62295', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-20 16:18:45","Fix a crash which occurred when the class of a namedtuple could not be inferred.","49e868601fc9a4fe0384d28daf2855aff49f2b20","","api.github.com,git_clone","[u'[""astroid/brain/brain_stdlib.py"", ""astroid/tests/unittest_regrtest.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-25 18:37:37","d-t-w","4a23c666eba18550b9f137efd2932efdaf4df5d4","","api.github.com,git_clone","[u'[""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-06 19:15:34","Remove hardcoded behaviour of has_dynamic_getattr for optparse.","4a587ad49613f82f789dcc8aaf322e823a773b39","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-01-14 09:16:56","Brian Hawthorne 'with' statement patch","4a74eabf068918ce449d51d670935b2e189bf20d","","api.github.com,git_clone","[u'[""nodes.py"", ""inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-18 10:41:58","fix : stay 2.3 compat","4ab63a1857ea86c681f6aebfbb12d65133d388c1","","api.github.com,git_clone","[u'[""patchcomptransformer.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 22:38:01","d-t-w","4ad973131db13205aec86eff4bdbfdeff190b8c8","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-16 15:27:15","python 2.4: fix lineno setting for If nodes

--HG--
branch : rebuild","4ad9cd4d91f6d7d0fee36aa286a059551d3c2933","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-21 17:33:02","Remove tox.ini","4aefce4616e48f68b0d222511202fe0db3550888","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-25 18:35:41","Module is NOT a statement ; modify sibling

--HG--
branch : _ast_compat","4b0b2d20b52ae0eccf9285d6d21daad375e4325c","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-04-17 09:38:47","Added tag logilab-astng-version-0.24.3 for changeset a4a9ed0f8a0c

--HG--
branch : stable","4b2350991aecb361fff1701016dcf1711a16d077","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-05 01:27:11","Merged in lorenzph/astroid/fix-recursive-attr-lookups (pull request #75)

Fix recursive class attribute lookups","4b5aa3382df265878dd00c51e652f5f0285344e1","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[{u'raw': u'#75', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'75', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-13 19:29:00","Expose function annotation to astroid. `Arguments` node exposes 'varargannotation', 'kwargannotation' and 'annotations' attributes, while `Function` node has the 'returns' attribute.","4b80e44c09e81e611f630896eb38e376d09094a1","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""node_classes.py"", ""test/unittest_python3.py"", ""rebuilder.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-06 14:54:01","no more astutils

--HG--
branch : _ast_compat","4baba8df47959bd16db13cc866c2df7892829b46","","api.github.com,git_clone","[u'[""patchcomptransformer.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-02 14:41:41","Use conditional deps to simplify tox.ini","4bd1701364807fa5aed916ef857b8dd441ac9d2f","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-26 15:08:51","Add a separate Slice object, which is used when inferring the slice builtin call

We do this because of an internal distinction we're making between
AST nodes and inference objects. The following distinction might help
for understanding better where an AST node is used and where an inference object
is used:

    * if the AST node can be used on its own, e.g. List, Tuple, etc,
      then the AST can be used in the inference.
      They have a syntactic display and can be written on its own,
      e.g. ""[]"" is a valid list. That's why the inference of their
      respective builtins (list, tuple, set etc) returns an AST node
      when inferring.

    * if the AST node is part of syntax and can't be used
      on its own. This is the case for slices for instance, e.g ""[2:3:4]"".
      In this case, trying to write ""2:3:4"" on its own will fail.
      The respective builtin (slice) returns a custom object when inferring
      and not an AST node per se.","4be398afd4285efe21a589aebe41e17a84357721","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/brain/builtin_inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-08 14:42:49","Improve the message.","4bf4b0b7d16d1dc112560f93cfd1d1b5dd7c02f4","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-05 12:35:25","default method for empty nodes

--HG--
branch : _ast_compat","4bfaddf6f803fb68ae82e43ec8cd8a78cce558db","","api.github.com,git_clone","[u'[""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","adimasci","2006-09-26 16:50:29","DH_COMPAT=5","4c763efc2dcfe7972f29f276930435fb46d2f091","","api.github.com,git_clone","[u'[""debian/rules"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-04-16 11:07:16","0.24.3

--HG--
branch : stable","4ca36d5da5f95477cebbc73e990617609244069e","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-11-19 14:17:19","0.17.4","4cba50d84e8585838c394bc367a770cb2fd5e776","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-07-29 11:45:04","distinguish between local name on object class name, add a fallback to local name in case member.__name__ is unset, as reported by Derek Harland on python-project (june 2009)","4cdfc82457a0962c2dcb1ebc2a1129d4e4863170","","api.github.com,git_clone","[u'[""builder.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-03-27 11:24:03","Use correct argument names in the py2stdlib brain urlparse module. Closes #123062

--HG--
branch : stable","4d20cfd473704c77f25b5c3be130900faf391e65","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#123062', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'123062', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-18 18:22:10","Class.local_attr and Class.local_attr_ancestors uses internally a mro lookup, using .mro() method, if they can.

That means for newstyle classes, when trying to lookup a member
using one of these functions, the first one according to the
mro will be returned. This reflects nicely the reality,
but it can have as a drawback the fact that it is a behaviour
change (the previous behaviour was incorrect though). Also,
having bases which can return multiple values when inferred
will not work with the new approach, because .mro() only
retrieves the first value inferred from a base.","4d42b7b4cfd05629d0a704a514ade8a30da09c8b","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 19:07:45","fix lookup of module attributes accessible in module scope

--HG--
branch : _ast_compat","4d60db050e3ddb99343328f0b4018c10f6176f6f","","api.github.com,git_clone","[u'[""lookup.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-26 17:42:31","Merged in ceridwenv/astroid (pull request #86)

Improve decorator introspection using wrapt and functools.wraps.","4d900fe473fa8cdab08dd08e5cfcc347b6c9353e","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""tox.ini"", ""astroid/decorators.py"", ""astroid/bases.py"", ""astroid/__pkginfo__.py""]']","False","[]","[{u'raw': u'#86', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'86', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-09 18:30:22","The functional form of Enum returns a class, not an instance.","4db19dddf4110b7ae380efc83be5e489ba922884","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-10 17:45:20","Add a bootstrapped CI verification, using pylint.","4dcb033eb06229ece6e0d6084caf28549bb52097","","api.github.com,git_clone","[u'[""tox.ini"", ""pylintrc""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-25 19:10:09","some small test corrections

--HG--
branch : _ast_compat","4dfc38b476a4ad1f1f8603f7e6ea58db14951dd9","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""utils.py"", ""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-01 09:58:41","Added tag logilab-astng-version-0_17_0 for changeset 3eb17cfa7620","4e24753b338182bed0ec7e7cefa247bf3392da44","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-02-14 19:32:23","Infer starred expressions in tuple, list, set and dict literals (#396)","4e7d9fee4080d2e0db67a3e0463be8b196e56a95","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#396', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'396', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-28 10:41:57","override get_children for Dict

--HG--
branch : _ast_compat","4e8cd2c99958b9158962454e2ccb552d18896e0a","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-13 08:50:59","Fix argument search for methods and classmethods.

--HG--
branch : args_fix","4e92fa523f75143070ccb704e62d82fb4fcba23c","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-10 10:11:51"," packaging : add py3k target; update setup.py and other files to make py3k packaging work","4ec4201c489fb4fd608b333db7f35b6933f1eaa6","","api.github.com,git_clone","[u'[""debian.py3k/source/format"", ""debian.py3k/control"", ""__pkginfo__.py"", ""README"", ""debian.py3k/rules"", ""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-26 16:18:35","cleanup for _astng_fields

--HG--
branch : _ast_compat","4ed71413c3c1afa4a36fd56f6d9ebe434bc8cb7a","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-28 19:42:03","Improve the nose brain tips.

This patch uses `.methods` instead of `.locals`, since the stub class doesn't
have any locals. Also, it builds BoundMethods for the assert methods instead
of functions as it was done previously.","4edda49f36aefc1e83110a0e860bd098e694d069","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/pynose.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","nchauvat","2006-08-13 11:16:56","drop python2.2 support","4ef5bf2099453ff4d32125f2d2246f4f424ef9d8","","api.github.com,git_clone","[u'[""test/fulltest.sh"", ""builder.py"", ""__pkginfo__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-06 15:06:11","Add two new exceptions, AstroidImportError and AstroidSyntaxError.

They are subclasses of AstroidBuildingException and are raised when
a module can't be imported from various reasons.
Also do_import_module lets the errors to bubble up without converting
them to InferenceError. This particular conversion happens only
during the inference.","4ef9c896f4f8835dc1d49c70844fbc9337b24f93","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python3/data/invalid_encoding.py"", ""astroid/exceptions.py"", ""ChangeLog"", ""astroid/mixins.py"", ""astroid/inference.py"", ""astroid/manager.py"", ""astroid/builder.py"", ""astroid/tests/testdata/python2/data/invalid_encoding.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-11-26 12:31:21","Add __setitem__ to deque's brain tip.","4f591e7d69ab96ee2bb3eff64c42ff48114cb511","","api.github.com,git_clone","[u'[""astroid/brain/brain_stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-09-26 16:27:17","try to fix debian package","4fb746350ad957b3e9f44d9410fe8b04ac6fb3fe","","api.github.com,git_clone","[u'[""debian/python-logilab-astng.prerm"", ""debian/python-logilab-astng.postinst"", ""debian/changelog"", ""debian/rules""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-12-18 15:43:03","Better Changelog message.

--HG--
branch : metaclass","4fca58aa59f4bcffd112393f2b3593944e319dd4","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-11-19 14:01:22","merge","4fd99076a73873ac4f230c7400c80decacb2ea62","","api.github.com,git_clone","[u'[""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 12:05:30","should not return duplicated interfaces

--HG--
branch : _ast_compat","4ffe3abbc1c0d138b803000624b6d20f88fd42ee","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-12-04 07:56:16","delete some trailing whitespaces","5021eeedaf6b45f1fd288ce6b42aa8d34cb709ba","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-08 14:24:03","Compute the namespace package path with pkg_resources","503927fab50e967dcef305d49692b077631e68b6","","api.github.com,git_clone","[u'[""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-26 22:06:08","Revert an unwanted change from the previous commit.","503a1c5b75bf3ff62506653a8696b5cedd55f536","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 19:18:24","fix decorators attribute

--HG--
branch : _ast_compat","5083822149d6545b18325f8577038c422b7c6719","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-04-15 10:56:41","mro() can be computed for classes with old style classes in the hierarchy","5092504bd476fa24a95bf9e818f4523f9b67f4c5","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-08-24 19:44:39","Fix some pylint errors over the code base.","509764da75aa7edf9d45cb88d4a86d8a2386ed31","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/tests/unittest_brain.py"", ""astroid/bases.py"", ""astroid/interpreter/objectmodel.py"", ""astroid/tests/unittest_inference.py"", ""astroid/tests/unittest_object_model.py"", ""astroid/tests/unittest_raw_building.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/interpreter/__init__.py"", ""astroid/raw_building.py"", ""astroid/scoped_nodes.py"", ""astroid/interpreter/_import/util.py"", ""astroid/tests/unittest_utils.py"", ""astroid/tests/__init__.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_manager.py"", ""astroid/as_string.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-08 13:30:02","Don't introduce empty values for non-zip importers in path_importer_cache and add a test for implicit namespace packages.","50fa4b80dc526eedaf5c878c32c89ad5e054b59e","","api.github.com,git_clone","[u'[""astroid/modutils.py"", ""astroid/tests/testdata/python2/data/namespace_pep_420/module.py"", ""astroid/tests/testdata/python3/data/namespace_pep_420/module.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-11 12:30:35","Added tag astroid-1.3.5 for changeset 21520283d496","5104cfb0e31bb88882c6c6bb6e9c653c56ee99e9","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-28 15:07:05","handle Keyword node

--HG--
branch : _ast_compat","5138e48a7a0646525cb20f407b38c3b88c649948","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-18 10:27:16","fix an infinite recursion bug","51539300dbf6071c963acab72ecb7e52ee5c4e21","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-21 09:06:49","Fix reconstruction of nodes for FormattedValue. Close PyCQA/pylint#1582","515936563ff8bea1a9764ed01eb500c35a305445","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_fstrings.py""]']","False","[]","[{u'raw': u'PyCQA/pylint#1582', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1582', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-07 19:57:45","First pass of the Python 3.5 support.","515a38f8bfba3c4e59892f98018121848b8924a1","","api.github.com,git_clone","[u'[""astroid/nodes.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/scoped_nodes.py"", ""astroid/node_classes.py"", ""astroid/inference.py"", ""astroid/brain/builtin_inference.py"", ""astroid/rebuilder.py"", ""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-07-30 12:46:32","Added tag astroid-version-1.0.0 for changeset 1d6914a1a1a0","516983118834ab320b2e2d7b16c64816be29322b","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 16:24:27","another typos :|","518ddb62ba15b41da022f3827df1c8f39308a34f","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jquast","2014-11-21 08:12:23","return AstroidBuilder() value in py2pytest.py

This closes issue #55. function pytest_transform()
fails to return any value, causing NoneType exception
in register_module_extender().

--HG--
branch : pytest-fails-register-module-extender","51a0032656216d64d5770a95cba27e7cc246aaf2","","api.github.com,git_clone","[u'[""astroid/brain/py2pytest.py""]']","False","[]","[{u'raw': u'#55', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'55', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-24 12:08:56","Add astroid.helpers, a module of various useful utilities which don't belong yet into other components.

Added *object_type*, a function which can be used to obtain the type of almost any astroid object,
similar to how the builtin *type* works.","51a41665cf0214f64869654afe1fe31385c20e3f","","api.github.com,git_clone","[u'[""astroid/raw_building.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/helpers.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-07-08 12:30:56","closes #70565: absolute imports treated as relative (patch by Jacek Konieczny)","51c1ee879f391b0cfa64016c5b3a8ddbb8b55ab6","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""test/regrtest_data/absimp/string.py"", ""test/unittest_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#70565', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'70565', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-06 21:56:06","Test Super.pytype, Super.display_type and Super.name","51c2d8c476cb932b95ea5e1f78f49626b23ed980","","api.github.com,git_clone","[u'[""astroid/tests/unittest_objects.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-04 13:37:15","expose some more stuff for pylint

--HG--
branch : rebuild","51f139b5c236c76dc2681c79600178cb1d7a7cc3","","api.github.com,git_clone","[u'[""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-20 16:08:49","disable assignement context for subscript nodes

--HG--
branch : rebuild","522e9cc96d418d421176637aec84216a8cb6a0a9","","api.github.com,git_clone","[u'[""rebuilder.py"", ""test/unittest_utils.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-07-08 10:25:31","closes #70381: IndendationError in import causes crash","52a71451b92972c9d5cfdcd9d26c77dc432d54ef","","api.github.com,git_clone","[u'[""mixins.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#70381', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'70381', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-13 10:11:14","Inference of the functional form of the enums takes into consideration the various inputs that enums accepts.","52ae161026cdc83721d5c4af7d34a9f9131966f7","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-10 10:25:08","remove unused ""_file"" attribute ; node.file has already been set","52d36b84d1dee758efe23cccb7cc5cc04ce2e7f6","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-25 08:17:17","0.19","52fea6d97bab8dd19e9ee7f43a962fc145e5fa45","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","eevee","2014-03-25 01:00:17","Speed up rebuilder considerably by computing line numbers lazily.

Fetching the last child of each of hundreds of thousands of nodes is
relatively expensive, and most of the time this information is never
used, so don't actually figure it out until it's asked for.  Saves the
overhead of quite a few function calls, too.","53013fa01f45114c1b8ee87527eab4fbeef8a113","","api.github.com,git_clone","[u'[""mixins.py"", ""scoped_nodes.py"", ""node_classes.py"", ""bases.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-18 12:34:10","Handle empty strings as arguments to StopIteration when looking for slots().

StopIteration can have an empty string as an argument on Jython,
which lead to an incorrect result when calling .slots().","5308c0f2b05d3742878ae28c36d5fe4b6d52833e","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 08:54:11","oops

--HG--
branch : _ast_compat","533220fa3ab0c7e675befbddd0e19bb78e58cf99","","api.github.com,git_clone","[u'[""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-08 12:06:21","[B] bugfix for shift operators and tests","5362f4a0eae9efa8b625ba0de078951c83e66769","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 14:58:32","more special attributes handling fixes

--HG--
branch : _ast_compat","536f3efaaa298115a93fc34a7909c8c4c4260ca9","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-03 14:47:53","Remove trailing whitespace.","53785b760b4da1371475af082485e636a8d1f573","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-28 22:25:44","Forgot to add posargs in the master branch.","538218d3baefd5f0aa9537122e8325e5c697fbae","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-08-20 07:17:42","README for _ast compat

--HG--
branch : _ast_compat","539bbf20d24c2e8044e04033d25764236a59859f","","api.github.com,git_clone","[u'[""README._ast_compatibily""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-11-05 06:07:39","update to (theorically) supported python versions","539f8f38ca28f870986c4ce96fe02e0f27f23212","","api.github.com,git_clone","[u'[""test/fulltest.sh""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-09 12:10:13","builtin objects as_string infinite recursion fix","53b38e74e90a13e2f40d202f39904c1e5f2fadda","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-10 17:51:51","Change the order of the dependencies.","53ebb724247cbef2355a795afa253823c7cb0579","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2016-05-16 22:54:01","Convert all files to new license header","54556be81068cc38e37fb4fcccc126d50de5d405","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/brain/brain_pkg_resources.py"", ""astroid/tests/unittest_inference.py"", ""astroid/brain/brain_numpy.py"", ""astroid/nodes.py"", ""astroid/brain/brain_qt.py"", ""astroid/tests/unittest_objects.py"", ""astroid/tests/unittest_peephole.py"", ""astroid/mixins.py"", ""astroid/helpers.py"", ""astroid/brain/brain_ssl.py"", ""astroid/brain/brain_mechanize.py"", ""astroid/manager.py"", ""astroid/tests/unittest_transforms.py"", ""astroid/raw_building.py"", ""astroid/builder.py"", ""astroid/bases.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/modutils.py"", ""astroid/test_utils.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/arguments.py"", ""astroid/brain/brain_six.py"", ""astroid/tests/unittest_raw_building.py"", ""astroid/node_classes.py"", ""astroid/tests/__init__.py"", ""astroid/tests/resources.py"", ""astroid/tests/unittest_utils.py"", ""astroid/rebuilder.py"", ""astroid/decorators.py"", ""astroid/transforms.py"", ""astroid/__init__.py"", ""astroid/as_string.py"", ""astroid/brain/brain_nose.py"", ""astroid/scoped_nodes.py"", ""astroid/util.py"", ""astroid/tests/unittest_builder.py"", ""astroid/brain/brain_dateutil.py"", ""astroid/objects.py"", ""astroid/context.py"", ""astroid/brain/brain_builtin_inference.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_modutils.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_stdlib.py"", ""astroid/protocols.py"", ""astroid/tests/unittest_python3.py"", ""astroid/brain/brain_pytest.py"", ""astroid/astpeephole.py"", ""astroid/brain/brain_gi.py"", ""astroid/__pkginfo__.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-16 15:37:36","Properly handle case-insensitive filesystems in modutils.","54643a1f6fc52bc2c36c765343a06be51f57112f","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/modutils.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-13 12:42:42","Added tag logilab-astng-version-0.20.2 for changeset 85f38bd9cd77

--HG--
branch : stable","549cef3c16031bd722dd1d4ea032f1521d19b686","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-07-25 13:52:58","Use six.moves instead of logilab.common.compat.

--HG--
branch : no-logilab-common","54d3871cf554eae94bc48f1215cea5ebd8bce8ea","","api.github.com,git_clone","[u'[""astroid/raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-23 22:45:51","Skip non-class bases.","54e9d81866989389dc19bac1a103764421f35b4f","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-31 17:17:02","Split brain_stdlib into multiple modules and finally kill it.","54fb1ab7d57a4100f147b69fb04d846cd68de909","","api.github.com,git_clone","[u'[""astroid/brain/brain_namedtuple_enum.py"", ""astroid/brain/brain_subprocess.py"", ""astroid/brain/brain_hashlib.py"", ""astroid/brain/brain_collections.py"", ""astroid/brain/brain_threading.py"", ""astroid/brain/brain_stdlib.py"", ""astroid/brain/brain_multiprocessing.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-04 17:40:36","fix Compare and Discard bugs

--HG--
branch : _ast_compat","55024a5a7907b00450de77decb8ac0d14b68fb33","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-08 16:08:02","Merged in davidshea/astroid/pygobject-require_version (pull request #78)

Duplicate calls to gi.require_version.","553fb66e75368199d8cbfeefa132cf9925e963e4","","api.github.com,git_clone","[u'[""astroid/brain/py2gi.py""]']","False","[]","[{u'raw': u'#78', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'78', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-15 10:34:11","typo in node_classes; py3k - fix manager test (can't iterate on Project)","555d700fd9807d21405d00fd747c11787b796134","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-01-26 20:23:43","Fix test to take into account the new _sitebuiltins.

--HG--
branch : nameconstant_py34","558ff686832d1634c1fceac7897524f3c23be502","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-01 16:24:11","cleanup: rebuilder: test None values only in known cases","55bcdbbfefbe7e6141351a449f7196653110b169","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 15:09:34","actually backport Sandro Tosi 0.17.4-2 changes","55cca63fc6fe5bde09a31757b246c1bdc4e82b3d","","api.github.com,git_clone","[u'[""debian/rules"", ""debian/control"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-02-03 09:29:06","Add link to Python issue.

--HG--
branch : nameconstant_py34","55d4371d9f9dca0689f7b44198ccbde5e88a4ed6","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-05 15:54:26","fix ListCompFor.as_string and bugs

--HG--
branch : _ast_compat","56255971eb9954545e5953b30edc69b6de972122","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-02-09 07:55:59","Fix metaclass detection when multiple keyword arguments are used in ClassDef (#402)","563031aaf13a44adc8db4f8d0ab8020d550aae00","","api.github.com,git_clone","[u'[""astroid/tests/unittest_python3.py"", ""astroid/rebuilder.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#402', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'402', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-09 10:12:16","Implicit namespace package support for modpath_from_file for Python 3.3+.","5641f4c2a6ae5a5915cfe73a04625cad9740f799","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-09 14:59:14","remove Yield's parent node if it is a Discard; testcase

--HG--
branch : _ast_compat","56b2fe9087b378b762e449dca1c7c7753184273f","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-04-12 12:56:15","fix dumb name error, ASTNG_BUILDER was later used

--HG--
branch : stable","56c853b254ae1c4de94517fbba465af3808aa1e5","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2006-05-22 10:38:43","packaging updates","56d666917b5950b3b11308aad6567f2aaa84863d","","api.github.com,git_clone","[u'[""debian/rules"", ""debian/control"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-05-14 06:50:30","Force enum34 1.1.3 or later (#430)

Closes PyCQA/pylint#1388","56db400412fb36b5c2bbdb9ffb18b7c007f19b49","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#430', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'430', u'']}, {u'raw': u'PyCQA/pylint#1388', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1388', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 23:14:02","absolute_modname is a better name...","570939bfa6a9a4fc294770bc63ec0bebea99cf95","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-08 10:41:24","Don't crash when getting the string representation of BadUnaryOperationMessage

In some cases, when the operand does not have a .name attribute,
getting the string representation of a BadUnaryOperationMessage leads
to a crash.

Close PyCQA/pylint#1563","573b900773d249fbb2858c1a19db3f1434abbd42","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/util.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'PyCQA/pylint#1563', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1563', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-15 14:53:14","More code review fixes","5745a8c25592f6051691eca8b55a1cff1eb304d8","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/rebuilder.py"", ""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-18 21:51:21","More fixes for bugs introduced during merge","57551b823a3f1b68085d02f6f6321dbe84e1d074","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/bases.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/tests/unittest_inference.py"", ""astroid/tests/unittest_objects.py"", ""astroid/scoped_nodes.py"", ""astroid/node_classes.py"", ""astroid/inference.py"", ""astroid/objects.py"", ""astroid/rebuilder.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_transforms.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","thedrow","2015-06-01 10:33:29","Fixed syntax errors in Python 3.

--HG--
branch : fix-python3-tests","575ea49d2f126cd5b294cd333360a9e60adf5f3f","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python2/data/module2.py"", ""astroid/tests/testdata/python2/data/module.py"", ""astroid/tests/testdata/python2/data/nonregr.py"", ""astroid/tests/testdata/python2/data/appl/myConnection.py"", ""astroid/tests/testdata/python2/data/notall.py"", ""astroid/tests/testdata/python2/data/SSL1/Connection1.py"", ""astroid/tests/testdata/python2/data/module1abs/__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-07-07 16:04:13","Remove automodule, we cannot use it due to astroid's heavy bootstrapping of builtins.","579ccd51bea9f0e174fa24d8ad5b18032e622e9c","","api.github.com,git_clone","[u'[""doc/extending.rst"", ""doc/inference.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-06 12:48:59","Add inference support for getattr builtin.

Closes issue #103.","579ed4c0707cda2d601c178cceb74463c328c94c","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/brain/builtin_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#103', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'103', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-03-12 12:37:20","Use nodes.Unknown instead of Uninferable for specifying unknown inference results

In the context of binop inference for lists and tuples, we were rebuilding
a collection with the inferred elements. We were using Uninferable for specifying inference failures, but this leads to having non-AST nodes in collection's elts attribute, which should not happen. Instead, we replaced Uninferable with Unknown, meaning now we have an AST object.","57a087f7555dfda286f3bd81c4712d126821306f","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/nodes.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-27 15:42:41","fix: returning nothing should be infered as Const(None): closes #37105","57b2bc697cffb64a4d5a1de4b8674b59c8d93932","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[{u'raw': u'#37105', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'37105', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-25 15:31:49","rename scoped classes and fix dependencies

--HG--
branch : rebuild","57ef54098a823ab10f139d818a05029f1edfd15a","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-30 17:48:12","Merged in davidshea/astroid/py3-communicate (pull request #83)

Add a timeout parameter to Popen.communicate in PY3K.","581195e02bfa9e6c82dbf6f8710709b0f0b2eb07","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py""]']","False","[]","[{u'raw': u'#83', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'83', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 15:57:23","option to print repr_tree with ids (for debugging)

--HG--
branch : rebuild","585184106fb4534b775636a4e0a8cfa0f6c6debf","","api.github.com,git_clone","[u'[""_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-03 10:48:55","handle nested arguments

--HG--
branch : _ast_compat","586c123478adbc64cdfb99f09f7808d1f4e5aeaf","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2009-08-27 08:33:46","merge","586de3f84f1d0d3812399c013806c41c508af0ff","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 09:10:02","cleanup

--HG--
branch : _ast_compat","58b658be265730ebf9e35a9bfa5c95882a951192","","api.github.com,git_clone","[u'[""rebuilder.py"", ""nodes.py"", ""test/unittest_inference.py"", ""builder.py"", ""inference.py"", ""lookup.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-10-05 10:52:17","0.24.1

--HG--
branch : stable","58bb9c4ddbd26c179f08444cb4286d627e50b47c","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","cpennington","2017-03-10 19:28:11","Make functools.lru_cache available in all python versions","58d20acfb4ece77271f16b6a6543b61facfa4762","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","eevee","2014-07-03 00:13:48","Fix some deep recursion problems.

They used to be avoided by returning generators in a few places rather
than re-yielding, but I broke that with the context managers.  Oops.

So:

- context.push now returns a new context, which should just be passed
  into the child generator instead of the original context.  This solves
  the awkward problem of returning a generator from within a `with`
  block, where the block will end before the generator is actually
  evaluated.

- The inference cache no longer eagerly evaluates whatever's being
  cached; instead it wraps the original generator in a new one that only
  caches the results once it's done.","58e5e9774ba6a5cb378f2e30eb026489d66922fd","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-07 12:23:00","Add inference support for hasattr builtin. Closes issue #102.","58f6de8ae99a134a6880105d5da33290451fb67c","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/brain/builtin_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#102', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'102', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 11:44:58","* GenExprFor, ListCompFor -> Comprehension
* no more need for loop_node methode on For/Comprehension (they both have .iter attribute)
* no more need for COMPREHENSION_SCOPES (Comprehension is enough)
* move common inference methods from _inference_compiler to inference

--HG--
branch : _ast_compat","590733980d27814aa290312b3ba242781d6529d6","","api.github.com,git_clone","[u'[""nodes_as_string.py"", ""nodes.py"", ""rebuilder.py"", ""_nodes_compiler.py"", ""test/unittest_inference.py"", ""inference.py"", ""_nodes_ast.py"", ""lookup.py"", ""_inference_compiler.py"", ""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-07-24 09:44:54","cleanup and fix modutils tests (among other, logilab.common.modutils was still actually tested)","59553f28ebb03841a7dce4e8c96023e60d4e35cd","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""test/data/MyPyPa-0.1.0.zip"", ""modutils.py"", ""test/unittest_modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-07-24 20:49:45","Make astroid compatible with Python 2.5 again.","59664a4f325772118f9a7f6b4e38696d3211cde6","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-02-14 08:30:05","Merged in PCManticore/astroid/nameconstant_py34 (pull request #21)

Workaround for _io module, having __module__ as `io`.","5987a160867a6e1dc00bdece720f2d7fab8634e0","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[{u'raw': u'#21', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'21', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-17 20:07:57","Add inference support for the `bool` builtin.","59a568cd53279fd176826de2d904a469f57a1eea","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/brain/builtin_inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-05-09 07:56:50","check ChangeLog","59c7540204a437f05f7391b8906f10d92dc84a63","","api.github.com,git_clone","[u'[""nodes.py"", ""setup.py"", ""scoped_nodes.py"", ""test/unittest_inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-17 13:03:39","Catch SyntaxError in astroid.builder.AstroidBuilder._data_build and reraise it as AstroidBuildingException.","59c9bb1169d3b200a8611e427b3a45e5b994ad78","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/builder.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-21 17:24:20","Remove debug statements","5a0d6e82d8b4182d2f611e30b71430b08d57c51e","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/test_utils.py"", ""astroid/bases.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-28 13:15:29","Return NotImplemented for inferring binary operations between consts and other nodes only if TypeError is raised.","5a3a73283f0922e13aa9e395081b95e324192100","","api.github.com,git_clone","[u'[""astroid/protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","moylop260","2016-08-22 19:14:06","Export __version__ in __init__.","5a3b55258c3674a8f44c0bdc30c7516ceffd74eb","","api.github.com,git_clone","[u'[""astroid/__init__.py"", ""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 13:24:57","[py3k] fix lookup test","5a547d1834f38e4ed812f1553992893e09907e07","","api.github.com,git_clone","[u'[""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-18 11:33:58","Reraise InferenceError with the syntax error that lead to a failed do_import_module call.","5a9c849d47a296190f7f4167e4422d3e334ed519","","api.github.com,git_clone","[u'[""astroid/mixins.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2013-07-18 10:39:00","Fix format_args when there are no positional arguments

When formatting arguments, don't output an extra leading comma if the
function has no positional arguments.","5b0746a34b39a9c8d0fb00a1277fd844666a247d","","api.github.com,git_clone","[u'[""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","douardda","2013-06-17 16:09:03","rename the project astroid","5b40f8a5d5e6a36fd966eb473d0897f3e2f8c547","","api.github.com,git_clone","[u'[""debian.sid/rules"", ""test/unittest_python3.py"", ""bases.py"", ""mixins.py"", ""brain/py2stdlib.py"", ""test/unittest_inference.py"", ""test/unittest_scoped_nodes.py"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""test/data/module.py"", ""scoped_nodes.py"", ""as_string.py"", ""rebuilder.py"", ""inspector.py"", ""test/regrtest_data/package/import_package_subpackage_module.py"", ""test/unittest_utils.py"", ""brain/py2mechanize.py"", ""brain/py2qt4.py"", ""README"", ""setup.py"", ""exceptions.py"", ""test/unittest_inspector.py"", ""debian.sid/control"", ""test/unittest_builder.py"", ""debian/copyright"", ""builder.py"", ""debian/rules"", ""test/unittest_lookup.py"", ""debian/watch"", ""utils.py"", ""debian/python-astroid.dirs"", ""raw_building.py"", ""test/unittest_nodes.py"", ""protocols.py"", ""ChangeLog"", ""nodes.py"", ""debian/control"", ""debian/python-logilab-astng.dirs"", ""__init__.py"", ""test/unittest_regrtest.py"", ""node_classes.py"", ""inference.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-17 19:41:49","astroid.utils.ASTWalker and astroid.utils.LocalsVisitor were moved to pylint.pyreverse.utils.","5b7da58601276b3ff3dd74261dfb8327511f6c5f","","api.github.com,git_clone","[u'[""astroid/utils.py"", ""astroid/tests/unittest_builder.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 10:15:28","missing proxy for builtin type long

--HG--
branch : _ast_compat","5be7030e9f546b88e0204fbac7de2419e8fd1754","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-24 11:30:23","Fix Pylint warnings over astroid.","5c2bdbb44c6092ca31f9924592ef8dc9ef1ed083","","api.github.com,git_clone","[u'[""astroid/raw_building.py"", ""tox.ini"", ""astroid/builder.py"", ""pylintrc""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-05 22:22:55","Add a new node, DictUnpack, for representing the unpacking of a dict using PEP 448

This is a different approach than what the builtin ast module does,
since it just uses None to represent this kind of operation,
which seems conceptually wrong, due to the fact the AST contains
non-AST nodes. Closes issue #206.","5c35c918a6a4b60f8dc89003d4ec14f825d8d59e","","api.github.com,git_clone","[u'[""ChangeLog"", ""astroid/nodes.py"", ""astroid/node_classes.py"", ""astroid/tests/unittest_python3.py"", ""astroid/rebuilder.py"", ""astroid/as_string.py""]']","False","[]","[{u'raw': u'#206', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'206', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-07 16:03:26","py3k: a lot of simple fixes","5c66024331500205f55080e79ab1402d49bfb3fb","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""bases.py"", ""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""test/unittest_inference.py"", ""test/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-16 16:28:44","    * api change to be able to infer using a context (used to infer function call
      result only for now)","5cac2cdb427eed2bb3790154ede1da5577d87660","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""ChangeLog"", ""nodes.py"", ""__init__.py"", ""test/unittest_scoped_nodes.py"", ""test/unittest_inference.py"", ""inference.py"", ""lookup.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-24 21:29:31","Expose a implicit_metaclass() method in Class.

This will return a builtins.type instance for newstyle classes, otherwise it will
return None.","5cba0952e33b1fae59da0a93923fb3650ab5649f","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-11 16:47:12","Remove unused variable.","5cc59dfa6b84d377a289dfce76562bea42259c79","","api.github.com,git_clone","[u'[""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-12-18 16:16:24","Merged in PCManticore/astroid/metaclass (pull request #9)

Metaclass support","5d2fcf060013b7698b32a4a35302ac808679a513","","api.github.com,git_clone","[u'[""rebuilder.py"", ""ChangeLog"", ""test/unittest_python3.py"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""as_string.py""]']","False","[]","[{u'raw': u'#9', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'9', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-04-17 15:28:23","Merged in PCManticore/astroid/ancestors (pull request #29)

Unwrap instances found in `.ancestors()`, by using their _proxied class. Don't inherit the metaclass status if the current class can't be a metaclass.","5d39c45124f91b5dc4aff6236dea4acba666199e","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""test/data/module2.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#29', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'29', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-09 16:17:10","test assignement to True and yield; fix yield as_string","5d3f2a5255224c15c316d0854fd9db2b41a201a0","","api.github.com,git_clone","[u'[""as_string.py"", ""test/unittest_nodes.py"", ""test/data/module2.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-07 10:47:05","[C] cleanup","5d4d26ce080cd85328c5b2d8f762cad702d57949","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-11 09:39:46","explicit imports","5d56900ee2d5559a1969be7fe82952edfadcab97","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","anthony.truchet@logilab.fr","2013-06-26 13:06:34","[doc] Setup Sphinx for documenting Astroid.","5d61709d856140b8d0f9a823ec62f4adae04cf4a","","api.github.com,git_clone","[u'[""doc/Makefile"", ""doc/extending.rst"", ""doc/source/extending.rst"", ""doc/source/conf.py"", "".hgignore"", ""doc/make.bat"", ""doc/source/index.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","flying-sheep","2013-11-25 18:10:19","added unittests for file_stream","5d6c158ab8b2d2701bf22add64c2bf41b19f9a34","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""test/fulltest.sh""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-02 13:50:47","Backout changeset.","5dc3d54286d4dd7cfc92a43ccaf8322c0ded7939","","api.github.com,git_clone","[u'[""raw_building.py"", ""test/unittest_raw_building.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-22 15:18:49","Allow only classes to be looked up in the metaclass chain for searching for an attribute.","5dca8e2a591baa0de387fb148046ddd887e2abb2","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-17 08:09:17","update package, version and debian infos

--HG--
branch : rebuild","5dce31bcbdfedf8b82823ee897b815865e63c38a","","api.github.com,git_clone","[u'[""debian/changelog"", "".hgtags"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 08:34:09","delete useless Discard node and catch

--HG--
branch : _ast_compat","5deb0f9a581f242584923148d79b615f04ed1b74","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_exceptions.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-19 18:17:54","Remove redundant if, astroid is 2.7+ only.","5deb78464b0fd7d951c5dbc926de5d71e8ec2f51","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-02 13:46:25","Fix pylint warnings.","5e09987dae3ba174fc0b6a5e64f3cf242b63a836","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-07-24 10:58:20","fix typo","5e2265e596f9e8b0b0f29c0dc3f890c2110b55dd","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 17:26:31","fix unittest_lookup imports

--HG--
branch : rebuild","5e7e54fa613f290b286dea30ee2d7a5826f017fa","","api.github.com,git_clone","[u'[""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-06-04 07:36:56","Add `slots` and `islots` methods to Class nodes.

--HG--
branch : slots","5e8112ef05dce3ccaac1f3cf3b8d66d6012d091d","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-08-25 14:42:38","merge","5ec1e2323c6b401491669ad2bfc11c94e871efc0","","api.github.com,git_clone","[u'[""ChangeLog"", ""debian/rules"", ""debian/control"", ""MANIFEST.in"", ""debian/python-logilab-astng.dirs"", ""DEPENDS"", ""debian/python-logilab-astng.postinst"", ""builder.py"", ""COPYING"", ""__pkginfo__.py"", ""test/fulltest.sh"", "".hgignore"", ""debian/changelog"", ""setup.py"", ""debian/python-logilab-astng.prerm""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","obsc","2015-08-21 00:39:19","Fix infinite loop in metaclass inference","5ec8089dd83afedef8948a85c7fdee2a0bb6a485","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-08-20 07:20:38","_ast_compat branch

--HG--
branch : _ast_compat","5f03c49907c1b3c7b5fb594287871df23a13c1a5","","api.github.com,git_clone","[u'[""README._ast_compatibily""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","asottile","2017-03-01 09:18:53","No longer install tox / pip twice in travis (#409)","5f10041b49506129e3daefc285a0308491e1ed21","","api.github.com,git_clone","[u'["".travis.yml""]']","False","[]","[{u'raw': u'#409', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'409', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","cpennington","2017-03-13 19:57:50","Use set-difference rather than nested loops

On https://github.com/edx/edx-platform/tree/master/common/lib/xmodule/xmodule,
this resulted in the following performance improvement (with no change in the
errors detected):

Before:

Command exited with non-zero status 30
619.70user 322.11system 15:44.25elapsed 99%CPU (0avgtext+0avgdata 587068maxresident)k
0inputs+464outputs (0major+201145minor)pagefaults 0swaps

After:

Command exited with non-zero status 30
294.99user 10.76system 5:05.97elapsed 99%CPU (0avgtext+0avgdata 583536maxresident)k
0inputs+440outputs (0major+167856minor)pagefaults 0swaps","5f1220455b6ee85ea4a28f3a4175431949cf847d","","api.github.com,git_clone","[u'[""astroid/interpreter/_import/spec.py""]']","False","[u'https://github.com/edx/edx-platform/tree/master/common/lib/xmodule/xmodule']","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-22 16:19:43","Merge PR #79","5f1d095aa364714cf8e00eac39c94b0ebaaa1997","","api.github.com,git_clone","[u'[""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_inference.py"", ""astroid/nodes.py"", ""astroid/tests/unittest_objects.py"", ""astroid/tests/unittest_peephole.py"", ""astroid/protocols.py"", ""astroid/brain/builtin_inference.py"", ""astroid/helpers.py"", ""astroid/tests/unittest_transforms.py"", ""astroid/manager.py"", ""astroid/tests/unittest_brain.py"", ""tox.ini"", ""astroid/builder.py"", ""astroid/bases.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/test_utils.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/raw_building.py"", ""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/__init__.py"", ""astroid/as_string.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/objects.py"", ""astroid/context.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/brain/pysix_moves.py"", ""astroid/brain/py2gi.py"", ""astroid/mixins.py"", ""astroid/tests/unittest_python3.py"", ""astroid/astpeephole.py"", ""astroid/tests/unittest_raw_building.py"", ""astroid/inference.py""]']","False","[]","[{u'raw': u'#79', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'79', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2008-05-13 10:21:40","Patch by Maarten ter Huurne <maarten@treewalker.org> to handle Python2.5's GeneratorExit","5f6404d1769b6be47810b1cb7e988d02e3677fcf","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py""]']","False","[]","[]","[u'@treewalker']","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 09:50:55","fix conflict merge

--HG--
branch : _ast_compat","5f7128b370609e8fb4be48890941afcc189f4b8b","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-06 11:26:46","replace lgc.compat imports by regular imports","5f77186d9301a1509410748616885cf85962e462","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""node_classes.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-02-26 22:06:09","default is stable

--HG--
branch : stable","5f8291ac563ee9cc79869891b92e44615301654a","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""rebuilder.py"", ""ChangeLog"", ""test/unittest_inspector.py"", ""test/unittest_regrtest.py"", ""test/unittest_builder.py"", ""brain/py2stdlib.py"", ""test/unittest_inference.py"", ""test/unittest_scoped_nodes.py"", ""test/unittest_lookup.py"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""setup.py"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-04 14:43:59","sort init_<node> functions; cleanup

--HG--
branch : _ast_compat","5fde1d33cf2fc9e11c7eadd35dc91d9d81e1079f","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-07 12:14:22","make test executable as a script","602ec7f66c3866ca8044ed4ff2cf9f22f9243822","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-03-23 09:33:23","catch SystemError as well, we may get that on badly intialized compiled modules","6039b45145e7380dafda2e6aa117e0d34cfd1ba7","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-04 13:46:23","remix Subscript /Slice / Sliceobj

--HG--
branch : _ast_compat","604d3350bdecc014232800d2d9dac0f12bf0fb5d","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-28 13:07:19","Ignore string interpolation with tuples and dictionaries for now.","6069c07821751586b6e13e0f34ea6c2a92705723","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-12-03 09:47:46","Use sys.base_exec_prefix in case sys.real_prefix is not defined

sys.real_prefix is an addition of the *virtualenv* library, but it
is not added when a virtual environment is created with the builtin
*venv* library. In the latter's case, sys.base_exec_prefix is the
one pointing to the original installation of Python. Now, in case
sys.real_prefix is not defined, we fallback to sys.base_exec_prefix.","60743e7e19f319af951948a3fcc2804f980293d3","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","radowit","2015-07-25 12:16:57","Proper argument name","6099799cb3747e222dc89695b64716f55b0ea981","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-15 17:16:57","Improve the detection of lib_pypy, which was faulty.","60a5a783e164d9095bccdbf787c6ff01ca8176e0","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-01-22 12:40:09","Drop installation of numpy for Python 3.3, not supported any longer","60beb83a9e4c544e6d9a0691812a63a31251e191","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-12-04 07:53:19","fix test failure in unittest_regrtest, due to change in the handling of extensions loading

Allowing to load arbitrary extensions fix test_new_style_class_detection but
make test_numpy_crash fail because inference seems to do a better job than
before and doesn't return anymore a YES object. As this test only checks that it
doesn't crash, simply stop checking this.

Closes #62","60f82d91dade1093f30e2185225534bb37cde492","","api.github.com,git_clone","[u'[""astroid/tests/unittest_regrtest.py""]']","False","[]","[{u'raw': u'#62', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'62', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-04-26 08:58:36","fix licensing to LGPL","60ffd2a62a327289dc915a2ff9401ff38285cbe8","","api.github.com,git_clone","[u'[""debian/copyright"", ""COPYING"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ovidiusabou","2015-02-14 17:14:28","Fix func_code retrieval for Python 3","613b1fa5ff17e80231d87aad2dced2547ea6e6b2","","api.github.com,git_clone","[u'[""astroid/raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-11-20 06:52:31","Added tag logilab-astng-version-0_17_4 for changeset 26dff2cd8bb7","613d9fbe17c7a904f78cee03c486c7a54aa2af4d","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-22 20:00:43","Make class_as_index private.","6146e38d1ed236427d61bfd13c097cd3d29cd017","","api.github.com,git_clone","[u'[""astroid/protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-15 09:58:48","remove more py2.4 relative stuff and fix readme","616a5be4d2dee8f16683306ac5bcc62c65c638fd","","api.github.com,git_clone","[u'[""README._ast_compatibility"", ""debian/control"", ""MANIFEST.in"", ""bases.py"", ""test/unittest_scoped_nodes.py"", ""README"", ""scoped_nodes.py"", ""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-09 09:05:30","refactoring for tree rebuilding

rebuilder: move all post build process to builder and don't depend on manager

builder:
 - instanciate ASTNGBuilder's ASTNGManager and TreeRebuilder only once
 - cleanup build methods;
 - ""_data_build"" should become entry point for possible astng pickle cache","618701a1cae066ff9e9fd00a6a3c3420931637d5","","api.github.com,git_clone","[u'[""builder.py"", ""utils.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","laura.medioni@logilab.fr","2015-10-30 15:28:44","add support for inference on str.split()","6193b56b752c81a011419feb026f8fd5d22d8163","","api.github.com,git_clone","[u'[""astroid/brain/brain_builtin_inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-12-08 15:56:40","default is stable

--HG--
branch : stable","61a3c2dee47d35223c7ce3b8609f1821530f58b7","","api.github.com,git_clone","[u'[""README.Python3"", ""test/unittest_scoped_nodes.py"", ""debian.sid/rules"", ""ChangeLog"", ""debian.hardy/rules"", ""debian.sid/control"", ""debian.py3k/source/format"", ""debian.py3k/control"", ""builder.py"", ""debian.hardy/preinst"", "".hgtags"", ""__pkginfo__.py"", ""README"", ""debian.py3k/rules"", ""scoped_nodes.py"", ""debian/changelog"", ""setup.py"", ""debian.sid/source/format""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-11 14:40:27","Cleanup.","61a85fcbb39d7a633635fe5802e0d517a4453394","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-25 17:45:19","moving stuff around to avoid circular imports

--HG--
branch : rebuild","61df5384faee1c38e4881a81a00183be6861ed6f","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""protocols.py"", ""rebuilder.py"", ""infutils.py"", ""nodes.py"", ""node_classes.py"", ""inference.py"", ""lookup.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-16 22:36:14","Fix some NameErrors in modutils.","61f5fc5135972101e347cdbd4501bf32d1bcedab","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-10 17:28:06","fix bug on _get_names; some cleanup

--HG--
branch : _ast_compat","621b279e63fa62334b753f74736e36d363b70ccd","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""rebuilder.py"", ""nodes_as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-25 12:59:01","Cleanup a test.","621c9b41e899685917dba978645e54be33ec7e6b","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 17:27:37","fix some further bugs

--HG--
branch : rebuild","62521969008d227747ba771265977b84e29cc93d","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-10 09:48:20","fix astng building bug: we've to set module.package flag at the node creation time

otherwise we'll miss this information when infering relative import during
the build process (this should fix for instance some problems with numpy)

--HG--
branch : stable","629bddb398245c0cc0c8f93b66e835ce7cc6b718","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-12-15 07:51:09","When verifying duplicates classes in MRO, ignore on-the-fly generated classes

Close PyCQA/pylint#1706","629c92db2dc1b016f4bf47645c95c42e65fd3bd6","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'PyCQA/pylint#1706', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1706', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-05-22 12:56:11","Fix an inference for trying to unpack Uninferable value in context manager (#429)

Closes PyCQA/pylint#1463","62d9f8debf26f221b0a552600d651f2b24542eef","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/protocols.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#429', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'429', u'']}, {u'raw': u'PyCQA/pylint#1463', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1463', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-24 18:05:26","apply Edward K. Ream patch  (maximum recursion depth exceeded)

--HG--
branch : rebuild","6308983a2f1697e88e1034f70d0292ffdb175869","","api.github.com,git_clone","[u'[""inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","imih","2017-04-21 09:32:21","Variable name is found_spec, not spec (#422)","6329346e5836e553ab8f96f9d540e907a5d5efdb","","api.github.com,git_clone","[u'[""astroid/manager.py""]']","False","[]","[{u'raw': u'#422', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'422', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-03-23 08:47:19","fix #20464: raises “TypeError: '_Yes' object is not iterable” on list inference","632f61b2d181dc7e9fe922965ae111f76444f407","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""protocols.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#20464', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'20464', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-09 14:20:09","local_attr_ancestors fallbacks to using .ancestors if .mro() fails.","634541689b060755772840cac693dd542e4c1f09","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-18 10:01:01","update Changelog

--HG--
branch : rebuild","6378d7a10cddf793f904fa0109df08374d924c33","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-29 22:41:06","Add a couple of pragma disables for some false positives.","637af26cfea7d38b33c0893c7ae3e8a72d50b926","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","Lothiraldan","2012-07-16 10:09:16","Fix raw_building.object_build for pypy implementation. Closes #99583","63a6aeecec9064c3b5272b67515183afc6eb9180","","api.github.com,git_clone","[u'[""raw_building.py"", ""inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#99583', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'99583', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-11-19 14:01:17","huum, see that later","63d6e01d9670bf857346046993ebf23c62b3534b","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-17 08:15:11","patch scoped_nodes I

--HG--
branch : stable_0.19.2","63f8f2c8e41ac4be854968990d577a6ae9df9e72","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-23 17:41:35","we will now use the RebuildVisitor for ASTNG building

--HG--
branch : _ast_compat","63fc12da6604f558315fbb7602b82ad1bd21c078","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-02 17:38:08","[R] add an _nodes.py for avoiding circular imports.py","6404277c5471119ee0444a67144f57d698b24411","","api.github.com,git_clone","[u'[""protocols.py"", ""infutils.py"", ""nodes.py"", ""_nodes.py"", ""inference.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-25 15:24:37","rename node classes in node_classes and remove dependencies

--HG--
branch : rebuild","641b51c84a6271543a8bb45d27aea963bda119a1","","api.github.com,git_clone","[u'[""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-13 21:13:31","do_import_module passes the proper relative_only flag if the level is higher than 1.

This has the side effect that using `from .something import something`
in a non-package will finally result in an import-error on Pylint's side.
Until now relative_only was ignored, leading to the import of `something`,
if it was globally available.","642723c222ae6701d6b8da17039b6e24fd09f235","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/mixins.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-24 17:36:41","[ast] needs CONST_NAME_TRANSFORMS too

--HG--
branch : rebuild","644f99bbbe7041c22f914dcbc0fbf2e68738cef0","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-15 09:45:00","[B, C] missing import, cleanup","6458a674919bba9af69c62af0d123b7981f72a8c","","api.github.com,git_clone","[u'[""nodes.py"", ""node_classes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","radowit","2015-07-25 12:02:22","Add option to search for all Python files in get_module_files","645b0ce18fdb082112da1e6e6c78bf681f2c5af6","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""tox.ini"", ""astroid/modutils.py"", ""astroid/tests/testdata/python2/data/notamodule/file.py"", ""astroid/tests/testdata/python3/data/notamodule/file.py"", ""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-11 08:12:52","Show for what classes a consistent mro order couldn't be determined.","6490a487a4793c2595c43ce155c33ec18b18304e","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-25 11:25:08","new display_type method for display in pylint reports","649c0029bc3f93a420c48f4a8f6b8f8fd54dc940","","api.github.com,git_clone","[u'[""infutils.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-22 17:13:50","Use the old display types, since they are used by pylint to generate error messages.","64b3c326b012ad1237a1ffa174ba4c8f770775b9","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-02 13:08:36","there are two test_del methods

--HG--
branch : _ast_compat","64cc6f43d6e411abdb98a6436168ca6e563db504","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-25 18:17:36","remove most factory functions and create instances

--HG--
branch : rebuild","64ea2049c068a1e99bc036a650af94f22c76c796","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes.py"", ""_nodes_compiler.py"", ""node_classes.py"", ""_nodes_ast.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-12 08:31:00","py3k / Raise : use ""exc"" instead of ""type""

have other attributes explicitly different for 2.x and 3.x","650f0a151ca98b8e91a91c11305b84f771c64dbb","","api.github.com,git_clone","[u'[""as_string.py"", ""scoped_nodes.py"", ""_nodes_compiler.py"", ""node_classes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-11 16:17:09","py3k: ListComp becomes a ComprehensionScope","653e89d04baff8fba4ce3add0457c27e5dc32d81","","api.github.com,git_clone","[u'[""nodes.py"", ""node_classes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2006-11-21 12:52:48","merge","65d88ad62128b838089051ad729782b2b67643b1","","api.github.com,git_clone","[u'[""debian/control"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-18 14:01:10","handle assignement/delete context in visit methods

--HG--
branch : rebuild","65fbca6afa77d91135b86a459a1dc1f521ab1c00","","api.github.com,git_clone","[u'[""builder.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-17 17:52:58","Don't use encoding in the except branch, since it's not defined.","663da9ca37bd4292d292919ec6e3f10e663d13ab","","api.github.com,git_clone","[u'[""astroid/builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-13 15:50:56","ListComp and ListCompFor nodes

--HG--
branch : _ast_compat","6643172162d6f06963ef02bdf200731cb30a0c8c","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""utils.py"", ""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-11 16:14:45","Move decorators from bases to decorators module.","666abf4a568618488dfbd14146a1927674056e27","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/decorators.py"", ""astroid/bases.py"", ""astroid/inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-11 17:19:00","no explicit constructor for Slice and Index (same as other classes)

--HG--
branch : rebuild","66724fc0227f0c8487226bc2f144dbf99c5dba18","","api.github.com,git_clone","[u'[""node_classes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 09:04:42","introduce Arguments node

--HG--
branch : _ast_compat","667abe5f90a878550ec6e9f00b6b5dc3254c6f5a","","api.github.com,git_clone","[u'[""nodes_as_string.py"", ""nodes.py"", ""rebuilder.py"", ""_nodes_compiler.py"", ""test/unittest_scoped_nodes.py"", ""inference.py"", ""_nodes_ast.py"", ""lookup.py"", ""scoped_nodes.py"", ""utils.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-11-05 06:07:14","use new style class","66d12360591ea2e46f9190c99d32d33b3d09a63d","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-31 10:41:24","Proper mro support for six.with_metaclass. Closes issue #85.","66efeb009ea94fd9494951bb7c6f866c6c9b6f37","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[{u'raw': u'#85', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'85', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-07-24 11:22:39","attempt to fix a failure only occuring on the drone.io platform","6700d0d86153d051c1e7c36b86e06408eb93fc38","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-24 11:17:55","[mq]: inspector-locals-type.diff

--HG--
branch : stable","67225db1ecfbfabb386b4c85a371095786eb127a","","api.github.com,git_clone","[u'[""inspector.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-12 13:22:14","Return.value is None if returning nothing

--HG--
branch : _ast_compat","67638964b9e83d8ec821e5a9bb0c64601fe413d9","","api.github.com,git_clone","[u'[""inference.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-01-19 16:02:39","use open rather than file as 2to3 miss it (probably because of the file class attribute)","67739b7c1fd8b0dd1f84f42bd7f52c7deb69b299","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 16:41:39","remove debug print

--HG--
branch : _ast_compat","677d720fd78572bc0cd9520dc0f6a6f494eb7db8","","api.github.com,git_clone","[u'[""nodes_as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-03-28 07:13:08","don't call const_factory for builtin types subclasses, this will trigger error later. Closes #124337

--HG--
branch : stable","67af81a655bebebd387f0c13ba38f45aab82ad44","","api.github.com,git_clone","[u'[""node_classes.py"", ""raw_building.py""]']","False","[]","[{u'raw': u'#124337', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'124337', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-04-26 18:47:42","Only cache modules if no other module with the same name is known yet, and
only return cached modules if name and filepath match.","67bc089414d086aad5420bb69e05f67c84008f27","","api.github.com,git_clone","[u'[""builder.py"", ""raw_building.py"", ""manager.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-01 20:41:02","Fix the name of the __pow__ protocol.","67d842c66eaa3c043566275aeacd225eadaf266c","","api.github.com,git_clone","[u'[""astroid/protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-27 19:57:52","Add coverage configuration, backported from pylint.","67f1c8de3e07bd3d969c460a78aa6a0e7675626a","","api.github.com,git_clone","[u'["".travis.yml"", ""tox.ini"", "".gitignore"", "".coveragerc"", ""README.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-03 15:00:44","alphabetical sort of nodes; remove useless imports

--HG--
branch : rebuild","684ad5df32f62b1e928430edf6ecb8fdfaee98aa","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-17 18:01:28","Merge pull request #296 from lmedioni/issue265

Add information about parent module to the elements defined in it","684f77f111b9709dc42ad58959b50b22e2da3e94","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/__init__.py""]']","False","[]","[{u'raw': u'#296', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'296', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 10:04:20","cleanup, test global delete","6872c543f8c92e8d159700b1dd2bfa2e990119df","","api.github.com,git_clone","[u'[""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-07-25 13:57:12","pylint source code","6895584b2b3cb9cb128804048f826d3b077d1d1b","","api.github.com,git_clone","[u'[""test_utils.py"", ""utils.py"", ""modutils.py"", ""protocols.py"", ""rebuilder.py"", ""inspector.py"", ""bases.py"", ""mixins.py"", ""builder.py"", ""node_classes.py"", ""inference.py"", ""__pkginfo__.py"", ""manager.py"", ""as_string.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","julien.jehannet@logilab.fr","2010-11-19 16:25:59","[pkginfo] make setup.py py3k compatible","689d969225d8c999eb519cadc1ba43088b53fe5e","","api.github.com,git_clone","[u'[""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 14:15:18","fix NoneType representation

--HG--
branch : _ast_compat","68bfe86607f50209c3e9482143ba6c9f091dd38f","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-09 15:16:59","Add 'assert_equals' method in nose.tools's brain plugin.","68c77fc816dd32bcf2618a621720106d97b017ff","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/pynose.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","eevee","2014-04-08 18:01:34","Add an inference cache to InferenceContext.","68efc111d35ab4a1bf31e0c95ee188e019bf3e37","","api.github.com,git_clone","[u'[""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 11:13:13","littls bug fixes

--HG--
branch : _ast_compat","69041de75ae6b40cc06c90c87276ca77089e67a0","","api.github.com,git_clone","[u'[""inference.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-04 12:06:55","Some parts of the comments weren't true anymore.","6919a6048575205ab44b5eb07df3fca5be3d9594","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-29 19:35:21","Merge with default.

--HG--
branch : ancestors","69343a67a50314697b6148ef7495131cb113ea7f","","api.github.com,git_clone","[u'[""tox.ini"", ""test/unittest_nodes.py"", ""ChangeLog"", ""test/unittest_python3.py"", ""test/unittest_builder.py"", ""test/data/module.py"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 13:15:37","fix code snippet indent","69505ff56a25030490d4ada0a5d2b09f6ae8e397","","api.github.com,git_clone","[u'[""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-26 09:37:37","first overlook to change the needed classes in _nodes_compiler

--HG--
branch : rebuild","695cf7d57469fefbbab76414e2188c25556d4650","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-11-26 15:11:42","Add __delitem__ to deque's brain tip.","6963c74ffb9e69b5af8d376078dcb7ab1596a906","","api.github.com,git_clone","[u'[""astroid/brain/brain_stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-10-05 13:56:34","Added tag logilab-astng-version-0.24.1 for changeset 604235790ace

--HG--
branch : stable","696fe640b6ad273ccc6affe2f0b878717fdb1e48","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 09:10:16","needs astng_fields defined

--HG--
branch : _ast_compat","69785463e45d8600bf8cced31be26baa8e0e5404","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-03 18:39:47","remove infutils import in manager.py by adding a ""instanciate_class"" method.
We prepare this way a coming code rearrangement and avoid circular import.
Remove ""is_class_node"" which was only used here.

--HG--
branch : rebuild","6999b05af2c2f3577c21768138f00e4d0e1cb762","","api.github.com,git_clone","[u'[""manager.py"", ""scoped_nodes.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-03-01 09:14:39","Add brain_re.py for correct inference of regex flags in Py3.6 (#407)","69b65500f7655e4341ccff6f174eea432dac7bc3","","api.github.com,git_clone","[u'[""astroid/brain/brain_re.py"", ""astroid/tests/unittest_brain.py""]']","False","[]","[{u'raw': u'#407', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'407', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 14:24:42","rename README._ast_compatibility","69ebe455d8edc0be8a9e119b3de5d62fc0914984","","api.github.com,git_clone","[u'[""README._ast_compatibility"", ""README._ast_compatibily""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-04 15:51:48","add a ""has_base method"" for Class to break circular imports and more polymorphism.
of course all other nodes return 'False'.

--HG--
branch : rebuild","6a35b89b319a2fe27b3ca8532c72142c0b25ae27","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-07 22:07:09","Make duplicated_kwargs a public API.","6aaf4b3373de16a10f6f981782129c9665644f51","","api.github.com,git_clone","[u'[""astroid/arguments.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 16:15:32","test and fix builtin_lookup w/ __dict__ name

--HG--
branch : _ast_compat","6aafad449461681a2c22dd19e591f0b7c35e08ed","","api.github.com,git_clone","[u'[""lookup.py"", ""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 15:09:53","lint fixes

--HG--
branch : _ast_compat","6ac08a007866ae11d8f398245dfc05cee806b236","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""protocols.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-12 17:06:43","Arguments.args can be empty

--HG--
branch : _ast_compat","6b2fa9e4264d85b67e7bcccfb2af9d8cab6e7f61","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-03-19 08:38:10","[test] fix unexpected replace","6b53e3d94807fa59ef751068199f3c2b759f2f1a","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-25 16:27:23","trying to handle the imports

--HG--
branch : rebuild","6b59dfa123bb3cfb7474ba321f3ea813bf07e3c8","","api.github.com,git_clone","[u'[""protocols.py"", ""infutils.py"", ""nodes.py"", ""builder.py"", ""inference.py"", ""_nodes_ast.py"", ""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-03-30 17:25:58","_ast compat step 1

--HG--
branch : _ast_compat","6b636000eceef3ac91a3fa40911291a95b73244f","","api.github.com,git_clone","[u'[""_inference_ast.py"", ""utils.py"", ""nodes.py"", ""__init__.py"", ""_nodes_compiler.py"", ""test/unittest_builder.py"", ""builder.py"", ""inference.py"", ""_nodes_ast.py"", ""lookup.py"", ""_inference_compiler.py"", ""manager.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-07-25 14:54:45","Simplify decorators.cache.

--HG--
branch : no-logilab-common","6b88b988b2099be4bd5460cba9d8d884c6c0d8a4","","api.github.com,git_clone","[u'[""astroid/decorators.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-02 08:00:50","update changelog","6b93a161956ac2d91b2f3b4f88e4cde5cadb1ab4","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-08-24 06:44:03","Add support for discovering .pth file created by certain namespace packages.","6b9a7ed82cef0b89edb00b19e991fe6ec5d057d5","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python2/data/foogle/fax/a.py"", ""astroid/tests/testdata/python3/data/foogle_fax-0.12.5-py2.7-nspkg.pth"", ""astroid/tests/testdata/python2/data/foogle/fax/__init__.py"", ""astroid/modutils.py"", ""astroid/tests/testdata/python2/data/foogle_fax-0.12.5-py2.7-nspkg.pth"", ""astroid/tests/testdata/python3/data/foogle/fax/__init__.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/testdata/python3/data/foogle/fax/a.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-18 13:55:11","delay adding the imported names to the locals if the source module is not in the cache.
This is necessary for avoiding infinite recursion

--HG--
branch : rebuild","6b9c1549bf60fe07cebba109c73b616093119a23","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 18:01:45","_get_child_sequence for replace_child and sibling

--HG--
branch : _ast_compat","6be37a84801ce92e283a9b2820f4322021d4786d","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-04-02 12:55:19","Fix assigned_stmts() for AnnAssign nodes without value (#420)

Fixes #419 and PyCQA/pylint#1389","6c224ce95ce1c5b1c6e6209d620313a09caf0491","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/tests/unittest_protocols.py""]']","False","[]","[{u'raw': u'#419', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'419', u'']}, {u'raw': u'#420', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'420', u'']}, {u'raw': u'PyCQA/pylint#1389', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1389', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-02 13:44:50","Merged logilab/astroid into default","6c2d06e155a7e1279bb52abc264b2adb853d2467","","api.github.com,git_clone","[u'[""rebuilder.py"", ""test/unittest_builder.py"", ""builder.py"", ""test/fulltest.sh"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 19:31:05","handle zip/egg import","6c37319f1c1327627719a855eefc3806671c2160","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""manager.py"", ""debian/control""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-01-16 09:02:08","builtin_lookup shouldn't return anything for __dict__","6c459025809092ff6cab20a073c6cb039f21e17f","","api.github.com,git_clone","[u'[""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-01 20:08:46","Add support for inferring subscript on instances, which will  use __getitem__. Closes issue #124.","6c5c67b69d237d37674da5f8cb9a4ddd7d4047a3","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/bases.py"", ""astroid/inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#124', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'124', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-03-28 16:42:29","unify BUILTINS_NAME / BUILTINS_MODULE into astng.bases.BUILTINS

--HG--
branch : stable","6c99c192b93da49a56b98a5888ccfcdb66b2c75d","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""bases.py"", ""__init__.py"", ""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""test/unittest_inference.py"", ""node_classes.py"", ""test/unittest_manager.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-19 18:41:47","Activate a disabled test.","6ca4d496aeb0c5c0f9d2d0f700a2d08091d8243a","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-11-23 15:09:59","close changelog","6cb500b013ed1ff1dd5e617a9db3184c53fa48e7","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-03-19 08:48:51","call transformation for builtin modules as well (though not yet for their child nodes)","6cd480552017e6e44f0bc0c17687fc1c380fb9c7","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""builder.py"", ""manager.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-11 19:13:45","walk on function default nodes

--HG--
branch : _ast_compat","6cfb2a6127b066d8f4c5e473b6aca4674fe4ca78","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-25 07:42:55","Fix.","6cfe211df3515188ef893afeabbdc25298839302","","api.github.com,git_clone","[u'[""modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-21 09:44:26","fix Module.getattr and rename ""absolute_modname"" to ""relative_to_absolute_name""

This renaming is done because there is actually no simple way to know if we
are on an absolute import or on an implicit relative import.
And the ""absolute_import_activated"" killed
the relative import we just wanted in case of ""relative_only"" option.","6d59ad07d722d01e458aaf8fd14fd7dfc7ebaa6e","","api.github.com,git_clone","[u'[""mixins.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-05-11 09:22:04","fix bug discovered by launching test with -OO

--HG--
branch : stable","6d641b0481904ec25b13d63c98042dd3f5168dce","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","flying-sheep","2013-11-24 11:00:14","extracted string_build from file_build. now string_build allows for file_stream to be accessed.","6d801e690cf4b6b1cf7434869d45a6ee7d982693","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 08:21:40","remove_nodes for getattr methods

--HG--
branch : _ast_compat","6d845d81b50e576057b02d6a338b4e6edf578e36","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-17 15:12:54","Merged in mplatings/astroid (pull request #70)

Work around the Python 2 part of issue https://bitbucket.org/logilab/astroid/issue/72/installing-astroid-via-setuptools-as-a","6d886c1d78f0aaee65aa3443a5763f4214a00dc2","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python3/data/module2.py""]']","False","[u'https://bitbucket.org/logilab/astroid/issue/72/installing-astroid-via-setuptools-as-a']","[{u'raw': u'#70', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'70', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-28 13:18:11","Emit YES for all string operations operands, it will be implemented later.","6d8a4fd359609daeb0067b37df0250446ba07e4d","","api.github.com,git_clone","[u'[""astroid/protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-09 12:10:59","fix crash on numpy (though inference is broken on numpy functions due to wrong __module__ on living objects)","6dceb642a3876c2bc169f59dfb686435c259cbb1","","api.github.com,git_clone","[u'[""manager.py"", ""inference.py"", ""test/regrtest.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 08:57:11","more slice test

--HG--
branch : _ast_compat","6e0619f91ffa1561fb0908ed55d75c955b9f5f9f","","api.github.com,git_clone","[u'[""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-25 08:32:36","require lgc 0.39 actually, close debian/changelog","6e0c4c11ca742c6df9b7b96f8dc17f72ddf652e9","","api.github.com,git_clone","[u'[""debian/control"", ""debian/changelog"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-26 14:49:23","remove the test env for..testing purposes.","6e11b6bf30bd8959ea7e1e420aa46b197542fb8c","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-08 13:43:53","Support namespace packages only for versions with the module spec feature implemented.","6e171fff16d580a388c6a468c153978a0c5bbb92","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-11-11 11:42:29","astroid's master is 1.6","6e20606a44b3e44c185f37f633b5ae714a8fc53c","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-04-15 12:51:50","bugfix in _resolve_looppart : catch TypeError
calling getitem raises TypeError on unsubcriptable Const (int, ...)","6e2588643722fe48e81ae32016414aa023e68146","","api.github.com,git_clone","[u'[""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-24 16:11:44","Added tag logilab-astng-version-0.20.0 for changeset e00a23b3fd1a

--HG--
branch : stable","6e2a3867f23927968af5f873ebb8c92e2b56dfc8","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-03 16:49:26","move ""_nodes.py"" to ""bases.py""

--HG--
branch : rebuild","6e5bd7737b21efc6c3b1ace6e5093fd4c5c45597","","api.github.com,git_clone","[u'[""_nodes.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-09-16 07:47:33","remove sys.path manipulation around builder.string_build (closes #76159)

That has probably been added in the past as a work around to have relative
import working. Not sure if it's still necessary or not, but that's not
a correct solution anyway, as this may cause pb with some module wrongly
named and added to sys.modules, which may lead to crash (see details
on stack overflow, link on the ticket)","6e6e182003ad3cff1ac7632f908a8d543148d9c5","","api.github.com,git_clone","[u'[""builder.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#76159', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'76159', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","degustaf","2017-01-22 12:31:15","Make ClassDefs support keyword arguments. (#384)","6e74cf4827956ab7c2df84b95e3d56a46e20d223","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/rebuilder.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/bases.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[{u'raw': u'#384', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'384', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-25 09:53:10","py3k: fix test_inspect_build0

not sure what was tested before though ...","6ebce1e279c18c2473e6a2520e14ccad8125c148","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","cpennington","2017-03-10 19:28:21","Cache object attributes","6edf633dd61092d80349420d02540e16d3a7fd35","","api.github.com,git_clone","[u'[""astroid/interpreter/objectmodel.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 16:23:11","merge

--HG--
branch : _ast_compat","6ee97e80c164b543c05935e96b3ac7fb3284c300","","api.github.com,git_clone","[u'[""TODO._ast_compat"", ""ChangeLog"", ""nodes.py"", ""nodes_as_string.py"", ""_nodes_compiler.py"", ""inference.py"", ""_nodes_ast.py"", ""utils.py"", ""TODO""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-03 09:29:28","Add new property name in the list of known property-like objects.","6f2ec796dd5765f9356482fff5b08a547d9951e9","","api.github.com,git_clone","[u'[""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-16 15:02:13","prepare merge with default: get new inference test

--HG--
branch : rebuild","6f3929911bacd742cb7e6e9043023349f108940a","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-10-28 11:37:19","Add ChangeLog entry for changeset dde82e7.","6f3e3dac14b10a86793aed9003c3110dd1a3ce9f","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-15 13:13:18","Add support for not byte-compiling test files invalid by design.","6f4674b0d8fde3effb5e5ffc3bb2f08e4238c3ba","","api.github.com,git_clone","[u'[""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-03 11:21:14","Trim two extra lines.","6f6e5f5b85a0f61b985d4d6b4116baceb5dbe2bb","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-08-24 08:17:42","Forgot to make _import a package.","6fa9aa43bb4d7687dd62232602b40b823f26fcbf","","api.github.com,git_clone","[u'[""astroid/interpreter/_import/__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-02 14:18:02","Fix tests for Python 3 and Windows.","6fa9f3d235f92e1b4f37f947fb475cd6ae7b6375","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""test/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2008-09-01 13:20:05","avoid false redefinition of visit_assattr","6faf166a269f34232f930bd413569e488fc0fd37","","api.github.com,git_clone","[u'[""inspector.py"", ""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-19 07:50:38","Merged in jayvdb/astroid/use_print_function (pull request #91)

Fix SyntaxError on Python 2 for print function","6fb153c252351865f1f7c43ba43d900f1bf83e31","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python3/data/module.py""]']","False","[]","[{u'raw': u'#91', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'91', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-03-28 13:56:18","Add brain tips for the functools.lru_cache decorator.","6fba2eca13450d4949bc2925b3a0f4aa3157d968","","api.github.com,git_clone","[u'[""astroid/tests/unittest_object_model.py"", ""astroid/brain/brain_functools.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-01 16:54:53","Don't forget to give credit to the original author.","6fcae3c779991e1277ab27de27c0142751578ce9","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","dmand","2015-10-23 21:45:36","Fix inference of list multiplication operation.

Old implementation was pushing all the possible values inferred from a node
into a list, thus creating extra items in case when there are multiple infered
values yielded. New implementation takes only first infered value, preserving
the expected size of the list.

Fixes pylint's #559.

--HG--
branch : fix-list-multiplication","6fe44a8fb89f7605a46b70e77b5a93fc3660c0f4","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[{u'raw': u'#559', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'559', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","BioGeek","2014-12-17 15:00:19","Remove superfluous quotation mark in docstring

--HG--
branch : BioGeek/remove-superfluous-quotation-mark-in-doc-1418828415832","6ff1abff56e05be92486d631121c457681d03bad","","api.github.com,git_clone","[u'[""astroid/manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-02 09:10:42","CONST_NAME_TRANSFORMS are only for compiler

--HG--
branch : rebuild","6ff63289e00f3e3b5054f79038cf70ad4f73ae75","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-24 21:33:02","Fix a crash when inferring subscripts which returned the same object all the time.","701d2b7cbc12d4b0dd050503f78da5577266a4b2","","api.github.com,git_clone","[u'[""astroid/inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-26 19:13:33","Update the version to reflect what will be released. Some users are using the repo's version and it's misleading to have the same version for the released code.","703ec99df8c2c7e8289974a0a64fc1fd10eea913","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 09:53:12","(re)introducing AssName, AssAttr, DelName, DelAttr

--HG--
branch : _ast_compat","704df63782db83f08ff3761920930980bd2feced","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""utils.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-02-09 12:27:40","Improve the scope_lookup method for Classes.

This patch improves the scope lookup for Classes, regarding qualified
objects, with an attribute name exactly as one provided in the
class itself.
For example, a class containing an attribute 'first',
which was also an import and which had, as a base, a qualified name
or a Gettattr node, in the form 'module.first', then Pylint would
have inferred the `first` name as the function from the Class,
not the import. Closes Pylint issue #466.","7062462e5b26132f5d479bfdaef68222dba0b04b","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#466', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'466', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-13 18:27:14","Understand partially the 3-argument form of `type`.

The only change is that astroid understands members
passed in as dictionaries as the third argument. This improves
the understanding of classes generated on-the-fly, using
the type function.","70804951b18eafe365c9e2b8551ff6a62f738ef8","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-08-24 07:48:04","Move the spec finder under a new namespace, interpreter._import.","708e538b3ec2e6610b09d6f6b6183236a3c7c049","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/interpreter/_import/spec.py"", ""astroid/manager.py"", ""astroid/interpreter/_import/util.py"", ""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-09 09:28:09","source_line method is now replaced by node.fromlineno

--HG--
branch : _ast_compat","70a0a3880add96b6754d2ba38f675031dd418531","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-28 06:17:35","Fix a crash occurred when inferring decorator call chain. Closes issue #42.","70b05d23a03218cd16bcde339f4ba50dc4a8f27a","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""test/unittest_regrtest.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#42', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'42', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-09 11:53:50","Never load C extensions that are not from the standard library and also never load any compiled Python files.

Fixes pylint issue #347.","70b7afc4e70de165b4770bd9abda6a9b5440fdef","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/modutils.py"", ""astroid/manager.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/unittest_regrtest.py""]']","False","[]","[{u'raw': u'#347', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'347', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-28 16:21:09","Added tag logilab-astng-version-0.20.3 for changeset 24cc9d8273ce

--HG--
branch : stable","70ebf75c07f2c93360263897fb463cf5d2380848","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-07 14:22:48","Change arguments.ArgumentsInference to arguments.CallSite

This new class can be used to obtain the already unpacked arguments
and keyword arguments that a call site uses, which is especially
useful when some of arguments are packed into Starred nodes.","70eee287db89d4f9ded5d86123d01c80d78e10d5","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/arguments.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","douardda","2013-06-17 12:29:33","[pkg] remove lenny and intrepid debian packaging","712b9ea501fcea3dce78de05e83083bfa31a7510","","api.github.com,git_clone","[u'[""debian.lenny/rules"", ""debian.intrepid/preinst"", ""debian.lenny/preinst"", ""debian.intrepid/rules""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-05 08:37:51","Classes aren't marked as interfaces anymore, in the `type` attribute.","713103affcf1f5af198d326c515710cc960d542f","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-28 17:10:08","Add missing tkinter imports.","7173dd95e2d4628191705629865409fef872cea2","","api.github.com,git_clone","[u'[""astroid/brain/pysix_moves.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-30 17:42:02","cleanup: remove single used function; prepare rebuilder / _nodes_ast merge","7192ba41c3e22b12096d5e8946c465b77c6eb347","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-28 09:10:00","Add a new *inference object* called Super

This patch also adds support for understanding super calls.
astroid understands the zero-argument form of super, specific to
Python 3, where the interpreter fills itself the arguments of the call. Also, we
are understanding the 2-argument form of super, both for bounded lookups
(super(X, instance)) as well as for unbounded lookups (super(X, Y)),
having as well support for validating that the object-or-type is a subtype
of the first argument. The unbounded form of super (one argument) is not
understood, since it's useless in practice and should be removed from
Python's specification. Closes issue #89.","719515b4246e43e7238f80fa79869bc514faf15a","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""ChangeLog"", ""astroid/tests/unittest_objects.py"", ""astroid/brain/builtin_inference.py"", ""astroid/objects.py"", ""astroid/as_string.py""]']","False","[]","[{u'raw': u'#89', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'89', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-04-28 08:36:32","merge stable heads

--HG--
branch : stable","71ab4c8d7bedf563ac4a17a87f4db4ca082102a1","","api.github.com,git_clone","[u'[""inspector.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-10 08:56:46","Don't look for namespace packages implicitly into functions doing concrete imports.","71ad069f79a1a2fddcd89606c9236249d9b5e2e1","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-02 11:47:46","Fix failing tests.","71d2bec0391f23da9941c240b4f68a1f6c41ccdc","","api.github.com,git_clone","[u'[""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/testdata/python2/data/notall.py"", ""astroid/tests/testdata/python2/data/module.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","dashea","2015-07-08 15:47:07","Ignore exceptions raised by gi.require_version

--HG--
branch : pygobject-require_version","71ff78a4590edabc526c23105622d867aac12857","","api.github.com,git_clone","[u'[""astroid/brain/py2gi.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","invalid-email-address","2015-01-08 23:11:26","removed long suffix","722511f8ced4d95d87e3ac450be56462bd68c58f","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-17 17:40:02","Merge.","7269b630a8870c7c227cb477c1378f9b4632aa71","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python3/data/module2.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-12 16:42:56","fix argument nodes for _nodes_compiler

--HG--
branch : rebuild","726e6581b623841a4f74792aebef01663f47641f","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""node_classes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-03-11 01:04:54","decoratornames() does not leak InferenceError anymore.","7278409ee6e578c1f40204b062def17d704a08e6","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_regrtest.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-08-20 07:50:06","create branch

--HG--
branch : _ast_compat","72a317bf9aaf05643160061b65510844ecd94792","","api.github.com,git_clone","[u'[""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","crobinso","2014-09-13 11:56:42","brain: gi: fix glib detection

pygobject has some special hidden modules that we need to inspect
for glib and gobject. However, on latest pygobject, the hidden glib
module has been removed, which caused pylint to fail to detect
glib whatsoever.

Tread errors in processing these hidden modules as non-fatal.

Closes astroid issue #49

--HG--
branch : fix-pygi-glib3","72adcb766f6ba1911ff13be7fc624650f5952c4f","","api.github.com,git_clone","[u'[""brain/py2gi.py""]']","False","[]","[{u'raw': u'#49', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'49', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-04-08 12:24:27","backport pylint-brain, up to 6660851486ef","72b38372163e931b037ea8016d6635bd44414fcc","","api.github.com,git_clone","[u'[""brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 14:58:29","more test

--HG--
branch : _ast_compat","72b944561f45370c50bc91a558ee28fcadeac839","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-25 13:45:38","Stop saving assignment locals in ExceptHandlers, when the context is a store.

This fixes a tripping case, where the RHS of a ExceptHandler can be redefined
by the LHS, leading to a local save. For instance, ``except KeyError, exceptions.IndexError``
could result in a local save for IndexError as KeyError, resulting in potential unexpected
inferences. Since we don't lose a lot, this syntax gets prohibited.","72cb2ddff884b7dc03dd8c8365b260caca4e80d8","","api.github.com,git_clone","[u'[""astroid/rebuilder.py"", ""astroid/tests/unittest_regrtest.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-12-04 11:36:44","remove XXX, this is because of python3 list(bytes)","73132467e6511a690d10f5d82e7c69cecfb56c63","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-03 09:44:02","quick fix for Assign.target.name

--HG--
branch : _ast_compat","731b36cb421d1f19e3ea925fe3fc4e5dd23dd650","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-22 13:13:18","Add support for more fine-grained control over extension loading.","7321086423df00fef9bb3aa07d073e9e899d7bc4","","api.github.com,git_clone","[u'[""astroid/manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-14 14:36:12","[R] avoid circular import","73236d990af6fae975180248a9290ae2c29752ca","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-15 13:27:20","Fix the test's astroid cache problem.

There were two problems until now:

  * first, the transformed builtin object was deleting during clear_cache,
    leaving the next tests to use the untransformed tests, which yielded
    InferenceErrors.

  * after the first problem was fixed, another problem with CONST_PROXY
    occurred, since it was creating a new builtins object, without
    the builtins transformations applied, which was used for creating
    the const classes. The problem was that even replacing the
    builtins instance in astroid_cache, InferenceErrors occurred,
    because the const classes were already built and they were referencing
    the untransformed builtins. That's why _astroid_bootstrapping
    allows to receive a new builtins object, which is passed
    properly by the tests.","73721b28765c81764b5aec7bc9dc0b4d43db79d3","","api.github.com,git_clone","[u'[""astroid/raw_building.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/manager.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/resources.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-30 18:55:11","Add debug output for drone.io","739b1f509e286413d7e52fcf6cfb7145324710c6","","api.github.com,git_clone","[u'[""astroid/raw_building.py"", ""astroid/tests/unittest_modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-09 21:33:50","Extend the metaclass hack to cover more potential cases.","739f62fd426ce9ac6a305a6ff58a48c9d0e7d0dd","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/as_string.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-29 14:06:05","Fix a crash which occurred when a class was the ancestor
 of itself.

Closes issue #78.","73a8c27a77967c2e23c423c87d3a9857b5ba8712","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_regrtest.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#78', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'78', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-18 14:11:13","a _filter_node function

--HG--
branch : _ast_compat","73f0d1cde95c2c66206251df5804f1bcd6e056ff","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 16:17:25","no need for backend specific code in inference

--HG--
branch : _ast_compat","7404c50c2e901d40e037eabb001c8174bd5c2c30","","api.github.com,git_clone","[u'[""_inference_ast.py"", ""inference.py"", ""_inference_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-07-29 14:34:24","prepare astroid 1.0","741e50193acac6336763ae4fc20e0b1f30f11203","","api.github.com,git_clone","[u'[""debian/control"", ""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 14:14:25","setuptools fix","7433d82a66de2ae537061c7393fbf15cf5171e86","","api.github.com,git_clone","[u'[""setup.py"", ""debian/rules""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-01 20:16:41","Remove trailing whitespace.","749fbf9140215c195ee1658da2bcfd243d7a59e9","","api.github.com,git_clone","[u'[""astroid/node_classes.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-09-10 03:40:28","First draft of improved state printing","74b2456117b243cbcc5ec69d7ab932ad5a97ffe5","","api.github.com,git_clone","[u'[""astroid/node_classes.py"", ""tox.ini"", ""astroid/bases.py"", ""astroid/as_string.py"", ""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 15:43:40","insttantiate Dict, Tuple, List without arguments

--HG--
branch : _ast_compat","74bb15850c0a984e0e1a857e905849e2353ac410","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-04-13 14:38:25","Try again a new release","7502df8e288009a52324537c7c3adc517f2d8fed","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-27 06:28:29","0.19.1","75041cbb5eeb84a162113eafb813beb008d74963","","api.github.com,git_clone","[u'[""debian/control"", ""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 11:54:51","fix block range

--HG--
branch : _ast_compat","75291e610360414dcaafe916764759861423a22a","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-08-17 07:24:12","bound/unbound methods test","75318f1fed9fc854e1d5cd04197983659f3c260c","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 16:22:35","decorators scope should be in nodes.py

--HG--
branch : _ast_compat","756d75d1ba27fb2ce9690838cf5ef10303b253cd","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-03 15:28:21","Master is now astroid 1.5.0.","7581de6780a06155d0776f6d1318066a181cecd0","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-25 09:05:09","update changelog","75c593a39d0a249ff64aad564857688b2bc5c4cc","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-21 09:44:03","test illustrating problem of absolute_modname vs absolute_import_activated

This reproduces the situations of ticket #37909 and #37665","75d0203dcaab646aa73afdb1646425b4cbe3bc1a","","api.github.com,git_clone","[u'[""test/regrtest_data/absimp/sidepackage/__init__.py"", ""test/regrtest_data/package/hello.py"", ""test/unittest_regrtest.py"", ""test/regrtest_data/absimp/__init__.py"", ""test/regrtest_data/package/absimport.py""]']","False","[]","[{u'raw': u'#37665', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'37665', u'']}, {u'raw': u'#37909', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'37909', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-26 08:49:50","Class.getattr looks by default in the implicit and the explicit metaclasses, which is `type` on Python 3.

Closes issue #114.","76759105d52a7600a56c34aff0f57b1d7ab710a3","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/bases.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#114', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'114', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-04-16 15:44:03","nodes redirection cleanup possible since refactoring","76ec3fb4f732c17a37e2ece518fa877aeaa790bc","","api.github.com,git_clone","[u'[""utils.py"", ""bases.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-21 11:04:39","Merged in jquast/astroid/pytest-fails-register-module-extender (pull request #63)

return AstroidBuilder() value in py2pytest.py","76f2d8c4291def51d645a91243b84807be2e43b7","","api.github.com,git_clone","[u'[""astroid/brain/py2pytest.py""]']","False","[]","[{u'raw': u'#63', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'63', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","Lothiraldan","2012-07-31 08:40:29","Fix python 3 crash on importing from a non existing module. Closes #83749

Pb is actually silented in python 2 since YES objet are seen as iterable
since next() is seen as a proper attribute (returning itself, see
_Yes.__getattribute__), while it becomes a function in python 3.","77161c6367ed0adbeb6d9f457a7751918d3337c6","","api.github.com,git_clone","[u'[""node_classes.py"", ""test/unittest_nodes.py"", ""bases.py""]']","False","[]","[{u'raw': u'#83749', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'83749', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 09:27:09","fix decorators handling w/ py 2.5","771966d7b5682fd62fe78dddd36c6e372112d1e1","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-11-20 06:52:32","Added tag logilab-astng-debian-version-0_17_4-1 for changeset 60b470837ff7","77324b934f5707b258db1ae1b604dd9c6b2b2698","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-05-03 07:01:27","be more error resilient when accessing living objects from external
code in the manager","7793aad70402a8d465904b9dcb8f0579ac67e14c","","api.github.com,git_clone","[u'[""manager.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-12-18 13:41:55","packaging fixes

--HG--
branch : stable","779f24c72a13541f7591c094bdfa02fa1534b1da","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-14 17:37:55","fix a lot more stuff trying to get the leave methods back to work

--HG--
branch : rebuild","77db55de389dae3bceb71d30f5c924ed9c87563a","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_nodes.py"", ""_nodes_compiler.py"", ""node_classes.py"", ""_nodes_ast.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 16:22:10","fix AssName/AssAttr transformation

--HG--
branch : _ast_compat","77dc4b2f200bec5e5527a85e9cb0b30ba2fe6fad","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-05 08:57:21","fix commited merge","78222e4d6cd7d9f73721d9ef72f836c24149acad","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-07-07 16:01:06","Update the sphinx configuration to be inline with Pylint's.","78256c48def62c77d2bf9636834f775ea8d83fac","","api.github.com,git_clone","[u'[""doc/source/conf.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-15 15:31:02","remove double line number setting for arguments

(it fixes a pylint test non conformity).

--HG--
branch : rebuild","782a605d413bd7a7e1f8d0b223a57ff7888a9876","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-21 11:48:14","Fix a couple of style issues:

  - import only modules and use their attributes
  - remove_nodes is now a real decorator
  - use @ syntax for decorators
  - remove line spaces where they weren't necessary
  - remove useless comments","7858e9ff5b0a472f5a2e29b0300610889b03ffd7","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","eevee","2014-07-25 08:22:32","[modutils] Use a cache when abspathing sys.path for file_from_modpath.

This adds a dumb cache. There's no eviction, so there's the risk of eating
memory if sys.path is changed frequently or _module_file is called very many
times with different path arguments, but those both seem unlikely.

Closes #235354.","786b3db05b7d6d5a49aa94a89593b8bb2a220e10","","api.github.com,git_clone","[u'[""modutils.py""]']","False","[]","[{u'raw': u'#235354', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'235354', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-01 16:16:55","Try to canonicalize the lookup paths as well.","788bb41c9eb1078237724933e3d33ca98419c41f","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","hugovk","2017-12-01 12:35:07","Drop support for EOL Python 3.3","78bc8f2e6163461ee15fec53c7d5e28a24507829","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/brain/brain_namedtuple_enum.py"", ""astroid/brain/brain_subprocess.py"", ""astroid/interpreter/_import/spec.py"", "".gitignore"", ""astroid/tests/unittest_manager.py"", ""appveyor.yml"", ""setup.py"", ""README.rst"", ""astroid/tests/unittest_python3.py"", "".travis.yml"", ""astroid/rebuilder.py"", ""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-06 12:07:19","remove useless import","78e39e1e88b5a285b57eb87d7e8af21f43fa8432","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-18 14:46:37","some doc strings and cleanup

--HG--
branch : _ast_compat","78f87e3c6b3e1b5af86e2ba1ae554ea7084c22f0","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-03 11:17:00","Allow .mro to receive a context.","79394994c5c8c65ce603980104b81401d01b291f","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-05-07 15:03:24","Merge with default.

--HG--
branch : classmethod_subclasses","794b81ac0e3e3fbf984d8a00fac0a1bbbae46e26","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-23 16:32:48","handle redirections

--HG--
branch : _ast_compat","79749b98c53fdfdcb9b93e64469ff4a69d3c402d","","api.github.com,git_clone","[u'[""utils.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-07 16:24:25","first sketch for _nodes_comiler.native_repr_tree

--HG--
branch : _ast_compat","797b4b3a8aea42156c22f941c08c23a74801e444","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-02 20:47:45","Fix drone.io line","797e89c30d44408a93b59489f79e5b69c5e124d1","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-21 21:48:50","Added tag astroid-1.3.1 for changeset 6ad84c7537ab","798b4f5beb99dede89a432a11732f917691d51b0","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-17 08:22:09","update scoped_nodes.py from default/stable branches

--HG--
branch : rebuild","799a6102edc88757ee0e35dbfc8db32bac67ad59","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-03-27 11:29:00","Fix inference for generator methods to correctly handle yields in lambdas. Closes #123068

--HG--
branch : stable","79dc5ed3a1de105fdcd32060e94aa31657bfb2cf","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""as_string.py"", ""test/data/module2.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#123068', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'123068', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-31 19:31:36","Fix some inconsistencies with accessing the first argument of methods

If the current class is a metaclass (inherits from `type`), then
the first argument is always a class, not an instance.","7a17ba37ce7a52fc82069814507c9fb65787368b","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/arguments.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-08-16 15:44:42","added D.Borrowitz patch: InstanceMethod node + is_bound method","7a34b80f98be9a0a1c3dad9b75ab99ff24960700","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""__init__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-15 14:55:39","[R] remove empty node classes; comments","7a6bf6bae45a17ddd2896722bf904437db70a95c","","api.github.com,git_clone","[u'[""nodes.py"", ""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-12-18 11:45:39","0.19.2

--HG--
branch : stable","7aa580e7a1165023adab061534e9414c40adb803","","api.github.com,git_clone","[u'[""debian/changelog"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2006-05-27 18:57:41","fix spelling of overridden","7aa805fea49ea3fe6761e987205a78aa020b9031","","api.github.com,git_clone","[u'[""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-12-30 14:56:50","Fix the discrepancies between master and 2.0 code","7b5a3bfb99d7a4554f64e3529daaf3275052cf74","","api.github.com,git_clone","[u'[""astroid/inference.py"", ""astroid/interpreter/dunder_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-28 14:41:07","py3k: make test for module2.py as_string pass","7b9e7036a4577a6538096d517b081cf060ae78f6","","api.github.com,git_clone","[u'[""test/data/module2.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-11 13:53:07","cleanup","7bbae9019bd7474f66aa2ab878cbe3565f6dd516","","api.github.com,git_clone","[u'[""node_classes.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 08:31:14","test and fix Function.argnames

--HG--
branch : _ast_compat","7bc1c0efee0f361fcd7d2042a440ba5fecb67f2a","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-12-21 20:38:55","Added tag logilab-astng-version-0.19.3 for changeset cfafd4b0541e

--HG--
branch : stable","7bdca3882c495ee02a00cac6397fc3d827303464","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-07-24 07:06:48","backport pylint-brain modules (more hashlib description)","7be3fad63e978c19317c63ac2083e906b8a87b28","","api.github.com,git_clone","[u'[""brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-10-12 10:48:03","Run the local tests, not the installed ones, and strip the local path for coveralls","7bfb5e83b162d2126c9929b6d863724176269b6d","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 11:33:44","fix YES handling

--HG--
branch : _ast_compat","7c796fefa0cebe42f343ca7e3e0397ff383635cb","","api.github.com,git_clone","[u'[""inference.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-06 16:00:01","relative_to_absolute_name will now raise TooManyLevelsError when a relative import is trying to access something beyond the top-level package.","7c7aa15f200df3e4ab7b83aa8402ddcfb7458846","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/exceptions.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-13 09:36:47","Merged in raylu/astroid/pylint-480 (pull request #76)

brain module for dateutil.parser.parse","7c8c1e08c62c24a1a282141514a8b4b8c9fb2188","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/pydateutil.py""]']","False","[]","[{u'raw': u'#76', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'76', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-11-19 07:21:38","delete trailing white-spaces","7c9093cf3359c6bf65347f1f6c394042b2681ae5","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-07-25 14:48:51","Remove __docformat__.

--HG--
branch : no-logilab-common","7ca5104c2e169ddb27af3035bd7cab01ef422be2","","api.github.com,git_clone","[u'[""astroid/decorators.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-24 18:32:00","remove unused 'astutils' module

--HG--
branch : _ast_compat","7cbb6741d8596651be0a119db9205be7b8ded6b5","","api.github.com,git_clone","[u'[""astutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-05-11 08:38:29","backport default into stable

--HG--
branch : stable","7ccf76f90eee10479c66f205ff10daf1d48ae89d","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""test/data/SSL1/Connection1.py"", ""test/regrtest_data/package/__init__.py"", ""test/__init__.py"", ""test/data2/suppliermodule_test.py"", ""test/data2/clientmodule_test.py"", ""test/data/appl/myConnection.py"", ""MANIFEST.in"", ""mixins.py"", ""test/unittest_inference.py"", ""COPYING"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""scoped_nodes.py"", ""test/data2/__init__.py"", ""test/data/SSL1/__init__.py"", ""test/data/notall.py"", ""nodes_as_string.py"", ""test/unittest_lookup.py"", ""inspector.py"", ""test/regrtest_data/descriptor_crash.py"", ""test/unittest_utils.py"", ""test/unittest_scoped_nodes.py"", ""setup.py"", ""test/data/appl/__init__.py"", ""COPYING.LESSER"", ""test/data/noendingnewline.py"", ""test/unittest_inspector.py"", ""bases.py"", ""test/unittest_builder.py"", ""debian/copyright"", ""builder.py"", ""node_classes.py"", ""_exceptions.py"", ""utils.py"", ""test/regrtest_data/import_package_subpackage_module.py"", ""test/data/__init__.py"", ""test/data/nonregr.py"", ""raw_building.py"", ""test/regrtest_data/package/subpackage/module.py"", ""test/unittest_nodes.py"", ""protocols.py"", ""ChangeLog"", ""nodes.py"", ""rebuilder.py"", ""__init__.py"", ""_nodes_compiler.py"", ""test/regrtest_data/package/subpackage/__init__.py"", ""inference.py"", ""test/regrtest.py"", ""_nodes_ast.py"", ""test/regrtest_data/absimport.py"", ""manager.py"", ""test/data/module2.py"", ""test/data/all.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-01 11:26:37","Remove trailing whitespace","7cf691fc1fbd9891d3349d0c595b7eb1ce256ae3","","api.github.com,git_clone","[u'[""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-04-08 12:10:59","fix failing test when the whole test are executed, due to caching issue","7cfa6cebf8c6bab2bcdca3347e85b12223be5129","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-14 14:42:06","cleanup: move raw building stuff from builder to raw_building","7d1c379c32dec4b7fe162b036a0eacfd81592ba3","","api.github.com,git_clone","[u'[""builder.py"", ""test/unittest_regrtest.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-09-07 08:23:10","closes #74746: should return empty module when __main__ is imported

Fixes a problem when a module imports __main__. While this is benign
normally (pylint just imports itself, and exposes its __main__ module to
astng, which is wrong, but not fatal), this led to a crash in our deployed,
standalone pylint version.

The fix is now that a completely empty module is returned, since neither the
linter nor the module in question can make any assumptions about __main__.

(patch by google)","7d24bf13562c03eace54dd0414abcbbe61675d97","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""manager.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#74746', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'74746', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-01 11:21:41","Backed out changeset 53b22c3f6ed9","7d2885d7854c75efd7ae2576e04c072c6f6b261e","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-07-14 02:06:51","Work around drone.io","7d63b41d5a4b0bff2743b22b238244157e20054d","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-16 09:10:32","Merge pull request #295 from PyCQA/appveyor

Setup a basic AppVeyor deployment.","7d73b2cde14636df2fdc446fb9f3fbd90e85eaf2","","api.github.com,git_clone","[u'[""appveyor.yml"", ""appveyor/install.ps1""]']","False","[]","[{u'raw': u'#295', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'295', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-03 15:23:23","Remove the visit method for AssignAttr in rebuilder, since AssignAttr does not exist as a node in the builtin ast module.","7d7c47127e15681f0cf614176c5b20272e5a8075","","api.github.com,git_clone","[u'[""astroid/rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-11 17:41:36","add vararg and kwarg attribute for Arguments

--HG--
branch : rebuild","7d8cca3173cdb7bd8137679ce16d1aa55beb4f96","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-28 14:07:24","py3k : introduce Nonlocal node","7dad421fabf708e96eab40f8327ce8cd46e900ae","","api.github.com,git_clone","[u'[""nodes.py"", ""as_string.py"", ""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-10-30 10:14:35","modutils._module_file opens __init__.py in binary mode.

The actual code cares only for the existence of two
strings, so there's no need to use an encoding.
Closes issues #51 and #13.","7dadecf9120d1ab1340579ed011e91d217af1600","","api.github.com,git_clone","[u'[""test/unittest_modutils.py"", ""test/regrtest_data/unicode_package/__init__.py"", ""test/regrtest_data/unicode_package/core/__init__.py"", ""modutils.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#13', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'13', u'']}, {u'raw': u'#51', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'51', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-02 11:14:12","still need a dummy With

--HG--
branch : _ast_compat","7db627fe8889fe5de0b6fc27a9c4ad58297c06ce","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ionelmc","2015-02-15 21:58:20","Fix small deb build bug with wrong test dir. Update changelog to 1.3.4.","7dcb53b1f34fe089393a9dbf0ba4c20c787d6d19","","api.github.com,git_clone","[u'[""debian/rules"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","dlax","2014-10-24 10:04:39","[modutils] Ensure module is actually in sys.modules in pkg_resources support

Wrap the long line along the way.

Closes #52.","7de71ac6368676f098cdd37ad8d5dffe79a82b10","","api.github.com,git_clone","[u'[""modutils.py""]']","False","[]","[{u'raw': u'#52', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'52', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2009-07-02 08:11:34","backported Debian packaging updates","7e023e37d581eafedd76bed5d48c17449aa4b7c9","","api.github.com,git_clone","[u'[""debian/copyright"", ""debian/rules"", ""debian/control"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 14:14:44","cleanup

--HG--
branch : _ast_compat","7e14e8859d00833d6b304307c42a997dca8347b0","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-04-08 12:56:38","bugfix compiler: add Delete node on Subscript nodes if we are in a del context
add a tests for different subscript cases

--HG--
branch : stable","7e1ef3cd75236575914749364a0f1131ce8fe626","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 09:47:02","2.4 fixes","7e24ff63d4e2a8b029547e205176d989fd054034","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-11-19 10:36:37","fix #6015: filter statements bug triggering W0631 false positive in pylint","7e4353f0c2859fde9f3454ff4f251deb4bb9566b","","api.github.com,git_clone","[u'[""lookup.py"", ""test/unittest_lookup.py""]']","False","[]","[{u'raw': u'#6015', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'6015', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-09-27 12:11:47","cosmetic changes: update/fix copyright and comments, d-t-w","7e60b24b1090bf4751f25066610501f2c4720627","","api.github.com,git_clone","[u'[""rebuilder.py"", ""bases.py"", ""test/unittest_builder.py"", ""builder.py"", ""inference.py"", ""scoped_nodes.py"", ""as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-23 21:40:35","Add six tips for vendorized requests library.","7e78c1ed62d1f907134285eeb7795889916ff32d","","api.github.com,git_clone","[u'[""astroid/brain/pysix_moves.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-04-14 09:53:36","Add basic support for understanding typing.NamedTuple subclasses","7eb703d2e2bec5ffb2e679c61ca0ea26d1413e27","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_typing.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-20 22:15:18","Also add sys.path setup to the AsStringTest, since it relies on inference when detecting metaclasses.","7eb850fec1ef934c3ca965bd79ef1784a50ba5fc","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-12 17:59:36","Move InferenceContext and CallContext into astroid.context

In order to reduce circular dependencies between components,
CallContext is moved into a new module, astroid.context.
At the same time, for increasing the cohesion inside astroid.bases,
InferenceContext was moved as well into astroid.context.","7ec07a045399be5937465b65a81239b6ef3f8036","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/scoped_nodes.py"", ""astroid/protocols.py"", ""astroid/node_classes.py"", ""astroid/helpers.py"", ""astroid/context.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2016-12-31 09:07:00","Add a __reversed__ method to the OrderedDict stub","7ec66f514de82b7a0b941dfb012403e92ee6e419","","api.github.com,git_clone","[u'[""astroid/brain/brain_collections.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-29 14:53:50","Remove all unused variables from the code base.","7ecc586165ebde2b06b52303c76e75cd604793d8","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/tests/unittest_inference.py"", ""pylintrc"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-23 09:36:51","cleanup: remove useless redirections and aliased imports","7ed10c2269e6a1852b2b5133957d6cf7dba504d4","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-02-21 16:49:43","Implement the assigned_stmts operation for Starred nodes.

This was omitted when support for Python 3 was added in astroid.
It currently works only for Starred nodes in assignments and only
for the most common of cases, such as `a, *b = (1, 2, 3)`.
Closes issue #36.","7ef2825be4eaf208df22226de3419ec591553bdf","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/tests/unittest_protocols.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#36', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'36', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-15 13:55:42","add FilterStmtsMixin and AssignTypeMixins; use polymorphism

- we put ""ass_type"" into this mixin and add ""_get_filtered_stmts"";
- this breaks circular import when trying to remove LookupMixin from scoped_nodes
* * *
step by step use _get_filtered_stmts

--HG--
branch : rebuild","7f263c79e19db7cfc39455e9016c33aa30b02db5","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""node_classes.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 19:09:26","incorrect syntax, but don't catch TypeError anyway...

--HG--
branch : _ast_compat","7f2882efd0aa7ec64412bfe30eacfd371c8c2e66","","api.github.com,git_clone","[u'[""inspector.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-26 12:59:47","add test on getattr class

--HG--
branch : _ast_compat","7f42ca82ea6ff2039c9e100959091c643f688728","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-11 15:47:56","Ignore elements of sequences when converting them to AST with const_factory

const_factory is buggy in master, as well as the entire raw_building
module, which means that at given points during rebuilding of ASTs
from live objects, nodes are constructed with Python objects as
elements, leading to various crashes with pylint and with astroid
during certain inference paths. This is fixed in 2.0 though, where
raw_building was completely rewritten, but bringing those changes
back into master will need some more work to be done. Until this
happens, we ignore the elements of sequences passed to const_factory,
since they are not useful in anyway (and the code that uses them
crashes anyway). This is just a temporary solution until we either
merge master with 2.0 or backport raw_building changes from 2.0
to master.","7f4ce0ece9eda79e7a098abbf4ed3c982450f9a1","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","hippo91","2017-10-29 18:34:33","Add of a class that wrapps the call to unittest.subTest method to handle different versions of python","7f59a6102182d40b765cc9058c3bbf8c9c8d0079","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain_numpy.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-20 21:12:41","Fix the order of commands and options in the release documentation.","7f5f10532e26f99139b409323ec380061dd8fab8","","api.github.com,git_clone","[u'[""doc/release.txt""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-18 19:16:52","Trigger NotImplementedError with slots message before mro gets executed (will fail for old style classes)","7f8285bf99817a1dfda7917542be5a431a3a738c","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-02 08:03:36","pass parent to concrete visit methods (step 1: change signature)
passing the new parent to the visit methods avoids re-walking through children
and will simplify the rebuilding.

--HG--
branch : rebuild","7f9be147ac7399b5d640777bb4946d447f5ebcb3","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 11:33:54","cleanup

--HG--
branch : _ast_compat","7fca037b165f065a0c09f0eb59435f275771678a","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-07-08 11:21:26","Improve understanding of collections.deque (#441)

Closes PyCQA/pylint#1476","7fe17123d663788de91441e32d50baf0458f4e5a","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_collections.py""]']","False","[]","[{u'raw': u'#441', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'441', u'']}, {u'raw': u'PyCQA/pylint#1476', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1476', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-21 16:30:06","Add tests for aliases","7fe6eff8b7bec34bf04226fae8e68bad11900e42","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/tests/unittest_inference.py"", ""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/brain/py2gi.py"", ""astroid/scoped_nodes.py"", ""astroid/node_classes.py"", ""astroid/helpers.py"", ""astroid/rebuilder.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_transforms.py"", ""astroid/as_string.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-03-12 11:59:49","Typo","7feb1df5c9580a54f12f480769626a4e16147ded","","api.github.com,git_clone","[u'[""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-28 12:56:38","some small corrections :
* Dict : empty node.items should be a list
* AssAttr catched in init_assign

--HG--
branch : _ast_compat","800572c15de171f709e0a1ccc30af9cfa2a90d08","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 19:30:47","remove _remove_none and wrong visit_decorators

--HG--
branch : _ast_compat","8020c4a1c8133ed5f1124fb172c82edd45f9211c","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-10 16:31:25","[R] introduce FromImportMixIn","805e1f799feee267b43d682f455efae7e11b0517","","api.github.com,git_clone","[u'[""node_classes.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-05 14:55:49","remove other has_key occurences","80abd40da687c4719c9e8d4f04c8947dc24c9f0e","","api.github.com,git_clone","[u'[""builder.py"", ""node_classes.py"", ""utils.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 12:00:55","* code cleanup
* move every method which is not .infer from inference to a new protocols module
* refactor / fix unary and binary operation handling
* implements iter/getitem protocol for basestring

--HG--
branch : _ast_compat","80b938b1272424f2e937861e210e9f92dd519e03","","api.github.com,git_clone","[u'[""protocols.py"", ""nodes.py"", ""test/unittest_inference.py"", ""inference.py"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2008-08-27 17:07:10","fix bug in recursive visit_assattr call","810faaf20e966febe972af165780f7c85fe8331b","","api.github.com,git_clone","[u'[""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-05 21:58:22","Move the determination of a function type from rebuilder to Function.type.

Closes issue #162.","8112d82466590a50f49edbcc21795243dc11b244","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/rebuilder.py""]']","False","[]","[{u'raw': u'#162', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'162', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-01-14 10:46:30","Winfried Plapper patch fixing visit_ifexp in nodes_as_string

--HG--
branch : stable","8114c286d1b37127fab36a63b7186f699a24317c","","api.github.com,git_clone","[u'[""nodes_as_string.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-02 07:49:55","style: put instance_attrs at beginning of Class definition

--HG--
branch : rebuild","811a115ec550b825ea60b29d9f343c6c65126be8","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-26 13:06:59","Fix pylint errors.","811bf5281159d804fd6ffa76ef55aa1b19573a5c","","api.github.com,git_clone","[u'[""astroid/manager.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-11-03 17:47:46","Fix a wrong variable name in test_utils.py","813ea6fd7863fcc9f67dcd1deaddd226c12eed77","","api.github.com,git_clone","[u'[""test_utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","hippo91","2017-09-21 07:01:29","Expose more objects in numpy brain tip","8152a52b1f17c5c838b7cc1687b074afa051817f","","api.github.com,git_clone","[u'[""astroid/brain/brain_numpy.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-03 09:07:34","remove operators from compiler Compare

--HG--
branch : _ast_compat","816a7c885d1db6f8504d026eaa19b06bdadaee4f","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 16:15:16","add lookup methods to AssName and DelName

--HG--
branch : _ast_compat","8173c67cb9dbbf501113c6dd983cdec69fcdf5a1","","api.github.com,git_clone","[u'[""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 12:43:54","fix unittest_regr import","817abfa1a7904102843ff5c2420134d11cf01ebf","","api.github.com,git_clone","[u'[""test/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 09:07:46","fix local_attr method to return a list of nodes as instance_attr

--HG--
branch : _ast_compat","817ef1ed6869f8d2689d2742b024b393565a49fb","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-10-25 07:13:21","only call transformers if modname specified","8184560b39c985d14405a782bdfd628684be5200","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-03-27 12:43:44","Add support for inference of subscript operations on dict literals. Closes #123074

actually fix Dict.getitem and enhance infer_subscript

--HG--
branch : stable","81a37d033676e3dccaab611bb723cf9eb08ec460","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""node_classes.py"", ""inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#123074', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'123074', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-23 16:31:56","introducing compiler TreeRebuilder Visitor

--HG--
branch : _ast_compat","81aa80def2a5009faeb10d94f75c4bf95bee7277","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-02 09:57:51","cleanup: remove remaining IgnoreChild","81eaf2cf9a021e4ac1684a4b67bf11d87d9be3f0","","api.github.com,git_clone","[u'[""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-10-30 13:27:56","Merged in dlax/astroid (pull request #59)

[modutils] Ensure module is actually in sys.modules in pkg_resources support","8209c01eded5b8d533136bb9f04bfe3a851f8cdc","","api.github.com,git_clone","[u'[""modutils.py""]']","False","[]","[{u'raw': u'#59', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'59', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","brycepg","2017-12-30 20:01:10","Fix bad-whitespace","820da10cece52fb00e133836e7261abbe78c5b7d","","api.github.com,git_clone","[u'[""astroid/interpreter/objectmodel.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 11:00:41","TryFinally has no orelse but a finalbody attribute

--HG--
branch : _ast_compat","82142837563bb867a0c613738ea0719a5b5e9d80","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-12-18 14:56:35","Merged default into metaclass

--HG--
branch : metaclass","823282e286dcdc7f72dd59edee58a806107a0133","","api.github.com,git_clone","[u'[""test_utils.py"", ""brain/py2stdlib.py"", ""ChangeLog"", ""test/unittest_brain.py"", ""test/unittest_raw_building.py"", ""test/unittest_builder.py"", ""brain/py2gi.py"", ""test/unittest_inference.py"", "".hgtags"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""test/fulltest.sh"", ""manager.py"", ""debian/changelog"", ""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-22 09:13:56","Create a context call when __enter__ is called for solving what a context manager returns.","8234a4daab0c5dc4a242534ffbac6fa08be7759a","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 13:59:06","astng 0.18.0 release","82838274c88a35c799d32fc7fb8a87b6ba97b452","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-25 16:26:01","Some style cleanup.","829d18b7b8c1494c3020e84952071c0b1a2323a4","","api.github.com,git_clone","[u'[""astroid/decorators.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-08-12 09:56:09","Skip Uninferable inferred objects when inferring a Dict

Close PyCQA/pylint#1619","82b09e0bb6768d44d0e78a7d6c8e48ff686db1d7","","api.github.com,git_clone","[u'[""astroid/inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[{u'raw': u'PyCQA/pylint#1619', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1619', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-07 20:53:41","Second pass of the Python 3.5 support: adding Async nodes.","82b6c1508a3228a4b3f00c24ce1a4c9d90f36749","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/rebuilder.py"", ""astroid/nodes.py"", ""astroid/node_classes.py"", ""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-02-18 21:55:32","imported_names() got replaced by public_names()

Our understanding of wildcard imports through __all__ was
half baked to say at least, since we couldn't account for
modifications of the list, which results in tons of false positives.
Instead, we replaced it with public_names(), a method which returns
all the names that are publicly available in a module, that is that
don't start with an underscore, even though this means that there
is a possibility for other names to be leaked out even though
they are not present in the __all__ variable.","82c6ef644a2efb77217a23d9b8a6cfb5caffb4ba","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/builder.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-14 12:36:40","add a little test about grandpa attr","82cd36095b2115521c8461c71a5523a73d6b9461","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-17 14:55:15","fix missing Subscript.infer_lhs and UNARY_OP_METHOD
* add a Subscript.infer_lhs method
* add '~': '__invert__' to the UNARY_OP_METHOD dictionary

--HG--
branch : rebuild","82df6145be5f8f138529a411af2d16ef12fe0ae7","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-12 22:25:00","Don't use self imports in tests since those are susceptible to CWD changes.","83176ae5d8916ee3879d9fa7f8ca025b84c1e779","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-10-12 10:31:29","Fix lint warnings","83697ea500e316742897635ea97389f8a7a0c694","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/exceptions.py"", ""astroid/bases.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/interpreter/_import/spec.py"", ""astroid/raw_building.py"", ""astroid/scoped_nodes.py"", ""astroid/node_classes.py"", ""astroid/helpers.py"", ""astroid/rebuilder.py"", ""astroid/builder.py"", ""astroid/astpeephole.py"", ""astroid/tests/unittest_transforms.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-11 12:07:56","Prepare 1.3.5.","836a18fc891a48c952d4270566ff32cdb690b3fb","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-25 18:30:11","Fix pylint issues.","837d034b54004c388fc1200ff5330c2d991a54ae","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/scoped_nodes.py"", ""astroid/protocols.py"", ""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/tests/unittest_transforms.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2011-11-22 09:31:55","[packaging] Tell python-support we only support python >= 2.5

Otherwise on package installation the postinst will try to byte-compile
the modules for all installed python versions, possibly including 2.4.

--HG--
branch : stable","83ae53c8d3fb82c2e376610d5b19109674e93a05","","api.github.com,git_clone","[u'[""debian/control""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-06 10:11:32","Use register_builtin_transform for inferring super.","83d0f832eac8b9f4ff343596e30b0771de58363d","","api.github.com,git_clone","[u'[""astroid/brain/builtin_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-12-08 15:56:06","Added tag logilab-astng-debian-version-0.23.1-1 for changeset abf75e6ca8ae","83d5bbb3cc7204dc3d2d93e36ae86a61d33d3025","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-11-04 10:48:16","Merge bookmark heads.","83fbfcbd73c7dec11ee4ac82a9b780faeb3e33e0","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/arguments.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-13 20:36:43","default is stable

--HG--
branch : stable","840054357062c94b2fd24bc9e19f1498d1cfeba4","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""test/unittest_lookup.py"", ""debian.py3k/source/format"", ""test/__init__.py"", ""README._ast_compatibility"", ""MANIFEST.in"", ""mixins.py"", ""test/unittest_inference.py"", ""test/unittest_scoped_nodes.py"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""scoped_nodes.py"", ""as_string.py"", ""README.Python3"", ""nodes_as_string.py"", ""inspector.py"", ""test/regrtest_data/package/absimport.py"", ""rebuilder.py"", ""debian.py3k/control"", ""test/regrtest_data/package/hello.py"", ""test/unittest_utils.py"", "".hgtags"", ""README"", ""debian.lenny/rules"", ""setup.py"", ""debian/changelog"", ""test/regrtest_data/package/import_package_subpackage_module.py"", ""test/data/module2.py"", ""debian.hardy/rules"", ""test/unittest_inspector.py"", ""bases.py"", ""test/unittest_builder.py"", ""debian.intrepid/rules"", ""builder.py"", ""debian/rules"", ""_exceptions.py"", ""debian.py3k/rules"", ""utils.py"", ""test/regrtest_data/import_package_subpackage_module.py"", ""raw_building.py"", ""test/unittest_nodes.py"", ""protocols.py"", ""ChangeLog"", ""exceptions.py"", ""nodes.py"", ""debian/control"", ""test/data/module.py"", ""__init__.py"", ""_nodes_compiler.py"", ""test/regrtest_data/absimp/sidepackage/__init__.py"", ""test/unittest_regrtest.py"", ""node_classes.py"", ""inference.py"", ""test/regrtest.py"", ""_nodes_ast.py"", ""test/regrtest_data/absimport.py"", ""manager.py"", ""test/regrtest_data/absimp/__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-28 15:45:37","Merged in jcristau/astroid/issue61 (pull request #64)

Fix test_mechanize_open (issue #61)","844e41a1d149075483dfc51584a532150a4b4342","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[{u'raw': u'#61', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'61', u'']}, {u'raw': u'#64', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'64', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-08 20:50:45","Remove trailing whitespace.","845169b878543fae3d3eeb0a548f013000879457","","api.github.com,git_clone","[u'[""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 16:35:38","and a special hack for Dict","845d6cc7e3794f92ae65c480285b3a0670d0d1da","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 14:19:18","add nodes_as_string methods for Ass*/Del* nodes

--HG--
branch : _ast_compat","84b3e4d3f8d57e88080aca6fd8e114f793dfc88a","","api.github.com,git_clone","[u'[""nodes_as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-20 21:54:04","Don't use the deprecated 'U' mode for opening files on Python 3, but newline=None.","84e339ea6d65a2597068700814c073d66871b33a","","api.github.com,git_clone","[u'[""astroid/builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 14:43:47","needs lineno=0 on module

--HG--
branch : _ast_compat","84f056cbeb445bc173f4782e3f763cce6bbdab29","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-11-21 14:25:10","getitem() method accepts nodes now, instead of Python objects.","84fc589494c8148bef2cee129e3356daa152e382","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""ChangeLog"", ""astroid/tests/unittest_object_model.py"", ""astroid/protocols.py"", ""astroid/node_classes.py"", ""astroid/inference.py"", ""astroid/tests/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-02-22 12:58:22","Merged logilab/astroid into default","8506cd2a4577bd0a2a6cdff412201c628912c8d1","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 10:14:48","line handling for If; simple line handling for ExceptHandler

--HG--
branch : _ast_compat","85517b01e745ef0e1b8bd6603fd0305ac4567902","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","invalid-email-address","2006-04-26 10:48:09","forget the past.
forget the past.","85529cfcb8e870333d7292cb493f54d7f3fd92cf","","api.github.com,git_clone","[u'[""test/data/SSL1/Connection1.py"", ""test/unittest_inference.py"", ""announce.txt"", ""test/regrtest_data/package/__init__.py"", ""test/data2/suppliermodule_test.py"", ""test/data2/clientmodule_test.py"", ""test/data/appl/myConnection.py"", ""MANIFEST.in"", ""debian/python-logilab-astng.prerm"", ""test/unittest_scoped_nodes.py"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""test/data/module.py"", ""scoped_nodes.py"", ""test/data2/__init__.py"", ""test/data/SSL1/__init__.py"", ""test/data/notall.py"", ""test/unittest_lookup.py"", ""inspector.py"", ""test/data/__init__.py"", ""DEPENDS"", ""test/fulltest.sh"", ""README"", ""setup.py"", ""debian/changelog"", ""test/data/appl/__init__.py"", ""test/data/noendingnewline.py"", ""test/unittest_inspector.py"", ""test/unittest_builder.py"", ""debian/copyright"", ""builder.py"", ""debian/rules"", ""_exceptions.py"", ""debian/watch"", ""utils.py"", ""test/regrtest_data/import_package_subpackage_module.py"", "".hgignore"", ""test/data/nonregr.py"", ""raw_building.py"", ""test/runtests.py"", ""test/regrtest_data/package/subpackage/module.py"", ""test/unittest_nodes.py"", ""ChangeLog"", ""nodes.py"", ""debian/control"", ""debian/python-logilab-astng.dirs"", ""__init__.py"", ""test/regrtest_data/descriptor_crash.py"", ""test/regrtest_data/package/subpackage/__init__.py"", ""debian/python-logilab-astng.postinst"", ""inference.py"", ""test/regrtest.py"", ""lookup.py"", ""manager.py"", ""test/data/module2.py"", ""test/data/all.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-01 11:25:57","we don't need any NodeRemoved exception anymore

--HG--
branch : rebuild","85a77c0c26b478ee102493259be1646894dfb85a","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_exceptions.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-09 13:04:10","Remove trailing whitespace.","85d7fa8fc8db68231e46315d7ed4297c18553f63","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-04-26 09:14:31","more license updates","861ca4dcbd63577d4f8ef9d7315c7b7b950720d9","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""test/unittest_lookup.py"", ""bases.py"", ""mixins.py"", ""test/unittest_inference.py"", ""__pkginfo__.py"", ""scoped_nodes.py"", ""nodes_as_string.py"", ""inspector.py"", ""test/unittest_inspector.py"", ""test/unittest_builder.py"", ""builder.py"", ""node_classes.py"", ""_exceptions.py"", ""utils.py"", ""raw_building.py"", ""test/unittest_nodes.py"", ""protocols.py"", ""nodes.py"", ""rebuilder.py"", ""__init__.py"", ""_nodes_compiler.py"", ""inference.py"", ""_nodes_ast.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-11-04 10:58:43","Fix pylint warnings.","86263c86c07cb47337a2f15174844fb60ed4d2d3","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/helpers.py"", ""astroid/arguments.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 09:11:00","add some assertion, to remove later

--HG--
branch : _ast_compat","864d2f31b0d30a25d5986cb8682c5500454da6c8","","api.github.com,git_clone","[u'[""lookup.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-09 16:27:13","Add support for understanding context managers created with contextlib.contextmanager.","864dbee1daf038fdd4fb0264ce134fe418a5d34b","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/protocols.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-26 14:32:18","compiler.ast.Lambda has no Stmt node

--HG--
branch : _ast_compat","866dd518ee3834549f079bb989682d79582911eb","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-07-20 16:15:52","default is stable

--HG--
branch : stable","86b5c6a27994023a3f80974b5efb6bac6d6c52bb","","api.github.com,git_clone","[u'[""bases.py"", ""mixins.py"", ""test/unittest_inference.py"", ""__pkginfo__.py"", ""scoped_nodes.py"", ""rebuilder.py"", "".hgtags"", ""test/unittest_scoped_nodes.py"", ""setup.py"", ""debian/changelog"", ""test/regrtest_data/absimp/string.py"", ""test/unittest_builder.py"", ""builder.py"", ""node_classes.py"", ""test/unittest_lookup.py"", ""debian.py3k/rules"", ""raw_building.py"", ""test/unittest_nodes.py"", ""protocols.py"", ""ChangeLog"", ""__init__.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-07-26 22:51:15","Add `returns` into the proper order in FunctionDef._astroid_fields

The order is important, since it determines the last child,
which in turn determines the last line number of a scoped node.","86e0743ead0ee08bfd7a5ce32c5f76785d633117","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-06-20 16:48:38","Properly recognize methods annotated with abc.abstract{property,method}
as abstract.","87108e5c35aea7c5b37e1a3eeb35fa52edeff750","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-21 10:33:56","Make the pkg_resources brain tip a bit more specific

The brain tip for pkg_resources was lacking proper returns,
which led to an inadvertent assignment-from-no-return false positive,
which assumed that the functions are indeed not returning anything
useful. The bug was uncovered by 058a28.","8715ea4491e435969d943918fb7a7bca9d95be28","","api.github.com,git_clone","[u'[""astroid/brain/brain_stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-07-28 18:57:56","Try to patch special_attributes instead of returning a new node

It seems we have some problems with transforms that are creating new nodes.
While they work okay in most of the cases, we found a problem with regard
to pylint. For instance, if we recreate a function and return it
from a transform, pylint can see that we had two instances of the same
function in the module locals and will emit an error saying that the
function is redefined. In fact, the old node is still available
in the module locals, while it should have been replaced.
Unfortunately, there is not much we can do right now, instead of having
something as the zipper integrated.
This patch would fix the undefined-variable false positives we had in pylint.","871a55bb4c80acfb62579a5da7235d800bcd7a90","","api.github.com,git_clone","[u'[""astroid/brain/brain_functools.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-07 11:40:31","typo

--HG--
branch : _ast_compat","871c300c17964f7984bd054d2aa44d0bd77a5928","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-12-08 15:56:05","Added tag logilab-astng-version-0.23.1 for changeset 652e0a150dda","8728e54a645e0c3914e253451be3a0fa816bd099","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-01-16 07:51:21","All class nodes are marked as new style classes for Py3k, closes #12.","872a87ae09603674f5173b6c551ab171e899693b","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""rebuilder.py"", ""test/unittest_nodes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#12', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'12', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-03 08:59:16","Add __enter__ and __exit__ for subprocess.Popen.","876199b91e9325d0f6539a54dc7bae8ea8dfc348","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-07-23 10:41:23","more fixes, Getattr support, unary operation inference support

--HG--
branch : _ast_compat","878a5e61470f5ba3cdafa00e0a2a22a49122de22","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""builder.py"", ""inference.py"", ""_nodes_ast.py"", ""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jayvdb","2015-10-19 07:48:15","Fix SyntaxError on Python 2 for print function

--HG--
branch : use_print_function","8797877044b4accea9942cdd94dc3157e6322296","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python3/data/module.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","radowit","2015-07-25 12:43:20","CR fixes","87d60c5819b9e56886cbd9a3af5488440bd5f7de","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-10-18 19:38:11","Don't use .body to retrieve the classes. Add test for parent metaclass.

--HG--
branch : metaclass","87e9a713b98af5635b2fc3409e2de5dcd1aa92cb","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 23:12:49","shouldn't delete anymore _Yes class, used in super()","87ea7bf5ab4fb377878494060f6824ef2acab942","","api.github.com,git_clone","[u'[""infutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-04 16:53:09","AssList and AssTuple assignments

--HG--
branch : _ast_compat","87fb80e1691d47f8e1a4e68f9a09c5b6b53129eb","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-07-24 21:42:16","Run the tests in non-verbose mode again.","8808db24b0f21c2fb2665391b4569b0a24ff8239","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-24 14:45:00","Merged in dmand/astroid/fix-list-multiplication (pull request #93)

Fix inference of list multiplication operation.","88560c2ae0024e958c65e068b2b18675812191ba","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[{u'raw': u'#93', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'93', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","brycepg","2017-12-30 03:11:30","Allow pytest to recognize the tests","88ede68e315fb682df0d12104cfffe9e2b5b16ce","","api.github.com,git_clone","[u'[""setup.cfg""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-16 22:43:36","Merge.","890959357b1cb0ff046bfe54c091ff9656b59e97","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/builder.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-28 18:45:26","Add parse and error submodules to six.moves tips.","890c0f2357f06266d0e266e4f23bcd9e465c33a0","","api.github.com,git_clone","[u'[""astroid/brain/pysix_moves.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","marienz@gentoo.org","2007-03-02 01:43:38","Make test_builtin_open pass on python 2.5 too.","8926cc5b29d6c62e7bf29ce03accae1bc91e11c6","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-26 17:51:18","functools.wraps needs to be called with the decorated function and the implementation of cached decorator was passing the bad arguments","892aa090a539ba5f97772f8af459c0ac36e3cb14","","api.github.com,git_clone","[u'[""astroid/decorators.py"", ""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-23 09:40:29","NotImplemented is detected properly now as being part of the builtins module.

Previously trying to infer the Name(NotImplemented) returned an YES object.","893bcc5d6e063e512e320122559703e4c1b15811","","api.github.com,git_clone","[u'[""astroid/raw_building.py"", ""astroid/node_classes.py"", ""astroid/tests/unittest_builder.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-25 08:09:10","Bug fix.

--HG--
branch : tox","89498df58040296117e9601867e49b8dbe213856","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-26 21:10:09","Rename the brain files into something more suggestive. Closes issue #208.","894ed365747d93043ef9656d07602bdb1774636a","","api.github.com,git_clone","[u'[""astroid/brain/pynumpy.py"", ""astroid/brain/_builtin_inference.py"", ""astroid/brain/py2pytest.py"", ""astroid/brain/pynose.py"", ""astroid/brain/_mechanize.py"", ""astroid/brain/py2stdlib.py"", ""astroid/brain/_qt.py"", ""astroid/brain/pyqt.py"", ""astroid/brain/py2gi.py"", ""astroid/brain/pysix_moves.py"", ""astroid/brain/_pytest.py"", ""astroid/brain/builtin_inference.py"", ""astroid/brain/pydateutil.py"", ""astroid/brain/_numpy.py"", ""astroid/brain/_stdlib.py"", ""astroid/brain/_six.py"", ""astroid/brain/_gi.py"", ""astroid/brain/py2mechanize.py"", ""astroid/brain/_dateutil.py"", ""astroid/brain/_nose.py""]']","False","[]","[{u'raw': u'#208', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'208', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-18 18:18:29","remove all old as_string methods

--HG--
branch : _ast_compat","89566d4cb6b32f4a01025b52e929ca439dd81e2a","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 14:06:33","new Exception mro in py3.x","89a5e73ebba2b6149b3ae7269960738b76d8023f","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 11:57:46","introduce UnboundMethod / rename InstanceMethod to BoundMethod, handle .im_func","89a9270cb3dcf6c9dbcf8dcefd1e26e7517b099e","","api.github.com,git_clone","[u'[""infutils.py"", ""scoped_nodes.py"", ""test/unittest_inference.py"", ""__init__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-04-13 08:07:47","Manually indent the init function","89eaec7549dd358ee0e223c38925dabf33a71143","","api.github.com,git_clone","[u'[""astroid/brain/brain_subprocess.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-01 16:10:28","Modernize test to use extract_node.","8a036c0da97233c5b219abf58931d63a1975a735","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-27 14:31:05","some improvements for AssName

--HG--
branch : _ast_compat","8a33593a83b8f549a657c6a2ab028e757a289565","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 10:09:53","more lookup test

--HG--
branch : _ast_compat","8a3b6f56c772b93954a7f9dc83ec07432dab7d79","","api.github.com,git_clone","[u'[""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-30 20:54:18","Remove trailing whitespace.","8a5120a0b27d76a8569c07d47b811c407e291080","","api.github.com,git_clone","[u'[""astroid/protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-02 07:08:26","Fix pylint warnings.","8a71646692b2834eadea65fd0ff840a4e27a3aea","","api.github.com,git_clone","[u'[""astroid/manager.py"", ""astroid/builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-18 16:24:35","introduce a Delete node for deleting a Subscript

--HG--
branch : _ast_compat","8ab0334f87a0ad60820272b672d93a9ebfe41a10","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-07-08 20:13:02","Node constructors almost finished except for two bugs","8abf328539e0e5f1dbafe70b773bfebd28afca77","","api.github.com,git_clone","[u'[""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_inference.py"", ""astroid/nodes.py"", ""astroid/tests/unittest_objects.py"", ""astroid/tests/unittest_peephole.py"", ""astroid/protocols.py"", ""astroid/brain/builtin_inference.py"", ""astroid/helpers.py"", ""astroid/manager.py"", ""tox.ini"", ""astroid/bases.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_raw_building.py"", ""astroid/test_utils.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/raw_building.py"", ""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/__init__.py"", ""astroid/as_string.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/objects.py"", ""astroid/builder.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_brain.py"", ""astroid/mixins.py"", ""astroid/tests/unittest_python3.py"", ""astroid/astpeephole.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-17 17:53:15","Remove trailing whitespace.","8acda2c1adf4f7c073ae2d2d3ef671182ef5137e","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-01 09:58:42","Added tag logilab-astng-debian-version-0_17_0-1 for changeset fc9424aa3669","8ae37a6cacc98a17ff976e29c57ae22fc932ae04","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","euresti","2017-03-01 09:16:43","Add inference for typing.NamedTuple (#390)","8b1806802047b59bc316578689d5d7421b930e10","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_typing.py""]']","False","[]","[{u'raw': u'#390', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'390', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-18 16:14:28","py3k: 2to3 expects second expression to be an exception argument","8b2e72a80b2a3acb245bf52901bfc9b0b6817e05","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-02 10:41:47","cleanup: move StmtMixin to Statement","8b74c1c07d154ed80a65ea5af7c689870f19c70f","","api.github.com,git_clone","[u'[""mixins.py"", ""scoped_nodes.py"", ""node_classes.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-03-08 11:00:59","Fix a false positive with builtin exceptions, by rewriting the `args` and `message` attributes with their real values.","8b874f7dfeee1792293fe10fe6435bf381ec7d6a","","api.github.com,git_clone","[u'[""raw_building.py"", ""test/unittest_raw_building.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-09-25 14:42:58","prepare 0.16.1","8bc5d1807664bb5474be7ffee15b9bec9526a8b6","","api.github.com,git_clone","[u'[""utils.py"", ""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-01 09:36:29","cleanup: move some rebuilder stuff to builder; fix _delayed_assattr cache

indeed, _delayed_assattr was not reset before building a tree !","8bcd9961171735cca123a0424def58c505cdd8e5","","api.github.com,git_clone","[u'[""builder.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","julien.jehannet@logilab.fr","2009-07-20 18:10:41","[lenny] Does clean up old pycentral package","8c2933e5123ffdac7593b4ac5fe2cd1b88ceaffa","","api.github.com,git_clone","[u'[""debian.lenny/preinst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-12-15 09:16:07","Remove unreachable code","8c3ce1817c23b2461a6ea5626f92214050f3f936","","api.github.com,git_clone","[u'[""astroid/helpers.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-11-23 11:44:11","Handle the cases when a List can contain Uninferable as its elements

This can happen for instance when the list contains objects which
weren't inferable in the first place. There were a bunch of places
affected by this bug: unpack_infer, the inference of list additions
and the handling of the namedtuple's fields.","8c4664e8196db5518cd2288ffa690ae79f9bc493","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_stdlib.py"", ""astroid/protocols.py"", ""astroid/node_classes.py"", ""astroid/tests/unittest_utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-03 08:36:16","Add a new possible property, lazy_attribute.","8c725fb10814d57d731616b1b689668a3aff4d7b","","api.github.com,git_clone","[u'[""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-06 10:16:44","fix sibling methods and tests

--HG--
branch : _ast_compat","8cc24b856d88dfe252ee184fb18349c041ef92b4","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-01-22 12:33:59","Add changelog entry for class keywords","8ce08d4219ffcf7f140a616da2b1f087e7bcb651","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-28 11:38:10","py3k as_string steps; corrections and improvements","8cfe5dd32a12bcf5dccdcb95246c13b24877291b","","api.github.com,git_clone","[u'[""as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 22:45:39","fix #9891: help(logilab.astng) throws TypeError","8d17e5b89dd9996de4fb308ea1d60038b315dd07","","api.github.com,git_clone","[u'[""infutils.py""]']","False","[]","[{u'raw': u'#9891', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'9891', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-28 11:48:55","as_string: check that data/module.py is returned identically; fix tests","8d30f527c35205d30ca435f9c1afb32f4e96de8c","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/data/module.py"", ""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-17 19:06:51","astroid.inspector was moved to pylint.pyreverse.

This was moved since it is the only known client of this module.
No other change was made to the exported API. This doesn't go
through a normal deprecation cycle, since I really want to clean it up
at a faster pace.","8d4c25123bbd86be875f7e9e481057f9727bcab8","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python3/data/suppliermodule_test.py"", ""ChangeLog"", ""astroid/tests/testdata/python3/data/clientmodule_test.py"", ""astroid/inspector.py"", ""astroid/tests/testdata/python2/data/suppliermodule_test.py"", ""astroid/tests/unittest_inspector.py"", ""astroid/tests/testdata/python2/data/clientmodule_test.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-18 17:52:19","an AsStringVisitor replacing as_string methods

--HG--
branch : _ast_compat","8d5db4a3ec9db6091d1536e50094eccd82cca652","","api.github.com,git_clone","[u'[""nodes_as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-03 16:43:34","[R] de-monkeypatching real_name and block_range","8d751495a31b40d6fb0ccffb3b1349c5fceca9ec","","api.github.com,git_clone","[u'[""manager.py"", ""node_classes.py"", ""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-03-06 21:51:26","Add test for slots and dict.keys.","8da09335f9fcdc85478e8c295369b9a8c58da2a7","","api.github.com,git_clone","[u'[""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-17 10:07:52","some cleanup using pylint

--HG--
branch : rebuild","8dd1cf970642481d52a97528cc0757da9b07b56c","","api.github.com,git_clone","[u'[""mixins.py"", ""node_classes.py"", ""inference.py"", ""bases.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-15 10:15:10","[R, doc] simplify inheritance of scoped nodes; comments","8dde709251ff36378e9ab24584f97713da53a0a0","","api.github.com,git_clone","[u'[""lookup.py"", ""nodes.py"", ""node_classes.py"", ""_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-08-11 11:41:11","Add brain tips for UUID.int

Close PyCQA/pylint#961","8df7872b2ff7afccb1246aedda4d15837f74996d","","api.github.com,git_clone","[u'[""astroid/brain/brain_uuid.py"", ""astroid/tests/unittest_brain.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'PyCQA/pylint#961', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'961', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-10 09:58:00","0.20.2

--HG--
branch : stable","8e227d79629cdc0021f1cc66f199e5f9ce297b3a","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-04-18 13:39:29","astroid 1.1","8e3b5d62213094977ab95f0ef2d11dae0ba0d98e","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2016-08-22 08:21:50","Add pytest 3 compatibility in brain_pytest (#357)

This change adjusts brain_pytest for pytest 3, while also reintroducing pytest 2 compatibility.","8ec025fa36c9c627bcdd6da7fab56271731d47eb","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_pytest.py""]']","False","[]","[{u'raw': u'#357', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'357', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-11-21 09:13:08","Drop support for Jython in the CI","8ed837d828692db5b95b3e906bebeacbc68c256f","","api.github.com,git_clone","[u'["".travis.yml"", ""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-25 16:00:42","Use a stack level of 2 when emitting warnings, since the call site of the deprecated method should be warned upon.","8ee4f7f329321bbf65712f365c7dbaa16ff9d2ef","","api.github.com,git_clone","[u'[""astroid/node_classes.py"", ""astroid/mixins.py"", ""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 16:23:50","cleanup, default lineno attribute on NodeNG

--HG--
branch : _ast_compat","8ef1977b3876e9f7d158bbbfcb0dd6cabfbf47d8","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 14:25:16","fix MANIFEST.in and debian/changelog","8f393e4b93ded1ec71aa3da07a8bdd67c35cc99c","","api.github.com,git_clone","[u'[""debian/changelog"", ""MANIFEST.in"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-04 19:32:24","first step for using delayed_visit_getattr: not working yet ...

--HG--
branch : _ast_compat","8f506ec644b452d7e744bfc0d8332f4ba3d01bb1","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-03-13 07:38:37","Add patch for FormattedValue's value wrong line number

This is caused by a bug in CPython. Until this gets solved,
we are patching the FormattedValue's value node ourselves, with
the line number of the FormattedValue node.","8f81d3701ff7f277a32ea571468ad6d972e64470","","api.github.com,git_clone","[u'[""astroid/brain/brain_fstrings.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-07 17:05:50","[B] remove introduced bug: Yield is no statement","8f893af779865ccd985655c1ba172bddffde1486","","api.github.com,git_clone","[u'[""_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-11 17:37:12","compiler : redirect AugAssign context to visit_assname

--HG--
branch : rebuild","8f96ff66b480c31c46d7c66cb12656293010dd76","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 16:21:39","cleanup, remove unnecessary/buggy stuff

--HG--
branch : _ast_compat","8fa49d6c6f4bede06586cbeb81e3f893dd6770db","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-10 21:34:16","Understand the `slice` builtin. Closes issue #184.","8fabcdf098ab888853890183aa4ca4ebe7d470a2","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/brain/builtin_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#184', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'184', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","hugovk","2017-10-12 07:20:58","Update classifiers (#453)","8fc39027df6b67006a5f0856e3f0869814522330","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[{u'raw': u'#453', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'453', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-07-21 17:31:04","more bug fixes, cleanup _ast _fields values

--HG--
branch : _ast_compat","8fee5a129ed320346cce0f2a522ee20792e4c852","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-19 17:00:28","Fix indentation","8ff5f7ed4041dcffbc265d8a50345c34581dd6e5","","api.github.com,git_clone","[u'[""astroid/brain/brain_namedtuple_enum.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 17:43:44","quick fix for function_factory

--HG--
branch : _ast_compat","903d2fbc85aeb14e9dc521c20982ef989fc91b77","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-02 13:44:09","Do not print the traceback for SyntaxErrors.","90704dfbf9a0c21a0169f92f7e1a8ddcfcce186a","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 16:20:09","ExceptHandler is an assignment context

--HG--
branch : _ast_compat","90ae91ecc00934a2316ecd8be423c7eba9bc4111","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-18 20:08:05","Remove the debug output.","90c104bb41603105874362c4d1cc91d4389a9be5","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-22 20:40:12","Add support for indexing containers with instances which provides an __index__ returning-int method.

This patch moves _class_as_index to helpers, where it becames class_instance_as_index.
Also, it instantiates its own call context, which makes certain idioms with lambdas
to work.","90d83aab32afe1dc9ac9651efb1994b17d22ca37","","api.github.com,git_clone","[u'[""astroid/inference.py"", ""astroid/tests/unittest_inference.py"", ""astroid/protocols.py"", ""astroid/helpers.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-24 15:01:05","[compiler] fix line infos for Function and ExceptHandler

--HG--
branch : rebuild","90e84e0326460bad39c10122c4fdf8b479fd3f39","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 08:32:11","tell in which file we have encountered an unexpected error

--HG--
branch : _ast_compat","90e9e305e214a3e3b147b9932cd0738097cd13d0","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-05-11 09:21:47","fix fulltest.sh

--HG--
branch : stable","90edc8acdbe2476c4fd79d651aaa5e82e7ed2100","","api.github.com,git_clone","[u'[""test/fulltest.sh""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-11 15:12:18","Add a new convenience API, `astroid.parse`.

This API can be used to retrieve an astroid AST from a source code string,
similar to how ast.parse can be used to obtain a Python AST from a source string.
This is the test_utils.build_module promoted to a public API.","90ef70abfa57397ce34aab4e9b23a7623e48d66f","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/tests/unittest_lookup.py"", ""ChangeLog"", ""astroid/test_utils.py"", ""astroid/tests/unittest_brain.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_peephole.py"", ""astroid/tests/unittest_builder.py"", ""astroid/builder.py"", ""astroid/__init__.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-17 20:51:54","Make is_property a private function. Remove some trailing whitespaces.","9138d98458f67719a6c1ee24f8a10f5ac13cf526","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-25 17:41:47","Add ChangeLog entries for the newest changes.","9141245a2965c249c0fdcc0c5b2e7af4aa9ecaa8","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-26 09:42:39","lookup module has been removed for now

--HG--
branch : rebuild","91506a82c37df69a40598887ed631021186ab9e4","","api.github.com,git_clone","[u'[""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-08 11:17:19","Remove unused variable.","91610c1410850bdeb6eccb7f7cd18570a831119d","","api.github.com,git_clone","[u'[""astroid/tests/unittest_raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-14 15:24:09","Allow inference of tuple(frozenset())","918e811db5ae568449aafe401c647f286f598664","","api.github.com,git_clone","[u'[""astroid/brain/builtin_inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 16:26:58","cleanup

--HG--
branch : _ast_compat","919dfa525308d164675578b10e9ccd0ccdfee2fd","","api.github.com,git_clone","[u'[""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 15:12:31","[py3k] the exeptions module is gone in py3.x","91aca6ca2219b635e602a9c12210f4f523dcef3c","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-06 15:24:03","Fix the body of namedtuple._replace: return the current self and don't actually call self._make, since it's impossible to understand it.","91b96cf6eb23205029542af7a7a28e66c572794d","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-09-26 17:33:47","Hopefully actually fix #185","91e406c99fb9b04138196fe528ea48991a287a30","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/node_classes.py""]']","False","[]","[{u'raw': u'#185', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'185', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-03-28 17:27:48","parse is defined in builder module

--HG--
branch : stable","91ed159199a7fbb9a156e29f195ab5b2dc6b0159","","api.github.com,git_clone","[u'[""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-09 17:44:59","some more corrections on as_string functions

--HG--
branch : _ast_compat","92129b62bca4bc5ffe281df548ddcffbf9e0ac9f","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-12 13:19:54","typo

--HG--
branch : _ast_compat","923f16f388f50577d524c41e4a3b874772f7d61f","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-18 14:50:06","Add brain tips for six.moves. Closes issue #63.","92540f3edf27c6c5f7b3c875a62345eff358aa25","","api.github.com,git_clone","[u'[""astroid/brain/pysix_moves.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#63', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'63', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-04-02 11:55:27","Builder: fix detection of whether file is a package when there is a __init__.py in filename (#408)

Fixes PyCQA/pylint#1348","92665fe273b9e5899fa28ef7f67d4794db42478f","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python3/data/tmp__init__.py"", ""astroid/builder.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/testdata/python2/data/tmp__init__.py""]']","False","[]","[{u'raw': u'#408', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'408', u'']}, {u'raw': u'PyCQA/pylint#1348', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1348', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-25 18:03:12","Fix annotation related bugs for Python 3.3 (wrong member was used)","927527ffc31f381c12a95925be1ffd98976a72d2","","api.github.com,git_clone","[u'[""astroid/rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-06-25 11:35:54","d-t-w","92b1443afa064886c86377c1b22c55d524aca204","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-01-26 20:10:12","Merge with default.

--HG--
branch : nameconstant_py34","92b1a3e50a82e475bd992c5b7674057160e0ce19","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""rebuilder.py"", ""ChangeLog"", ""test/unittest_python3.py"", ""test/unittest_builder.py"", ""builder.py"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-19 10:46:43","remove old flags attribute

--HG--
branch : _ast_compat","92b7e5176d7b49fadfa5cec99c98a4f8c28e45b6","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-05-11 08:24:16","remove licensing inforomation on test data files (make some builder tests failing)","92d9a631611bcdd048b545d59caa21331fec6c8b","","api.github.com,git_clone","[u'[""test/data/module.py"", ""test/data/format.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-11-11 11:41:23","Remove most of the copyright notices, since this file was written completely by @hippo91","92eafa5179989400a2cfef2567dfa7ba6f343f01","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain_numpy.py""]']","False","[]","[]","[u'@hippo91']","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-02 17:54:09","[R] extend_class now extends from a list of classes...","930357399593b05a4db464cd2a6688dfb4618cdb","","api.github.com,git_clone","[u'[""nodes.py"", ""utils.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-14 10:45:06","Disable errors caused by a custom version of distutils, created by virtualenv.","93097be78874dc4c2f323837352f2b1f552cb025","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-22 14:56:33","manager / cleanup: let Pylint catch the errors

This try-except block was accomplishing nothing except transforming an
Exception into ASTNGBuildingException; but Pylint already catches
Exceptions.","93234d5c28024cc72a0c22d80c3d6b65f3d84686","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-19 16:40:25","Add a new type of nodes, called *inference objects*.

Inference objects are similar with AST nodes, but they can be obtained
only after inference, so they can't be found inside the AST tree.
Their purpose is to handle at astroid level some operations which can't
be handled when using brain transforms. For instance, the first object
added is FrozenSet, which can be manipulated at astroid's level
(inferred, itered etc). Code such as this 'frozenset((1,2))'
will not return an Instance of frozenset, without having access to its
content, but a new objects.FrozenSet, which can be used just as a nodes.Set.","932ad093bb3060ca3490203880f677ffdc303f41","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""ChangeLog"", ""astroid/tests/unittest_objects.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/brain/builtin_inference.py"", ""astroid/objects.py"", ""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-07 16:53:49","[R] let NG classes inheritate from NodeNG and MixIns","9392dd99ed42a9f22d575f3a0c5bc5925ab57359","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-30 19:05:37","fix From node __init__

--HG--
branch : rebuild","93e06a3679c6c961239431c667eee60d04c8fa32","","api.github.com,git_clone","[u'[""node_classes.py"", ""rebuilder.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","hugovk","2017-12-11 09:34:12","Update version comparisons after review","93f3cfaaf0e270ecf5f666ab517b22776bf2ed89","","api.github.com,git_clone","[u'[""astroid/interpreter/_import/spec.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 05:56:18","update README","93fed93a76f9707a4bcba8c75e87ce064f8757d5","","api.github.com,git_clone","[u'[""README""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-07-10 20:21:56","Merged changes from logilab/astroid","94159d53d26043268084a732487b196dd44f9f3d","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/bases.py"", ""ChangeLog"", ""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_inference.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_manager.py"", ""astroid/brain/py2gi.py"", ""astroid/brain/pysix_moves.py"", ""astroid/inference.py"", ""astroid/manager.py"", ""astroid/__init__.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-07-24 06:52:20","rename all astroid_from* method, introduced by sed, into ast_from*","9427929322c30b7640523c4611c72717904227cc","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_regrtest.py"", ""inference.py"", ""test/unittest_manager.py"", ""manager.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-08-05 15:21:46","store astng fields into ._astng_fields instead of reusing _ast's ._fields, function to print native _ast tree, more compat work

--HG--
branch : _ast_compat","94404c7fa70ee5f6878e33aa6070f41a3c3fd78f","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-07-14 01:47:10","Fix code review comments.

Added aliases for inferred() and assign_type(), refactor some uses of
ternary if, remove some now-unused internal functions in rebuilder,
replaced the mutating docstring function with one that returns values
as well as side-effects, change back to lazy-object-proxy, and add keyword
args to the Module call in rebuilder.","94520560b047a12b5e277fd73400491e8dc1172d","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/bases.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/nodes.py"", ""astroid/scoped_nodes.py"", ""astroid/mixins.py"", ""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/builder.py"", ""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-09-25 13:33:09","patch transformer to extract correct line information","947a015ac1112f2b974f0aeeed13f09ac675eb77","","api.github.com,git_clone","[u'[""test/data/format.py"", ""ChangeLog"", ""nodes.py"", ""test/unittest_builder.py"", ""builder.py"", ""test/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-05 19:43:33","Add debug output to track down failures on drone.io.","9480d099df009adabbc5153247b5f56459f6e0b7","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-30 20:49:33","Add support for multiplication of tuples and lists with instances which provides an __index__ returning-int method.","94e5f812d22bc16ad9e640fa6dba3f5cb2e797db","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/protocols.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-03-28 07:38:45","reintroduce spaces necessary for test_module_as_string

--HG--
branch : stable","94ee18738092cd150a0ca41d86121638d0390cac","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""test/data/module2.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-12-30 13:57:15","Add support for binary operations between classes.","950739b820902f9dc33160d0aad23fffdd8d5441","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-28 13:27:44","Rename the brain files again to avoid naming conflicts.","9527b030bc58ee4c5c32bb9d97126bfbeb79afdf","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/_builtin_inference.py"", ""astroid/brain/brain_nose.py"", ""astroid/brain/_mechanize.py"", ""astroid/brain/brain_qt.py"", ""astroid/brain/brain_numpy.py"", ""astroid/brain/brain_pytest.py"", ""astroid/brain/_qt.py"", ""astroid/brain/brain_gi.py"", ""astroid/brain/brain_six.py"", ""astroid/brain/brain_stdlib.py"", ""astroid/brain/_pytest.py"", ""astroid/brain/_numpy.py"", ""astroid/brain/brain_dateutil.py"", ""astroid/brain/_stdlib.py"", ""astroid/brain/brain_mechanize.py"", ""astroid/brain/_six.py"", ""astroid/brain/_gi.py"", ""astroid/brain/brain_builtin_inference.py"", ""astroid/brain/_dateutil.py"", ""astroid/brain/_nose.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-02 11:20:43","reduce circular imports II: move boot straping stuff to raw_building

- inference doesn't depend on importing raw_building from logilab.astng
  anymore
- fix also test import","957735efa408c22a8c6702f42d076d3b3458f9b0","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-25 16:44:50","fix Discard-Yield combination and some more obvious bugs

--HG--
branch : rebuild","957d645de048283c1d630870cc2182abfd1791b9","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-03 16:53:01","left and right for compiler.BinOp

--HG--
branch : _ast_compat","9590aa1499ce323a7b7f450c482aa6dd925c06e8","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-14 13:56:25","Remove trailing whitespace.","95ce9a2cd967b1ed17222bd1d19a53d3ad843985","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-04-30 15:58:11","1.1.1","95e25f3f7391fa03be2a1632e048226ce2b41dd9","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-07 16:48:18","[R] rename LookupMixin to LookupMixIn and move LocalsDictMixIn to lookup.py","95ee8a6c7fc4899ca7f557789303fe5b41eea643","","api.github.com,git_clone","[u'[""lookup.py"", ""scoped_nodes.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-02-22 15:29:00","fixes for python 3.3 ast nodes changes. Closes #120646","9600d6e467aa84baa49faee4b7213c71d44d6f0a","","api.github.com,git_clone","[u'[""rebuilder.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#120646', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'120646', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-09-27 16:40:51","fix some copyrights","9609f63ee0c5cd1f52283fea5d1ae8c184f849b0","","api.github.com,git_clone","[u'[""manager.py"", ""utils.py"", ""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-12 13:56:23","remove print and #print

--HG--
branch : _ast_compat","9612ee46fa28dd10ac3e3262d3c7882ce6587af6","","api.github.com,git_clone","[u'[""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-04-06 19:34:12","work in progress

--HG--
branch : _ast_compat","9657a5666a998c096da5446d362fdd0685a48299","","api.github.com,git_clone","[u'[""_inference_ast.py"", ""nodes.py"", ""_nodes_compiler.py"", ""builder.py"", ""inference.py"", ""_nodes_ast.py"", ""lookup.py"", ""_inference_compiler.py"", ""scoped_nodes.py"", ""utils.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-11 13:18:34","remove TODO for pylint (done or moved to pylint)

--HG--
branch : _ast_compat","965f9b34c23db83df403f2d7466be0fc607fbd94","","api.github.com,git_clone","[u'[""TODO._ast_compat""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-26 17:41:35","Make seen a parameter with a default value, instead of passing explicitly None.","9666140dc1100b7ffe6337fa020ace239349eeac","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-06 16:19:56","somewhat fix #57299: Exception when trying to validate file using PyQt's
PyQt4.QtCore module: we can't do much about it but at least catch such
exception to avoid crash.

Small refactoring on the way.","9681d89e058a30969f6d568a71a7dd69bd289df6","","api.github.com,git_clone","[u'[""raw_building.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#57299', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'57299', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-09 14:01:19","fix: self import is no problem: just return root module","9684d0fb05c4721876c2b7274b6af3f3122ff62d","","api.github.com,git_clone","[u'[""mixins.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-08 12:25:19","Switch to a spec finder protocol for finding files or packages","969217ee6a0b458941e9477cd69ef32a4b4c54a4","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/modutils.py"", ""astroid/manager.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-24 15:42:10","avoid introducing a Delete node
Subscript can appear on rhs, and _check_del_node would see asscontext=None

--HG--
branch : rebuild","96bca3afb23f6d0e7a20825cfb959f5877d52ca7","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jwilk","2016-06-02 15:54:31","Fix typos","96be1bbc7ede4ce7c221988a3303a5d7dd46b13a","","api.github.com,git_clone","[u'[""doc/source/inference.rst"", ""astroid/tests/unittest_inference.py"", ""astroid/brain/brain_namedtuple_enum.py"", ""astroid/tests/unittest_regrtest.py"", ""ChangeLog"", ""astroid/modutils.py"", ""astroid/test_utils.py"", ""astroid/tests/unittest_protocols.py"", ""pylintrc"", ""astroid/raw_building.py"", ""astroid/tests/unittest_nodes.py"", ""doc/source/extending.rst"", ""astroid/mixins.py"", ""astroid/node_classes.py"", ""astroid/inference.py"", ""astroid/tests/unittest_transforms.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/brain/brain_gi.py"", ""astroid/as_string.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-20 10:30:49","some small corrections on as_string usage and tests

--HG--
branch : _ast_compat","96c555c5113a53b60888bdd50a095a0fab776891","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""builder.py"", ""test/unittest_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 11:59:32","drop dict_factory method, use const_factory instead

--HG--
branch : _ast_compat","96cf206df5ba34e223fac3cc8827ba723de31e25","","api.github.com,git_clone","[u'[""raw_building.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-12 18:02:18","Remove unused import.","96d83666d3b4b04587fc6803ae38ba5b72607de9","","api.github.com,git_clone","[u'[""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","giuseppe","2016-04-27 13:12:45","Ignore PyGIWarning

It solves this error when running PyLint on a file which uses gi introspection:

/usr/lib/python2.7/site-packages/astroid/brain/brain_gi.py:136: PyGIWarning: OSTree was \
imported without specifying a version first. Use gi.require_version('OSTree', '1.0') before \
import to ensure that the right version gets loaded.

Signed-off-by: Giuseppe Scrivano <gscrivan@redhat.com>","96dbb797e7d1a5f5c7f59b53a54b49bf0fd2ed9c","","api.github.com,git_clone","[u'[""astroid/brain/brain_gi.py""]']","False","[]","[]","[u'@redhat']","[]"
"commit_messages","","pycqa","astroid","emile@crater.logilab.fr","2008-07-23 10:03:59","dont recurse on Instance instances in the locals visitor","96f2ab47f5dc0baac8d4d2eac8e4c54fbbbf8d91","","api.github.com,git_clone","[u'[""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-25 18:08:10","mistake :( no lookup simplification

--HG--
branch : _ast_compat","9722a57493902404905e934716c7eb6b26bcd8d7","","api.github.com,git_clone","[u'[""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-25 10:48:28","Look in ancestors when a class node doesn't use an explicitly defined metaclass (the metaclass of a class is a metaclass for all its subclasses).","974ff96958174bab4708395d451497f4362d54a7","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""test/unittest_python3.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-18 16:18:26","fix the order of the nodes in locals.
Adding some From nodes to the end of the Module tree modified
the order of the nodes. Hence we have to fix it some way.

--HG--
branch : rebuild","975cecee7a11c34da5cce5df05571566ac978bda","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","eevee","2014-03-21 22:02:40","Skip a test that uses multi-arg with on 2.6.","9781343aa75f6425b4ea68ea9eb149770160dfba","","api.github.com,git_clone","[u'[""test/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 08:50:11","missing redirection

--HG--
branch : _ast_compat","97861c5583e27959c015bf790480bbc39b31e38b","","api.github.com,git_clone","[u'[""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 14:58:43","merge

--HG--
branch : _ast_compat","97889bd45936014b69b1d39001f04fa807922262","","api.github.com,git_clone","[u'[""patchcomptransformer.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-07-05 06:10:40","fix Class.interfaces so that no InferenceError raised on empty __implements__

--HG--
branch : stable","97a1dcea92a20cbf9f80069f81e73fe043d08516","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-06-18 16:18:45","[transforms] allow transformation functions on any nodes, not only modules","97c3f5dddd151494effe5150663f83c71e77354c","","api.github.com,git_clone","[u'[""rebuilder.py"", ""ChangeLog"", ""builder.py"", ""brain/py2stdlib.py"", ""test/unittest_regrtest.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-26 12:33:09","Merged in ceridwenv/astroid (pull request #88)

Use six.reraise to avoid losing tracebacks for simple cases","97d4d55c7a255ce8e638eeb7e01b2002c6ae3b8c","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/builder.py"", ""astroid/decorators.py"", ""astroid/bases.py"", ""astroid/test_utils.py"", ""astroid/util.py"", ""astroid/scoped_nodes.py"", ""astroid/mixins.py"", ""astroid/inference.py"", ""astroid/objects.py"", ""astroid/manager.py"", ""tox.ini""]']","False","[]","[{u'raw': u'#88', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'88', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-07 10:13:29","Change the signature of the ArgumentInference class to accept directly the arguments and the keywords of a call site.","97d85fd9851b2a82c0932f1e23af9307bff1879b","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/arguments.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-24 21:34:49","Reactivate pylint.","97e87624bc6f90130ec03d8cceef17fa9159b629","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 09:20:44","decorators has been renamed to decorator_list in 2.6","9825a6280b9120c8fad2593618c395f4583f0ed1","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","flying-sheep","2013-11-25 17:34:58","moved setting of module.file_encoding to _post_build()","982bfdf69aa34b039188be874c0d75c67dd74017","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-10 13:13:10","With is an assignment context; fix as_string

--HG--
branch : _ast_compat","982e777342ee3effddb0b4907c62453ed91c518d","","api.github.com,git_clone","[u'[""rebuilder.py"", ""nodes_as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-09-23 10:38:42","get all tests passing with py 2.3 2.4 2.5","984c9f6969719c1738dc8df11fda896645ff5d19","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""inspector.py"", ""test/unittest_inspector.py"", ""manager.py"", ""test/regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-15 13:57:39","* slightly better inference on astng built from living object by trying to infer
  dummy nodes (able to infer 'help' builtin for instance)","988e26b822a31d6c88015de604a4b53aec4717d0","","api.github.com,git_clone","[u'[""test/runtests.py"", ""ChangeLog"", ""nodes.py"", ""test/unittest_inference.py"", ""__init__.py"", ""test/unittest_builder.py"", ""builder.py"", ""inference.py"", ""lookup.py"", ""manager.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-28 12:30:13","0.20.3

--HG--
branch : stable","989b958c7d3dfaf4af4909f1c352f8c81d845cbb","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-09-16 11:14:04","Merged in crobinso/astroid/fix-pygi-glib3 (pull request #54)

brain: gi: fix glib detection","98f5d9269b638952cb2ef38e2a424af676f5b35a","","api.github.com,git_clone","[u'[""brain/py2gi.py""]']","False","[]","[{u'raw': u'#54', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'54', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-15 17:30:59","Added tag logilab-astng-version-0.21.0 for changeset fd1a1cfd5d27","9911a08d6f7d1d55cad8eb911ae831b3fba14bfb","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","obsc","2015-08-26 16:49:54","Add new _find_metaclass method to maintain signature of metaclass","993056dcc03874cc77ad951bfbb31f4e3b2e735e","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","moylop260","2016-09-02 07:36:21","Add compatibility with old versions of setuptools (#360)

Ranged environment markers can be used only in recent versions of setuptools. Instead of relying on extras_require, we are falling back to install_requires when we detect an incompatibility between the installed setuptools version and what astroid expects.","9979615030d97cbe26bb64e005f7dd83012f013d","","api.github.com,git_clone","[u'["".travis.yml"", ""astroid/__pkginfo__.py""]']","False","[]","[{u'raw': u'#360', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'360', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-10-04 06:52:35","fix typo in setup.py","997cb119b5550539ab5726f38e5936b416ead2d1","","api.github.com,git_clone","[u'[""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-03 15:58:22","Make islots private.

--HG--
branch : slots","99974751cd6c7fbb54b8b607f7960bfc188e677e","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-10-24 16:21:56","Use the correct _replace member. Thanks to @dirthead for finding the bug. Close #368","99fa655de39e6925b84f67db6ac28b0dd577ef51","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[{u'raw': u'#368', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'368', u'']}]","[u'@dirthead']","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-09-14 00:21:20","Fix indentation changed in merge, again","9a32f50ca14360d63e5b5f146b288834a10b5e09","","api.github.com,git_clone","[u'[""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-04-24 15:16:11","get_module_part should be given a context_file. Closes pyreverse crash #92362

--HG--
branch : stable","9a3889c5f996b6b1b5bcec5fd5dedbde4e12e163","","api.github.com,git_clone","[u'[""inspector.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#92362', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'92362', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-30 16:34:20","Don't let ResolveError leak out from local_attr, when using .mro().","9a5308d5df28bf6aa33fc3f9b27a04027d26f848","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-03 16:52:35","fix imports: _nodes -> bases

--HG--
branch : rebuild","9a7cc0159266d0ef9679c37cd5ac7926692f41e7","","api.github.com,git_clone","[u'[""infutils.py"", ""scoped_nodes.py"", ""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-03-24 17:31:47","Add brain tips for the ssl library.","9aa2ec9b0d2ea2aded5a900344e8debb1562a2a8","","api.github.com,git_clone","[u'[""astroid/tests/unittest_regrtest.py"", ""astroid/brain/brain_ssl.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-30 18:58:48","drone.io debug.","9aaaabb740e060a08c1b8c57bfd0b61e5f554b53","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2013-06-17 17:47:33","Fix test_generator_attributes for python3

The next() method was renamed __next__()","9aab8ffe4b6c787712f1d1d8530a4d205c387a3a","","api.github.com,git_clone","[u'[""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-07 17:48:28","[B] again the Yield bug","9acb34a890f19509b78f3b17376b977672f7c1fc","","api.github.com,git_clone","[u'[""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-24 17:28:41","add a tset for expected constant build values

--HG--
branch : rebuild","9ad1dc0b2526dca64ba630696ee84669489bc0c5","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-18 18:09:19","Change a couple of readability issues, proper variable names and so on.","9ae7562f92f13aceda2b5c0389dd37955ca9e066","","api.github.com,git_clone","[u'[""astroid/context.py"", ""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-08 15:08:51","fix ast_build default value for calling without modname

--HG--
branch : _ast_compat","9b180e60607bee8c3269a0f1a910d041ecec7353","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-02-07 09:14:38","From.level bw compat","9b2b36d6aa61ae17aa32230e36e164384a3b8162","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-20 14:12:32","Fix an infinite loop in the inference, by returning a copy of instance attributes, when calling 'instance_attr'. Closes issue #34 (patch by Emile Anclin).","9b425408b3f40f5afad498854b458b557bf532ad","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""test/unittest_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#34', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'34', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-02 10:03:49","cleanup: remove unused class ASTVisitor","9b4fcb2cb2add72aaeeed7c9225067cadea2371b","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""utils.py"", ""as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-12 18:21:30","trying to start astng with delayed_visit_getattr

--HG--
branch : _ast_compat","9b8cd9bf56c2509d2ad9c9e0f4da6f4da2aaf588","","api.github.com,git_clone","[u'[""lookup.py"", ""builder.py"", ""inference.py"", ""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-16 18:19:02","Disable assignment context for Subscript.
There is no assignment for the Subscript children, even if the Subcript is
on lhs.

--HG--
branch : rebuild","9b9aaa61d29ec7e00dda2187cdc144c821aba1be","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-06-18 10:30:43","Added the test_utils module for building ASTs and extracting deeply nested nodes for easier testing.","9bac12c6d5bc33e01a67980ddf9c3fb7eb3c09e1","","api.github.com,git_clone","[u'[""test_utils.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-07-23 14:21:18","ASTWalker has been removed from the inheritance tree on the pylint side","9bcd4a50572f56aa9b9f78ec78d4bd1a7d330575","","api.github.com,git_clone","[u'[""test/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-13 17:48:28","minor cleanup: remove useless optional attributes","9c0e2aa622a8d8f85fae48d6795b4bfabe1ccaa4","","api.github.com,git_clone","[u'[""manager.py"", ""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-18 14:14:58","handle Subscripts and Slices for _nodes_compiler

--HG--
branch : _ast_compat","9c4f0d37b058f52e2624e06087968e3f86b7f780","","api.github.com,git_clone","[u'[""nodes.py"", ""nodes_as_string.py"", ""utils.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-06 18:31:56","_io names itself io. This patch fixes some cyclic dependencies when solving io.BufferedReader and friends.","9d090ce96e3f3177708d792613fd66f343309bc0","","api.github.com,git_clone","[u'[""astroid/raw_building.py"", ""astroid/tests/unittest_raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","dmand","2015-10-21 13:07:05","Add unit test that crashes inference with 'maximum call depth exceeded' error.

--HG--
branch : binop-inference-fix","9d26618568c10a131275bc1c91238d22bac088d5","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-24 21:47:55","Fix indentation to make pylint happyyy.","9d295ea6bb4850473b84aa0c4575b3d666869719","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","flying-sheep","2013-11-24 10:48:01","added file_bytes to Module to allow file_stream to be retrieved from it","9d37ccf28ddc6382ea47bd3246e867fe9d779569","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-14 16:31:49","Added tag astroid-1.3.6 for changeset bae72378bead","9d4e5f00e4e4222ec6e225fc7598245b6329ddc2","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 18:23:32","test and fix python'special attributes handling

--HG--
branch : _ast_compat","9d801078cee419d0d5677517b8729db94b067e02","","api.github.com,git_clone","[u'[""rebuilder.py"", ""infutils.py"", ""builder.py"", ""inference.py"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-01 11:20:55","fix: delayed AssAttr must be after setting locals

--HG--
branch : rebuild","9d84aea964b35c7e11607de1b5f2a0a39a7c6a6a","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-06-16 17:13:15","closes #69217: please add column offset to the astng node","9d8800ca5703f364518240016aaed8e5434b2472","","api.github.com,git_clone","[u'[""rebuilder.py"", ""bases.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#69217', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'69217', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-07-22 19:48:31","Even more granular copyrights (thanks to copyrite)","9d94babb2e968c5a343218a48684a9529cbab568","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/brain/brain_pkg_resources.py"", ""astroid/tests/unittest_inference.py"", ""astroid/brain/brain_collections.py"", ""astroid/nodes.py"", ""astroid/brain/brain_qt.py"", ""astroid/tests/unittest_objects.py"", ""astroid/rebuilder.py"", ""astroid/tests/unittest_peephole.py"", ""astroid/mixins.py"", ""astroid/helpers.py"", ""astroid/brain/brain_ssl.py"", ""astroid/brain/brain_mechanize.py"", ""astroid/manager.py"", ""astroid/interpreter/__init__.py"", ""astroid/raw_building.py"", ""astroid/builder.py"", ""astroid/bases.py"", ""astroid/brain/brain_subprocess.py"", ""astroid/modutils.py"", ""astroid/test_utils.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/arguments.py"", ""astroid/brain/brain_six.py"", ""astroid/tests/unittest_raw_building.py"", ""astroid/node_classes.py"", ""astroid/tests/__init__.py"", ""astroid/brain/brain_numpy.py"", ""astroid/tests/unittest_utils.py"", ""astroid/brain/brain_multiprocessing.py"", ""astroid/decorators.py"", ""astroid/transforms.py"", ""astroid/__init__.py"", ""astroid/as_string.py"", ""astroid/brain/brain_nose.py"", ""astroid/context.py"", ""astroid/brain/brain_hashlib.py"", ""astroid/tests/resources.py"", ""astroid/tests/unittest_object_model.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_transforms.py"", ""astroid/util.py"", ""astroid/tests/unittest_builder.py"", ""astroid/brain/brain_dateutil.py"", ""astroid/objects.py"", ""astroid/brain/brain_functools.py"", ""astroid/brain/brain_builtin_inference.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/tests/unittest_modutils.py"", ""astroid/brain/brain_namedtuple_enum.py"", ""astroid/interpreter/objectmodel.py"", ""astroid/tests/unittest_nodes.py"", ""setup.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/brain/brain_threading.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/unittest_brain.py"", ""astroid/protocols.py"", ""astroid/tests/unittest_python3.py"", ""astroid/brain/brain_pytest.py"", ""astroid/astpeephole.py"", ""astroid/brain/brain_gi.py"", ""astroid/__pkginfo__.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-16 23:30:17","Make file_stream a cached property.

Until now, a new file handle was returned each time
file_stream was requested, which led to multiple
ResourceWarnings emitted on Python 3.","9da8e2ad041f750b193bd08c4ec7b483db46e513","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-14 20:40:41","Add test for coercion rules for floats and complex numbers.","9dae9fed0713625183ed1c780f93b0023fac92e1","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-07 14:25:51","Fix pylint warnings.","9db5a4f5ca51b782645e70286214b0d920c89ec1","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-07-31 06:17:21","fix error in namedtuple inference, we should add an astng class node *instance* in .bases","9e066881ffaacc4df1d7d470df0324ea57ee5aff","","api.github.com,git_clone","[u'[""brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-07 00:54:19","Add six dependency and add verbose output for better debugging of drone.io failure","9e12d513e9c37d9b17378a420eaa5a22252a9663","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-02-14 10:38:35","default is stable

--HG--
branch : stable","9e37f67a7866b52650a289dd0171d45335916b99","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 09:12:39","implement accept for Num and Str nodes","9e3c9ccbd79b3c1e73c53fdcf16b8f5a99377d91","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-23 09:54:48","namedtuple._replace expects the actual attributes to be replaced","9e50d226674b0d8db0c29dfe54bde4a1c72a11e4","","api.github.com,git_clone","[u'[""astroid/brain/brain_namedtuple_enum.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-12-18 10:11:50","Force the path to be a list when passing it to find_module.","9e65cf919eaeba6fb5c4e9b823b9d429be7fa0eb","","api.github.com,git_clone","[u'[""astroid/interpreter/_import/spec.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-02-05 12:57:40","Revert ""Fix namespace population when wildcard import is used (#397)"" (#398)

This reverts commit 3e6ef99928137a396a6ee9c75351f4194b2471e8.","9ee1f58ba91a52148829a781f3bfcff6f659139e","","api.github.com,git_clone","[u'[""astroid/builder.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[{u'raw': u'#397', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'397', u'']}, {u'raw': u'#398', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'398', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-14 10:34:56","Fix pylint errors.","9eea91fd9f72b929d1cecec1d68a0986c52be2bf","","api.github.com,git_clone","[u'[""astroid/raw_building.py"", ""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2006-11-21 12:51:43","packaging fixes","9f150fa54a58fc04f452b12f07a245ddd15fb748","","api.github.com,git_clone","[u'[""debian/compat"", ""debian/rules"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","living180","2010-10-01 18:01:53","add support for dict comprehensions","9f1ccc47ee2fe729959deb8d6b82381e77005029","","api.github.com,git_clone","[u'[""nodes_as_string.py"", ""nodes.py"", ""node_classes.py"", ""test/unittest_lookup.py"", ""_nodes_ast.py"", ""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile@crater.logilab.fr","2008-07-23 10:02:49","add .items on Project instances","9f29a021407fd55b01fb690e381c3899479ee945","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-04-16 16:59:37","more infinite recursion fix","9f2d2fa0d07faee617acaa840809e8954fb64627","","api.github.com,git_clone","[u'[""manager.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-27 10:34:28","don't set 'locals' to None as it is set in the constructors;
remove assertion: if locals is not a dictionary, it will crash anyway

--HG--
branch : rebuild","9f3a85449a3e7ccc6ea0f72bf48aae5b67375bb3","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-18 18:07:49","use AsStringVisitor for tests

--HG--
branch : _ast_compat","9f5c4d93dfd4f27107cd9b1efa1aac54c9deee30","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-07 16:51:11","[B] rename LookupMixIn also in nodes.py","9f7ff47fc512274aaf11e08af8f52cc6bf654100","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-23 14:57:20","ExceptHandler should have blockstart_tolineno attribute","9f84453ce29952433660704a2ecc5ac8ed53c10e","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-10 22:02:57","Change the extension of the README file, so it gets rendered by github.","9f8aee71c9b15fa93a55a6f50cb53458bc864c8e","","api.github.com,git_clone","[u'[""README"", ""README.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-12-18 13:07:07","Raise AstroidTypeError whenever a slice cannot be inferred, instead of raising TypeError and letting the upper context to handle it.","9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-22 17:23:24","Added tag logilab-astng-debian-version-0.20.0-1 for changeset a97750968454","9fa708f4a0dedbe25474aaba4a4527727a052899","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2013-06-18 15:22:42","set fromlineno for Argument nodes

decorated functions get their fromlineno attribute adjusted, but on
python3, where argument nodes don't have a lineno, the argument nodes
still had the old line information.","9fabb962dc83db4fbd442e3953d6a654db7be617","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-14 13:20:59","Add a new method to the AST nodes, 'bool_value'.

It is used to deduce the value of a node when used in a boolean context, which is useful
for both inference, as well as for data flow analysis, where we are interested
in what branches will be followed when the program will be executed.
`bool_value` returns True, False or YES, if the node's boolean value can't
be deduced. The method is used when inferring the unary operand `not`.
Thus, `not something` will result in calling `something.bool_value` and
negating the result, if it is a boolean.","9fcd7480ba412bd49bd072e961683e97c307ef3a","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/tests/unittest_inference.py"", ""ChangeLog"", ""astroid/scoped_nodes.py"", ""astroid/node_classes.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-11 17:27:34","fix line length

--HG--
branch : _ast_compat","9fd2500755d3d3fd08e7957992cfba8d1ef9846f","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-12-15 08:56:05","Only mock attr.ib attributes","9fd8d28fa2587b7bdee59d4339eba43b8a53cba0","","api.github.com,git_clone","[u'[""astroid/brain/brain_attrs.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-02-22 15:46:07","backport proper subprocess.Popen implementation from pylint brain. See #46273","9fe835e2dee7d401b3f7e1ebd442dc39da956386","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#46273', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'46273', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-11-23 15:04:50","0.16.3","9fecae53e4fabdbcadc07666d142d1c6919900f3","","api.github.com,git_clone","[u'[""debian/changelog"", ""__init__.py"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-01 08:57:39","cleanup: remove strange SyntaxError capture;

Such kind of captures should be done by manager.py or builder.py","9ff3beb68314ade13fa58f3e67c97b0ed00abd31","","api.github.com,git_clone","[u'[""mixins.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-09-16 07:44:57","remove debug print","9ff64c05eba629886c4c437731840014ee1f840b","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-16 14:36:02","more 'are_exclusive' bugs

--HG--
branch : _ast_compat","a0196df266af67bf2081f13ef232b74af1ed057f","","api.github.com,git_clone","[u'[""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-25 14:24:40","modify compiler Nodes representation

--HG--
branch : _ast_compat","a01a2c93d5993f7be820a6699936172c7bbeec9d","","api.github.com,git_clone","[u'[""lookup.py"", ""nodes.py"", ""test/data/module.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","Mic92","2017-05-13 13:00:25",".travis.yml: python3.6 is no longer in development (#427)","a044be973d5135d9667b16722208fd46a0e14cf6","","api.github.com,git_clone","[u'["".travis.yml""]']","False","[]","[{u'raw': u'#427', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'427', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-17 07:27:15","Fix a couple of pylint warnings.","a079c3d4abecee064c3ab4c44f086b618f06fa8c","","api.github.com,git_clone","[u'[""astroid/brain/py2gi.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-05 11:38:59","first steps on as_string : fix attributes

--HG--
branch : _ast_compat","a07a3669e328c528d1153de9ee8c4fb1ddec6826","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-23 13:29:28","include Dotan Barak spell fixes patch","a08a442fa924f94e2007552e91adae16d300b946","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""README._ast_compatibility"", ""test/unittest_inference.py"", ""__pkginfo__.py"", ""scoped_nodes.py"", ""nodes_as_string.py"", ""infutils.py"", ""inspector.py"", ""README"", ""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""builder.py"", ""test/unittest_lookup.py"", ""utils.py"", ""raw_building.py"", ""protocols.py"", ""ChangeLog"", ""nodes.py"", ""__init__.py"", ""_nodes_compiler.py"", ""inference.py"", ""_nodes_ast.py"", ""lookup.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-02 09:16:24","Merged in the_drow/astroid/fix-python3-tests (pull request #77)

Fixed syntax errors in Python 3 (issue #72)","a103a4687a98c3e9fab8dea79f42f74065673219","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python2/data/module2.py"", ""astroid/tests/testdata/python2/data/module.py"", ""astroid/tests/testdata/python2/data/nonregr.py"", ""astroid/tests/testdata/python2/data/appl/myConnection.py"", ""astroid/tests/testdata/python2/data/notall.py"", ""astroid/tests/testdata/python2/data/SSL1/Connection1.py"", ""astroid/tests/testdata/python2/data/module1abs/__init__.py""]']","False","[]","[{u'raw': u'#72', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'72', u'']}, {u'raw': u'#77', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'77', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-17 19:49:45","Update the changelog.","a171422225cfae6e063704db6483365b9dda6241","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-05 22:37:27","Remove the value from the DictUnpack node, since it's used mostly to represent the ** operation.","a17ee27eafc308403f1877aa6bf3af4e4b63557e","","api.github.com,git_clone","[u'[""astroid/rebuilder.py"", ""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-06 15:48:59","Add structured exceptions to decorators and remaining functions.

* Use explicit StopIteration to pass information from generators to
  raise_if_nothing_inferred and path_wrapper, rather than return or
  implicit termination by reaching the end of the code block.

* Remove remove_nodes in favor of handling the cases in local_attr,
  istance_attr, and getattr, to avoid the need for complicated
  information passing when needing to raise an exception.","a1874fa7b631d7a4538682ccc8242f489c1f3721","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""astroid/scoped_nodes.py"", ""astroid/decorators.py"", ""astroid/protocols.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-09-21 14:47:35","Use six.reraise to avoid losing tracebacks for simple cases","a1dcb2d18a65be6034459832c91bc5eacbee3c1e","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/builder.py"", ""astroid/decorators.py"", ""astroid/bases.py"", ""astroid/test_utils.py"", ""tox.ini"", ""astroid/scoped_nodes.py"", ""astroid/mixins.py"", ""astroid/inference.py"", ""astroid/objects.py"", ""astroid/manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-19 10:46:46","cleanup

--HG--
branch : _ast_compat","a1e0abc6d9d7b9c2929774ae00d6c79de60d5289","","api.github.com,git_clone","[u'[""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-26 12:56:31","Fix a regression with the reraise of AstroidBuildingException.

The entire original exception object needs to be passed to AstroidBuildingException
in builder.AstroidBuilder._file_build, since pylint uses this as an introspection method,
in order to find what error happened.","a1f393ad078ffb050816524a0b20a17cf0d3d838","","api.github.com,git_clone","[u'[""astroid/builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-02-26 22:02:50","backport stable","a1f71d6f1c39ee8b3130105e6ceb224dd9ffc78a","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-26 11:48:14","fix doc string typo

--HG--
branch : _ast_compat","a20e21ca3a557958fd12f476590ce8cc360eaa3f","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-10-07 14:48:47","Added tag logilab-astng-version-0.23.0 for changeset fd80e67a9801","a2272a3f7e6d21dbbfb640f26eaf0da46b952764","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-07-18 06:32:01","fix manifest","a239058b5b6a71c7d4baa1f676a7bedce8227268","","api.github.com,git_clone","[u'[""MANIFEST.in""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 08:49:11","dont monkey patch base Node class","a25af796c31e33a827d47102d83db389cab846ab","","api.github.com,git_clone","[u'[""nodes.py"", ""inference.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-27 22:01:16","Move UnaryOp code to be closer to BinaryOp.","a26db5ccc7d4f1eae885df51bf9cea97b4bd8f79","","api.github.com,git_clone","[u'[""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","degustaf","2017-01-25 19:09:16","Add getitem to defaultdict brain. (#387)","a2b025003ecb128681df8b29fd6ba8dcf614a6d7","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_collections.py""]']","False","[]","[{u'raw': u'#387', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'387', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-16 15:47:15","Revert ""master astroid is now 1.6.0""

This reverts commit f40f50f3cd60c6d5c8e3202e5a8a47e07f864ebc.
This was meant for pylint, not for astroid.","a2b44908240575c8b12591b03ad34d0b95c1278d","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-24 14:34:59","test: fix egg /zip test running together","a2bd8b504115d9d20d620b4657f88050833652d5","","api.github.com,git_clone","[u'[""test/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-25 15:06:46","move special cases of _infer_name to concrete classes

--HG--
branch : rebuild","a2c0b368ae7f92184a4dd9d9f2129303a2bb8c9c","","api.github.com,git_clone","[u'[""node_classes.py"", ""_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-02 08:02:41","merge","a2d9865fa9684bffa321d2a68b34abce52da2418","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""test/regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 09:12:24","cleanup","a2f53f58489b7d2669232ea5e0634d710b4152dd","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-21 15:03:13","Fix the error message, it raises for old style classes.","a304d48acbd14f2e8bedc6673c7bfd0d53213ba2","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-21 21:50:16","Added tag astroid-1.3.1 for changeset c48847c4a515","a3631d0284f8f5c3338ff6ea08ed81a269ad5c0e","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-01 16:18:27","Add support for indexing bytes on Python 3.","a3786d6edc8dd57d24f7f847e2d2b4b55dda2caa","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/node_classes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 10:27:11","import are_exclusive so we can filter according to catched exceptions","a387f48ebb3674f7d5359d77a673390ba32ee085","","api.github.com,git_clone","[u'[""infutils.py"", ""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-02 12:28:28","compiler : fix some visit arguments / infos

--HG--
branch : rebuild","a38a3a5f8f85dcf07d482c204a3994bb7017eebd","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-04-26 09:07:36","more license updates","a3c4912cc66e6a042d92491b780eb6355ee4fd49","","api.github.com,git_clone","[u'[""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-03 10:47:06","Make context an optional argument for BoundMethod.infer_call_result.","a3dacfdde9eb71d5724d39618d4ed77c9a3a8428","","api.github.com,git_clone","[u'[""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 12:03:00","have to implement both getattr and igetattr","a41e674dfb79761dca01dd7f6ad4df3770ee337d","","api.github.com,git_clone","[u'[""infutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rr-","2017-01-30 08:45:55","Add support for Python 3.6's annotated assignment nodes","a4522cf7115a3a1e7cc714d4446cd1a226dab480","","api.github.com,git_clone","[u'[""ChangeLog"", ""astroid/nodes.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/protocols.py"", ""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-05-11 08:40:06","close changelog

--HG--
branch : stable","a479d51bc2ca85e4071dbca65b8cf4dc0cbaaf59","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 10:10:23","If expression support

--HG--
branch : _ast_compat","a4e3901403aa98c112c268e60d1ed2029d5041d3","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""utils.py"", ""nodes_as_string.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-27 11:56:53","Remove trailing whitespace.","a4ed4ed53598c321243bb4f79c93a40b799a1b31","","api.github.com,git_clone","[u'[""astroid/tests/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-07 10:23:43","[B] remove another refactoring bug","a4ef77d7b58988fdbf072aac2a6ca6d177d23ec1","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-02-21 16:50:11","Merge.","a5573655fadb9a0dda989a737b13c8718cf801fa","","api.github.com,git_clone","[u'[""debian/rules"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-19 17:43:45","Specify that inference objects can be found in the AST tree, but only after inference.","a55a7dcc80669f91cc709576e634383802bf9b54","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-09 12:10:01","builtin objects as_string infinite recursion fix","a5825d8072d8745dd9e301bdf6f4f1548087be7f","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-25 07:55:09","2.6 fix","a598f9a04aacece6e86248993999ffacd5d0634d","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-29 19:41:20","Merge with default.","a5b123645d89cd660bd56eebc07f627cd7134588","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""test/unittest_python3.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-26 13:09:38","fix target.__class__ in init_assign

--HG--
branch : _ast_compat","a5c7c11d1fb5c5ce2095ddaa7d199eeeaaf10f9b","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-23 17:39:38","small correction for RebuildVisitor

--HG--
branch : _ast_compat","a66df7b892b680afade000eb9bb8fe860c5afec0","","api.github.com,git_clone","[u'[""nodes.py"", ""utils.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-10 21:12:42","Remove unused imports.","a6721e299db6f4bb0f6b59416f9cb0ad417c77ff","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-06 14:13:09","Add brain tips for PyQt signals for supporting emit / connect and disconnect methods on them","a6775279b2006fb6f27a0fbb86a35262020e550f","","api.github.com,git_clone","[u'[""astroid/brain/py2qt4.py"", ""astroid/raw_building.py"", ""astroid/brain/pyqt.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 22:37:55","yield isn't a statement with py > 2.5","a685081ac4b8e8db719e2acea7e702a6b9093811","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-07-16 10:10:08","default is stable

--HG--
branch : stable","a694b5dc211c707a0ee6ce4e459f2aed47e23bb4","","api.github.com,git_clone","[u'[""raw_building.py"", ""inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","dmand","2015-10-21 13:16:01","Fix binary operation inference crash by using cloned contexts

Idea is that we shouldn't use the same context to infer left-hand side and
right-hand side of the binary operation because inferring lhs may leave
some metadata in context.path that is irrelevant (and can even break inference)
to inference of rhs.
So we make two clones of the original context and use them to infer left-hand
side and right-hand side independently. And then we use the original context to
infer the result of the operation applied to inferred values.

This patch fixes pylint's issue #646 and may be also related to other
similar astroid issues (#198, #199).

--HG--
branch : binop-inference-fix","a69de80c4a642458fd7f59011827d70e333e9a78","","api.github.com,git_clone","[u'[""astroid/inference.py""]']","False","[]","[{u'raw': u'#198', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'198', u'']}, {u'raw': u'#199', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'199', u'']}, {u'raw': u'#646', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'646', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-14 14:42:19","build builtins in more direct way

* we don't need the MANAGER for the const _proxied anymore
* define Const.pytype in class definition","a6ae7da3846c93390ade7d5a2aa41f24007dcbf7","","api.github.com,git_clone","[u'[""node_classes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 19:16:53","use logilab.common.testlib

--HG--
branch : _ast_compat","a6b54bd404bc347d490adbab44a2d55297b9eb5a","","api.github.com,git_clone","[u'[""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-30 11:00:34","Merge heads.","a6baa5f092e933bc5b84849264df988069cee7d9","","api.github.com,git_clone","[u'[""astroid/helpers.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-02-03 09:30:09","Comment typo.

--HG--
branch : nameconstant_py34","a7001144986e4ea2b13a3e6cae24d6edb245fa46","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-10 16:13:04","[R] demonkey patching some Const, Dict, List and Tuple attributes","a7092cb6c3248ddd2b3330922204fb504bd4accd","","api.github.com,git_clone","[u'[""node_classes.py"", ""inference.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-07 10:52:36","Class.has_dynamic_getattr doesn't return True for special methods which aren't implemented in pure Python.

Since most likely the methods were coming from a live object, this implies
that all of them will have __getattr__ and __getattribute__ present and it
is wrong to consider that those methods were actually implemented
(the descriptors will be there, not necessarily implying that the function
is user implemented).","a709fa17650d83d0caea78981e65454cea69f27a","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-12-18 13:42:02","Added tag logilab-astng-debian-version-0.19.2-1 for changeset b123c3e1c8c6

--HG--
branch : stable","a70b0d60efb4cd77b057480dacd870ceebdd9084","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-15 19:12:38","Move code which doesn't trigger DistutilsPlatformError outside of the try block.","a71332002adabe8fdb7536c96da00d40b630cdf2","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-30 09:18:59","Support Jython on Travis

This is a bit complicated for a couple of reasons. Jython is not
available out of the box on Travis and needs to be installed manually,
but the released version (2.7.0) doesn't play nice with pip, resulting
in being completely unusable. Thus we're building Jython ourselves
from the repository, which works, as long as tox can find where the
jython executable is.
Closes #288","a71f853825c707c2b160424ebb8cc74d7aa48952","","api.github.com,git_clone","[u'["".travis.yml""]']","False","[]","[{u'raw': u'#288', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'288', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-02 17:49:54","it's ok if _astng_field is a tuple

--HG--
branch : _ast_compat","a7224b469c27d77a7c960e9136af2c67cecb6ac8","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","julien.jehannet@logilab.fr","2010-11-22 16:24:15","[debian] py3k: change build command from new distutils","a73ee39ee8abb46d5785f890295aa128766927ed","","api.github.com,git_clone","[u'[""debian.py3k/rules"", ""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-11 16:54:07","typos

--HG--
branch : rebuild","a76420b24e0d5640ea8ff6749d314f03af398ea6","","api.github.com,git_clone","[u'[""builder.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-11 12:28:50","Add Travis badge.","a77489d20c536d3e4c92d637286fa9e7fb626813","","api.github.com,git_clone","[u'[""README.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-07 08:35:08","fix some typo

--HG--
branch : _ast_compat","a784af9c5296eff332044a521a1c5ca3945a8fec","","api.github.com,git_clone","[u'[""README._ast_compatibily""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-12-18 13:42:02","Added tag logilab-astng-version-0.19.2 for changeset 51b687ffb4d1

--HG--
branch : stable","a799e7ab7f1eeaca7de3fd166d47598f78cf0250","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-10 22:24:13","Merge pull request #280 from arusahni/ignore-fix

Port .hgignore to .gitignore","a7a4576527555bd1d2361bc98f3079f9b9e1ab96","","api.github.com,git_clone","[u'["".hgignore"", "".gitignore""]']","False","[]","[{u'raw': u'#280', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'280', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-12-15 09:36:06","Add new release instructions as for pylint","a7d5faec6666b2bec01a99365c1ca7c06f6e5b3f","","api.github.com,git_clone","[u'[""doc/release.txt""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-27 11:30:03","set module node information directly on newnode

--HG--
branch : rebuild","a7ede2b878dbc4d260107d59487948d6f1fb39bc","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-03-31 13:26:54","_ast compat step 2

--HG--
branch : _ast_compat","a81ea54a973d86f39ff19b3aadea7e665f6d973a","","api.github.com,git_clone","[u'[""_inference_ast.py"", ""utils.py"", ""nodes.py"", ""test/unittest_inference.py"", ""__init__.py"", ""_nodes_compiler.py"", ""test/unittest_builder.py"", ""builder.py"", ""inference.py"", ""_nodes_ast.py"", ""lookup.py"", ""_inference_compiler.py"", ""manager.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-03-28 15:55:51","properly call parent's __init__

--HG--
branch : stable","a842a7d325a1e89b917874a1c01fbcb317101416","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-17 20:12:13","Fix the wrong indentaton warning.","a85b8cf05adaa8da6fe5a4511d28e101d63d0c90","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-11 15:15:10","add tests for comprehension scope","a8a9b54ff5e9583cc0aa9fb2ad084702b6423991","","api.github.com,git_clone","[u'[""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 08:35:56","some understanding of the __builtin__.property decorator","a8ae7b8240ec5884cf70945370e4fd9bcbfb9c4e","","api.github.com,git_clone","[u'[""infutils.py"", ""scoped_nodes.py"", ""rebuilder.py"", ""test/unittest_inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 08:02:17","Exec : another statement

--HG--
branch : _ast_compat","a8b64395024327479ec9060899a3d87fd9dc8c3a","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-22 14:51:25","Added tag astroid-1.3.2 for changeset 16369edfbc89","a8cac9e97d7dd8e9e540240775240bbd552af914","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-02 15:46:19","fix If node bug; more exhaustif test

--HG--
branch : _ast_compat","a92f96d8e1c2540c7b6bc17750df01928f861d0e","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-01-25 22:07:02","Let AttributeInferenceError be propagated.","a9430c92981124e1868c525a29f053f0d7661e4b","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-04-26 10:31:20","Add brain tip for get_distribution","a944eac910b9422adf647e9bd966f1339142562f","","api.github.com,git_clone","[u'[""astroid/brain/brain_pkg_resources.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-07-20 16:14:01","Added tag logilab-astng-version-0.22.0 for changeset 36dc61136d8b","a94c56dfcba2ed26a8b89d48d311e2e4ac6dbc9f","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-26 15:50:17","compiler: save argument names into locals dictionary

--HG--
branch : rebuild","a94d1314624be5c09732f5af47df437bf58ecd26","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""_nodes.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-07-25 13:16:56","Get rid of astroid.common.decorators.

This also implements an easier @cache decorator and removes @classproperty as
it only was used in an insignificant test.

--HG--
branch : no-logilab-common","a9582e447362cac362e20c0ca4d30ec0221bfec2","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/scoped_nodes.py"", ""astroid/mixins.py"", ""astroid/node_classes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/objects.py"", ""astroid/decorators.py""]']","False","[]","[]","[u'@cache', u'@classproperty']","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-06 12:05:33","[utils] add a TreeTester class for debugging","a978262b5169a63377849088d142dd6b312187e2","","api.github.com,git_clone","[u'[""utils.py"", ""bases.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-15 13:32:01","Remove the trailing whitespace.","a9a6b776c05376d59bf3a456cff870fce7a148c6","","api.github.com,git_clone","[u'[""astroid/manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-09 16:31:59","Remove trailing whitespace.","a9d5c4dbb1d063755e57322836e05f51478c6c44","","api.github.com,git_clone","[u'[""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-15 09:34:07","merge","a9e5aa99d683f8e7daebbc065bb363290cd9580e","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""builder.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-11 09:59:24","Name inference will lookup in the parent function of the current scope, in case searching in the current scope fails.","aa04c0be7ff8ae4734f354a0d13707b33916649a","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-25 12:02:43","Add support in pylint-brain for understanding enum classes.","aa2c97c318dd569e09329bab7e7ac8c4e1641bef","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-11-16 12:49:36","[test] fix unittest2 deprecation warnings","aa5c507dcbe450912e24665d2e3be46bbdddcce5","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""test/unittest_inspector.py"", ""test/unittest_regrtest.py"", ""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""test/unittest_inference.py"", ""test/unittest_lookup.py"", ""test/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-06-25 11:32:31","d-t-w, use assertIsInstance","aa7197a8d577c82d7c0c9c52dc2ada247594e94e","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""builder.py"", ""raw_building.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-09 12:37:54","Explicitly raise if filepath is None in ast_from_module_name.","aa80c6894d0e0396f0b19b8a099e05621f700bc6","","api.github.com,git_clone","[u'[""astroid/manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-04-17 09:38:48","Added tag logilab-astng-debian-version-0.24.3-1 for changeset c39e816972bc

--HG--
branch : stable","aad942e0c263e7f745f486fd77da51551f5ea71a","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 16:24:53","only set proxied when specified

--HG--
branch : _ast_compat","ab1534bf69b90434f1b4b24d23f7c24233d092b1","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-21 10:40:57","Add changelog entry for 8715ea","ab497993c0d7a8edd61c4c3c50d5ab249d50e48a","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-30 17:46:52","cleanup: merge _nodes_ast into rebuilder","ab87b444cf6a22ae66cd08cf2a2ffc2f4437cf03","","api.github.com,git_clone","[u'[""builder.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-07-13 10:35:07","check in Dave Borowitz fix","ab89ca89272a8329051414e381e209cd19c9ca54","","api.github.com,git_clone","[u'[""nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-10 11:55:52","handle nested arguments in 'argnames' method; Lambda has argnames too

--HG--
branch : _ast_compat","aba0b5d0879795227eecf9ef23ac8deba1f7a489","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-07-08 13:55:38","fix absolute import behaviour with python 2.7: it seems that absolute import are actually not activated by default, at least with 2.7.1","abab1061c29b5f1d803128392bf61768eabaf304","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2011-12-08 13:31:08","Make sure that the name attribute on lambda nodes is defined,
otherwise getting the qname of a lambda node crashes with an
attribute error.","abb7060af15170685188eb4f2f89827c70596bff","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-22 17:21:47","Added tag logilab-astng-version-0.20.0 for changeset 482fe8443370","abbd34f68cbea94bffb635a5286977addd735525","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-05-11 08:36:57","update ChangeLog","abc3840521086b2124b5561621ae4bdedf394a9f","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-23 18:02:54","Big cleanup

--HG--
branch : _ast_compat","ac0b3227de3a6651ba3cb437e85c7f767e79b6fc","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-21 16:53:16","Last merge (hopefully) and all bugs fixed but one","ac141721441674f32611313e193321b8238e88ef","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""ChangeLog"", ""pylintrc"", ""astroid/node_classes.py"", ""astroid/inference.py"", ""astroid/objects.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","degustaf","2016-11-30 15:19:15","Remove pylint errors","ac3e82e9bd8678086325a71a927a06bbc43d415e","","api.github.com,git_clone","[u'[""astroid/tests/unittest_object_model.py"", ""astroid/builder.py"", ""astroid/exceptions.py"", ""astroid/bases.py"", ""astroid/interpreter/objectmodel.py"", ""astroid/scoped_nodes.py"", ""astroid/interpreter/_import/spec.py"", ""tox.ini"", ""pylintrc"", ""astroid/raw_building.py"", ""astroid/objects.py"", ""astroid/protocols.py"", ""astroid/node_classes.py"", ""astroid/modutils.py"", ""astroid/manager.py"", ""astroid/rebuilder.py"", ""astroid/decorators.py"", ""astroid/__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 18:02:51","add as_string method; Print is statement

--HG--
branch : _ast_compat","ac48f8a6c0b48ab7a8f79b5271e6ed8e366b77f2","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","cpennington","2017-03-11 13:17:40","Fix an infinite loop that could occur during inference of __nonzero__. (#412)","acae0ce721d63fce5c46fa81a5297af36f3cd04a","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[{u'raw': u'#412', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'412', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-18 18:13:17","Use the Python 3.3 environment, since drone.io lives in the prehistoric ages.","accff12b2d28a3f87d2dc4f5373fb8e1e5de3408","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-03-01 10:46:06","Move the catching of AttributeInferenceError where .getitem() is called, in infer_subscript","ace4088b9837fc07a529edbb57b74583168da009","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","hippo91","2017-10-29 16:09:19","Introduction of numpy.random.mtrand functions signatures inside numpy brain + add of a dedicated unit test","ad6e9dd2cd843eb8bab7eee8f9779e2a1a1261e9","","api.github.com,git_clone","[u'[""astroid/brain/brain_numpy.py"", ""astroid/tests/unittest_brain_numpy.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-16 10:35:08","py3k: add a README.Python3","ad8c4f0e8c7096ee4ec49394ba6a7cf19b1a132a","","api.github.com,git_clone","[u'[""README.Python3""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-11 16:06:30","Move bases.NodeNG and bases.Statement in node_classes

We're doing this in order to reduce the dependency hell which
occurs when a module such as bases.py wants to use classes
defined in node_classes.","ad95c5699655a283b682837b6715fbe399229485","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/node_classes.py"", ""astroid/bases.py"", ""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-08-14 11:49:16","Add tests for the metaclass and newstyle discovery.

--HG--
branch : metaclass","adbeee2e2b84758d9dfd065f4c5d9810d1594950","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-16 15:15:51","prepare 0.21.1","ade1ff5ecd0365bd376001691b73ea7a594b0208","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 14:14:37","avoid pollution of builtin's namespace

--HG--
branch : _ast_compat","ade7eb066b9c3c91ea30cf972baf644b1e438f62","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-07-25 14:03:49","get rid of logilab.common in modutils.

--HG--
branch : no-logilab-common","adf6bebd18e93599fb1188440876f97eb3ac6786","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-26 12:52:46","_add_local is handled in visit_name

--HG--
branch : _ast_compat","ae0507568126e2b75fac7909806a6d4846cad0cc","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","degustaf","2017-01-22 13:07:17","Make is_argument search kwonlyargs. (#386)","ae223fa514a2178d36da5121a1d87d626cf143fb","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/node_classes.py""]']","False","[]","[{u'raw': u'#386', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'386', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-10 18:04:16","The order of arguments was inverted.","ae59183507acf1c79d7f07b163acf860b4ea6e90","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-29 17:47:45","Add readthedocs badge.","ae6981362b3c696fc831a1dd3c78515cfb53f8af","","api.github.com,git_clone","[u'[""README.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 23:12:30","d-t-w","ae69fcaa8bfd589f45644a09b4ef25be710f801a","","api.github.com,git_clone","[u'[""manager.py"", ""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-22 14:05:09","Do not byte-compile test files on install. Fixes #58.","aef95ea6d23becf6e4374a08fe37d07968e75822","","api.github.com,git_clone","[u'[""setup.py""]']","False","[]","[{u'raw': u'#58', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'58', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-25 14:57:04","define GenExprNG.scope_lookup at GenExprNG declaration

--HG--
branch : rebuild","af0121dd62d033491c15bdc2d40bb9166c2335b2","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","laura.medioni@logilab.fr","2015-12-16 10:30:53","Add support for inference on threading.Lock","af0e3f5658097a21b78e3008854fa02ddbfc0ab3","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_stdlib.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 14:52:01","catch InferenceError in inspector for pyreverse

--HG--
branch : _ast_compat","af1844b63b5988db00a48df5a690e03c23d7f3a0","","api.github.com,git_clone","[u'[""inspector.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-28 17:16:48","Fix a long line.","af2540143d176a675fef5c70a12d94d59eaa01d5","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-12-08 14:25:58","0.23.1","af4186a370bf3139f231c1bedcbe7b5cf9f3046b","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-11-19 07:22:09","fix function's prototype (bad copy/paste)","af67d7c04dbd6c9a5876cc2c6df3729349d85521","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-25 09:59:40","cleanup: simplify ""getattr"" and don't catch silently all Exceptions","af896e299ce5e381a928a77a9c28941cad90a243","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-08 16:41:12","Dict._astng_fields ; NodeNG.__doc__

--HG--
branch : _ast_compat","af8c25383d12952fc3a1a04509cf6f914174d0ce","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-11 15:17:58","Cleanup builder tests.","afe92ebef42ba05f7ce9701c78cdeb61a29d7467","","api.github.com,git_clone","[u'[""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-28 17:31:22","_nodes_compiler : fix AugAssign
it is for astng an Assignment context

--HG--
branch : rebuild","b019aed4d3831f321d77ba3b40ae997f55e50301","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-26 14:16:54","Improve decorator introspection using wrapt and functools.wraps","b034963ee5e51b66faa04c9f7bb4a63b65046020","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""tox.ini"", ""astroid/decorators.py"", ""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-01-27 21:27:00","Proper handle args for Python 3.4 when adding to locals. Remove trailing whitespaces and bad indentation.

--HG--
branch : nameconstant_py34","b03b77239045d87e62d36aac3cf91697af090286","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","pierre-yves.david@logilab.fr","2008-06-13 13:37:38","remove apycot.ini","b069117dec0da305efe9c1da065e49acdbf8888d","","api.github.com,git_clone","[u'[""apycot.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-10 22:05:06","Disable pylint job temporarily until it gets fixed.","b094a0d1d4ce9b19c5052aac286f546233d0e0c2","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-04-08 07:17:18","test and fix line numbering + block_range for try:except:finally:","b0a68ff25f6d01910b969fa95b4e611b72c48f59","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""nodes.py"", ""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-17 17:35:21","remove dead code

--HG--
branch : _ast_compat","b0d91f85ff4555b0cddfee5300d1e1e56ee030a3","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-02 17:47:21","[R] create ArgumentsNG","b0e4d3f16d3226145c95997f6419cab560ec81c2","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","dashea","2015-12-11 20:04:21","Check for flags/enum types before checking for int

gobject-introspection enum and flag types inherit from int, so the check
for a unusable string represenation needs to happen before checking if
the values can be used as integers. This fixes syntax errors in the
generated stubs for gobject-introspection modules containing flag and
enum types.","b0fdfe55e8428f3a9a141f70632607d6bf0d9bb2","","api.github.com,git_clone","[u'[""astroid/brain/brain_gi.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-30 08:53:32","Merge with ancestors.","b13ef13e8365348b957e77105fdeeeb5bde69c49","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""test/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-07 11:00:41","quick fix syntax, imports, 'EmptyNode' and 'native_repr_tree'

--HG--
branch : _ast_compat","b1491b2e6d24b7ee46758cec5aeca1a2ec52f981","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-11-19 14:17:10","test decorator arguments lookup","b1495b12b66cdec3f2e6d2a1281a9ccf8ee2f827","","api.github.com,git_clone","[u'[""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 17:39:49","d-t-w, expose _imported_module_astng as do_import_module method of Import and From node","b16daa61253ef62ba4dbbda9add41f24de15892f","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-11 15:39:07","Remove trailing whitespace.","b1824e8f74232fac14e2600c28d53a320a94510e","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-16 15:48:06","py3k: fix builtin in has_dynamic_getattr","b183c21bd34219a121472f61f60d0748a832df45","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-14 11:02:05","Setup a basic AppVeyor deployment.","b194b835be4335dcca25b50c5ea79f959e90025b","","api.github.com,git_clone","[u'[""appveyor.yml"", ""appveyor/install.ps1""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-23 14:13:05","introducing _ast 'TreeRebuilder' Visitor

--HG--
branch : _ast_compat","b19a46a539edc8b7108add480fbd62445d421188","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-01-14 10:31:51","Ned Batchelder to properly import eggs with Windows line
endings.  This fixes a problem with pylint not being able to
import setuptools.

--HG--
branch : stable","b1ddec4be22af451aa19d844fd513bdb9e22611b","","api.github.com,git_clone","[u'[""builder.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-21 12:25:00","Remove trailing whitespace and use the correct argument to require_version.","b258a6b92276594ace53509a43313c02b098f4be","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","raylu","2015-05-13 01:35:52","Add brain module for dateutil.parser.parse

--HG--
branch : pylint-480","b2b147f263d340042dee9af08a8a64641fe1f0a6","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/pydateutil.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-11-01 15:51:28","Add the full path to the resources's data directory when testing the namespace package pth support.","b2cf945f7cdd02628d15f8e69fcb8aade6604558","","api.github.com,git_clone","[u'[""astroid/tests/unittest_manager.py"", ""astroid/tests/resources.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-21 21:50:00","Update the version number for astroid 1.3.1.","b2e013073d219efb1735ef128492e2ce33327153","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-13 19:37:50","Cleanup.","b3176f3c546126247add99dc2ecdd58516b52b34","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-24 18:47:28","Added tag astroid-1.2.1 for changeset 315668c10333","b35f8170d74d634ae0bdeac58d39a7f455be7dc6","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-06 08:11:48","decorator_list is always expected on Python > 2.6.","b38a9a937ecd312518617b1fb9a886864d66d827","","api.github.com,git_clone","[u'[""astroid/rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 16:25:31","decorator scope

--HG--
branch : _ast_compat","b397d6478c7c07d430c0a0b1bcf4d9f19faced4c","","api.github.com,git_clone","[u'[""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-05 11:25:34","assigned_stmts methods have the same signature from now on.

They used to have different signatures and each one made
assumptions about what could be passed to other implementations,
leading to various possible crashes when one or more arguments
weren't given. Closes issue #277.","b3d48abbdf673697977f59c5476008a85acb1e27","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/protocols.py"", ""astroid/node_classes.py"", ""astroid/tests/unittest_protocols.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#277', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'277', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","GerardPaligot","2013-11-04 12:54:17","Change indentation of unittest_raw_building.py tab to space.

--HG--
branch : dev","b3e292683da4d30ec1cb77ae02ddb610df82aadd","","api.github.com,git_clone","[u'[""test/unittest_raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-16 23:31:37","Update the drone.io badge link.","b3f6408cb0f823e040c2dbcf035faef972663ee5","","api.github.com,git_clone","[u'[""README""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-20 10:40:47","Namedtuple's instance members gain a new .attrname attribute, since they're actually equivalent to an AssAttr node.","b437e10954b42a9bcd1393b3d7a250c4b033a4b1","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-14 09:52:13","performance : a little cash for visit methods

remember that visit is called tousands of time for each module;
remove print from a test","b4533c8894410ad0ba088b15017e89d3b32b2708","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-11-03 17:46:07","Make sure that the class object that is returned for
namedtuple inference has a parent and add a unittest.","b4800df26928d412ba57de326d1e4f1ea6163ac7","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""test/unittest_brain.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-11 16:53:50","fix as_string representation and AugAssign operator

--HG--
branch : rebuild","b4aa50e3fa95cbca2ed6b78a5f7896b942fc393d","","api.github.com,git_clone","[u'[""nodes_as_string.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","nchauvat","2006-08-13 11:17:22","fix packaging. debianize is history.","b4afda77eee9a64ba14646b3cb94969f248f06cc","","api.github.com,git_clone","[u'[""DEPENDS"", ""MANIFEST.in"", ""COPYING""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-09 14:01:47",".root() can't always return a Module, do a getattr over pure_python method instead.","b4b562e8095ef98810f69e572ab719353d29e9db","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-03 11:08:49","Fix a crash which occurred when inferring unary operands which yielded objects which weren't callable.","b4d36f2b922509fd15f3fd37829495da2f2c92b6","","api.github.com,git_clone","[u'[""astroid/inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","royw","2017-02-09 08:37:56","Handle AttributeErrors when _looks_like_signal receives something unexpected","b4f314a6bc12978030d82ccde321f85232498236","","api.github.com,git_clone","[u'[""astroid/brain/brain_qt.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-07 23:07:59","Support PEP 448 unpackings in dict calls.","b4f738c7c621c80512c93b58a00b9cb0af092a23","","api.github.com,git_clone","[u'[""astroid/brain/builtin_inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-24 13:07:09","unset assignement context in AssAttr for newnode.expr

--HG--
branch : rebuild","b500a57211345fd14d2d39c72cd0a453f581b12a","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-10-23 16:02:49","[jython] java modules have no __doc__. Closes #109562

--HG--
branch : stable","b502edb4284599f806582f6a5d45c872cedd235a","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[{u'raw': u'#109562', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'109562', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-06 12:55:13","Use an inference context for inferring attributes in infer_getattr.","b517a25fe08f75ebf5a6856af8c7fd43c26a0c4c","","api.github.com,git_clone","[u'[""astroid/brain/builtin_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 14:59:31","compiler: rebuild if / elif / else situation

--HG--
branch : rebuild","b533cd814ba891927c5624162b9d4a2c42ba8146","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-24 16:11:44","Added tag logilab-astng-debian-version-0.20.0-1 for changeset e52fefc36cbc

--HG--
branch : stable","b554b94723b9e0e21e47c4c83c1f41d3fb3a5281","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-05 13:28:57","If and orelse as string

--HG--
branch : _ast_compat","b5a1cb8ff3255178070caa1178bc52a9055113df","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-27 13:18:55","Added tag logilab-astng-version-0.20.4 for changeset ba70ecabe1f5","b5df0e61a3aa9af80bb512cb3a9707735d39fed8","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 09:08:40","refactor line numbering handling

--HG--
branch : _ast_compat","b600e40101e4bf8889fea46a717cc2f8e351e3d3","","api.github.com,git_clone","[u'[""rebuilder.py"", ""nodes.py"", ""test/unittest_builder.py"", ""_nodes_ast.py"", ""lookup.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-10-18 15:35:54","Added tag astroid-version-1.0.1 for changeset f67f24131b3a","b63443d7641cab0fab79986868c5dafedf5f37d2","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","invalid-email-address","2015-01-07 11:06:07","added properties block_size and digest_size to hashlib","b636ad97ad3cfccf1dd89018d1018cd2723a259c","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-07-11 21:02:33","Merge logilab/astroid again","b63c90162e44e932b9ecc64ff8fa46cf66079c1c","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/tests/unittest_lookup.py"", ""ChangeLog"", ""astroid/tests/unittest_nodes.py"", ""astroid/test_utils.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/unittest_brain.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_peephole.py"", ""astroid/tests/unittest_builder.py"", ""astroid/builder.py"", ""astroid/__init__.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-01-14 21:11:24","Support accessing properties using super().","b660d0c88a7e72049ee1299b0bcef84345626d0d","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/tests/unittest_objects.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-07 19:04:40","Make sure that sys.stderr is reset after the .infer() call.","b6613179481e97eac0e23aaa0b9fb8970b2e037b","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-27 17:23:16","AssTuple handling

--HG--
branch : _ast_compat","b66616ab605fab7d430166753927f2b2954d6cbd","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-04-17 11:06:34","Wrap AttributeInferenceErrors in AstroidTypeErrors for ClassDef.getitem.","b6cf7abf6b3ffe38e77a83cc38d4446d1be66930","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-22 13:19:27","Update the changelog.","b6e07faee478d330d82a8920f5484aee208f4204","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-11-19 11:00:02","    * fix #5571: Function.is_method() should return False on module level
      functions decorated by staticmethod/classmethod (avoid some crash in pylint)","b7011eef85f1ce2a1cc47a6e3bf165d9f37f2413","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#5571', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'5571', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-05 14:43:39","py3k: remove has_key methods from unused code","b71845b1a454e4abda861ddd99f4767bcc7c4d54","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-03 10:05:28","factorize else handling; fix While bug

--HG--
branch : _ast_compat","b728e5253a604a8882647bf50d6bd355db1e6133","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-26 13:41:01","handle CallFunc and arguments

--HG--
branch : _ast_compat","b766418ef467fa4c6284713fef487181550ac064","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-05-13 10:06:07","catch everything since other exceptions such a ZeroDivisionError or ValueError may be raised","b791f43548cb4069d3c6f81d4a475540ebe60a58","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-04 13:49:03","namedtuple inference knows about '_fields' attribute.","b7f26474486c4eb25bd903864c35ad31dd6b9292","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-09 17:18:03","flags for _ast.Function / _ast.Lambda nodes

--HG--
branch : _ast_compat","b7f559a5b0f367aa7ade582000cb747f6d8b2f71","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-27 00:14:27","d-t-w","b7fcbc4875a23224f5d95cb6b8708b1d8e0b334a","","api.github.com,git_clone","[u'[""lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-11-01 09:17:40","Add test for underscores in numeral literal (Python 3.6)","b82db73ca429ee5d4ce030ab44bbd9a01204c7f2","","api.github.com,git_clone","[u'[""astroid/tests/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-11-15 08:09:52","fix debian revision","b83323454ac16a1a137450acac1983e27468e6ac","","api.github.com,git_clone","[u'[""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-22 16:22:06","catch arithmetic errors in const_infer_binary_op","b83ef46aad8e892c2dc8e38ea6cb81480f42d8fd","","api.github.com,git_clone","[u'[""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-08-30 08:19:53","setup.py: properly add additional file during build instead of install.

--HG--
branch : stable","b875d266d255e4039b6ac4599db9ab0c84af022d","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 09:07:26","STMTS_NODES -> STMT_NODES","b895d374c52964f65ea488d558583a44faf7ff67","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","balparda","2015-03-16 22:11:41","Fix bug/crash when confronted with an invalid \x escape (ex: '\x1').","b8b28f0a31e57edfdd31c9026c1d04e181d0f4b5","","api.github.com,git_clone","[u'[""astroid/builder.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-27 21:02:49","Support Python installations where sys.prefix != sys.exec_prefix.","b8c48252e042659e009cb95b87c2db9bb225d4fb","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-29 09:11:49","New function, astroid.extract_node, exported out from astroid.test_utils.","b8dc84f2fc08bdfd82f852ecb3b98e7cf7547ec9","","api.github.com,git_clone","[u'[""astroid/tests/unittest_object_model.py"", ""astroid/tests/unittest_inference.py"", ""astroid/brain/brain_namedtuple_enum.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog"", ""astroid/tests/unittest_raw_building.py"", ""astroid/test_utils.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/tests/unittest_objects.py"", ""astroid/tests/unittest_brain.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/unittest_utils.py"", ""astroid/tests/unittest_python3.py"", ""astroid/builder.py"", ""astroid/__init__.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/tests/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-07-25 14:17:23","Bump version of astroid to 1.2 for the upcoming release.","b8deedb7769a0120cc626f7b534fb0c88e973bd9","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-16 22:13:20","Add drone.io badge.","b8e8506a55e869bb087e42e859891ed29f741e3b","","api.github.com,git_clone","[u'[""README""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-14 16:17:45","cleanup manager: remove unused Package class, and from_directory method","b8f49d042a6c3a5cda196dc76e04fd9f479957fd","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""manager.py"", ""test/unittest_inspector.py"", ""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-12-16 18:26:24","Add support for ast NameConstant, added in Python 3.4.

--HG--
branch : nameconstant_py34","b9254514cbaac0cbd2cec8d1d4070d30b7a84dac","","api.github.com,git_clone","[u'[""test/unittest_python3.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-11 09:40:03","Add inference tips for nose.tools.","b94b983211b7bd019a70e2e1ab19b9c5fffe141d","","api.github.com,git_clone","[u'[""astroid/brain/pynose.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-05 14:24:32","Don't use AsStringRegexpPredicate for detecting functional Enums.

This patch fixes a problem with the detection of enums, which detected
a class named Enumeration as a builtin enum, even if there was no correlation
between them.","b96ed75f2ac740195e43be68648813f3acf4ce2d","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-03-01 09:18:12","Add missing changelog entry","b9a27a482c26910cf3305f2e1439f16491ff9bc9","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-02 11:45:16","pass new parent to visit (step 2); set some infos

--HG--
branch : rebuild","b9a873d8b7a8535cf5856cbe343c91972de7f32e","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""_nodes_compiler.py"", ""rebuilder.py"", ""node_classes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-19 07:49:39","Merged in jayvdb/astroid/print_statement (pull request #90)

Replace __future__.print_statement with print_function","b9cb3bd8ba8f22fb9e2917d11c4fe210914d8f92","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python2/data/appl/myConnection.py""]']","False","[]","[{u'raw': u'#90', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'90', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 08:06:27","add <module|class|instance>get_attr tests

--HG--
branch : _ast_compat","b9dc9c0006fad5f53404b9a674c1e14d19073bfb","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-03 14:11:38","Don't wrap instance's arguments into a Const, instead let the original index object to be used.

This prevents a crash when the original index object is a slice object,
which was wrapped inadvertendly in a Const node, leading to a crash
later on if the said object was inferred. Closes issue #200.","b9e462e49d38e5e4a188f5fb24b61a71aeab8320","","api.github.com,git_clone","[u'[""astroid/inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[{u'raw': u'#200', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'200', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2013-07-18 20:57:13","Add support for py3k's keyword only arguments

PEP 3102","ba2393d46474b72bb04b50dce629a9fa2bd6c7c5","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""node_classes.py"", ""rebuilder.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-08 23:19:53","Remove debugging output.","bad2f580838da523eb051cbf0a1f9dddef204f8c","","api.github.com,git_clone","[u'[""setup.py"", ""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2014-06-30 09:26:59","test: Add test_parent_metaclass for python3","bae8340f044ed41e9b7cfde8d5a8880860862f67","","api.github.com,git_clone","[u'[""test/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-11-03 17:50:19","Add support for inferring the arguments to namedtuple invocations, to support cases like this:

fields = ['a', 'b', 'c']
A = collections.namedtuple('A', fields)","baf53b84cdaf74ed279ab5af38087ebb0faa161d","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""test/unittest_brain.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-06 22:00:44","Convert the unittests to run directly with Python 3, and stop running 2to3 on install.","bb33f156b666712f4f71652736ece9a412298d0a","","api.github.com,git_clone","[u'[""test/data_py3/format.py"", ""test/data_py3/notall.py"", ""test/regrtest_data/package/__init__.py"", ""test/regrtest_data/package/absimport.py"", ""test/data_py3/email.py"", ""test/data_py3/module1abs/__init__.py"", ""test/data_py3/module.py"", ""test/unittest_python3.py"", ""test/unittest_manager.py"", ""test/unittest_inference.py"", ""test/data_py3/__init__.py"", ""test/data_py3/SSL1/Connection1.py"", ""test/data_py3/appl/myConnection.py"", ""test/data_py3/MyPyPa-0.1.0-py2.5.zip"", ""test/data_py3/lmfp/foo.py"", ""test/unittest_modutils.py"", ""test/unittest_utils.py"", ""test/data_py3/appl/__init__.py"", ""test/data_py3/module2.py"", ""setup.py"", ""test/data_py3/nonregr.py"", ""test/data_py3/find_test/module.py"", ""test/data_py3/all.py"", ""test/regrtest_data/absimp/string.py"", ""test/data_py3/find_test/nonregr.py"", ""test/unittest_inspector.py"", ""test/data_py3/absimport.py"", ""test/data_py3/lmfp/__init__.py"", ""test/unittest_scoped_nodes.py"", ""test/data_py3/find_test/noendingnewline.py"", ""test/unittest_lookup.py"", ""test/data_py3/MyPyPa-0.1.0-py2.5.egg"", ""test_utils.py"", ""test/unittest_builder.py"", ""test/data_py3/noendingnewline.py"", ""test/unittest_nodes.py"", ""test/data_py3/find_test/module2.py"", ""test/data_py3/find_test/__init__.py"", ""test/unittest_brain.py"", ""test/unittest_regrtest.py"", ""test/data_py3/SSL1/__init__.py"", ""test/data_py3/module1abs/core.py"", ""test/unittest_raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-07-25 14:10:21","Get rid of logilab.common in doc example.

--HG--
branch : no-logilab-common","bb6e0b330dbc439295f5435c96a65f7fad3a7574","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 17:10:56","pylint fixes

--HG--
branch : _ast_compat","bb8f7f0f6a7bf8440b16f5c17724a5b197b5e205","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""utils.py"", ""protocols.py"", ""rebuilder.py"", ""infutils.py"", ""nodes.py"", ""__pkginfo__.py"", ""__init__.py"", ""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""builder.py"", ""setup.py"", ""inference.py"", ""_nodes_ast.py"", ""lookup.py"", ""test/unittest_utils.py"", ""manager.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-01-21 23:08:48","Simplify check, make sure that _newstyle is always checked for Python 3.","bb8f9f5fa4f4d442ef41825ea6e16d8549d82342","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-04-22 10:10:50","fix debian version number","bbb58cc5f191a461db061530fae0ed83edd49505","","api.github.com,git_clone","[u'[""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-12 06:46:49","Unwrap instances found in `.ancestors()`, by using their _proxied class. Don't inherit the metaclass status if the current class can't be a metaclass.

--HG--
branch : ancestors","bbb83b5b8356ef7432ed4741e171a483e88a49ee","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""test/data/module2.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","eevee","2014-04-08 18:55:18","Miscellaneous node rebuilder microoptimizations.","bbc107fb2afed934eef85c3682aa4b3a20cbe450","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 16:20:30","explain why we discard subscript assignment context

--HG--
branch : _ast_compat","bc28381384a96a09b917e71a16e6bf6e17212817","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-11 15:41:26","fix constant_factory, it may be given unknown object when building from living objects","bc29458ac9e5be50f71d95aba725a15ce78b7887","","api.github.com,git_clone","[u'[""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 10:37:36","_stack seems to be useless, comment it out (XXX remove it later)

--HG--
branch : _ast_compat","bc3725a6930824eb6b840b5801b7c62fac75d0d5","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-21 17:47:14","Try to fix this","bc5c89cff3f5b5d65b5b8916cc7254661d68e63c","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","david@dropbox.com","2017-01-04 04:54:36","Implement __getitem__ inference for classes (using the metaclass)

Essentially implement the getitem method in ClassDef which returns the correct value.

Fixes #348","bca2422a1001a9459982c3fbc19e39302fd76ef8","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#348', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'348', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 09:08:15","missing monkey patch

--HG--
branch : _ast_compat","bcd9bfbaa4a2f3562950ea7d4a46336ddbd84372","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 10:42:03","transform Name/Getattr which are actually assigment/deletion into AssName/DelName and AssAttr/DelAttr

--HG--
branch : _ast_compat","bd0b957f0e4b64024847dbc6d9b650d575ee8584","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-07-18 14:01:03","0.22","bd176e6e891aaed722f85fa0180e555c98c9823b","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-11 14:57:21","Cleanup builder.py","bd25fc260e6f66086746eec57ccfe87d6fd56aaa","","api.github.com,git_clone","[u'[""astroid/builder.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-05 17:15:24","small corrections

--HG--
branch : _ast_compat","bd37099da9be252df81d085d173cc65b1a7fe540","","api.github.com,git_clone","[u'[""builder.py"", ""scoped_nodes.py"", ""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-09 18:34:31","Remove trailing whitespace.","bd5057970b2941e2da843a68490de107c63f958a","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-02 16:55:14","remove ListCompIf node

--HG--
branch : _ast_compat","bd6225143f1861ef1fb558e22153c11e73909c1f","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-26 17:19:10","add AugAssing operators to BIN_OP_IMPL.
We added '=' to the AugAssign opertor, so we have to add the corresponding
operators as keys.

--HG--
branch : stable","bd7c6b2ab9dd449924315b76b64498c62dee8c12","","api.github.com,git_clone","[u'[""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-11-08 13:28:20","get astutils from logilab.common","bd843b0a898580ad4476b63d95592bfb363515f4","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""builder.py"", ""test/data/module.py"", ""astutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-12-27 13:54:22","Fix a crash when __annotations__ access a parent's __init__ that does not have arguments

Close #473","bdaa04935b1170ff0768c1acabd6bc77e1e42488","","api.github.com,git_clone","[u'[""astroid/tests/unittest_object_model.py"", ""astroid/interpreter/objectmodel.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#473', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'473', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 15:29:29","[py3k] tests: ""new"" module has been removed","bdc3ee631b172affb56213b957acbe81b2a0c2d8","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-09 11:01:19","left & right nodes for compiler.ast Bit Operators

--HG--
branch : _ast_compat","be0d03c9ca3b89400ec896752e9e1fc220ae593f","","api.github.com,git_clone","[u'[""test/data/module2.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-07-17 14:58:35","include basic stdlib description from the pylint-brain project (https://bitbucket.org/sthenault/pylint-brain). Closes #100013","be203e51af7bbfd3e0f0b6d03004bfaf001c60ff","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""__init__.py"", ""ChangeLog""]']","False","[u'https://bitbucket.org/sthenault/pylint-brain']","[{u'raw': u'#100013', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'100013', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2008-08-25 15:47:36","fixed a few typos in _nodes_ast.py

--HG--
branch : _ast_compat","be5bca1fd51171bce389f028af3feb89f8a6d034","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-10 09:48:41","licence cleanups

--HG--
branch : stable","be649cbfc8bfd6f51e66bbd6a22ab8870874f55d","","api.github.com,git_clone","[u'[""builder.py"", ""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-11-11 11:47:22","Revert ""Add pypy support for Python 3.3 in tox""

This reverts commit 15771d691d2dedadf70e1963285abe1017bd8c42.

Apparently numpy is Python 3.4+","be694f811f7df89c4fcc672ef09c0e1fc499cf23","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-07-24 11:54:35","restore the print","be87286f6b843e0191c9209c64ad1533fdd99d87","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-15 14:03:00","add a ""mixins.py"" module and move some classes around.

- move some Mixins to mixins.py
- move LookupMixIn and *Name to node_classes

It needs more polymorphism, i.e. removing 'isinstance' calls, to move
LookupMixIn and LocalsDictNodeNG to mixins.py .

--HG--
branch : rebuild","bec4ee12322d3f10df273e0764290e41cc6c701b","","api.github.com,git_clone","[u'[""mixins.py"", ""nodes.py"", ""node_classes.py"", ""bases.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-09 11:19:00","Build a dummy module object for namespace directories and add a test for multiple directories contributing to the same namespace.","becc6f94a4ff8d0859c3a1c3f0a13f65528f84cf","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/builder.py"", ""astroid/tests/testdata/python2/data/namespace_pep_420/module.py"", ""astroid/tests/testdata/python3/data/namespace_pep_420/module.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/testdata/python2/data/contribute_to_namespace/namespace_pep_420/submodule.py"", ""astroid/tests/testdata/python3/data/contribute_to_namespace/namespace_pep_420/submodule.py"", ""astroid/manager.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-27 08:14:43","Added tag logilab-astng-version-0.19.1 for changeset b46f6536314c","bee28356ae911a585ef3f28d6a5df695490581ed","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-27 22:36:47","Add support for retrieving TypeErrors for binary arithmetic operations and augmented assignments.

The change is similar to what was added for UnaryOps: a new method
called *type_errors* for both AugAssign and BinOp, which can be used
to retrieve type errors occurred during inference. Also, a new
exception object was added, BinaryOperationError.","bee310f81739f58cf8568b1e32b0634ff05c8d82","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/exceptions.py"", ""astroid/node_classes.py"", ""astroid/inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-10-25 07:13:03","add a note about launching tests","bf0aa82021d4cb4f7e029e3f6b923f4ec5c77091","","api.github.com,git_clone","[u'[""README""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-03-01 18:47:31","Add support for asynchronous comprehensions (#400)

Closes #399","bf3d6876c310b39d045f6338ec8b93d2b1967072","","api.github.com,git_clone","[u'[""ChangeLog"", ""astroid/protocols.py"", ""astroid/node_classes.py"", ""astroid/tests/unittest_python3.py"", ""astroid/rebuilder.py"", ""astroid/as_string.py""]']","False","[]","[{u'raw': u'#399', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'399', u'']}, {u'raw': u'#400', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'400', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-11 14:08:07","clear ast cache to remove test inter-dependancy","bf50f31227d8bb3e0750fb24f0f6b982d7cc4027","","api.github.com,git_clone","[u'[""test/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-01-25 21:21:41","Pass the appropiate values to AstroidInferenceError, when raising it.","bf6bb6fb4a01dd38d477f8ee980023ff2db42cb9","","api.github.com,git_clone","[u'[""astroid/interpreter/dunder_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-26 13:01:30","Use the object.__new__ decorator to create a singleton instance of the YES object.","bf8e5410afed79c243466e06c61bc5c994dda00f","","api.github.com,git_clone","[u'[""astroid/util.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-29 08:36:15","Set the parent of vararg and kwarg nodes when inferring them. Closes issue #43.","bf919348a823a573ebbb7c435626172ba21b7c3c","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""protocols.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#43', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'43', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 09:02:18","test update (new handling of special attributes

--HG--
branch : _ast_compat","bf9268e532abd5fac62788f57e4ca8b88c59652f","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 09:56:22","add some delete slice/subscript test

--HG--
branch : _ast_compat","bfa80d0c541e4b23c0abb07ea67253b833e1d103","","api.github.com,git_clone","[u'[""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-26 15:13:24","improve set_context / _asscontext on Subscripts and For

--HG--
branch : _ast_compat","bfba3afb9a1190cadf35631d96b4cccce276b8c2","","api.github.com,git_clone","[u'[""builder.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-18 16:06:32","fix 2.7: _ast.From.module is None for relative import with only '.'","bfe9e5c53cfb75c3b45ebb5cb8e8902464782c7d","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-09-27 12:08:44","we actually dropped support for python < 2.5 in 0.21","c00294924cb087bc5de7b0cd52f594795f5d44a5","","api.github.com,git_clone","[u'[""ChangeLog"", ""debian/control"", ""__init__.py"", ""test/unittest_builder.py"", ""builder.py"", ""as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-02-07 10:56:38","fix bug w/ loop assigment in .lookup","c00c344f3f30a5e4d485b6ec1e328090512cc3cd","","api.github.com,git_clone","[u'[""lookup.py"", ""test/unittest_lookup.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-15 13:30:44","merge

--HG--
branch : stable","c04f962a6c166c49885698910cd55cdc8d0678f7","","api.github.com,git_clone","[u'[""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-07 09:14:23","#3673: Lambda instance has no attribute 'pytype'","c069eb4310c32e1fa711ea121eeac44e206cc167","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#3673', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'3673', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-03 20:01:38","Improve InferenceError for remove_nodes","c094cfd61bb10e0d8b392e3d91606621e2010ff3","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-09-29 07:55:21","Simplify the understanding of enum members.

This is a fix for Pylint issue #325.","c0998ff1213b51dd112f58bf226ad679fd358af2","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#325', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'325', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-14 14:42:19","don't depend on logilab.astng import","c09dbcf295cb2eb9b2a2c0febf195df9c7cce57a","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","lorenzph","2015-05-01 08:30:57","Add basic unit test for enum support

This test verifies that the generated enum member stubs behave
implement the correct interface.

--HG--
branch : enum-fixes","c0a30e623f5b7d28a2d1ca9adf6d50453dfc95a4","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-16 11:17:45","all From nodes need a ""level"" attribute even for python2.4

--HG--
branch : rebuild","c0ce7b35e9b6cbdc995540f2414e21725b07d7fc","","api.github.com,git_clone","[u'[""raw_building.py"", ""node_classes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-20 21:26:38","Don't crash when trying to infer unbound object.__new__ call. Closes issue #11.","c0d23bf0d76e70c53800ac6863a708514d76699a","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""bases.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#11', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'11', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-06-03 13:48:12","Prepare 1.5.3","c0fc3b67318709d4bda5cbabfa22552d5603acb0","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-10-12 10:39:11","lint the current directory, not the installed one","c127ef121872f92013de351d1670da64337905ea","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-25 14:52:55","We need to set lineno at the beginning of the visit
This is necessary since some nodes get their lineno from some parent

--HG--
branch : rebuild","c133ef534539f72370071ba3a1e176fa4074a9ba","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-07-25 14:36:21","Added a short document outlining the release process.","c165de0db2952304d62d62113a2b6cd98f27f456","","api.github.com,git_clone","[u'[""doc/release.txt""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-19 08:54:22","fix an infinite recursion pb","c1a86392878950b51b05bdbd655fee9828949a3b","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2014-02-03 14:34:26","test: stop using logilab.common.shellutils.Execute

Use a ProgressBar instead.","c1e4bfb5ee4e870ade5997312126217db7354b0d","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""test/data/module.py"", ""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-28 14:23:42","remove Stmt node in init_try_finally

--HG--
branch : _ast_compat","c20559c00297b6069eae99f2cd526d1103be11f1","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-15 08:35:18","Add note in test regarding the .ancestors() fix. Check the _type of a base class before calling _is_metaclass again.

--HG--
branch : ancestors","c26264de06f038b7fd41f54ecfbaef4694755814","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-14 13:53:47","Remove trailing whitespace.","c275490891316c2ea9d395b6477f040fd98c63ab","","api.github.com,git_clone","[u'[""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-03-29 06:26:56","import cleanups

--HG--
branch : stable","c2974bc419b617d2cb25caedd4316d76925cc936","","api.github.com,git_clone","[u'[""protocols.py"", ""rebuilder.py"", ""mixins.py"", ""builder.py"", ""inference.py"", ""test/unittest_scoped_nodes.py"", ""manager.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-11 21:05:51","Fix a typo.","c29e2ac52a50c52b62c1726d6927e6b80437f6de","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-23 13:09:30","The result of using object.__new__ as class decorator is correctly inferred as instance

Close #172","c2e8ca524793905018e0e4adc5e29e1d3b0446c6","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/brain/brain_builtin_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#172', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'172', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-11 14:07:07","change ASTManager cache attribute to astng_cache so it doesn't sound protected (actually used externally)","c2f75e6b5b2fd23d7185a10d6f1929dce02a97a0","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""test/unittest_regrtest.py"", ""builder.py"", ""manager.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-04-18 13:39:41","Added tag astroid-1.1 for changeset e003574ae51b","c35b323646acc614340264c6b3412e77e55d67ed","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-25 10:14:44","d-t-w","c35e40a99c248b59b3bc0426a78907945c059c9b","","api.github.com,git_clone","[u'[""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-24 18:02:32","python 2.6 : decorators are called decorator_list

--HG--
branch : rebuild","c363a4f5ea187e7a11b04fcbae74f72ffb66eac2","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-26 10:16:02","Add __reversed__ special method to deques.","c3769fe82efadc93e691fda1235533734c3080a2","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-14 16:02:40","Merge main into default","c39599ad4f32608cb03e680516678a8fd1ba4dee","","api.github.com,git_clone","[u'[""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_inference.py"", ""astroid/nodes.py"", ""astroid/tests/testdata/python2/data/notamodule/file.py"", ""astroid/protocols.py"", ""astroid/brain/builtin_inference.py"", ""astroid/inference.py"", ""astroid/tests/unittest_transforms.py"", ""astroid/manager.py"", ""tox.ini"", ""astroid/builder.py"", ""astroid/bases.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/brain/py2stdlib.py"", ""astroid/modutils.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/tests/testdata/python3/data/notamodule/file.py"", ""astroid/raw_building.py"", ""astroid/node_classes.py"", ""README"", ""astroid/rebuilder.py"", ""astroid/decorators.py"", ""astroid/transforms.py"", ""astroid/__init__.py"", ""astroid/as_string.py"", ""astroid/tests/testdata/python3/data/module.py"", ""astroid/tests/testdata/python2/data/module.py"", ""astroid/scoped_nodes.py"", ""astroid/util.py"", ""astroid/tests/unittest_builder.py"", ""astroid/objects.py"", ""astroid/context.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_modutils.py"", ""ChangeLog"", ""astroid/tests/unittest_helpers.py"", ""astroid/tests/unittest_brain.py"", ""astroid/mixins.py"", ""astroid/__pkginfo__.py"", ""astroid/helpers.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 16:24:14","const factory now deals with tuple/list/dict instances

--HG--
branch : _ast_compat","c3982af7cd3592aee76b9f7d9a443964592ec4bf","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-16 09:00:01","some small obvious corrections

--HG--
branch : rebuild","c3a35e56eba274335c448a5eed634f2fa5783893","","api.github.com,git_clone","[u'[""node_classes.py"", ""nodes_as_string.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-12-30 13:42:50","Add a new mechanism for retrieving the special methods.","c3a6e1f8eb0fdf8c236d26de70d7a18e453d1df1","","api.github.com,git_clone","[u'[""astroid/inference.py"", ""astroid/interpreter/dunder_lookup.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-25 08:49:56","Restore the file_stream API.

Module.file_stream is again
 a property, but each opened file is cached. Module node

gains a new API, 'close', which should be called for closing
 all the gathered file streams.
This is consistent with how
 the API worked pre-astroid 1.3 (meaning that no seek is required).","c3c738958abbff0ef8276ab38a4dcfabe6cc40ec","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-04-08 12:04:49","delete trailing whitespaces","c3de2291e6c674e4a467563c890736d63e4c9d87","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-01-14 10:52:32","append '=' to operator when on a AugAssign node (reported by Winfried Plapper)

--HG--
branch : stable","c403bc41e2511b534f2dbda5662fb807897eb484","","api.github.com,git_clone","[u'[""_nodes_ast.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-07 12:46:05","Improve a TODO entry.","c405b87c768780f603d17fdafbf83635eb64455b","","api.github.com,git_clone","[u'[""astroid/rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 13:55:33","little obvious bugs, cleanup and infos

--HG--
branch : _ast_compat","c40da510d63fc1a934901c3cfd988bc4e0946e2a","","api.github.com,git_clone","[u'[""TODO._ast_compat"", ""lookup.py"", ""scoped_nodes.py"", ""inference.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-13 20:36:21","Added tag logilab-astng-version-0.21.1 for changeset aef5848d64cc","c4803255fd3ad08dd98e6b6b884b5b1b72c06742","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-11 09:17:00","move ""nodes_as_string.py"" to ""as_string.py","c49355e99ae5b1e335f409c22aacbc786dae4c12","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""nodes_as_string.py"", ""bases.py"", ""test/unittest_builder.py"", ""scoped_nodes.py"", ""as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-08 23:45:59","Fix wrong sys.version usage in unittest_inference.","c4d9727f52c7d7da453357d10c54fcbc09efac2a","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-17 17:39:14","UnboundMethod.getattr calls the getattr of its _proxied object.

It previously crashed, since it called super(...).getattr(..) and the
first ancestor in its mro was bases.Proxy and bases.Proxy doesn't implement
the .getattr method. Closes issue #91.","c4e3f003d6d778ae5c644e01053a8b4f8924ee26","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/bases.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#91', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'91', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-01 16:22:16","Add test for indexing strings.","c4eca804ef7dd4e24a7c8f9d4c392f5566890ddc","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-10-16 06:16:03","Fix an infinite loop with decorator call chain inference, where the decorator returns itself. Closes issue #50.","c4f0d9dd4f55887a8420b8085feee55026875bb5","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""test/unittest_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#50', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'50', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-07 12:14:14","py3k: Rebuilder: replace a 3.x <arg> node by a AssName node like in 2.x","c51469ffc3a812961a0f546ad7977c6a695a79c0","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-22 15:56:12","merge : ignore everything from old default branch","c5172d8a33f3f355eac6b1aa6dc123257dba6ffd","","api.github.com,git_clone","[u'[]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-08-29 07:47:19","properly define file_encoding Module attribute. Closes #104041

--HG--
branch : stable","c53f901e1d6b4bfafa064313b242a9d23fc53890","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#104041', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'104041', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-26 00:15:36","Add numpy transform tip for understanding numpy's calculation of __all__.","c545eec3bdb7b5a82cf13f6abc4b47caaa278ac0","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/pynumpy.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-02 10:10:16","py3k: test new as_string methods","c55753fb8782d36d81a3ee36646b22061d2c6d21","","api.github.com,git_clone","[u'[""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-02 14:12:29","remove _assignment: call set_local directly

--HG--
branch : rebuild","c585c526fd1455787cefcbf08a735095ff5d7038","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-10 17:56:08","Remove all trailing whitespaces.","c58fe3bd95ee5035f364377062342df901410192","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/scoped_nodes.py"", ""astroid/node_classes.py"", ""astroid/manager.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-27 09:50:53","temporary solution for Str / Num

--HG--
branch : _ast_compat","c5a587f1a894975845f05cece930b65f432e38fa","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-14 15:29:29","[fix] yet another infinite loop with unittest(2) / lgc.*test* monkeypatching","c5d7bcac79cb4f17b2dc4ce23757bd3b4e887de8","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-07-16 11:17:16","Make Uninferable have a false value by default.","c61b992458e1b1b3d955abf11ac3b75c98a11503","","api.github.com,git_clone","[u'[""astroid/util.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","mbdevpl","2016-01-14 10:47:11","added 3 pkg_resources functions to brain

[Those 3 are] methods of WorkingSet objects [that] are also available
as module- level functions in pkg_resources that apply to the default
working_set instance. Thus, you can use e.g. pkg_resources.require()
as an abbreviation for pkg_resources.working_set.require()

above taken from:
https://pythonhosted.org/setuptools/pkg_resources.html#basic-workingset-methods

this fixes https://github.com/PyCQA/pylint/issues/780

Signed-off-by: Mateusz Bysiek <mb@mbdev.pl>","c639f03b302dda84825061ba35a68e2037f4c951","","api.github.com,git_clone","[u'[""astroid/brain/brain_stdlib.py""]']","False","[u'https://github.com/PyCQA/pylint/issues/780', u'https://pythonhosted.org/setuptools/pkg_resources.html#basic-workingset-methods']","[{u'raw': u'https://github.com/PyCQA/pylint/issues/780', u'refstyle': u'url', u'parts': [u'PyCQA', u'pylint', u'780', u'']}]","[u'@mbdev']","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-28 12:00:35","as_string: fix callfunc and test module2.py returned identically","c6631372e49a3e99e1f85e35f36fcb00dd914529","","api.github.com,git_clone","[u'[""as_string.py"", ""test/unittest_nodes.py"", ""test/data/module2.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-15 14:39:14","cleanup imports: we don't need most of the _ast / compiler classes anymore

--HG--
branch : rebuild","c6734674fdc4f37a168dd80cf202587ab6c83ad7","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","pierre-yves.david@logilab.fr","2008-06-05 15:20:14","adds apycot config file","c6950a34d09f32a907ce1f4199065e07d6f065d0","","api.github.com,git_clone","[u'[""apycot.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-12 12:24:15","remove old coding style","c6c2d9c3836d586f6edfe2a3df3a1710fe15d6aa","","api.github.com,git_clone","[u'[""mixins.py"", ""inspector.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-07 09:43:47","remove usage of __dict__ to avoid explicit None assign of the fields.

We should this way be able to remove the strange 'if node is None' in
the 'RebuildVisitor.visit' method and save some time.","c6c6735deec641ce5f4140d7928d9a02bed93b67","","api.github.com,git_clone","[u'[""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-11-21 08:45:14","Skip the current class when deducing its mro. Close #361.","c6ee7b0b877bd57d92db5864f31478d14909be17","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[{u'raw': u'#361', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'361', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-16 22:12:14","Close the file opened by open_source_file, to prevent ResourceWarnings.","c737d8aa9f431b954bfa0b4085821038abfc606b","","api.github.com,git_clone","[u'[""astroid/builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-07 16:46:23","create a Set node","c7744105ffc547156b9d014909fc2574e6d63f22","","api.github.com,git_clone","[u'[""nodes.py"", ""node_classes.py"", ""nodes_as_string.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-25 15:11:34","test: fix yet another cwd dependency","c7d1bb49f8268e6781289396bbb39def4c0a3134","","api.github.com,git_clone","[u'[""test/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-07-05 06:10:02","copyright cleanup

--HG--
branch : stable","c85af9cce2a3115da3dfaa45d61e3be2d1f51ab4","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""node_classes.py"", ""inference.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-02 08:52:37","wip : trying to fix AugAssign etc. for compiler

--HG--
branch : rebuild","c8879cc2029b31f1223ddb36907b978f3aebd1ff","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""rebuilder.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-07-24 16:06:06","Revert change.","c889378f70116bc4babbefcde5b467c753b2e807","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-03 15:36:11","fix inference tests
* Const(value=None) should be printed as 'Const'(NoneType)'
* define a infer_default which does not exist anymore in infutils

--HG--
branch : rebuild","c8a4ad19cde687b6f9a77614c6ca7ab54c6b0d41","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-25 15:53:05","fix ##18773: inference bug on class members","c8a50c4736edb0625624204e80ee873d898bc6f7","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#18773', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'18773', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 15:38:26","licence, date, typos

--HG--
branch : _ast_compat","c8a6fbc58a5f0b7f9db5eb0290f099ea1d4a38c6","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""nodes_as_string.py"", ""nodes.py"", ""rebuilder.py"", ""__init__.py"", ""_nodes_compiler.py"", ""builder.py"", ""_exceptions.py"", ""_nodes_ast.py"", ""scoped_nodes.py"", ""utils.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-22 19:52:58","Create a call context when inferring unary operands on instances.","c8b506f61facc24a1dd28f1421f0393d9775527f","","api.github.com,git_clone","[u'[""astroid/inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-18 10:13:33","external attribute definition handling :)","c8b757cdfdcc7542214698fd4c9f1072ae54bf3f","","api.github.com,git_clone","[u'[""utils.py"", ""ChangeLog"", ""test/unittest_inference.py"", ""__init__.py"", ""test/unittest_builder.py"", ""builder.py"", ""inference.py"", ""test/regrtest.py"", ""scoped_nodes.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jarradh","2015-04-26 09:45:10","Merged logilab/astroid into default","c8e2d65dad10030fb0d795221b4ec7a6097bb4e6","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 23:55:53","fix #9588: false positive E1101 for augmented assignment: .getattr and .instance_attr method should return values from all the mro, not only the first found","c92371acca215aeb33c81a5f5ab9280b440f55ac","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[{u'raw': u'#9588', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'9588', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-22 16:24:33","Install lazy_object_proxy as a dependency.","c943c1d98f2c9b38f6319fb17d75af34bdf256c2","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 11:58:04","factorize and remove dead code

--HG--
branch : rebuild","c95ac3d265283b30303f57ae6e651e7893dcd884","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-25 09:11:35","Backport updates from pylint-brain.","c9b5a95fa26bc5b83b7688d666d4de32cf1bd867","","api.github.com,git_clone","[u'[""brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-25 07:59:38","Add a tox.ini file.

--HG--
branch : tox","ca2d0c372f58ffae84ee41fdc888a75124aa65ef","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-13 12:42:42","Added tag logilab-astng-debian-version-0.20.2-1 for changeset 83a9e1804d17

--HG--
branch : stable","ca49e5aecc1bf0f556527dc80b176cf0385a8a7d","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 19:09:53","update TODO

--HG--
branch : _ast_compat","ca7bab101095052c9b444094b71315efd9cbde74","","api.github.com,git_clone","[u'[""TODO._ast_compat"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-09 21:32:18","Improve the inference of UnaryOperands.

When inferring unary operands, astroid looks up the return value
of __pos__, __neg__ and __invert__ to determine the inferred value
of ``~node``, ``+node`` or ``-node``.","ca7e16f74e1715947d3ae652707e48908b2f27b1","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-12-15 09:37:10","Add the release date","ca96ad7fa177c50159da3244c3922f9d334d3ba2","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-29 12:42:30","Import test for pylint regarding context inference in relation with factory methods.","ca9ddcc2222d64f9ed204248fcd22841b59c11d6","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-29 17:34:05","relative_to_absolute_name: simplify and write tests","caab7d661559dec3583fc1f9013f330d2f350b3b","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-19 18:31:16","Fix bad-continuation errors from astroid.","cab07fed23090b5964f4744f454837384bc7c112","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""pylintrc"", ""astroid/tests/unittest_brain.py"", ""astroid/scoped_nodes.py"", ""astroid/protocols.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-10 15:27:39","Improve the mro resolution.

First, validate that a class has duplicate entries in the mro or not. If it has,
there's no way to determine a stable hierarchy, so raise an error when this situation
occurs. Second, use a better algorithm for our purposes than .ancestors to infer
the base classes, since .ancestors will return all the inferred objects for a base,
which will also include base classes in the case of superclasses, which will result
in inconsistent hierarchy again from the point of view of _c3_merge.","cb66805ad27e07e53437f9ea24c5d1ba8c56f3da","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-02 20:45:57","Fix pylint commands line","cb6fc57c3f18e254a976db7e5a07cabdf5542a67","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 14:13:20","turn basenames into a property

--HG--
branch : _ast_compat","cb71ae2e8eceb1cd8ce92f7a93510621f2e9c198","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-10-11 17:47:56","backport stable","cbaee0645c621ecb043a2bf39f66c5df391cbe8b","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 14:44:41","is_method must check parent is a class

--HG--
branch : _ast_compat","cbdc9f573325933cea47f64e7eea5239d688b114","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 14:36:56","fix decorators and argnames for _ast

--HG--
branch : _ast_compat","cbe90eb90cec7de08e37bc0e79253fc70d2abbea","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","living180","2010-10-01 18:01:59","add support for set comprehensions","cbf24de987ff51a870f7177bb361f6204809c9a4","","api.github.com,git_clone","[u'[""nodes_as_string.py"", ""nodes.py"", ""node_classes.py"", ""test/unittest_lookup.py"", ""_nodes_ast.py"", ""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-16 16:53:29","fix local_attr_ancestors bug","cc1226bbaf27c10870456c8366cee0ed543adf0c","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-08-14 11:38:42","Proper metaclass discovery when encountering __metaclass__.

--HG--
branch : metaclass","cc301b2e96da6916a482e583183e32b8f5894c77","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-18 19:32:24","Update information in pkginfo, including the version information.","cc413b49ce9dd63fcbe9396a5ac1c8c68872a6c1","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-07 13:13:33","Add test for old namespace packages protocol.","cc45664f714822e7d6443bf6d2a96d4efdd484fd","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python3/data/path_pkgutil_3/package/__init__.py"", ""astroid/tests/testdata/python3/data/path_pkgutil_2/package/__init__.py"", ""astroid/tests/testdata/python3/data/path_pkg_resources_3/package/__init__.py"", ""astroid/tests/testdata/python3/data/path_pkgutil_1/package/foo.py"", ""astroid/tests/testdata/python3/data/path_pkg_resources_1/package/foo.py"", ""astroid/tests/testdata/python2/data/path_pkgutil_2/package/bar.py"", ""astroid/tests/testdata/python3/data/path_pkg_resources_2/package/__init__.py"", ""astroid/tests/testdata/python2/data/path_pkgutil_3/package/baz.py"", ""astroid/tests/testdata/python3/data/path_pkgutil_1/package/__init__.py"", ""astroid/tests/testdata/python3/data/path_pkg_resources_2/package/bar.py"", ""astroid/tests/testdata/python2/data/path_pkg_resources_2/package/__init__.py"", ""astroid/tests/testdata/python2/data/path_pkg_resources_2/package/bar.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/testdata/python2/data/path_pkgutil_1/package/foo.py"", ""astroid/tests/testdata/python2/data/path_pkg_resources_3/package/__init__.py"", ""astroid/tests/testdata/python3/data/path_pkgutil_3/package/baz.py"", ""astroid/tests/testdata/python2/data/path_pkgutil_3/package/__init__.py"", ""astroid/tests/testdata/python2/data/path_pkg_resources_1/package/__init__.py"", ""astroid/tests/testdata/python2/data/path_pkg_resources_1/package/foo.py"", ""astroid/tests/testdata/python3/data/path_pkg_resources_1/package/__init__.py"", ""astroid/tests/testdata/python2/data/path_pkgutil_2/package/__init__.py"", ""astroid/tests/testdata/python2/data/path_pkg_resources_3/package/baz.py"", ""astroid/tests/testdata/python3/data/path_pkgutil_2/package/bar.py"", ""astroid/tests/testdata/python3/data/path_pkg_resources_3/package/baz.py"", ""astroid/tests/testdata/python2/data/path_pkgutil_1/package/__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-28 16:18:09","Supress py2gi warnings. Patch by Cole Robinson. Closes issue #86.","cc5bfd7f71c90665e0ed89f47327b60dbca75d96","","api.github.com,git_clone","[u'[""astroid/brain/py2gi.py""]']","False","[]","[{u'raw': u'#86', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'86', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-08 15:58:43","fix Compare.get_children

--HG--
branch : _ast_compat","cc5fbd8eaccb4e112cca840dfffc25f6f82ea64f","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-12-03 12:58:52","Reraise the exceptions as astroid exceptions in .getitem.","cc608e6488dbddd3274b406bde4a3a75f79553dd","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","hippo91","2017-10-21 16:49:08","Introduction of numpy.core.umath functions signatures inside numpy brain + add of a dedicated unit test","cc60d739c5e32561a55ca82a5b452fba4b79b6f6","","api.github.com,git_clone","[u'[""astroid/brain/brain_numpy.py"", ""astroid/tests/unittest_brain_numpy.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-20 21:56:49","Remove obsoleted config options.","cc82173edccce5db67908e0a248c7b7c8f4166f2","","api.github.com,git_clone","[u'[""pylintrc""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-15 16:06:44","Add lib_pypy into the list of standard library modules for PyPy

Unfortunately it is not detected in any way by
distutils.sysconfig.get_python_lib. This can detect datetime as a
builtin module on PyPy.","ccb797f42d040d371cce133ab7251721086e7575","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-16 23:02:07","Prepare a new micro release.","cce4c0da2ee3697355bd19394d78e2f18962bacb","","api.github.com,git_clone","[u'[""doc/source/conf.py"", ""astroid/__pkginfo__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","invalid-email-address","2015-01-28 07:52:35","MRO lookups can get into an infinite loop if a class is a subclass of itself. This is obviously a bit silly, but can happen as part of a transform done in a pylint plugin to augment or change the behaviour of a class.","cd0629d9efb00c3f156f5501744b6f0a81dd9884","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-05-07 14:14:48","Function nodes can detect if they are decorated with subclasses of builtin descriptors when determining their type (`classmethod` and `staticmethod`).

--HG--
branch : classmethod_subclasses","cd08d8724ec41f4630b143a62f0d4e5479ab0607","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""rebuilder.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-17 19:37:42","Remove TreeTester and _check_children.","cd0a367638dbf60f4c65c9b5106ded5f14497ee2","","api.github.com,git_clone","[u'[""astroid/utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-08 23:46:13","Drop verbose output from test runs.","cd1bc8b2fcb0530bd8a54b14d240e70ebfc98d63","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 16:10:39","limit cyclic dependencies / cleanup by introducing a new infutils module

--HG--
branch : _ast_compat","cd39af0ef8fb8c1d4f9c9c3cfe2cdf86760ef09a","","api.github.com,git_clone","[u'[""protocols.py"", ""nodes_as_string.py"", ""infutils.py"", ""nodes.py"", ""__pkginfo__.py"", ""test/unittest_inspector.py"", ""rebuilder.py"", ""__init__.py"", ""_nodes_compiler.py"", ""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""test/unittest_inference.py"", ""inference.py"", ""_nodes_ast.py"", ""lookup.py"", ""manager.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-28 13:33:50","Don't raise StopIteration in InferenceContext.push, instead exit from the generator by doing an early return

This makes astroid compliant with PEP 479 changes, since in the future it will be
prohibited to exit from a generator by raising a StopIteration.","cd74a130e1bc71930db4482132c48076de4af50f","","api.github.com,git_clone","[u'[""astroid/context.py"", ""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-18 14:48:30","merge

--HG--
branch : _ast_compat","cda132f17520c90c692e173d8aab98ebe3709491","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""scoped_nodes.py"", ""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-26 12:30:08","Class.getattr('__mro__') returns the actual MRO.

Also, Class.getattr('__bases__') returns actual bases.
It previously didn't work correctly, because it was putting the
entire ancestors into the Tuple object and it put those classes
into the wrong attribute.
Closes issue #128.","cda1d5c20bd30334df07ebd0cdceb796b7e2af34","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#128', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'128', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-05-31 16:29:34","Canonicalize file paths in modpath_from_file, this should help when receiving symlinks and whatnot.

Close PyCQA/pylint#791","cda9dc4ad0e2cc075553d133dd0fdab468d614d7","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[{u'raw': u'PyCQA/pylint#791', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'791', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-04-13 13:54:08","Prepare 1.5.0 release","cdd1a61999fbb1d91804494eea48cdd9ae5a7f88","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-22 15:36:32","checking classmethod / staticmethod must be done after the __new__ test

--HG--
branch : rebuild","ce0be59ad5e233c5c981c96fdb4a3449010e4d8b","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-11-21 09:00:47","Remove flaky test.","ce60927f99f49791af24644a9e674fd39146e858","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-02 14:58:56","Add brain tips for multiprocessing post Python 3.4+.

In Python 3.4+, the module level functions are retrieved with getattr
from a context object, leading to many no-member errors
in Pylint. This patch ensures us that we can retrieve those attributes,
no matter what.","ce92a70e5b87b1c2b5ea8da4361e4fd99a63084e","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py"", ""astroid/tests/unittest_brain.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-02 13:44:02","Add ChangeLog entry for the last commit.","ceadbe15e3373f96e43a6c0398783a8c14b91eea","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-08 16:04:10","Dunder class at method level is now inferred as the class of the method

Close PyCQA/pylint#1328","ced3d9de8f8bdefd4d99924fda4879b6fa511dde","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_builder.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'PyCQA/pylint#1328', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1328', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-03-27 12:27:55","Set literals should be treated as inference leaves. Closes #47957

--HG--
branch : stable","cef0d67e61af3f27b539c7b5492c8723f6787fe2","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""rebuilder.py"", ""inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#47957', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'47957', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-22 14:19:53","improve Module node initialisation

--HG--
branch : rebuild","cf3d173db56f2081133a8a9d1670c9a6f2c8689c","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_nodes_compiler.py"", ""builder.py"", ""_nodes_ast.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-09-21 07:07:40","Remove print statement","cf5e65dcb14798d10166f2e56c8c06a1217a613e","","api.github.com,git_clone","[u'[""astroid/interpreter/objectmodel.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-07-31 06:36:54","merge","cf8192372e8437c51a503e841ea25f4709e2b28d","","api.github.com,git_clone","[u'[""manager.py"", ""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-18 08:40:01","Filter out YES results from .decoratornames().","cf8e176839c071849fd6b5188d42b0f851d520d1","","api.github.com,git_clone","[u'[""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-18 08:11:39","refactor: add a ""is_function"" attribute (wip)","cf909524c43015917b36392b7cf5fcc104fafdfb","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 14:16:56","don't set modname/modfile when unnecessary

--HG--
branch : _ast_compat","cfcbdcb31c926fb08e0620fa2f3a82302d1f6ff8","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-22 09:07:02","Replace the use of print in python3/data/module.py, since it complicates the testing of as_string.","cfff59908a08390ea37dc52e32ce218837a9e792","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python3/data/module.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-01 09:31:34","cleanup: just define ""extra_decorators"" in Function constructor","d038ae380bfd3291aa2ceddc9f1eb365e2fb3942","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-06 23:16:41","Merge upstream changes","d052e7e223d32c7afbe8d8a19ff3747025f59982","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/exceptions.py"", ""astroid/bases.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_inference.py"", ""astroid/util.py"", ""astroid/arguments.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_stdlib.py"", ""astroid/protocols.py"", ""astroid/inference.py"", ""astroid/manager.py"", ""astroid/__init__.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-16 07:48:07","Implement bool_value correctly for data structures.","d07b2201b20e01f668afa71f57343dcc563ddfab","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/node_classes.py"", ""astroid/bases.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-01-28 11:35:38","Revert ""Don't go through relative_to_absolute_name if the module is not a package. Closes PyCQA/pylint#1084""

This reverts commit 1a9721ec74f586bccdc9d88c7b85bfa0ec34155d.","d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[{u'raw': u'PyCQA/pylint#1084', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1084', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-06 11:38:22","Move the determination of extra_decorators directly into Function, as Function.extra_decorators.

Previously, the extra_decorators computation was done in the rebuilder,
which isn't the proper way to do it, since the rebuilder should be
responsible only from transforming vanilla ast trees to astroid trees.
Now, Function exports a propery called `extra_decorators`, which computes
at runtime the callables that are wrapping a function in a class scope.","d0e11108e62e34658ff648723f993e3de38cd7ad","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/rebuilder.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-08-24 08:08:45","Add changelog entry for the explicit namespace package support.","d0fbbc462a8c3520a59cf72c694a1ed26c88eafb","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-09-27 16:41:23","closes #77188: support lgc.decorators.classproperty","d110bcf2de4b8bc48e41638cf430f17c5714ffbc","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""rebuilder.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#77188', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'77188', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-17 14:02:24","remove disabled ""set_cache_size"" method; cleanup

--HG--
branch : rebuild","d1cfb559d5944e6116df435d179b9cf3bc791a91","","api.github.com,git_clone","[u'[""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-10 10:02:25","we need a public child_sequence method

--HG--
branch : _ast_compat","d1d39ddfc70ddb0fce9ab7795f5ffb1085cf0069","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-20 11:01:51","cleanup for nodes_as_string

--HG--
branch : _ast_compat","d2233ed24dbc9da086dafee775eb695c333da324","","api.github.com,git_clone","[u'[""nodes_as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-17 10:59:54","bug fix

--HG--
branch : _ast_compat","d223b425ef20dbe133971dd364991623692945a6","","api.github.com,git_clone","[u'[""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-25 09:04:58","don't modify the list in class .locals dict","d24bf389227bab39364587762a9eb344eb27d3bb","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-04-26 13:36:20","Improve inference with regard redefinition of values in subclasses

The inference can handle the case where the attribute is accessed through a subclass
of a base class and the attribute is defined at the base class's level,
by taking in consideration a redefinition in the subclass.

This should fix https://github.com/PyCQA/pylint/issues/432","d272438213e6235f642d864085b10768b501cade","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/inference.py"", ""ChangeLog""]']","False","[u'https://github.com/PyCQA/pylint/issues/432']","[{u'raw': u'https://github.com/PyCQA/pylint/issues/432', u'refstyle': u'url', u'parts': [u'PyCQA', u'pylint', u'432', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-24 12:36:43","Understand the one-argument form of the builtin *type*.

This uses the recently added *astroid.helpers.object_type* in order to
retrieve the Python type of the first argument of the call.","d2aca4c55d7dd7b2a35c6f08ee709dd4bb263aa5","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/brain/builtin_inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","invalid-email-address","2015-04-26 11:51:53","annotations = None","d305dbce45e10d2f6620363feaecde884f9efdb6","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-28 19:54:38","Skip the nose tests if nose is unavailable.","d33c5a5f05352fd3d0a57779a2fe5c473860df3c","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","nchauvat","2006-07-31 09:30:10","hgignore les pyc","d3802dd08edd91d75bf39d9941248274ec65fb71","","api.github.com,git_clone","[u'["".hgignore""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-07 00:23:28","Make sure all files in data_py3 are correctly installed.","d3832ba8d39e507dba816468cfd1bab516f1f0d6","","api.github.com,git_clone","[u'[""MANIFEST.in"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-09 17:24:24","Exec : globals / locals like in compiler

--HG--
branch : _ast_compat","d3a232dbef717113e8e35c4c6422c86dd849ad9f","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-26 22:36:48","fix child_sequence implementation","d3ad058e8c3b03e60d94facecaed468d5b33c516","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-01-11 22:50:49","Enforce strong updates per frames.

When looking up a name in a scope, Scope.lookup will return
only the values which will be reachable after execution, as seen
in the following code:

   a = 1
   a = 2

In this case it doesn't make sense to return two values, but
only the last one.","d3b35124ecccac0a2daed6c92f9d7a8e719d8a5d","","api.github.com,git_clone","[u'[""astroid/node_classes.py"", ""astroid/tests/unittest_lookup.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-18 19:34:27","Update the changelog for a new release.","d3bc7c82ad96d7289e663bb3fbd9050ac47a5483","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","balparda","2015-03-16 22:24:54","Fix a deep recursion loop problem: it is best to check if we have visited a class by qualified name (qname) instead of by direct objects since some code structures can fool astroid into generating different internal objects for the same class.","d3c44603055135c1dcaaf0a156bcc8edb944b8bd","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-08 11:19:32","Don't raise DuplicateBaseError when classes at different locations are used

For instance, one can implement a namedtuple base class, which gets reused
on a class with the same name later on in the file. Until now, we considered
these two classes as being the same, because they shared the name, but in fact
they are different, being created at different locations and through different
means.

Close PyCQA/pylint#1458","d3d49a6d249c0d911ee09816613a1e15607a2a7c","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'PyCQA/pylint#1458', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1458', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-06 23:06:45","Rename Uninferable and instatiate_class","d3d9bcbc91dfb60ee88b1a6667db92fd00172d67","","api.github.com,git_clone","[u'[""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_inference.py"", ""astroid/protocols.py"", ""astroid/helpers.py"", ""astroid/manager.py"", ""astroid/util.py"", ""astroid/bases.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/arguments.py"", ""astroid/node_classes.py"", ""astroid/decorators.py"", ""astroid/__init__.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/builder.py"", ""astroid/brain/brain_builtin_inference.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_stdlib.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-12 17:57:59","remove doubble astng_field declarations

--HG--
branch : _ast_compat","d4004186190509d18f1becccda78c29bac09ccf6","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-08-27 08:14:49","Added tag logilab-astng-debian-version-0.19.1-1 for changeset 9c4ae36166b7","d432585c22ec4920f3a22f342b29ec46bf4f3d3c","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-09-20 07:40:57","added has_dynamic_getattr on Const","d44fe26af14e049bb82f09a7c008ca00cb95b860","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-15 15:18:46","Rework the file_stream API.

Restore file_stream to a propery, but deprecate it in favour of
the newly added method Module.stream. By using a method instead of a
property, it will be easier to properly close the file right
after it is used, which will ensure that no file descriptors are
leaked. Until now, due to the fact that a module was cached,
it was not possible to close the file_stream anywhere.
file_stream will start emitting PendingDeprecationWarnings in
astroid 1.4, DeprecationWarnings in astroid 1.5 and it will
be finally removed in astroid 1.6.","d455240e2f09fde2d6e75b44cc805ecac1f2ae35","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2013-06-19 11:20:47","Make file_stream return a byte stream

Users get to choose the encoding to decode with.","d460b1640f0636ceb92a5a690a162757fa871de1","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-26 12:29:32","Make instancecheck a private function.","d46f10b98b9f6c4932fc6414d5660fee60192cb1","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-22 10:59:04","Return proper string types for hashlib overlay. Fixes #29.","d4af1d85c429927268015620a1485c3c8ce9738d","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py""]']","False","[]","[{u'raw': u'#29', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'29', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-03-27 15:25:20","[py3.3] don't crash on 'yield from' nodes. Closes #124360

--HG--
branch : stable","d4cc195b05243be776eb40464a61d4fc376728ff","","api.github.com,git_clone","[u'[""rebuilder.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#124360', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'124360', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-11 20:58:49","Merge pull request #287 from dashea/gi-stub-enum

Check for flags/enum types before checking for int","d4d1842ed2c3b51de80869ad0b423f11b1937987","","api.github.com,git_clone","[u'[""astroid/brain/brain_gi.py""]']","False","[]","[{u'raw': u'#287', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'287', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-12-08 14:26:27","backport stable","d4ed73e075549597315c52336d9a0736460aff31","","api.github.com,git_clone","[u'[""debian/control""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-11-19 14:01:21","dont raise NotFoundError in Const.__getattr__","d50adc982550a95ab43943da715fdf50f9183a9f","","api.github.com,git_clone","[u'[""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-02-27 10:00:52","merge

--HG--
branch : stable","d53ae217925391a225d5677a4fb9d81781980487","","api.github.com,git_clone","[u'[""test/unittest_inspector.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-03 21:38:45",".slots() can contain unicode strings on Python 2.","d5ab86bbe2baf4a07d0f3fc00a8b6389ffd6d2d2","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 13:54:10","[py3k] 2to3 is confused upon those nested next calls","d5b47398e5e321cb74299a8aabc1fa959ca5397b","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-07-12 02:50:06","Fix isinstance/proxy bug by changing from lazy-object-proxy to wrapt and minor fixes","d5be6c1926d6fa02b49b320faee5edb1e04f9fae","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/test_utils.py"", ""astroid/scoped_nodes.py"", ""astroid/nodes.py"", ""astroid/brain/py2gi.py"", ""astroid/brain/pysix_moves.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-03-04 07:44:09","Test fixes.

--HG--
branch : yield_from","d5cbe0db9a95798d61eb12d501fc39b8a95afa90","","api.github.com,git_clone","[u'[""test/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-25 17:42:01","mistake : TransformerTC is before ASTNGBuilding

--HG--
branch : _ast_compat","d5d026484304cb56008821bec4afce86dc857bda","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-26 17:39:00","Merged in renezhang/astroid_metaclass_loop (pull request #85)

Fix infinite loop in metaclass inference","d5d10fbbde855dd63b229a611ee0e315f65358dd","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[{u'raw': u'#85', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'85', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-28 18:57:14","Update the rules for what descriptor is returned from a super(), depending on the accessed object.","d5f32239fa213aa8c58cdcb8c8490c5f38c0bf21","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/brain/builtin_inference.py"", ""astroid/tests/unittest_objects.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-10 18:16:03","Remove all occurences of bad-whitespace.","d622c7f249e211fa8469283cd9ce221f87cbf26b","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/tests/unittest_inference.py"", ""astroid/tests/unittest_raw_building.py"", ""pylintrc"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/rebuilder.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-14 01:10:31","Cleanup pylint's warnings over astroid codebase

Some of the messages were disabled in pylintrc, since they're not
very useful for our case. Other parameters, such as the number of
arguments / statements / attributes etc were configured so that they
won't be too restrictive for our codebase, since making the code
to respect them right now requires too much development changes,
which is not justified by the end result.
Closes issue #284.","d65e7cd75d368a075ff271c8320e94ebf2f2d9b1","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_inference.py"", ""astroid/protocols.py"", ""astroid/inference.py"", ""astroid/bases.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/modutils.py"", ""astroid/test_utils.py"", ""astroid/tests/unittest_protocols.py"", ""astroid/arguments.py"", ""astroid/raw_building.py"", ""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/__init__.py"", ""astroid/as_string.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/objects.py"", ""astroid/builder.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_modutils.py"", ""astroid/tests/unittest_nodes.py"", ""pylintrc"", ""astroid/tests/unittest_brain.py"", ""astroid/mixins.py"", ""astroid/tests/unittest_raw_building.py"", ""astroid/__pkginfo__.py""]']","False","[]","[{u'raw': u'#284', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'284', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-28 15:29:35","handle Assert node

--HG--
branch : _ast_compat","d689f81af7e1760e0d38b55b4c676c351e75a3ea","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-07-08 15:03:47","cleanups","d6944a6ed9f7e452b2eb079269d212816c6f2f10","","api.github.com,git_clone","[u'[""mixins.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-04-08 12:24:57","slightly more readable version","d6a89691e89f1c92fa740ddc1641cc2d984c4497","","api.github.com,git_clone","[u'[""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-12 20:19:16","Big cleanup across the entire project

The cleanup consisted in a couple of changes:

 * import only modules, not objects, in order
   to not clutter the module namespace and to not
   leak accidentally objects which aren't public API
   for the said modules.

 * use two spaces between module level functions

 * move some mixins from astroid.node_classes in
   the proper order, starting at the left,
   not being last in the MRO.","d7294bd79062a4f47db8a761d79e6c1dd166bc72","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/bases.py"", ""astroid/raw_building.py"", ""astroid/mixins.py"", ""astroid/node_classes.py"", ""astroid/inference.py"", ""astroid/objects.py"", ""astroid/rebuilder.py"", ""astroid/manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-27 11:52:41","Filter out YES nodes when creating a temporary class for the with_metaclass hack.

Having an YES node in a class bases will lead to a crash with a TypeError
when trying to obtain the ancestors of the given class, because .ancestors()
will try to iterate each inferred node from the bases, thus will try to
iterate over an YES node. This should fix issue #84.","d742ec145ec1bbf1024843b295da5af1e54f9ea3","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_regrtest.py""]']","False","[]","[{u'raw': u'#84', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'84', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-05 18:33:49","Subscript and Slice as String

--HG--
branch : _ast_compat","d7804a06e5b09385973c19e88b4654fb21fa53f1","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-11-23 14:11:49","Merge structured exceptions into master","d7d4dfa9312c4ce32f91227f77976b54fa32b286","","api.github.com,git_clone","[u'[""astroid/exceptions.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_objects.py"", ""astroid/protocols.py"", ""astroid/inference.py"", ""astroid/manager.py"", ""astroid/util.py"", ""astroid/bases.py"", ""astroid/arguments.py"", ""astroid/brain/brain_six.py"", ""astroid/node_classes.py"", ""astroid/decorators.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/objects.py"", ""astroid/builder.py"", ""astroid/brain/brain_builtin_inference.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/unittest_brain.py"", ""astroid/mixins.py"", ""astroid/brain/brain_gi.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-29 08:02:06","Update README : the tree is now rebuilded

--HG--
branch : stable","d802f3242eec1ae2341b9ea019f801107a5f08e8","","api.github.com,git_clone","[u'[""README""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","mmaslowskicc","2017-07-08 11:23:16","Catch _NonDeducibleTypeHierarchy in inference._infer_augassign (#443)

Similarly to _infer_binop, we have to handle exceptions raised by
helpers.is_subtype and helpers.is_supertype in _infer_augassign.","d80bc3f9254044be2c82c3acfcbe282d10610bc4","","api.github.com,git_clone","[u'[""astroid/inference.py""]']","False","[]","[{u'raw': u'#443', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'443', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-27 14:55:27","alphabetic sort of visit methods; cleanup

--HG--
branch : _ast_compat","d80ed85b8cf0026956716a211fa814c7c377194a","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-29 14:26:42","Mark a comment as TODO.","d80f2f5cfbc6baf71ae2aec43563b833c25b637e","","api.github.com,git_clone","[u'[""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-14 19:38:35","Fix most obvious errors intorduced by the latest merge","d84836b80305a6ea1a05dd5c3f52300bfdb5cbac","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/bases.py"", ""astroid/tests/unittest_inference.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/raw_building.py"", ""astroid/scoped_nodes.py"", ""astroid/protocols.py"", ""astroid/brain/builtin_inference.py"", ""astroid/inference.py"", ""astroid/objects.py"", ""astroid/node_classes.py"", ""astroid/rebuilder.py"", ""astroid/context.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-16 09:48:33","Add AppVeyor badge.","d8566bb913bf841fa1566eee5d5e1ae03c2feda1","","api.github.com,git_clone","[u'[""README.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-18 18:18:01","add special astng.nodes_as_string.visits

--HG--
branch : _ast_compat","d86326d3cae3058b21968b8d026e94262a3b07f9","","api.github.com,git_clone","[u'[""nodes_as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-11-02 12:56:51","Add ChangeLog entry","d86cbd38b9e614948796c4121f1c43cb44bdb0a8","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-03 15:16:19","[R] steps toward collecting all methods of a node class in a place","d88b456a180996bf5588cb382118cddd747ae04f","","api.github.com,git_clone","[u'[""nodes.py"", ""node_classes.py"", ""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-04-25 10:18:14","backport stable","d8a0484049c86d49a1a596ef4bbda7084e1a7d40","","api.github.com,git_clone","[u'[""test/data/SSL1/Connection1.py"", ""test/regrtest_data/package/__init__.py"", ""test/regrtest_data/package/absimport.py"", ""test/data2/suppliermodule_test.py"", ""test/data2/clientmodule_test.py"", ""test/data/appl/myConnection.py"", ""test/unittest_python3.py"", ""bases.py"", ""mixins.py"", ""brain/py2stdlib.py"", ""test/unittest_inference.py"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""scoped_nodes.py"", ""as_string.py"", ""test/data2/__init__.py"", ""test/data/notall.py"", ""rebuilder.py"", ""inspector.py"", ""test/regrtest_data/descriptor_crash.py"", ""test/regrtest_data/package/import_package_subpackage_module.py"", ""test/unittest_utils.py"", "".hgtags"", ""test/unittest_scoped_nodes.py"", ""setup.py"", ""exceptions.py"", ""test/data/appl/__init__.py"", ""test/data/noendingnewline.py"", ""test/unittest_inspector.py"", ""test/unittest_builder.py"", ""builder.py"", ""node_classes.py"", ""test/unittest_lookup.py"", ""utils.py"", ""test/data/__init__.py"", ""test/data/nonregr.py"", ""raw_building.py"", ""test/regrtest_data/package/subpackage/module.py"", ""test/unittest_nodes.py"", ""protocols.py"", ""ChangeLog"", ""debian/changelog"", ""nodes.py"", ""test/data/SSL1/__init__.py"", ""__init__.py"", ""test/regrtest_data/package/subpackage/__init__.py"", ""test/unittest_regrtest.py"", ""inference.py"", ""manager.py"", ""test/data/module2.py"", ""test/data/all.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-13 15:07:11","The inference engine handles binary operations (add, mul etc.) between instances.","d8b19eae5e855b5453f399858aadeb7cf218ee70","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py"", ""protocols.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-09 18:08:42","Raise is a statement; Module has None as sibling

--HG--
branch : _ast_compat","d939e51dda17dbe9d7f181b9fea699c77b20512b","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 10:53:10","compiler: handle Slice(obj), Subscript, ExtSlice, Index

--HG--
branch : rebuild","d93fed3b4b233e9294f9d38edb00d965e1cf3325","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2016-05-17 14:46:31","Remove superfluous boilerplate the first regex missed","d956f9b2cac1a3801c3fa1cc93d19ff77687181d","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_pkg_resources.py"", ""astroid/brain/brain_numpy.py"", ""astroid/modutils.py"", ""astroid/brain/brain_six.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 09:28:00","remove debug assertion

--HG--
branch : _ast_compat","d9c0c863dfd886b61498cdc798989a67a47dbb23","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-25 16:48:01","fix transformation of Function into [Un]BoundMethod","d9e751663ac50311533fd98b9b9b04863c91282e","","api.github.com,git_clone","[u'[""infutils.py"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-16 15:20:56","Recognize modules loaded from $SYS_PREFIX\DLLs as standard library modules on Windows.","d9e856764f312489964f27f5ddb81e8ce60ec0d0","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-24 09:06:39","oops, should not have changed this","d9e966254f371804952dd804aad056607cc9ea01","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-17 08:02:31","start patches for astng 0.19.2 stable branching I : tests

--HG--
branch : stable_0.19.2","da3e670ceec0eadd36101603f98e9bbc308be175","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-07-30 06:37:49","use getattr in case member has no __name__ at all","da661ae12efad7b88333cb5983994543ef2d4b12","","api.github.com,git_clone","[u'[""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-18 13:52:49","fix: ExceptHandler.name can be a Tuple in py2.x","da6a93df25266de1bb462119df112da2289048bb","","api.github.com,git_clone","[u'[""test/unittest_nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-12-18 16:14:34","Use .infer.

--HG--
branch : metaclass","dab9f6f138256792df18aee8217e77b1c979068a","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-24 18:45:05","Bump version to 1.2.1.","dad12edb3afc2275f18fc9aeea1e9b483bc85c99","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-05-05 14:22:00","* fix Class.block_range method (this fix pylint's inline disabling of 
* fix Class.block_range method (this fix pylint's inline disabling of 
      messages on classes)","dade2eac4a3b4b984529e85e1e1d2459c453574e","","api.github.com,git_clone","[u'[""nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-12-21 20:38:56","Added tag logilab-astng-debian-version-0.19.3-1 for changeset 2fce093c5db7

--HG--
branch : stable","dae9ddeeed7d5af87168aab6efb43ba0371a0b1f","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 10:14:38","always propagate context to avoid infinite loops

--HG--
branch : _ast_compat","dafc8c716aedb846f3aee4fd13b5d71fcf4430d4","","api.github.com,git_clone","[u'[""inference.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","invalid-email-address","2015-04-26 12:11:44","add returns annotation","db305eff574192722758f5e0b3806e93da9af4be","","api.github.com,git_clone","[u'[""astroid/as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-01 16:19:34","Use six constants for python versions.","db4f495036b82dbdbd466bb6b7954018d36008e1","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-04-21 06:35:32","fix test impacted by removing REDIRECT from utils","db5221b2d703ac3eed16706066f121a11ee16bd5","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-25 12:20:33","Use the same representation from the definition time for mocked enums.","db6d60c2ef3ded8177ad0caf6d5ee6d019c487ed","","api.github.com,git_clone","[u'[""brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-23 10:34:49","""default"" is now ""stable"": ignore stable changes which have already been transplanted manually instead of merging

--HG--
branch : stable","db740f29f7a2a9a737f080d423c3a641c4dc5257","","api.github.com,git_clone","[u'[]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","julien.jehannet@logilab.fr","2011-01-18 08:50:25","(merge py3k changes)","db7ea8451a98b437ee635e99d83944f2a9d3acc2","","api.github.com,git_clone","[u'[""test/unittest_lookup.py"", ""bases.py"", ""mixins.py"", ""test/unittest_inference.py"", ""__pkginfo__.py"", ""test/unittest_manager.py"", ""scoped_nodes.py"", ""as_string.py"", ""rebuilder.py"", ""inspector.py"", "".hgtags"", ""test/unittest_scoped_nodes.py"", ""exceptions.py"", ""test/data/module2.py"", ""test/unittest_inspector.py"", ""test/unittest_builder.py"", ""builder.py"", ""node_classes.py"", ""_exceptions.py"", ""utils.py"", ""raw_building.py"", ""test/unittest_nodes.py"", ""protocols.py"", ""ChangeLog"", ""debian/changelog"", ""__init__.py"", ""test/unittest_regrtest.py"", ""inference.py"", ""_nodes_ast.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 14:14:20","remove NoneType and Bool special classes, use Const instead

--HG--
branch : _ast_compat","dba9f1c2ea725079905941d0ac92f0ba9af9f978","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""nodes.py"", ""inference.py"", ""test/unittest_inference.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-16 16:33:43","cleanup","dbb87cf7db0124edefab3aa68f2569f86236ebf8","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-07-25 14:16:25","Add changelog entry.

--HG--
branch : no-logilab-common","dbd63464f05c951bf494195f1af91c85de995530","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-08-24 20:44:45","Specify in the release process that sdist should use .tar.gz extension.","dbe95f9ad77e523a126d9d4ce8d92e752a738fb7","","api.github.com,git_clone","[u'[""doc/release.txt""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-09-22 13:05:42","py2.3 compat : syntax, set; _nodes_compiler.py : fix visit_discard

--HG--
branch : stable","dbeaad5988d27f5fd56a278e70a8c7995c87ff7c","","api.github.com,git_clone","[u'[""nodes_as_string.py"", ""nodes.py"", ""rebuilder.py"", ""bases.py"", ""_nodes_compiler.py"", ""mixins.py"", ""node_classes.py"", ""scoped_nodes.py"", ""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-07-13 06:08:51","add __subclasses__ to special class attribute","dc0cc3fe184a03c3f4e1828635949f3663b64767","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-30 19:01:42","Fix the test.","dc1aad72e7593ee4edcf5196ffa7b3ab171c9e96","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-02 17:49:28","[R] create LambdaNG and extend also Function with it","dc5837fbf93e656ec158b072fa2f9520084eb0d1","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-07-18 06:16:51","0.24","dc5c28c42a73d091f20d63fe8a6a9014caefda8c","","api.github.com,git_clone","[u'[""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2017-03-08 20:41:42","Move discover -s ... -p ... into the default value for {posargs} in tox.ini, to allow running specific tests with `tox -- astroid.tests.unittest_regrtest.NonRegressionTests.test_ssl_protocol`","dc7cdd223f7d0897d7c5f6c3dd89143ca3128bc7","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-05 12:35:37","skip None values (empty node, ...)

--HG--
branch : _ast_compat","dc93014bc276aac2065c8bef5cf14f5f572b5366","","api.github.com,git_clone","[u'[""nodes_as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-18 07:50:02","Fix a typo in the possible properties list and add more tests.","dc9c3a4a59c343c84de2fb46f3a55edb969f8530","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-17 19:12:03","make pylint happy

--HG--
branch : _ast_compat","dca3244ac7681fff5246af523deb0e8bbd848b04","","api.github.com,git_clone","[u'[""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-01-29 16:15:10","null commit

--HG--
branch : nameconstant_py34","dce072e7bd83d3553a47650b41f2e82c06663da2","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-01-21 08:55:33","setuptools compat","dcefd4637171f85d843d94658a3170f28dba7794","","api.github.com,git_clone","[u'[""setup.py"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-18 19:24:56","Complete the changelog and remove announce.txt, since it's not used anymore.","dd0fdd0c463310479d6e652ddcb038fedaa97d1f","","api.github.com,git_clone","[u'[""announce.txt"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 10:39:04","no more need to set _module on rebuilder

--HG--
branch : _ast_compat","dd446083b1cf2d48f190071cbf80c258d973a0ae","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-12-15 08:50:10","Make Unknown a rhs assignable node

This means we can put an Unknown node in RHS of an assignment operations, which will be useful for brain related transforms.","dd4c51f7bf27617cc4ade8f34ef78d8c9ddde2f5","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-06 07:57:59","Delegate the implementation of BoundMethod.infer_call_result to the parent.

The implementation is the same, they both delegate to _proxied for inference,
but UnboundMethod supports custom logic for handling object.__new__, which is
also desired for BoundMethods.","dd4e026c664648fe05385fb53da7a4e9680dacf3","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-09-22 14:14:51","fix indentation and don't monkeypatch Function for 2.3

--HG--
branch : stable","dd80a5356ff1ea3adb1154217f1c87746c722401","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-28 19:26:06","Drop the inference of frozensets as sets.","dd818a5d9f0b4c66dd78e0291c265a71ac59ea58","","api.github.com,git_clone","[u'[""astroid/brain/builtin_inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-04-26 13:13:11","Calling lambda methods (defined at class level) can be understood.","dd83fce7f35244d66dd41a9abb813f3726964b37","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-03 16:02:49","remove RebuidlVisitor.set_infos; set infos in different _set_infos methods

--HG--
branch : rebuild","ddaee4d861130890fe512644e14a87ef7866baa7","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 11:58:54","new decorators to make code cleaner

--HG--
branch : _ast_compat","ddb4c3780adf3d4cca72770dcf52de107f044940","","api.github.com,git_clone","[u'[""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-17 08:33:50","scoped_nodes patch II

--HG--
branch : stable_0.19.2","ddd080bdf7bdce0cfe07724207d2ea184212aa0f","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-06-17 15:41:01","Fix unittest that was broken due to a change in pylint (BaseTokenChecker -> BaseRawChecker).","ddf3926618305cbd0964bd0654a2bd1568205e51","","api.github.com,git_clone","[u'[""test/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-22 13:37:54","Make Class.is_subtype_of public, and the context argument optional.","dea26008de9647b7fb8d31149f45b2dd3e9c81fa","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-23 12:57:25","Merged in dmand/astroid/binop-inference-fix (pull request #92)

Fix binary operator inference issue from pylint's #646","dea53aa9e7c6cb4b210112ae34b28876844a2600","","api.github.com,git_clone","[u'[""astroid/inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[{u'raw': u'#646', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'646', u'']}, {u'raw': u'#92', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'92', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2008-02-14 15:48:26","spelling","dedb0fc5fb17855928adb682a829aff10bbbb92d","","api.github.com,git_clone","[u'[""debian/control""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-24 16:19:58","merge with stable: modified tags","dede475c68e000beac1444210554f40e2f52255f","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-13 09:37:32","Merge.","df44eaa634af60f011a4e96db72e91161df9cad2","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/pydateutil.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-03-29 23:07:54","_ast compat step 0

--HG--
branch : _ast_compat","df7e6961f4887e58d9eb957a556868f095db9017","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""nodes.py"", ""__init__.py"", ""_nodes_compiler.py"", ""test/unittest_builder.py"", ""builder.py"", ""inference.py"", ""_nodes_ast.py"", ""lookup.py"", ""_inference_compiler.py"", ""scoped_nodes.py"", ""utils.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-03 09:41:52","Infer the unary method retrieved from classes.","df941928c24490610568d141980788b4b0ab382d","","api.github.com,git_clone","[u'[""astroid/inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2006-06-14 17:32:58","new python policy","dfc2123f55970cc56747a4f8dbcc18bea62dd639","","api.github.com,git_clone","[u'[""debian/rules"", ""debian/control"", ""debian/python-logilab-astng.dirs"", ""debian/python-logilab-astng.prerm"", ""debian/python-logilab-astng.postinst"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-24 15:43:25","Use os.path.sep instead of hardcoding the separator.","dff51382354688607a259b28cf0b8611c7c1b5ee","","api.github.com,git_clone","[u'[""modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-16 17:02:57","[python 2.4] fix ';' Discard node

We cannot just return since this will add a None in the body of the parent.
So we create the node and delete it at the end.

--HG--
branch : rebuild","dffd6500618a6bbfa7293d898bdc959c6fc951a8","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-04-13 07:46:31","Add errors and encoding params to subprocess.Popen stub. Close PyCQA/pylint/issues/1393","e00142f8665c4d9df48d13f4841093ea4bced7cd","","api.github.com,git_clone","[u'[""astroid/brain/brain_subprocess.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-26 19:50:55","Add helpers.is_supertype and helpers.is_subtype, two functions for checking if an object is a super/sub type of another.","e067d1526985ded7f64b12e0c4c277f700d0ca43","","api.github.com,git_clone","[u'[""astroid/tests/unittest_helpers.py"", ""astroid/helpers.py"", ""pylintrc"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-15 18:56:41","Add a new method to Class nodes, 'mro'.

With this method, the method resolution order of a class can be retrieved.","e08c8a7149e4d7a2f7846a7203d627fcf3dacfba","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-11-21 09:22:43","Hardcode the names of the expected unbound method names.","e09802e9b976642c086faa7c57fadaffc6bcfd94","","api.github.com,git_clone","[u'[""astroid/tests/unittest_object_model.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-02 16:19:00","compiler compat representation of Num and Str in _ast

--HG--
branch : _ast_compat","e09f0cd302ac08ce48838a4182827ec911e1e5ba","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","brycepg","2017-10-30 06:01:39","Add transform for attr library to fix unsupported-assignment-operation false positives","e0aadfb79c2e7b577924f717e8458200488c0e32","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_attrs.py"", ""tox.ini"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-15 12:01:08","Staticmethods retrieved with super are functions, not bound methods.","e0d56873c5a8837ca8c11346db368dd33bdab42e","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/tests/unittest_objects.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-08 22:07:18","Simplify setup.py and update documentation for Python 3 changes.","e10cd03c08aaf46308504330b180107e421350d6","","api.github.com,git_clone","[u'[""tox.ini"", ""README.Python3"", ""__pkginfo__.py"", ""MANIFEST.in"", ""test/fulltest.sh"", ""README"", ""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","adimasci","2006-11-21 11:46:37","updated urls for debian package","e15bb69c1fe812451596f7d1c3acc6225d54ca59","","api.github.com,git_clone","[u'[""debian/control"", ""__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-11 15:19:06","Fix pylint issues.","e15d72357706ef2b5d10aced64b0c5749add0599","","api.github.com,git_clone","[u'[""astroid/builder.py"", ""astroid/test_utils.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-25 09:03:10","fix #13944: false positive for class/instance attributes","e15d7f3457f22f07e7fc7a449198504153c64754","","api.github.com,git_clone","[u'[""infutils.py"", ""test/unittest_scoped_nodes.py""]']","False","[]","[{u'raw': u'#13944', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'13944', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-17 15:03:21","Improve the inference of Getattr nodes when dealing with abstract properties from the abc module.

In astroid.bases.Instance._wrap_attr we had a detection
code for properties, which basically inferred whatever
a property returned, passing the results up the stack,
to the igetattr() method. It handled only the builtin property
but the new patch also handles abc.abstractproperty.","e1683ccedb3fd310705f9f5cddc37c037ea60c3c","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/bases.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-03-03 21:19:55","Exceptions have their own object model

Some of exceptions's attributes, such as .args and .message,
can't be inferred correctly since they are descriptors that get
transformed into the proper objects at runtime. This can cause issues
with the static analysis, since they are inferred as different than
what's expected. Now when we're creating instances of exceptions,
we're inferring a special object that knows how to transform those
runtime attributes into the proper objects via a custom object model.
Closes #81","e1b66de78193b910707b665f1623d67dde86ac2f","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/interpreter/objectmodel.py"", ""ChangeLog"", ""astroid/tests/unittest_object_model.py"", ""astroid/protocols.py"", ""astroid/objects.py""]']","False","[]","[{u'raw': u'#81', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'81', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-12 15:57:08","fix utils._are_exclusive bugs
notes :
1) we had a never reached ""if stmt1_branch != stmt1_branch:"" !!!
2) we have to ask for ""stmt in body"", not ""is""

--HG--
branch : _ast_compat","e1be847b36ea5d057c11630150799bf06c8192f2","","api.github.com,git_clone","[u'[""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-10 17:22:24","Set the module name for six.moves fail hook module.","e1c5ffeb98d2c2f52c909b226628cea8a880a64f","","api.github.com,git_clone","[u'[""astroid/brain/pysix_moves.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-12-11 12:00:26","Delete .hgtags","e1e66a66c2ae02b667d85817e48475e73f4f951b","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-10 21:56:00","Fix trailing whitespaces and add the missing code that wasn't added in the previous commit.","e1ed150407b1a14d07371d654516a685867735cf","","api.github.com,git_clone","[u'[""astroid/brain/pysix_moves.py"", ""astroid/nodes.py"", ""astroid/tests/unittest_helpers.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-25 08:26:58","Skip the test either if the platform is Windows or if we are running through tox.","e228063fdc08bfae83a68c1bf1e2f423cf492fed","","api.github.com,git_clone","[u'[""test/unittest_modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-04-11 10:28:32","enhanced generator support. Closes #124340

--HG--
branch : stable","e241e9ef7ab03ef2531f96260d26205a280453c8","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""bases.py"", ""test/unittest_lookup.py"", ""raw_building.py""]']","False","[]","[{u'raw': u'#124340', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'124340', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2018-01-03 10:44:47","Fix lint errors","e260d5ce84c3dea5c0e94e9e3139b0b768d44e22","","api.github.com,git_clone","[u'[""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-09-22 09:27:46","compiler.Function has no decorators attribute prior to python 2.4

--HG--
branch : stable","e2f48476e242dcee95a6de024c937720c39ed29b","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-20 12:14:48","Add `igetattr` method to scoped_nodes.Function.","e2fb500ca122ca77cca21ff3ef159b5be40b87c4","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-15 19:41:30","Add lib_pypy from the real installation of Python

This solves a problem with pypy and virtualenv, the latter deciding
not to copy some of the modules into the virtual environment, such
as datetime, which means that STD_LIB_DIRS needs to be updated in
order to look there as well.","e305a359a5d6a858a67f6bed14ba3d5fcef6eb40","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-03-06 17:10:51","Add missing Python 2 function model attributes.","e3272214736449a585620c00ebfd80286f3a5500","","api.github.com,git_clone","[u'[""astroid/tests/unittest_object_model.py"", ""astroid/interpreter/objectmodel.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-10-28 14:27:18","Module.wildcard_import_names tries to infer non-const entries from __all__.","e33bd26865b4bae43e979fed16a4a96259be66df","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-24 19:02:29","Support AnnAssign in Enum bodies. Close #442","e348d6396a6849cc2b73397dce92c3d1a7921802","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_namedtuple_enum.py""]']","False","[]","[{u'raw': u'#442', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'442', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","radowit","2015-07-25 12:21:11","Removing unnecessary dependencies from tox","e3d14d0f46feaa031a00e31b283bc54cc203b8b1","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-16 14:10:58","fix import bug

--HG--
branch : rebuild","e3d1adbac0a3b8c74b778083e81652a119850236","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-22 19:40:13","Create a callcontext when determining an instance's truth value.","e4108771b68d55e0524c3385940897f9faa9566d","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-09-07 08:23:10","closes #74748: getitem protocal should return Const node, not the bare python value

This one is cute. It's a fix for a crash that occurs on code like

 ""any string literal""[0].upper()

due to the fact that the extracted string literal is not properly wrapped,
but returned as a naked string object.

(patch by google)","e44eee868fab3b72f100da3aeae4338215a9b5a0","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""node_classes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#74748', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'74748', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-13 14:06:34","quick fix for native_repr_tree

--HG--
branch : _ast_compat","e46c2238d1188cd0d3a270516ffbe85a845f8928","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-25 21:35:31","Add get_wrapping_class API to scoped_nodes, which can be used to retrieve the class that wraps a node.","e484101e2a1cae0d2fe13155b7f2337ae271dd7a","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/brain/builtin_inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-15 15:56:52","Simplify & generalize code for module extenders.","e484faf3f3e197bc69790619e1a8e587ec2c34dc","","api.github.com,git_clone","[u'[""astroid/brain/py2pytest.py"", ""astroid/brain/py2stdlib.py"", ""astroid/brain/py2mechanize.py"", ""astroid/brain/py2qt4.py"", ""astroid/manager.py"", ""astroid/__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-30 23:36:45","Star unpacking in assignments returns properly a list, not the individual components. Closes issue #138.","e48ca93098bfd2538bcc43f74bd89b99262c0b93","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/tests/unittest_protocols.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#138', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'138', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-01-21 15:34:54","fix nodes_as_string for 'not' unary operator (need a space)

--HG--
branch : stable","e492f6943dc1912c5396af4880031b874a638a66","","api.github.com,git_clone","[u'[""nodes_as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","invalid-email-address","2012-09-20 07:00:49","fix function fromlineno when some decorator is splited on multiple lines. Closes #50395

--HG--
branch : stable","e494ef993988201e8ea438e224c72a962baaaf8d","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#50395', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'50395', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-03 15:56:09","introduce 'last_child' method
It is used for perfomance while using set_line_info

--HG--
branch : rebuild","e498840fb1952b8c41ed86b975efdc2d33a7cff7","","api.github.com,git_clone","[u'[""node_classes.py"", ""_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-10 13:29:48","py3k: fix unpack_infer : ""(chain(*map(...))"" does not work in py3k","e4a4989bd7613105be3c79b6c95ee59546ed530f","","api.github.com,git_clone","[u'[""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2012-10-05 13:56:35","Added tag logilab-astng-debian-version-0.24.1-1 for changeset 185d76f61c9c

--HG--
branch : stable","e4b3de5f4e7828ab71eb8713c7bf4da20bbfc602","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-18 11:03:24","refactoring subscripts/ slices like _ast : first step

--HG--
branch : _ast_compat","e4e6e9b4c7dbf1b1b669858e762fed1e2f3c0c09","","api.github.com,git_clone","[u'[""nodes.py"", ""nodes_as_string.py"", ""utils.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 14:15:01","Const node compat

--HG--
branch : _ast_compat","e527f03fc7da11be928420b15baffc37c64107ff","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-18 14:36:32","fix subscript inference

--HG--
branch : _ast_compat","e55358b4758385d34d292eb2ee61653374d661fa","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-07-24 16:00:09","Proper metaclass handling.","e556fa2424be3df11c92a18548ea868004e8adb8","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-01 11:24:09","Set the current function as parent for the Generator object inferred from `infer_call_result`.","e55d230cfc4f46eabf76f17691aebce799af2e42","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-20 21:54:39","Understand slices of tuples, lists, strings and instances with support for slices.

Closes issue #137.","e5633fa2ad81df237b5a4b64a09904ae7ae3895e","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/tests/unittest_inference.py"", ""astroid/node_classes.py"", ""astroid/inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#137', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'137', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-04 17:12:50","Class._explicit_metaclass is now a public API, in the form of Class.declared_metaclass.

Class.mro remains the de facto method for retrieving the metaclass
of a class, which will also do an evaluation of what declared_metaclass
returns.","e56ab1ea46bbea42ae2514237fc2f7edc914ebf2","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-09-24 09:16:35","fix generator expression scope","e573154d56961f764f8489c0112d1f94d4ce95d3","","api.github.com,git_clone","[u'[""ChangeLog"", ""nodes.py"", ""test/unittest_builder.py"", ""builder.py"", ""lookup.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","GerardPaligot","2013-10-24 13:46:35","Add some tests for AstroidManager class in unittest_manager.py","e592c4398ef1368eca60c0a2f94c9e7e29e1e9cc","","api.github.com,git_clone","[u'[""test/unittest_manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-09-20 07:41:22","merge","e5aab8a69fc184c8f67ed8228b7b8c5d270c6bd6","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""scoped_nodes.py"", ""ChangeLog"", ""nodes.py"", ""debian/control"", ""MANIFEST.in"", ""test/regrtest.py"", ""DEPENDS"", ""setup.py"", ""builder.py"", ""COPYING"", ""__pkginfo__.py"", ""test/fulltest.sh"", "".hgignore"", ""debian/pycompat""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-09 12:24:06","Fix some of the issues around running test discover from the base directory of the project.","e5b23b84ff17a2fc0c9c1015f312b7cfe9a65d3e","","api.github.com,git_clone","[u'[""astroid/test_utils.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-19 21:42:09","Add /usr/lib and /usr/lib64 to the list of stdlib paths","e60114b2828a0e8b3a6cf6755c78531fc0240f2a","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-07-05 06:11:58","backport stable","e608f465673b3a6b34b7335655ae1b236d13a0e7","","api.github.com,git_clone","[u'[""protocols.py"", ""ChangeLog"", ""inspector.py"", ""test/fulltest.sh"", ""test/unittest_inference.py"", ""node_classes.py"", ""inference.py"", "".hgtags"", ""__pkginfo__.py"", ""scoped_nodes.py"", ""debian/changelog"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-07-11 17:19:42","Fix bugs introduced by merge and formatting","e6216b82884f324cc41a834725d2a992077d6a2d","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/scoped_nodes.py"", ""astroid/brain/pysix_moves.py"", ""astroid/inference.py"", ""astroid/rebuilder.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-09-29 12:13:45","copy context path when cloning inference context, else we may skip undesired inference branches. closes #77187","e642ba33ba1bdde04ac9f0c75a25dc40131c55e7","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""bases.py"", ""test/unittest_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#77187', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'77187', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-28 13:30:21","Fix the signature of __add__.","e6554d4a7b4f2fd62a16c9e5f1ce807ea47a4a9c","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-04-29 07:41:04","SyncManager is a context manager as well.","e6b1c9d70f221c1832f1da9d140ff42321530968","","api.github.com,git_clone","[u'[""astroid/brain/py2stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2017-02-14 18:48:33","Improve inference of namedtuples

Closes PyCQA/pylint#1033","e6c42992fef4bd840800f4f4610d52b16aca155a","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_namedtuple_enum.py""]']","False","[]","[{u'raw': u'PyCQA/pylint#1033', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1033', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-12-27 10:35:34","Fix `as_string` for one element tuples.","e6c7c322d96f63911da3ced497aadaf9968852c7","","api.github.com,git_clone","[u'[""as_string.py"", ""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-04-08 15:15:56","typos and comments","e6d8270029a744c1f7b5a585dac56a3fc3c6cb8d","","api.github.com,git_clone","[u'[""inspector.py"", ""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-12-15 09:26:52","Filter non-inferables nodes when inferring binary operations

Close #467","e6e527687c34a57cb4411f8be216908cbe370965","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/tests/unittest_protocols.py""]']","False","[]","[{u'raw': u'#467', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'467', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-07 00:43:39","Fixed some more places were the wrong module was imported in Python 3.","e6f3467a4f637b37d247595e6cff8c2705161938","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""test/data_py3/module2.py"", ""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-25 13:38:05","fix #9515","e789042eb61acf8bb4f0fa90ebfa124d5d19438d","","api.github.com,git_clone","[u'[""infutils.py"", ""scoped_nodes.py"", ""inference.py"", ""test/unittest_inference.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#9515', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'9515', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-01-05 13:52:06","add support for object.__new__ (base patch provided by Chris Torek)

The builtin object.__new__ function takes a class and returns
an object of that type, i.e., we should infer the result has
whatever type we can find from the first argument.

To make this work (with Python2.5 at least), we need to note
that built in functions whose __module__ is None are really
in the __builtin__ module.","e79851b19ff00bb94f141f6037128ae186e49213","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""bases.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-02-18 07:14:39","applied patch proposed by Edward K. Ream / Tom Fleck, see https://bugs.launchpad.net/pylint/+bug/456870, close #19641

--HG--
branch : stable","e79a8fc5fdf8a5ea25a56bc28e06e034541e18fd","","api.github.com,git_clone","[u'[""inference.py"", ""ChangeLog""]']","False","[u'https://bugs.launchpad.net/pylint/+bug/456870']","[{u'raw': u'#19641', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'19641', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-10 17:09:32","Improve the inference of six.moves.

This patch improves especially the inferrence when using `from ... import ...`
syntax. Also, we added a new fail import hook for six.moves, which fixes the
import-error false positive from pylint. Closes issue #107.","e7b1d3681c8e25a4f10bc1fdc07fa280fd70c26a","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/pysix_moves.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#107', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'107', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-24 12:46:16","Remove trailing whitespace.","e7c5a99cc8a8f6828d0c7e2cd1293c19a4c9aed9","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-10 17:58:34","Reenable the debug for drone.io.","e7ce24cc36e4e8890f76caaa52bcd5b158c19e4d","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-03-09 07:55:43","remove print","e7dfc6c790e3ac97805e4e8fc15f9ece59e52d0a","","api.github.com,git_clone","[u'[""inference.py"", ""test/fulltest.sh""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-11-25 09:05:17","d-t-w","e7f00c2389e5567bf04f141a33e8afb2174e7324","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-16 17:02:26","old style class instances are not hashable

--HG--
branch : _ast_compat","e7f584ce57c76c55d5d1e1f3754be9a9b7018ac0","","api.github.com,git_clone","[u'[""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-11-15 08:07:28","0.16.2","e7fe516fca8cac42ed3a6fb4c6c55192c4062cb9","","api.github.com,git_clone","[u'[""debian/control"", ""__pkginfo__.py"", ""debian/changelog"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-09-14 00:20:35","Fix indentation changed in merge, again","e7fe58a7137123080aa4431abf7a52b5e25142c2","","api.github.com,git_clone","[u'[""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-26 22:53:51","Minimal syntactic compatibility with Python 2.6. Closes issue #76.","e802c8fa0e8b85c4ac5962f824b8415a20a16e30","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[{u'raw': u'#76', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'76', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-02-27 11:17:47","Added tag logilab-astng-debian-version-0.24.2-1 for changeset c48aabd3865a

--HG--
branch : stable","e80ec5e857e08f5899d38ca80a38fad14956cb51","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","alexandre.fayolle@logilab.fr","2008-02-14 14:59:03","updated debian package","e82955b5eee4d93a3860e42f91c9e92c8862a0e5","","api.github.com,git_clone","[u'[""debian/control"", ""debian/changelog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-27 00:38:55","Add test for issue #183.","e84e6ed52a188d3753e03b39354edcdd68d666f1","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py""]']","False","[]","[{u'raw': u'#183', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'183', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2006-10-03 09:47:19","    * grrr, fixed python 2.3 incompatibility introduced by generator expression
      scope handling","e867e2ee30ea52426c144bac6b5d54077b2b2368","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-22 14:18:37","cleanup: remove unused IgnoreChild exception","e87f9321919e5f2b1fc3c6e3b88a5cdf9d6e413e","","api.github.com,git_clone","[u'[""utils.py"", ""_exceptions.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-26 17:38:16","some small cleanup and bugfixes

--HG--
branch : _ast_compat","e8d6515c15f4cc14113a9cba4ee60ebc463b70cb","","api.github.com,git_clone","[u'[""builder.py"", ""inference.py"", ""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-05 19:01:50","Keyword as_string

--HG--
branch : _ast_compat","e8f09a5df05840b9219e199980ef825df5be88dc","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-06 17:07:52","Use raise directly rather than reraise() in decorators: reraise in this case only adds noise to the tracebacks on 2.7, and when this code is changed to use yield from, there shouldn't be additional tracebacks on 3 either","e931c49a7a22d0939dfaea6bf55b485afc6448d3","","api.github.com,git_clone","[u'[""astroid/decorators.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-03-12 11:56:23","Move the iteration inside the try branch, which makes the quickstart redundant","e93dd9919b263ff3e9782b64fe5f387acd8d1bda","","api.github.com,git_clone","[u'[""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 09:10:29","set lineno

--HG--
branch : _ast_compat","e97acdb2c314835fe52ea49e0886d97a180d0d9f","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-08 09:35:53","as_string: fix explicit relative imports; add test","e997206801738d624e5bb49bf90e88188f26b0f7","","api.github.com,git_clone","[u'[""as_string.py"", ""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-07-24 11:44:16","more test fixes to avoid inter-dependency issues","e9c208da68b0dc9b3654ac9fab8b8e38fb44f357","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""manager.py"", ""test/unittest_python3.py"", ""test/unittest_regrtest.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2014-06-10 16:48:00","Handle __metaclass__ defined at the module level

According to the doc
(https://docs.python.org/2/reference/datamodel.html#customizing-class-creation):

The appropriate metaclass is determined by the following precedence rules:

- If dict['__metaclass__'] exists, it is used.
- Otherwise, if there is at least one base class, its metaclass is used
  (this looks for a __class__ attribute first and if not found, uses its
  type).
- Otherwise, if a global variable named __metaclass__ exists, it is used.
- Otherwise, the old-style, classic metaclass (types.ClassType) is used.

The third case was not handled by node.metaclass().

Remove metaclass lookup from the rebuilder, handle it all in
Class._explicit_metaclass() instead, and use that in _newstyle_impl if
possible.

Remove test_newstyle_and_metaclass_bad, as I think the returned value in
this test is irrelevant (it's a TypeError anyway, so you can't actually
build that class), and replace it with a test using nested classes.

Closes issue#33","e9ddb83591ba90c1c9ce049067ee5eb48ead1981","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""rebuilder.py""]']","False","[u'https://docs.python.org/2/reference/datamodel.html#customizing-class-creation']","[{u'raw': u'issue#33', u'refstyle': u'o#d', u'parts': [u'issue', u'astroid', u'33', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-20 07:35:21","Enum's functional form know about __members__","e9fe6cb05b0dc868250a93edf98b8d0a31a39b6e","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_namedtuple_enum.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-26 15:13:06","Remove trailing whitespace.","ea1d60a4b9adea7949d99c660b22128eb87d0455","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 14:11:56","more 2.4 fixes

--HG--
branch : _ast_compat","ea1f3c714637ee810c169345c678520caa4b0456","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""scoped_nodes.py"", ""rebuilder.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-29 13:58:58","Add a new SuperError exception subclass, SuperArgumentTypeError, which is raised when there's a problem with any argument of the super call (invalid types).","ea2c98310d103dfa9bf596d9c54a873e401356cf","","api.github.com,git_clone","[u'[""astroid/objects.py"", ""astroid/exceptions.py"", ""astroid/tests/unittest_objects.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-23 17:37:02","add module for RebuildVisitor

--HG--
branch : _ast_compat","ea3b7d744c1ae3e6d8121e4d777228f4f4426de1","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-10 17:08:43","Drop the debug support in tox.ini.","ea61e00bdcbd40cfca9ce793e3f84024cdfe4092","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-12-18 14:23:36","fix bad name error

--HG--
branch : stable","ea93168e0cbdbbf4a79e36ccda4543d75df2dd31","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2008-09-10 12:14:02","prepare version","ea956b782ee9296e2ddd77aa0a63a051e5f1ff17","","api.github.com,git_clone","[u'[""debian/control"", ""__pkginfo__.py"", ""debian/changelog"", ""test/data2/__init__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-06 19:20:36","Update the docstring for has_dynamic_getattr to better reflect reality.","eafbf498897724534f550336d843ddb3feeb2591","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-05 12:35:05","test and fix (no crash at least) block_range methods

--HG--
branch : _ast_compat","eb03fdf578cd05b6e8ce8f6362835039d8657968","","api.github.com,git_clone","[u'[""nodes.py"", ""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-01 00:01:58","Merged in jarradhope/astroid (pull request #73)

add annotations to as_string method of Arguments","eb06d27fc1abcbb6e7466f4b03d4b286ccfb8121","","api.github.com,git_clone","[u'[""astroid/node_classes.py"", ""astroid/as_string.py""]']","False","[]","[{u'raw': u'#73', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'73', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-11-05 06:10:46","Merged in AndroWiiid/astroid/dev (pull request #12)

Manager","eb477e693f4e8eba11e7bf9180e4419ad2f9c5df","","api.github.com,git_clone","[u'[""test/unittest_manager.py"", ""test/unittest_raw_building.py""]']","False","[]","[{u'raw': u'#12', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'12', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","eevee","2014-03-21 21:57:11","Replace the regex-based namedtuple predicate.","eb4cfdf7d5ab13616fda66c17ba3f822d7ef82ac","","api.github.com,git_clone","[u'[""brain/py2stdlib.py"", ""__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-03 15:52:23","[R] de-monkeypatching set_line_info method and introduce StmtMixIn","eb5abeeca27645211fa77e6c3b40cccd7d96c6af","","api.github.com,git_clone","[u'[""lookup.py"", ""nodes.py"", ""node_classes.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-01 18:02:51","first series of obvious corrections

--HG--
branch : rebuild","eb6090eaec9eaa29e3394a6a9e6059b3107e454c","","api.github.com,git_clone","[u'[""raw_building.py"", ""node_classes.py"", ""rebuilder.py"", ""scoped_nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-11-03 05:42:57","Improve InferenceError for remove_nodes","eb879f79ce08c6ab0c122dbc7e8b717fc7010c2b","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/decorators.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-12-03 12:45:56","Let the type error propagate as an AstroidTypeError.","eb9642ffeeab679b952e785be88916a450d317f7","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/exceptions.py"", ""astroid/node_classes.py"", ""astroid/inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-27 17:42:12","Add configuration for .github issues.","ebdaae2e1ef7b6447927e0471da86885e89e0f78","","api.github.com,git_clone","[u'["".github/ISSUE_TEMPLATE.md"", "".github/PULL_REQUEST_TEMPLATE.md""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 09:41:37","conflict merge

--HG--
branch : _ast_compat","ebe5cb67bdfc988e9df3d4ec42db531439cca372","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""protocols.py"", ""nodes_as_string.py"", ""nodes.py"", ""_nodes_compiler.py"", ""test/unittest_builder.py"", ""_nodes_ast.py"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-27 15:43:00","Improve the inference of binary arithmetic operations (normal and augmented)

This patch completely changes the way how binary and augmented operations are
inferred, trying to be as compatible as possible with the semantics
from the language reference.","ebeae1a3f504dafe12921180103729aaf1f22cca","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/protocols.py"", ""astroid/inference.py"", ""pylintrc"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-02 13:41:49","Update modutils.py from logilab.common and add support for namespace packages

This patch is mostly a backport from logilab.common. The addition is the
support for pkg_resources.declare_namespace, which created a good
deal of problems so far with regard to virtualenvs.","ebeb9ef360ababc9b7b5b46488fa1bdd80bb4e61","","api.github.com,git_clone","[u'[""astroid/modutils.py"", ""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-16 08:47:37","Add inference support for boolean operations (`and` and `not`).","ec32865ac025104c4bb200e2b6561e8da9b3bb83","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/node_classes.py"", ""astroid/inference.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-22 09:11:20","make pylint happier : mention node attributes

* mention node attributes in the classes to make pylint happier
* set doc and name for Class, Function and Module in the constructor

--HG--
branch : rebuild","ec4ce3ab0dc8d3e48867ccdc3d928d2486d59599","","api.github.com,git_clone","[u'[""rebuilder.py"", ""ChangeLog"", ""_nodes_compiler.py"", ""node_classes.py"", ""_nodes_ast.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-01-16 19:22:22","Prepare the release.","ec67d3adfc1c8dce5dea8b39f8bf17331e9bbc4d","","api.github.com,git_clone","[u'[""doc/source/conf.py"", ""astroid/__pkginfo__.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-03 16:28:29","Backquote node

--HG--
branch : _ast_compat","ec6d214f4be422bbb2a59e636ab8750e755a472c","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 15:53:41","py3k test: ListComp variables are no more leaking out","ec7f491faf4e728f9d31753abf5ca05299b0725a","","api.github.com,git_clone","[u'[""test/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-18 17:12:34","Explain complicated Slice/Subscript situation

--HG--
branch : _ast_compat","ec938b0a86f82a5c1732af6614573aea5b4f0556","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-02 11:54:14","handling If node

--HG--
branch : _ast_compat","ecaabfb7faca38d1e5c4afdeceefd21a552801dd","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-04-30 11:06:07","Merge pull request #333 from giuseppe/ignore-pygiwarnings

Ignore PyGIWarning","ecb3de082c77db8493f0cc760209bcc160536b9e","","api.github.com,git_clone","[u'[""astroid/brain/brain_gi.py""]']","False","[]","[{u'raw': u'#333', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'333', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 17:27:14","fix imports and names in scoped_nodes module

--HG--
branch : rebuild","ecc3650f51bc8f52f1bfc10c09d00246f3c2af27","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-24 12:59:17","[compiler]: set assignment context for Comprehension nodes

--HG--
branch : rebuild","ecc4730016633059baeeff44aeab5dd8f824ba75","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2014-06-30 08:38:46","Stop looking at the __metaclass__ class attribute for python3

Python 3 only considers the `metaclass` keyword argument.","ecd1e616e7ba45fc986063d5de3d2bc774f9d206","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""test/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 16:41:41","fix some more infos

--HG--
branch : rebuild","ece63ef432fc131bb3372df912c3dae7b1a8b7a9","","api.github.com,git_clone","[u'[""rebuilder.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 08:50:57","test slice nodes

--HG--
branch : _ast_compat","eced5a1fa3c33dad9b8d69d76140c117b804c705","","api.github.com,git_clone","[u'[""test/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 13:59:22","Added tag astng 0.18.0 for changeset 3f6b03d85830","ed1fff0dfff60a8a74401057547f1f14390fe2d8","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-03-08 08:08:35","Merged in PCManticore/astroid/yield_from (pull request #23)

Add yield_from property for Yield nodes.","ed82d0d515da88a8d0b659ac30aec9d245a077d7","","api.github.com,git_clone","[u'[""rebuilder.py"", ""nodes.py"", ""ChangeLog"", ""test/unittest_python3.py"", ""node_classes.py"", ""scoped_nodes.py"", ""as_string.py""]']","False","[]","[{u'raw': u'#23', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'23', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-10-18 14:40:56","get back gobject introspection from pylint-brain","eddab7fd2df1a6c7a99c7c8e739313fa3a4169c8","","api.github.com,git_clone","[u'[""brain/py2gi.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-26 12:35:04","Revert the tox change, since drone.io fails.","ede7af4322221c74c476a4f384cf038ae1d68a86","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2010-05-11 13:07:06","Added tag logilab-astng-debian-version-0.20.1-1 for changeset c863d9cc6c48

--HG--
branch : stable","ee38728de2375ed2cf04ec6b344c2ca85da07505","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-28 14:08:43","py3k: TreeRebuilder3k class to have all 3k relative stuff together","ee90bd3e2c4ab12f6670f19cef43124d1950e8a3","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-08 08:13:49","Remove trailing whitespace.","ee91a74c45a453089e1c2887ebadd486cfc6a9bb","","api.github.com,git_clone","[u'[""astroid/tests/unittest_raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-12-17 08:41:16","patch Changelog

--HG--
branch : stable_0.19.2","eea89b7424b013b0139726c141471a527473c108","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-13 14:13:39","fix basenames default value

--HG--
branch : _ast_compat","eee06d06b0420a829de08b91a6e91eb2da1a3166","","api.github.com,git_clone","[u'[""raw_building.py"", ""_nodes_compiler.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","rogalski","2016-12-30 16:18:19","Improve inference of OrderedDict (#381)","ef05be71134054abaa3aa68e4c7ea67d701e5c13","","api.github.com,git_clone","[u'[""astroid/brain/brain_collections.py""]']","False","[]","[{u'raw': u'#381', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'381', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-06 08:06:00","Remove decorator support for Python < 2.6, since it's dead code anyway.","ef15e0d476f5ca765a79da8400d268a284129476","","api.github.com,git_clone","[u'[""astroid/rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-01 00:28:04","Add annotation support for function.as_string(). Closes issue #37.","ef3069aa150720756de720f65151cab8ed665ea3","","api.github.com,git_clone","[u'[""astroid/tests/unittest_python3.py"", ""astroid/node_classes.py"", ""astroid/as_string.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#37', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'37', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-14 15:31:32","Add a new option to AstroidManager for controlling the AST peephole optimizer

The new option, 'optimize_ast', controls if peephole optimizer should be enabled or not.
This prevents a regression, where the visit_binop method wasn't called
anymore with astroid 1.3.5, due to the differences in the resulting AST.
Closes issue #82.","ef4fa9c67dd4682472214f98887ce2ac743c9aaf","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inspector.py"", ""ChangeLog"", ""astroid/tests/unittest_peephole.py"", ""astroid/rebuilder.py"", ""astroid/manager.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[{u'raw': u'#82', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'82', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-05-09 12:58:31","Add basic support for understanding context managers.

Currently, there's no way to understand whatever __enter__ returns in a
context manager and what it is binded using the ``as`` keyword. With these changes,
we can understand ``bar`` in ``with foo() as bar``, which will be the result of __enter__.
There's no support for contextlib.contextmanager yet.","ef5069bec5663622a33f0071206fc8a50b732fdf","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/protocols.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","obsc","2015-08-21 00:46:17","Fix unknown getattr and igetattr methods","ef82ddcffab157d42b0d689ba4cf88ec08b3c692","","api.github.com,git_clone","[u'[""astroid/brain/builtin_inference.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-04-13 11:32:37","Functional form of enums support accessing values through __call__.","efb72b8f11528cff73739023b6e2273d5c5b022d","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_stdlib.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-12-04 16:59:05","merge","efe07bef06c37997010396d6749991f28262a9d1","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-12 15:51:11","lineno for ExceptHandler; XXX

--HG--
branch : _ast_compat","f00261008c90b41b975034172d01bd47fee3df6e","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-09-29 12:13:46","closes #77253: provide a way for user code to register astng transformers","f0271f597c2d75e5e8927c6116a24c365cbdaa12","","api.github.com,git_clone","[u'[""test/unittest_regrtest.py"", ""builder.py"", ""manager.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#77253', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'77253', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-08-14 11:15:31","Proper handling of metaclass for class.as_string.

--HG--
branch : metaclass","f0662f4e8ac0f4cb3e1242a4beb6d3d4944f156c","","api.github.com,git_clone","[u'[""as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-08-24 08:08:05","Export two helpers for verifying the type of a spec.","f06b62a3e1bad9b0455dac83648677059227390c","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-01-09 23:11:58","Remove statements which don't need to be explained in the README.","f0b791418cf528307d6aede7cd1e998a79216e8f","","api.github.com,git_clone","[u'[""README.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","dmand","2015-11-04 10:53:03","Add __getitem__ method to collections.deque inferface description.","f0fe52f41df1f8961777da1d6e1d04897c6cc9ba","","api.github.com,git_clone","[u'[""astroid/brain/brain_stdlib.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-25 16:34:58","Emit a warning when an old AST name is used in an isinstance call.","f14183ee895c71cb5bdc4706433b4965df958a68","","api.github.com,git_clone","[u'[""astroid/tests/unittest_nodes.py"", ""astroid/node_classes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-21 13:51:09","add minimal class decorators support

define ""decorators = None"" on class level","f17f17a4d01f4250b9670754ee646ffcc0b60d98","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-30 18:46:38","Add some fixes which enhances the Jython support.

The fix mostly includes updates to modutils, which is
modified in order to properly lookup paths from live objects,
which ends in $py.class, not pyc as for Python 2,
Closes issue #83.","f188f3e61022c173d62c9e1609ce5983c0153971","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py"", ""astroid/tests/unittest_brain.py"", ""astroid/tests/unittest_regrtest.py"", ""ChangeLog"", ""astroid/modutils.py"", ""astroid/tests/unittest_inference.py"", ""astroid/raw_building.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/resources.py"", ""astroid/builder.py"", ""astroid/tests/unittest_manager.py""]']","False","[]","[{u'raw': u'#83', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'83', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-21 13:10:22","factorize, fix some bugs

--HG--
branch : rebuild","f19c445cf15e40d383ea7bff70b00242a4686691","","api.github.com,git_clone","[u'[""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-14 08:55:57","Disable test_4 for Python 2, because imp.find_module is broken there as well.","f1b841f0f0e7794d007ef1e81165faf1e42c374c","","api.github.com,git_clone","[u'[""astroid/tests/unittest_modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-12 11:27:21","Add Call.starargs and Call.kwargs properties

They were added in order to have a minimum level of backward
compatibility, since they were removed from the class. This is also
an easy way to retrieve them, instead of looking explicitly for them
in args or keywords respectively.","f1da32b6ab1f65d748116a188b8964ac37c0ccec","","api.github.com,git_clone","[u'[""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-30 08:37:54","Simplify the lookup for the metaclass; add comments for the YES node tests.

--HG--
branch : ancestors","f1ed6e4d50b3e3fef31a214f534b2611fe1f141d","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""test/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-07-25 14:05:45","Fix get_module_files documentation in modutils.

--HG--
branch : no-logilab-common","f22243401b2f72ae3fbd8083f9428e3f2af14168","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-07-24 14:29:12","Return new classes when inferring calls to type(name, bases, ns) and its subtypes.","f23249089f36c2a9beff3cdf45fb564f025617ed","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-14 17:30:27","set .name for AssName / DelName nodes

--HG--
branch : rebuild","f23c2b39aa2cad41b6e82510179854cd167985a7","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","marienz@gentoo.org","2007-03-02 01:47:41","Fix a typo in unittest_inference and make it work both when invoked directly and when invoked from pytest.","f2669e25832de281f4a798a97a4bb136f7292648","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-26 09:41:56","first overlook to change the needed classes in _nodes_ast

--HG--
branch : rebuild","f28836c5ce16b64e5dea8cbc467d22df7faa586b","","api.github.com,git_clone","[u'[""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-11 20:36:13","Move proxy_alias function to util.py","f293a83d04ae5471b8e974aa994af062ebb3116b","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/util.py"", ""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-07 14:22:56","py3k: builtins vs __builtin__ : get the right name of the builtins module","f2b1f2efd8e5a1653f7d86836606353eab594b99","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-13 16:28:51","[py3k] fix scoped nodes tests","f2d00d4026a9c2ee6038e9b03eb9a75c6a5a0d41","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""test/unittest_scoped_nodes.py"", ""test/data/module.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-07-24 12:08:54","Add metaclass support for Class node.","f2d11a2251f17479da72a71b645dd4aae7f10d65","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-17 15:00:56","Merged in BioGeek/astroid/BioGeek/remove-superfluous-quotation-mark-in-doc-1418828415832 (pull request #65)

Remove superfluous quotation mark in docstring","f34ede0568e62c8fb9927356c180ae9c0a654c41","","api.github.com,git_clone","[u'[""astroid/manager.py""]']","False","[]","[{u'raw': u'#65', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'65', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-08-13 13:09:25","Add tests.

--HG--
branch : metaclass","f365d647f04ad798a231c40e0666bccaa32eb715","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""test/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-16 11:21:57","Don't reinstall astroid, use the one that's already available.","f3a1972f9ad7b26e0fbc250d752d90d78bb0c88d","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-19 11:46:06","(painful) merge","f3b2c768529575e2e0e3f241c474f9383836bfd2","","api.github.com,git_clone","[u'[""patchcomptransformer.py"", ""test/unittest_lookup.py"", ""test/unittest_inference.py"", ""__pkginfo__.py"", ""scoped_nodes.py"", ""README._ast_compatibily"", ""nodes_as_string.py"", ""infutils.py"", ""inspector.py"", ""astutils.py"", ""test/unittest_utils.py"", ""test/unittest_scoped_nodes.py"", ""test/data/module2.py"", ""test/unittest_inspector.py"", ""test/unittest_builder.py"", ""builder.py"", ""_exceptions.py"", ""utils.py"", ""TODO"", ""raw_building.py"", ""test/unittest_nodes.py"", ""protocols.py"", ""ChangeLog"", ""nodes.py"", ""rebuilder.py"", ""test/data/module.py"", ""__init__.py"", ""_nodes_compiler.py"", ""inference.py"", ""_nodes_ast.py"", ""lookup.py"", ""manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-09-21 07:05:16","Check for both args and keyword arguments when extracting namedtuple's params. Close #450","f3d974ded9b457dd8c4584193f98144d3dc979b8","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""astroid/brain/brain_namedtuple_enum.py""]']","False","[]","[{u'raw': u'#450', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'450', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","living180","2010-10-09 19:33:51","make dictionary comprehensions and set comprehensions have their own scope, like generator expressions","f3f901973a7aa6f9137d9da9480d9cf15455eab2","","api.github.com,git_clone","[u'[""nodes.py"", ""node_classes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-12-16 15:45:48","master astroid is now 1.6.0","f40f50f3cd60c6d5c8e3202e5a8a47e07f864ebc","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-02 18:57:39","Add support for understanding class creation using `type.__new__(mcs, name, bases, attrs)``

Until now, inferring this kind of calls resulted in Instances, not in classes,
since astroid didn't understand that the presence of the metaclass in the call
leads to a class creationg, not to an instance creation.","f43e15e0f6f91bd920f2d336afdad6688932fa0e","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/bases.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-27 13:18:55","Added tag logilab-astng-debian-version-0.20.4-1 for changeset b3681c635873","f458ad694e1cedb71dd3e5f52c2050d6b406f471","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-06-18 17:15:23","fix inference, some node classes have extra arguments there (eg import nodes)","f45bf8704d38db4bdc36135d1f5aa9d518943b79","","api.github.com,git_clone","[u'[""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-14 16:17:35","cleanup : do more boot strapping in astng_boot_strapping

* refactor const_factory and add a note in scoped_nodes","f498037505dfc0d9ebc37a852b2fe38c5935e2c8","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""node_classes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-02-26 23:06:06","use lgc.testlib to get py2.6 unittest2 compat","f49b3d6aceacccf9e1451c181a5fb3d49b78935f","","api.github.com,git_clone","[u'[""test/unittest_inspector.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-20 18:12:50","fix ""ifs"" for Comprehension nodes (compiler)

--HG--
branch : rebuild","f4bb870e8f5a072804107b10ac8f9b6ebe0b12df","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-04-21 15:04:41","inspector : avoid double parsing of AssName n odes","f4c12356db571e08d87d8b4f7fc9f6d45e60a52f","","api.github.com,git_clone","[u'[""inspector.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-11-04 12:08:39","Use keyword arguments to improve clarity.","f4dcfca7263b085cb14c88fd3be6b928d9fe0704","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-31 08:13:42","Remove unused import.","f4e7d089a9d2bfa57cee1211825f4666b09567b2","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2016-02-10 14:15:02","doc: fix build

Stop hardcoding an outdated version number, don't reference nonexistent
_static directory, and fix ""inference"" module reference.

Signed-off-by: Julien Cristau <julien.cristau@logilab.fr>","f505daf0bdd2b4dab1297b75f47e1f047bf142ec","","api.github.com,git_clone","[u'[""doc/source/conf.py"", ""doc/source/inference.rst""]']","False","[]","[]","[u'@logilab']","[]"
"commit_messages","","pycqa","astroid","living180","2010-10-11 13:04:39","[refactoring] dictionary comprehensions and set comprehensions scope","f529b2e487e546d2266f7477a6ca998f11773014","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-29 19:39:35","Merge with default.

--HG--
branch : ancestors","f541607b5a9747f415f3c4b8ec6f2db985b5d3f8","","api.github.com,git_clone","[u'[""ChangeLog"", ""test/unittest_builder.py"", ""builder.py"", ""manager.py"", ""scoped_nodes.py"", ""raw_building.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-09-28 22:03:41","Fix a crash which occurred when extra_decorators was considering non-class level assignments to the same name as decorator calls.","f570ad4e66f52f2d01fccfb2e63b8dbdb4a7761d","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-02-16 18:44:53","Set the parent to the BinOp node when inferring nodes created during binary operations

In order to do so, we had to change the signature of infer_binary_operation to receive
the binary operation instead of the operator itself.","f586ba7667c63b68b604ade4df85ce9014efae67","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/inference.py"", ""astroid/tests/unittest_regrtest.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2011-07-08 10:08:07","closes #70497: Crash on AttributeError: 'NoneType' object has no attribute '_infer_name' by fixing constant factory","f5b157f004d4f17d1cf81bcf1fa3f9860d9a92eb","","api.github.com,git_clone","[u'[""node_classes.py"", ""ChangeLog""]']","False","[]","[{u'raw': u'#70497', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'70497', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-03 11:15:11","Move pyreverse specific modules and functionality back into pyreverse

We moved astroid.manager.Project and astroid.manager.Manager.project_from_files
to pyreverse.inspector.","f5cb10b553086ed8fc49cf0213418a8469e1c5c8","","api.github.com,git_clone","[u'[""ChangeLog"", ""astroid/__init__.py"", ""astroid/scoped_nodes.py"", ""astroid/manager.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-08 16:55:44","add visit_delete method

--HG--
branch : _ast_compat","f5d2b0108fad46fbb26861f2f29b206bd7c4005b","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-09 21:44:59","Merge all test data into a single package per Python version.

Also modernized a lot of test code. This makes it possible to run the
tests from both the base directory of the project as well as the
astroid package.

Since the packages have the same name for Python 2 and 3, there is less
version-dependent code in the tests.","f5e58be597e4866b0ef34cf874693240124b0693","","api.github.com,git_clone","[u'[""astroid/tests/data/appl/myConnection.py"", ""astroid/tests/unittest_lookup.py"", ""astroid/tests/data_py3/find_test/module.py"", ""astroid/tests/data_py3/notall.py"", ""astroid/tests/data/find_test/__init__.py"", ""astroid/tests/regrtest_data/package/absimport.py"", ""astroid/tests/testdata/python3/data/absimport.py"", ""astroid/tests/testdata/python3/data/noendingnewline.py"", ""astroid/tests/testdata/python2/data/module1abs/__init__.py"", ""astroid/tests/testdata/python3/data/find_test/module2.py"", ""astroid/tests/data/module1abs/__init__.py"", ""astroid/tests/unittest_regrtest.py"", ""astroid/tests/data_py3/module.py"", ""astroid/tests/testdata/python2/data/find_test/nonregr.py"", ""astroid/tests/testdata/python2/data/find_test/noendingnewline.py"", ""astroid/tests/testdata/python3/data/absimp/__init__.py"", ""astroid/tests/data/lmfp/__init__.py"", ""astroid/tests/data_py3/MyPyPa-0.1.0-py2.5.egg"", ""astroid/tests/testdata/python3/data/__init__.py"", ""astroid/tests/testdata/python3/data/descriptor_crash.py"", ""astroid/tests/testdata/python3/data/recursion.py"", ""astroid/tests/testdata/python3/data/absimp/sidepackage/__init__.py"", ""astroid/tests/testdata/python2/data/MyPyPa-0.1.0-py2.5.zip"", ""astroid/tests/testdata/python2/data/unicode_package/__init__.py"", ""astroid/tests/data2/suppliermodule_test.py"", ""astroid/tests/data/nonregr.py"", ""astroid/tests/testdata/python2/data/__init__.py"", ""astroid/tests/testdata/python3/data/nonregr.py"", ""astroid/tests/data/notall.py"", ""astroid/tests/regrtest_data/unicode_package/core/__init__.py"", ""astroid/tests/data_py3/module1abs/__init__.py"", ""astroid/tests/testdata/python2/data/nonregr.py"", ""astroid/tests/testdata/python3/data/unicode_package/core/__init__.py"", ""astroid/tests/data_py3/find_test/nonregr.py"", ""astroid/tests/testdata/python2/data/SSL1/Connection1.py"", ""astroid/tests/testdata/python2/data/absimp/sidepackage/__init__.py"", ""astroid/tests/data/MyPyPa-0.1.0-py2.5.zip"", ""astroid/tests/testdata/python3/data/package/import_package_subpackage_module.py"", ""astroid/tests/testdata/python3/data/find_test/nonregr.py"", ""astroid/tests/testdata/python3/data/package/subpackage/__init__.py"", ""astroid/tests/testdata/python3/data/module.py"", ""astroid/tests/testdata/python2/data/find_test/module.py"", ""astroid/tests/testdata/python2/data/SSL1/__init__.py"", ""MANIFEST.in"", ""astroid/tests/testdata/python2/data/absimp/string.py"", ""astroid/tests/testdata/python3/data/absimp/string.py"", ""astroid/tests/data/module.py"", ""astroid/tests/regrtest_data/package/import_package_subpackage_module.py"", ""astroid/tests/data_py3/MyPyPa-0.1.0-py2.5.zip"", ""astroid/tests/testdata/python3/data/unicode_package/__init__.py"", ""astroid/tests/testdata/python3/data/email.py"", ""astroid/tests/data_py3/noendingnewline.py"", ""astroid/tests/testdata/python3/data/lmfp/__init__.py"", ""astroid/tests/testdata/python2/data/absimport.py"", ""astroid/tests/data_py3/lmfp/foo.py"", ""astroid/tests/testdata/python3/data/appl/myConnection.py"", ""astroid/tests/resources.py"", ""astroid/tests/testdata/python2/data/MyPyPa-0.1.0-py2.5.egg"", ""astroid/tests/regrtest_data/package/hello.py"", ""astroid/tests/testdata/python2/data/package/subpackage/module.py"", ""astroid/tests/data/absimport.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/tests/data/find_test/module.py"", ""astroid/tests/testdata/python2/data/absimp/__init__.py"", ""astroid/tests/regrtest_data/descriptor_crash.py"", ""astroid/tests/unittest_modutils.py"", ""astroid/tests/testdata/python3/data/suppliermodule_test.py"", ""astroid/tests/data_py3/format.py"", ""astroid/tests/testdata/python2/data/format.py"", ""astroid/tests/testdata/python2/data/appl/myConnection.py"", ""astroid/tests/testdata/python2/data/lmfp/foo.py"", ""astroid/tests/data_py3/nonregr.py"", ""astroid/tests/regrtest_data/package/subpackage/module.py"", ""astroid/tests/data_py3/find_test/module2.py"", ""astroid/tests/data_py3/__init__.py"", ""astroid/tests/testdata/python2/data/module1abs/core.py"", ""astroid/tests/data/SSL1/__init__.py"", ""astroid/tests/testdata/python2/data/lmfp/__init__.py"", ""astroid/tests/testdata/python3/data/module1abs/__init__.py"", ""astroid/tests/testdata/python3/data/find_test/module.py"", ""astroid/tests/unittest_inference.py"", ""astroid/tests/testdata/python2/data/package/absimport.py"", ""astroid/tests/testdata/python3/data/SSL1/__init__.py"", ""astroid/tests/testdata/python3/data/module2.py"", ""astroid/tests/data/email.py"", ""astroid/tests/data/module2.py"", ""astroid/tests/regrtest_data/absimp/string.py"", ""astroid/tests/testdata/python3/data/lmfp/foo.py"", ""astroid/tests/data/format.py"", ""astroid/tests/data_py3/SSL1/Connection1.py"", ""astroid/tests/data_py3/SSL1/__init__.py"", ""astroid/tests/data/find_test/nonregr.py"", ""astroid/tests/data_py3/find_test/noendingnewline.py"", ""astroid/tests/data_py3/find_test/__init__.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_manager.py"", ""astroid/tests/testdata/python2/data/suppliermodule_test.py"", ""astroid/tests/regrtest_data/unicode_package/__init__.py"", ""astroid/tests/testdata/python3/data/notall.py"", ""astroid/tests/data/module1abs/core.py"", ""astroid/tests/testdata/python3/data/package/subpackage/module.py"", ""astroid/tests/data/__init__.py"", ""astroid/tests/data/MyPyPa-0.1.0-py2.5.egg"", ""astroid/tests/testdata/python2/data/notall.py"", ""astroid/tests/testdata/python2/data/package/import_package_subpackage_module.py"", ""astroid/tests/data/lmfp/foo.py"", ""astroid/tests/testdata/python2/data/appl/__init__.py"", ""astroid/tests/data_py3/module2.py"", ""astroid/tests/testdata/python3/data/appl/__init__.py"", ""astroid/tests/testdata/python2/data/module2.py"", ""astroid/tests/testdata/python3/data/package/hello.py"", ""astroid/tests/testdata/python2/data/descriptor_crash.py"", ""astroid/tests/regrtest_data/package/__init__.py"", ""astroid/tests/regrtest_data/absimp/__init__.py"", ""astroid/tests/testdata/python2/data/clientmodule_test.py"", ""astroid/tests/testdata/python3/data/format.py"", ""astroid/tests/data/find_test/noendingnewline.py"", ""astroid/tests/data/noendingnewline.py"", ""astroid/tests/testdata/python2/data/find_test/__init__.py"", ""astroid/tests/testdata/python3/data/clientmodule_test.py"", ""astroid/tests/testdata/python2/data/recursion.py"", ""astroid/tests/data_py3/module1abs/core.py"", ""astroid/tests/data2/clientmodule_test.py"", ""astroid/tests/regrtest_data/recursion.py"", ""astroid/tests/data_py3/email.py"", ""astroid/tests/data2/__init__.py"", ""astroid/tests/testdata/python3/data/module1abs/core.py"", ""astroid/tests/unittest_inspector.py"", ""tox.ini"", ""astroid/tests/data/all.py"", ""astroid/tests/data_py3/lmfp/__init__.py"", ""astroid/tests/regrtest_data/absimp/sidepackage/__init__.py"", ""astroid/tests/data_py3/appl/myConnection.py"", ""astroid/test_utils.py"", ""astroid/tests/testdata/python2/data/package/hello.py"", ""astroid/tests/testdata/python2/data/noendingnewline.py"", ""astroid/tests/data/appl/__init__.py"", ""astroid/tests/testdata/python2/data/unicode_package/core/__init__.py"", ""astroid/tests/data_py3/all.py"", ""astroid/tests/testdata/python3/data/SSL1/Connection1.py"", ""astroid/tests/testdata/python3/data/MyPyPa-0.1.0-py2.5.egg"", ""astroid/tests/testdata/python2/data/module.py"", ""astroid/tests/testdata/python2/data/email.py"", ""astroid/tests/testdata/python3/data/all.py"", ""astroid/tests/data_py3/absimport.py"", ""astroid/tests/testdata/python3/data/MyPyPa-0.1.0-py2.5.zip"", ""astroid/tests/testdata/python3/data/package/__init__.py"", ""astroid/tests/testdata/python2/data/find_test/module2.py"", ""astroid/tests/regrtest_data/package/subpackage/__init__.py"", ""astroid/tests/testdata/python2/data/package/__init__.py"", ""astroid/tests/testdata/python3/data/package/absimport.py"", ""astroid/tests/data/SSL1/Connection1.py"", ""astroid/tests/testdata/python2/data/package/subpackage/__init__.py"", ""astroid/tests/testdata/python3/data/find_test/__init__.py"", ""astroid/tests/testdata/python2/data/all.py"", ""astroid/tests/data_py3/appl/__init__.py"", ""astroid/tests/data/find_test/module2.py"", ""astroid/tests/testdata/python3/data/find_test/noendingnewline.py"", ""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-20 17:12:45","first sketch for new sibling method

--HG--
branch : _ast_compat","f5f1bfb3e8acdd272ddbbd9bef9e8536e17d7982","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-26 14:50:45","Add wrapt to pkginfo","f6551be5c016a08757fd8b555f2531a0d718ce56","","api.github.com,git_clone","[u'[""astroid/__pkginfo__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-16 15:59:11","Add some logging to debug failure on drone.io","f6757ce0b81f0db3a216a15f36c77c0c92f2b8ce","","api.github.com,git_clone","[u'[""tox.ini"", ""astroid/tests/unittest_builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","shlomme","2014-11-21 21:48:07","Added a changelog entry for a 1.3.1 bugfix release and a simple test for all module extenders.","f6e38fa0349e1407b273134f7289c94eedbe8889","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-15 15:22:00","It will be removed in astroid 1.6, not Pylint 1.6.","f6e6cff6571d10727148acd8abada8cbd1716cb2","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 14:21:17","new setup.py","f709914da860ac9ec3d0c0dc0dcb4b207806b2f5","","api.github.com,git_clone","[u'[""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-22 16:23:34","Restore pylint in the testing environment.","f72cd1d74a3a7f4629b8e6b9b99550adb4f7602a","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-04 16:12:52","catch Slice nodes

--HG--
branch : _ast_compat","f7353be144f43dd904b6c864d8f17d23b4d81d59","","api.github.com,git_clone","[u'[""builder.py"", ""_nodes_compiler.py"", ""utils.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","flying-sheep","2013-11-25 17:23:35","fixed python 2 compatibility for BytesIO","f73645102c409efae359395bcd2ea674a4716090","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 08:31:45","test and fix Arguments line numbering with py2.4

--HG--
branch : _ast_compat","f73852321d55165005c3b66894fc2ead35beda94","","api.github.com,git_clone","[u'[""scoped_nodes.py"", ""test/unittest_nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-08 23:33:35","Remove dead code.","f749f5a6b71c1e468eea31080afc7e9d7288d031","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-11 14:11:14","fix Keyword attributes

--HG--
branch : _ast_compat","f75437d147196a57d82b36d90e4508eb88b4cdb8","","api.github.com,git_clone","[u'[""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-07-01 16:23:13","Add test for indexing results of tuple and list builtins.","f76f6e4e796542fcc6196b5727e802cde0759aa0","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-24 17:59:00","handle decorators : add Decorators node and visit

--HG--
branch : _ast_compat","f79eb19b03d509b007bf6641048c06fa05540b67","","api.github.com,git_clone","[u'[""nodes_as_string.py"", ""nodes.py"", ""rebuilder.py"", ""_nodes_compiler.py"", ""_nodes_ast.py"", ""utils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-04 10:39:28","more precise error catching in wildcard_import_names

--HG--
branch : _ast_compat","f7c086284ac028e59c3dcffc674a5b6ed47c086e","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-09-14 00:19:03","Fix indentation changed in merge","f7ef0d9e62d30015e5d978bca7aee844564069b9","","api.github.com,git_clone","[u'[""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","hippo91","2017-10-29 18:39:52","Add of encoding utf-8 declaration","f812eb209d6bbed6eb00e02fa7cafb8662d82846","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain_numpy.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2013-06-20 13:45:35","Handle python3.3's With nodes

Change With nodes to have a list of (expr, var) items as in python 3.3's
ast.","f816bceffc7c43c049773223f94b776961fd3e78","","api.github.com,git_clone","[u'[""as_string.py"", ""protocols.py"", ""node_classes.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-24 15:01:10","Function nodes can detect decorator call chain and see if they are decorated with builtin descriptors (`classmethod` and `staticmethod`).","f827b42355c1971b7344d407901d1d7a513cf9cc","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""scoped_nodes.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-28 11:16:24","remove unused function (_format_args is redefined in node_classes.py","f85f5be10e3b6061a38d6e6e39a942c212f2358f","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","The-Compiler","2015-07-25 13:51:06","Get rid of logilab.common.shellutils in test data.

Instead of logilab.common.shellutils.ProgressBar we use
astroid.node_classes.Name now.

--HG--
branch : no-logilab-common","f8a7e95569ad5eee9564e788eedd80a6a72726c8","","api.github.com,git_clone","[u'[""astroid/tests/testdata/python3/data/module.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""astroid/tests/unittest_builder.py"", ""astroid/tests/testdata/python2/data/module.py"", ""astroid/tests/unittest_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","ceridwen","2015-08-22 16:03:25","Add deprecation warnings tests","f8c69f357b1849ce3b0fb5b32e823778e110cb46","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/tests/unittest_inference.py"", ""astroid/tests/unittest_nodes.py"", ""astroid/mixins.py"", ""astroid/node_classes.py"", ""astroid/manager.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-07-21 09:12:55","Ignore the test on <Python3.6","f8f3f1f45203e93b3436bc3ba26dc2218674ab73","","api.github.com,git_clone","[u'[""astroid/tests/unittest_brain.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-29 17:32:15","fix as_string for From node with level","f923690986a21c7507879218f6564380195e318b","","api.github.com,git_clone","[u'[""as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-04-26 10:31:03","Move pkg_resources tip into their own file","f9394f4166d992864439b17e8e2a1642d781bc89","","api.github.com,git_clone","[u'[""astroid/brain/brain_stdlib.py"", ""astroid/brain/brain_pkg_resources.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-18 15:16:24","some Changelog notes

--HG--
branch : _ast_compat","f957b87c97078135d949a25712b7c5fdb7849a09","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-05 22:59:20","Add support for looking up into DictUnpack's value in Dict.getitem","f985a16172f289d4cde5b324fdd38e6e59b72d64","","api.github.com,git_clone","[u'[""astroid/tests/unittest_python3.py"", ""astroid/node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2014-06-03 15:28:41","Fix repr for ast nodes","f9a5177abbe09ef6ff704034a5f3fc9713612ddc","","api.github.com,git_clone","[u'[""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-19 10:09:44","add removed explanation and fix slice delet situations

--HG--
branch : _ast_compat","f9b467c0760002e1268a6f040b5876ad756fe524","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-07-23 14:08:01","backport (most of) logilab.common.modutils and related tests into astroid itself

most of this code is for astroid/pylint only.","f9fd32902a2920bfb4679bc542f9a11689f38fc1","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""test/unittest_nodes.py"", ""modutils.py"", ""ChangeLog"", ""test/unittest_modutils.py"", ""inspector.py"", ""test/data/MyPyPa-0.1.0.zip"", ""test/data/find_test/__init__.py"", ""test/data/find_test/nonregr.py"", ""test/data/find_test/noendingnewline.py"", ""builder.py"", ""test/data/find_test/module2.py"", ""test/unittest_manager.py"", ""manager.py"", ""test/data/lmfp/__init__.py"", ""test/data/module.py"", ""test/data/find_test/module.py"", ""test/data/lmfp/foo.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-08-25 18:37:34","Change the order of the mixins, so that mixins are the first in the MRO before the actual roots.","fa094eb579641594b4263577cd151ad8f58e17a8","","api.github.com,git_clone","[u'[""astroid/scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2007-02-22 12:11:45","fix chained import as bug","fa48604bac2b22dd06e9261ab2b2371569e46c61","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py"", ""_exceptions.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-07 13:09:12","remove py3k imcompatible string raise from data example
(this deprecated syntax is not need for the tests)","fa57bd304f5924586b6c46076c83f1c0f1dc11ee","","api.github.com,git_clone","[u'[""test/data/module2.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-03-26 13:20:42","Merged in flyingsheep/astroid (pull request #15)

AstroidBuilder.string_build was incompatible with file_stream","fa89464e61ca7636123c6cd267d3730ea5f61f30","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""builder.py"", ""scoped_nodes.py"", ""test/fulltest.sh""]']","False","[]","[{u'raw': u'#15', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'15', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-11-26 09:46:54","Slice constructor

--HG--
branch : rebuild","fa8afbebfb9442c23e13bcda6f1f93411936e3b0","","api.github.com,git_clone","[u'[""node_classes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-12-18 15:44:37","Remove reference to Py3k.

--HG--
branch : metaclass","fa95b615324cba1df7dc25a6e72f9b519f4c5cf0","","api.github.com,git_clone","[u'[""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-09-07 08:40:45","[R] centralize class extensions in nodes.py","fac2b3139063ae88e99b207e59be9945912484ee","","api.github.com,git_clone","[u'[""protocols.py"", ""nodes.py"", ""__init__.py"", ""node_classes.py"", ""lookup.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-12 18:05:11","fix as_string indentations

--HG--
branch : _ast_compat","facbae4978505e9ce12832a053c41114e837bec8","","api.github.com,git_clone","[u'[""nodes.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-25 08:12:33","Merged in PCManticore/astroid/tox (pull request #34)

Add a tox.ini file","fad5973bcd2adcb418f8f501c3d5a08f13409707","","api.github.com,git_clone","[u'[""tox.ini""]']","False","[]","[{u'raw': u'#34', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'34', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-02-27 11:17:47","Added tag logilab-astng-version-0.24.2 for changeset 69f3515e4446

--HG--
branch : stable","fad98b55992aca8a25ff1cb0532699c832347424","","api.github.com,git_clone","[u'["".hgtags""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-21 12:21:56","Add support for Python 3.5's MatMul infix operator. See PEP 465 for more details.","faf2ca0a71ed302086fab2b602000baabebda1d1","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py"", ""astroid/rebuilder.py"", ""astroid/protocols.py"", ""ChangeLog""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-11 17:51:47","uncomment working test; test tuple inference ?

--HG--
branch : _ast_compat","fafb97934e7121ddd0e1426ac164f1a2158f3f2e","","api.github.com,git_clone","[u'[""test/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-11-22 14:56:26","py3k: handle file encoding and stream definition in builder

In Py3k, We can't do ""data = open(path, 'U').read()"" anymore since we need
to know the encoding to read the file (UnicodeError); instead we have
to first guess the encoding by reading the file as a byte stream.

We then define
+        node.file_encoding = encoding
+        node.file_stream = file_stream

to be used by the Pylint checkers","fb09403ab49b207da3aa9a9b3f738af0085c031e","","api.github.com,git_clone","[u'[""test/test_encoding.py"", ""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-06 09:46:39","fix 2.4 support (more to be done)

--HG--
branch : _ast_compat","fb3a0dd20e6681223d811d5fd59d14ea0417c65b","","api.github.com,git_clone","[u'[""nodes.py"", ""nodes_as_string.py"", ""rebuilder.py"", ""scoped_nodes.py"", ""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-01-27 10:22:11","make List.elts 'get_children' compatible

--HG--
branch : _ast_compat","fb5a4f054734199971e276f382a8044e402a3b8a","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-01 16:59:12","fix test comment","fb64c733945e719d8b5d3f5e467cb0c0b01a0fb0","","api.github.com,git_clone","[u'[""test/unittest_lookup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-03-04 11:45:36","move all infutils stuff to bases.py
We will need path_wrapper in the default NodeNG.infer method and have
to avoid circular import.

--HG--
branch : rebuild","fb9de009d05656e580528fb86e0d2d13ce1c104b","","api.github.com,git_clone","[u'[""protocols.py"", ""rebuilder.py"", ""infutils.py"", ""test/unittest_inspector.py"", ""bases.py"", ""__init__.py"", ""test/unittest_builder.py"", ""test/unittest_inference.py"", ""node_classes.py"", ""inference.py"", ""test/unittest_scoped_nodes.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-06-18 15:24:28","[inference] introduce (but not use it yet) explicit inference for some node instances","fc02b9e6bc453e0413e324c7a458b5871277744c","","api.github.com,git_clone","[u'[""inference.py"", ""exceptions.py"", ""bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-11-19 13:37:11","necessary to test relative import","fc3a5964e02ba86565d359a02aaef55d90462dc4","","api.github.com,git_clone","[u'[""test/__init__.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-06-13 16:51:23","Add test for testing multiple unary operations on the same operand.","fc44bb31f019b148d42b435745cc1e46ec97abd2","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-12-01 09:50:27","rename ASTNGBuilder.build to tree_build","fc4777a4b5dba839744ad22d666dfe40d2adb21d","","api.github.com,git_clone","[u'[""builder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-11-01 12:29:33","Include Python 3.6 in the CI matrix.","fc4dd43040422206bec276cdd416254f15fcef0e","","api.github.com,git_clone","[u'["".travis.yml""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-02-17 08:33:10","update inference and infutils from default/stable branch

--HG--
branch : rebuild","fc5c916b68953364f03df49918c1a4c6218f4601","","api.github.com,git_clone","[u'[""infutils.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-04 19:38:31","Proper bound and _proxied objects for __subclasses__ and __mro__ pointing to type.mro, respectively type.__subclasses__.","fc6539bdb56b750b02554ccf63a691950951018d","","api.github.com,git_clone","[u'[""astroid/tests/unittest_object_model.py"", ""astroid/__init__.py"", ""astroid/interpreter/objectmodel.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-07-25 08:30:32","Oups, fix a mistake.","fc6e8a520c80909c206d817c48d76af332648523","","api.github.com,git_clone","[u'[""modutils.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-10-03 10:40:40","Ignore non-callables when looking for special method implementations of bool methods

This commit verifies what a special method actually is and if it's
not a callable, then we return an YES object, since there's a big
chance to not make sense of the instance's boolean value.","fc75b3a8658db6c6ac3d6c4168a47a722175c0c1","","api.github.com,git_clone","[u'[""astroid/bases.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-01-14 12:57:14","test fix, some copyright update","fcac8b27e17cdcedf3f0ee0d88ddec5954fca1fa","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2008-07-31 06:34:38","apply Maarten patch fixing a crash on TryFinalaly.block_range and fixing 'else'/'final' block line detection","fcc912553a1759f6608c6b2c07a971cd9be5f1a5","","api.github.com,git_clone","[u'[""nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2013-12-16 18:29:39","Revert change.

--HG--
branch : nameconstant_py34","fcd68800cbbb80049f21c01692bb02eb090e4c8e","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-12-02 15:39:02","Set the col_offset for infered dicts.","fd3a2b9ba7219dc3d2320f7bb5836491fcecd239","","api.github.com,git_clone","[u'[""astroid/brain/builtin_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2013-10-04 07:50:48","backport pylint fix on setup.py for py3k windows/cross-compiliation install issue","fd6a2ceb64dced5892af3ee6d72dab1725cd7f95","","api.github.com,git_clone","[u'[""setup.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-06-14 12:08:50","[fix] yield YES on multiplication of tuple/list with non valid operand

--HG--
branch : stable","fd8a5e4c8b7121b2e054d191779043d6ab7f34d0","","api.github.com,git_clone","[u'[""test/unittest_inference.py"", ""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","tmarek@google.com","2013-06-18 17:32:33","Review documentation for the new extensions API.","fdb061ed3b5104c06366dd13eacd449b9032ed0c","","api.github.com,git_clone","[u'[""doc/extending.rst""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-26 08:06:47","add AugAssing operators to BIN_OP_IMPL: we added '=' to the AugAssign opertor

--HG--
branch : rebuild","fdbbafb781d93fb452e3d72d3e2d881899ac98fd","","api.github.com,git_clone","[u'[""protocols.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2014-04-25 12:34:06","Add tests for checking that YES is not leaked when retrieving the metaclass of a Class node.","fdda5d29d6ec864bbb2fc151fe7155012c1079cc","","api.github.com,git_clone","[u'[""test/unittest_scoped_nodes.py"", ""test/unittest_python3.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","jcristau","2013-06-17 17:49:46","rebuilder: set tolineno for 'except' blocks on python 3.3

The rewriting of Try node into TryFinally+TryExcept wasn't setting the
end line for the except block.

Fixes test_block_range.","fddcfb5dd4832c82f151a8bba4b8b4c9596126d0","","api.github.com,git_clone","[u'[""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-03-11 11:58:14","Remove trailing whitespace.","fe10f8726eedc0f4bfa4b2aad898489db4221120","","api.github.com,git_clone","[u'[""astroid/bases.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-10 09:23:57","introduce argnames method for Function nodes

--HG--
branch : _ast_compat","fe12a693c4967360f9a403cc2b5ff6c5c4ac8a02","","api.github.com,git_clone","[u'[""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2016-06-05 10:49:12","Give priority to local special attributes for classes and modules

For instance, a module can decide to redefine its __file__ attribute.
Previously, this was defaulting to the file name itself, without taking
in account local redefinitions.","fe40d29969a0d3ed7751a86e047361484b35d00a","","api.github.com,git_clone","[u'[""astroid/tests/unittest_object_model.py"", ""astroid/scoped_nodes.py"", ""astroid/tests/unittest_scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-26 18:15:11","some notes about what is to do

--HG--
branch : _ast_compat","fe7022ef14ba57902bda4fc02c356c0d07662c85","","api.github.com,git_clone","[u'[""TODO._ast_compat""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2009-03-18 11:44:27","fix asscontext management

--HG--
branch : _ast_compat","fe9f8d504b3a4f37f2dc21334412050dd3a67761","","api.github.com,git_clone","[u'[""test/unittest_builder.py"", ""_nodes_compiler.py"", ""rebuilder.py"", ""_nodes_ast.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-23 18:27:06","little more cleanup

--HG--
branch : _ast_compat","fea0076c211dc1ba718b08e9e6e0f917ab0dbc20","","api.github.com,git_clone","[u'[""builder.py"", ""rebuilder.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-02-02 16:19:30","remove Stmt node in For.else_

--HG--
branch : _ast_compat","febc44c74bbbac0494db8382890898510cc94fc3","","api.github.com,git_clone","[u'[""_nodes_compiler.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-01-26 17:14:49","enhance doc strings

--HG--
branch : rebuild","fee972d79bba2c16e027c7de4f0c4b5d872a714d","","api.github.com,git_clone","[u'[""infutils.py"", ""scoped_nodes.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2009-03-03 19:07:25","rebuilding and comments on_filter_stmts

--HG--
branch : _ast_compat","fef79eef2597dd30284e1f3ea69cf039521d026b","","api.github.com,git_clone","[u'[""lookup.py"", ""inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2015-11-02 20:41:32","Merge @.","ff4d9f48ab3bf59939a917cd95d6433ac827cf8e","","api.github.com,git_clone","[u'[""astroid/protocols.py"", ""astroid/arguments.py"", ""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","PCManticore","2017-10-12 08:15:04","Ignore directories found in blacklist

Close PyCQA/pylint#1700","ffc680b293480ad3037f64f212d35b49456d27a2","","api.github.com,git_clone","[u'[""astroid/modutils.py""]']","False","[]","[{u'raw': u'PyCQA/pylint#1700', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1700', u'']}]","[]","[]"
"commit_messages","","pycqa","astroid","emile.anclin@logilab.fr","2010-10-28 13:06:08","py3k : as_string : put 3k stuff into a AsStringVisitor3k","ffd49d83cbb6ac001e7244cbd5e91bfc9015c227","","api.github.com,git_clone","[u'[""as_string.py""]']","False","[]","[]","[]","[]"
"commit_messages","","pycqa","astroid","sthenault","2014-12-04 08:19:08","unittest_inference readability enhancements

* use 'ast' where 'astroid' has been use (bad sed a while ago)
* nicer name for high level assert function for Dict, Set, List, Tuple inference","fffbcac19d3f073550823fe233d2294fdb3ba7c5","","api.github.com,git_clone","[u'[""astroid/tests/unittest_inference.py""]']","False","[]","[]","[]","[]"
"pull_request_commit","280","pycqa","astroid","arusahni","2015-12-10 11:37:34","Port hgignore to gitignore.

For future iterations, we should switch to using pre-canned ignore lists
from https://gitignore.io.","21e06cccd59415a1bdf90a70e24b3fe0977ea743","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","285","pycqa","astroid","The-Compiler","2015-12-11 12:00:26","Delete .hgtags","e1e66a66c2ae02b667d85817e48475e73f4f951b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","287","pycqa","astroid","dashea","2015-12-11 20:04:21","Check for flags/enum types before checking for int

gobject-introspection enum and flag types inherit from int, so the check
for a unusable string represenation needs to happen before checking if
the values can be used as integers. This fixes syntax errors in the
generated stubs for gobject-introspection modules containing flag and
enum types.","b0fdfe55e8428f3a9a141f70632607d6bf0d9bb2","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","295","pycqa","astroid","PCManticore","2015-12-14 11:02:05","Setup a basic AppVeyor deployment.","b194b835be4335dcca25b50c5ea79f959e90025b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","296","pycqa","astroid","laura.medioni@logilab.fr","2015-12-16 10:18:22","Add information about parent module to the elements defined in this module

solves issue #265","058a287405390f9c7562c9eb2b3a7c8fc589e7a1","","api.github.com","","False","[]","[{u'raw': u'#265', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'265', u'']}]","[]","[]"
"pull_request_commit","297","pycqa","astroid","laura.medioni@logilab.fr","2015-12-16 10:30:53","Add support for inference on threading.Lock","1586fb45afa2918977e1f3a764273e9b4f2abeee","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","298","pycqa","astroid","PCManticore","2015-12-19 21:42:09","Add /usr/lib and /usr/lib64 to the list of stdlib paths","e60114b2828a0e8b3a6cf6755c78531fc0240f2a","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","303","pycqa","astroid","mbdevpl","2016-01-14 10:47:11","added 3 pkg_resources functions to brain

[Those 3 are] methods of WorkingSet objects [that] are also available
as module- level functions in pkg_resources that apply to the default
working_set instance. Thus, you can use e.g. pkg_resources.require()
as an abbreviation for pkg_resources.working_set.require()

above taken from:
https://pythonhosted.org/setuptools/pkg_resources.html#basic-workingset-methods

this fixes https://github.com/PyCQA/pylint/issues/780

Signed-off-by: Mateusz Bysiek <mb@mbdev.pl>","c639f03b302dda84825061ba35a68e2037f4c951","","api.github.com","","False","[u'https://github.com/PyCQA/pylint/issues/780', u'https://pythonhosted.org/setuptools/pkg_resources.html#basic-workingset-methods']","[{u'raw': u'https://github.com/PyCQA/pylint/issues/780', u'refstyle': u'url', u'parts': [u'PyCQA', u'pylint', u'780', u'']}]","[u'@mbdev']","[]"
"pull_request_commit","305","pycqa","astroid","dbaum","2016-01-14 17:14:39","fix unpack_infer() to fail if results are empty","0786e08e9d7b7e5022a9f41cdfac0263301d2754","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","305","pycqa","astroid","dbaum","2016-01-14 17:18:35","added a blank line","dd5e3f71e8502005416a970930f4bb66fce17c1b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","305","pycqa","astroid","dbaum","2016-01-14 23:31:09","Merge remote-tracking branch 'upstream/master'","3567d7da03d7b9e4bfbc59c7d047b99c3b4ebf3e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","308","pycqa","astroid","dbaum","2016-01-15 19:57:43","Fix metaclass infinite loop when a class is its own metaclass.","9f5de2f1dc6f4e57b67222663c95d5d184155547","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","314","pycqa","astroid","PCManticore","2016-02-01 11:53:36","Changed the way how parameters are being built

The old way consisted in having the parameter names, their
defaults and their annotations separated in different components
of the Arguments node. We introduced a new Param node, which holds
the name of a parameter, its default value and its annotation.
If any of the last two values are missing, then that slot will be
filled with a new node kind, Empty, which is used for specifying the
lack of something (None could have been used instead, but that means having
non-AST nodes in the Arguments node).
We're also having support for positional only arguments, for the moment
only in raw_building.

Close #215","6d2529632bae545ff7564501cac14316d5ea9204","","api.github.com","","False","[]","[{u'raw': u'#215', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'215', u'']}]","[]","[]"
"pull_request_commit","318","pycqa","astroid","PCManticore","2016-02-11 14:17:07","Revert ""Try to fix the testdata issue""

This reverts commit 682b87f5b9832bb55d35d1c3a589ba8695495481.","6f1fcd8763ba1ad4c96318676348ba6512165644","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","318","pycqa","astroid","PCManticore","2016-02-11 14:18:00","Revert ""Try graft instead of recursive-include""

This reverts commit 18fa724c04c2393b134d57d4fe4cebe38472bad8.","5259a4db2822a1926b66e7b15f059a874bee324d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","318","pycqa","astroid","PCManticore","2016-02-11 14:25:36","Revert ""Try to solve the packaging issues again""

This reverts commit d37b81de4f1e64abc2f222c487785d816ab469ea.","8aae5f078b5c837ba6829e8042453c12dfe2421f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","318","pycqa","astroid","PCManticore","2016-02-11 14:35:43","Revert ""setup.py install now installs testdata/, but pip doesn't""

This reverts commit c510c17f63c2df01b8c9d5e2fd97ac963f737c7f.","5c6b19de694621b1c58852b9614615ae2401a671","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","318","pycqa","astroid","PCManticore","2016-02-11 14:42:33","Revert ""Modify tox.ini to properly exclude files not part of astroid""

This reverts commit 4596201f9146e64c18cfcb0f841618328e953910.","41a24c207483ca77053f2adc7ecb4a950cf913a6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","318","pycqa","astroid","PCManticore","2016-02-11 14:44:39","Revert change to tests command.","a4a12428946b533dfebd5ecc38bcbef39288b499","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","318","pycqa","astroid","PCManticore","2016-02-13 15:01:03","Move testdata back into tests.","ffa1ba873ca879ae2d259903b8add63f6e6eb2ac","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","319","pycqa","astroid","PCManticore","2016-02-13 23:53:24","Introduce a special attributes model

Through this model, astroid starts knowing special attributes of certain Python objects,
such as functions, classes, super objects and so on. This was previously possible before,
but now the lookup and the attributes themselves are separated into a new module,
objectmodel.py, which describes, in a more comprehensive way, the data model of each
object.","25575e47e144e1591dca27af32e386b12b6c2b1d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-01-16 01:51:09","Recreate zipper branch off 2.0","3be6e78ea87293bf97ae89d7d4ddba0b4b57f5e6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-01-18 22:02:05","Merge coverage support.","78e5ab8c0b685aed87cab23f5e8dcb769e172a7f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-02-16 03:28:43","First version of Hypothesis tests for the zipper; unfinished, but works well enough to find some bugs","329fc88e739e403c4bc0e7bb93f757efd5b49556","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-02-16 03:36:02","Merge testdata changes and Parameter nodes into zipper.","54e5ddc279c4281e1612380af67051734ae30064","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-02-21 21:25:01","Revise zipper tests for speed and to be more accurate about what is being tested","51bd977f064520f5efe2795e484d2c0728128e08","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-03-02 15:47:46","Replace None with Empty in the ASTs and refactor the zipper tests to work with this","229e5c448bc94b27fd47923a6e4093f5f6135853","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-03-08 05:13:32","Add the remaining parts of the traversal API and tests for it","380fabb904b1f5e2eaaef4f239a6cc38a65f7b12","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-03-08 22:02:29","Add comments and docstrings to the zipper and the tests","77a111204e15635130567b1d0eb8d8f147996fcc","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-03-08 23:23:59","Fully move tests to unittest and fix minor test issues","18020b8b0b406f0a4f4f6c19d6896fbc07f411f8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-03-10 16:17:10","Start zipperification of the rest of the project, fix util.singledispatch to work with the zipper","3c601315485baeb237927e0770c28db7a88f1e06","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-03-11 16:34:33","Improve zipper's backwards compatibility and fix bugs","0aa2025afa101a19aa7d4ec2daa78aa7fc8e6c18","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-03-29 15:07:35","Clean up some comments and docstrings","3aa99786327dbb366b02123468fece10e44ceb9c","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-03-31 18:56:20","Make the field character limit for __str__ a global constant","4b5593450c8018a5bfe33f82009e6127382a1b91","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-04-07 13:57:36","Clean up spacing, typos, and add .hypothesis to .gitignore","e527836092e2cab494fd7643c30e01c6e037f750","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","325","pycqa","astroid","ceridwen","2016-04-07 15:22:52","Add infer(), frame(), scope(), and statement() methods to the zipper","a0cb55e9f4e28ea85be84fb460e38155fc4fa9a8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","333","pycqa","astroid","giuseppe","2016-04-27 13:12:45","Ignore PyGIWarning

It solves this error when running PyLint on a file which uses gi introspection:

/usr/lib/python2.7/site-packages/astroid/brain/brain_gi.py:136: PyGIWarning: OSTree was \
imported without specifying a version first. Use gi.require_version('OSTree', '1.0') before \
import to ensure that the right version gets loaded.

Signed-off-by: Giuseppe Scrivano <gscrivan@redhat.com>","96dbb797e7d1a5f5c7f59b53a54b49bf0fd2ed9c","","api.github.com","","False","[]","[]","[u'@redhat']","[]"
"pull_request_commit","339","pycqa","astroid","jwilk","2016-06-02 15:54:31","Fix typos","96be1bbc7ede4ce7c221988a3303a5d7dd46b13a","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","345","pycqa","astroid","nessento@openmailbox.org","2016-07-11 17:13:33","Fix quantity of blank lines after code object.","f9cf605109ac7a65e6bb133fabf725cc022f3bb8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","349","pycqa","astroid","The-Compiler","2016-07-23 15:54:58","Fix double spaces in warning message","7eaeb8ecd8082e02bbb13d55bd82d372f50d33ca","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","352","pycqa","astroid","rogalski","2016-07-23 21:58:29","namedtuple: handle rename=True case and properties as a part of class definition","319d7c05a56a5145d675a478b04738cb1c133552","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","352","pycqa","astroid","rogalski","2016-07-23 22:19:48","Fix accidentally removed line while committing code","7dbb34cb108bfd3fd4842625f8b2d9b1ad2eade5","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","356","pycqa","astroid","roy_wright@trendmicro.com","2016-08-01 21:14:46","handle missing class name attribute","bb11453818f12c9df4b1751e0080329ffab0241c","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","356","pycqa","astroid","roy_wright@trendmicro.com","2016-08-01 21:36:07","Merge branch 'master' of https://github.com/royw/astroid

* 'master' of https://github.com/royw/astroid:
  Use proper environment markers for version specific dependencies.","f9c4b41409bfe3c20304856207125f4d989f749c","","api.github.com","","False","[u'https://github.com/royw/astroid', u'https://github.com/royw/astroid:']","[]","[]","[]"
"pull_request_commit","357","pycqa","astroid","The-Compiler","2016-08-20 10:45:40","Adjust brain_pytest for pytest 3","106f560737d88c608c91d79c94add701cdfd41d0","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","357","pycqa","astroid","The-Compiler","2016-08-20 10:53:14","Reintroduce pytest 2 compatibility in brain_pytest","cd757ca2a4a28f255e38f3ddf3f3f722f6698c93","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","357","pycqa","astroid","The-Compiler","2016-08-20 10:59:10","Reorder attributes","8f206f8b3ca95debbc470c40d89283cb10de8da7","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","357","pycqa","astroid","The-Compiler","2016-08-20 11:03:38","Improve PytestBrainTest","40913edcade9dbb4d3f2c3536e4b8367c4252172","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","359","pycqa","astroid","moylop260","2016-08-22 19:14:06","[REF] bumpversion: Add utility","e671e1f4e1ed58a42b869acceb0f4b6c8edd238c","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","360","pycqa","astroid","moylop260","2016-08-23 20:00:43","[REF] package: Compatibility with old version of setuptools","6760eacb48c4a003dd6148feaa48f69a32966872","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","360","pycqa","astroid","moylop260","2016-08-23 20:44:12","[REF] pkginfo: Using pkg_resources.parse_version","8e2420741c4aa21935fd7158163dbd33e37a73e7","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","360","pycqa","astroid","moylop260","2016-08-23 20:51:57","[REF] travis: Add test for current setuptools version in travis and new one","d394ab7c428dd4087c8d25bd119fbd32d633e63d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","360","pycqa","astroid","moylop260","2016-08-23 21:09:08","[REF] pkginfo: Add first known release version to support environment marker with range operators","9e0f719956732e9fcff183ed94bc38d9d972ef71","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","360","pycqa","astroid","moylop260","2016-08-24 21:17:07","[REF] Avoid run test 2 times and remove unnecesary except","a12e314a9cf16add9e72bc3bb9df62fdc765015e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","365","pycqa","astroid","jgarst","2016-10-02 14:22:51","add format string support

format strings require support for two new nodes:
FormattedValue(expr valu, int? conversion, expr? format_spec)
JoinedStr(expr* values)","db75314805c2b5df57883f49b7d93c62a079189e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","366","pycqa","astroid","jgarst","2016-10-02 14:26:48","fix delayed_asattr when proxy is uninferrable

added a check to prevent trying to get instance_attrs from node with
an uninferrable proxy.","2059278d332432d295ae2e0fef49b19c4d83fd92","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","370","pycqa","astroid","bocekm","2016-10-24 13:19:08","Fix python 2.6 incompatibility","1e7fe468e8336bcda73e10f84e30f208e9dc0c2f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","370","pycqa","astroid","bocekm","2016-10-24 13:28:16","fix pip installation errors","c798f8712acc03bafbd11a4cb91625a66470081b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","370","pycqa","astroid","bocekm","2016-10-24 13:31:42","fix another installation errors","a98283f6c3d686757ad5a3b9fc7367e3f9720d78","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","370","pycqa","astroid","bocekm","2016-10-24 15:58:38","revert code that is reverting upstream changes","c3ed81365097da477c151050e1099535c32c3f31","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","372","pycqa","astroid","srikiraju","2016-11-03 01:19:01","Look under module.__path__ for finding submodules if it exists.","8b41c6dc933f1eb8ab7560c859dd376c4f81baf0","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-03-27 11:52:41","Filter out YES nodes when creating a temporary class for the with_metaclass hack.

Having an YES node in a class bases will lead to a crash with a TypeError
when trying to obtain the ancestors of the given class, because .ancestors()
will try to iterate each inferred node from the bases, thus will try to
iterate over an YES node. This should fix issue #84.

--HG--
branch : 1.3.8","6ac9de89f78035618272783982d79e2448db848d","","api.github.com","","False","[]","[{u'raw': u'#84', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'84', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-03-28 16:08:40","Add brain tips for multiprocessing.Manager and multiprocessing.managers.SyncManager.

--HG--
branch : 1.4.0","24692564e2ca9dfb208ca2495e635b709fb009b7","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-03-31 10:41:24","Proper mro support for six.with_metaclass. Closes issue #85.

--HG--
branch : 1.4.0","42a5ee27b96fd64b50288bc8d3a961833ae6bde5","","api.github.com","","False","[]","[{u'raw': u'#85', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'85', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-01 11:24:09","Set the current function as parent for the Generator object inferred from `infer_call_result`.

--HG--
branch : 1.4.0","068bc258b9b0632366e0c0ff9c61fdf8aa0d2b80","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-02 14:58:56","Add brain tips for multiprocessing post Python 3.4+.

In Python 3.4+, the module level functions are retrieved with getattr
from a context object, leading to many no-member errors
in Pylint. This patch ensures us that we can retrieve those attributes,
no matter what.

--HG--
branch : 1.4.0","5d4e65d22a08605da373c6cafb79c2e1b9133d17","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-02 15:02:46","Use a check on sys.version_info instead, to accomodate for Python 3.3

--HG--
branch : 1.4.0","8c6995236a66d1e26d4d23fbdd0b973346a71e76","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-13 18:27:14","Understand partially the 3-argument form of `type`.

The only change is that astroid understands members
passed in as dictionaries as the third argument. This improves
the understanding of classes generated on-the-fly, using
the type function.

--HG--
branch : 1.4.0","120436cf15dc9e6bd0b7774436f62f9b5d6f81b6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-17 15:03:21","Improve the inference of Getattr nodes when dealing with abstract properties from the abc module.

In astroid.bases.Instance._wrap_attr we had a detection
code for properties, which basically inferred whatever
a property returned, passing the results up the stack,
to the igetattr() method. It handled only the builtin property
but the new patch also handles abc.abstractproperty.

--HG--
branch : 1.4.0","abd3955ea00255588f57b9a285c5c78c113be60f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-17 17:39:14","UnboundMethod.getattr calls the getattr of its _proxied object.

It previously crashed, since it called super(...).getattr(..) and the
first ancestor in its mro was bases.Proxy and bases.Proxy doesn't implement
the .getattr method. Closes issue #91.

--HG--
branch : 1.4.0","3f523cdd03608bb9f02c4e9bec66530ba8a91bec","","api.github.com","","False","[]","[{u'raw': u'#91', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'91', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-17 20:45:59","Support multiple types of known properties in _wrap_attr.

--HG--
branch : 1.4.0","77c60db70f0a8cd91732c6ee67a957fc011f2eae","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-17 20:51:54","Make is_property a private function. Remove some trailing whitespaces.

--HG--
branch : 1.4.0","f9499092145494f4ae7addba67d9ff6115b52bda","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-18 07:50:02","Fix a typo in the possible properties list and add more tests.

--HG--
branch : 1.4.0","f155171af9abf02ebd1d95fc28557e801a2608c4","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-18 08:40:01","Filter out YES results from .decoratornames().

--HG--
branch : 1.4.0","476a7c502cae43228cdc2acbcd3c007ad825120b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-18 12:34:10","Handle empty strings as arguments to StopIteration when looking for slots().

StopIteration can have an empty string as an argument on Jython,
which lead to an incorrect result when calling .slots().

--HG--
branch : 1.4.0","d6bbd5dd13d5e65325e8a1b0834e743819f480cb","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-18 17:50:46","Don't hard fail when calling .mro() on a class which has combined both newstyle and old style classes.

The class in question is actually newstyle (and the __mro__ can be retrieved using Python).
.mro() fallbacks to using .ancestors() in that case.

--HG--
branch : 1.4.0","4e747b1b029bc003984d5425f9c15389b7d0e17f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-18 18:22:10","Class.local_attr and Class.local_attr_ancestors uses internally a mro lookup, using .mro() method, if they can.

That means for newstyle classes, when trying to lookup a member
using one of these functions, the first one according to the
mro will be returned. This reflects nicely the reality,
but it can have as a drawback the fact that it is a behaviour
change (the previous behaviour was incorrect though). Also,
having bases which can return multiple values when inferred
will not work with the new approach, because .mro() only
retrieves the first value inferred from a base.

--HG--
branch : 1.4.0","4149d34d1c7535a73b7308a7fa653d0359cd3169","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-23 21:40:35","Add six tips for vendorized requests library.

--HG--
branch : 1.3.7","355334d59d5bf3942db79ff8e80c853e02a7ceb8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-24 21:29:31","Expose a implicit_metaclass() method in Class.

This will return a builtins.type instance for newstyle classes, otherwise it will
return None.

--HG--
branch : 1.4.0","c2229bed4b1391c9deab39d7e3c93798bf2ac0ba","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","invalid-email-address","2015-04-26 09:37:14","add annotations to as_string method of Arguments

--HG--
branch : 1.4.0","9592d13731ad612325d0202f5b12290343822e95","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","invalid-email-address","2015-04-26 11:51:53","annotations = None

--HG--
branch : 1.4.0","c2bb5cdd0bb338fa89f20bbe978c4e4d7740fe48","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","invalid-email-address","2015-04-26 12:11:44","add returns annotation

--HG--
branch : 1.4.0","e12c0fd64a8fb9c54535a4009002fb5e015d87c9","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-29 07:41:04","SyncManager is a context manager as well.

--HG--
branch : 1.4.0","cb9f31b9b645165b84d505304291f88b88046b92","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-04-30 16:34:20","Don't let ResolveError leak out from local_attr, when using .mro().

--HG--
branch : 1.4.0","fea3f9f4aef813f5610b4a05aa27fe973bf62334","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","lorenzph","2015-05-01 08:30:57","Add basic unit test for enum support

This test verifies that the generated enum member stubs behave
implement the correct interface.

--HG--
branch : 1.4.0","d0dc4aac111e11482e2c1096e1463c2436722ca7","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","lorenzph","2015-05-01 08:44:12","Ensure that generated enum values have the correct base classes

Enum values should share the same base classes as their defining class.
If this is not the case it may lead to wrong inference results when an
enum member is used - e.g. for the following snippet:

class X(enum.IntEnum):
    one = 1

print([1, 2][X.one])

pylint will detect a ""invalid-sequence-index"" error as the __index__
method of X.one is not detected.

--HG--
branch : 1.4.0","07fd588658af118edcc87025fb17a481a7e80db2","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-03 06:21:04","Add two new exceptions for handling MRO error cases.

DuplicateBasesError is emitted when duplicate bases are found in a class,
InconsistentMroError is raised when the method resolution is determined
to be inconsistent. They share a common class, MroError, which
is a subclass of ResolveError, meaning that this change is backwards compatible.

--HG--
branch : 1.4.0","51a0c3de6b1a931bcb7e521d3b55410d6024a996","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-03 08:36:16","Add a new possible property, lazy_attribute.

--HG--
branch : 1.4.0","2f625f2a7d3ebf0462fcdc29687e993fa39970e6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","lorenzph","2015-05-04 20:42:57","Fix recursive class attribute lookups

Commit 83053ac added MRO lookup support for new-style only class
hierarchies. Due to a typo old-style / mixed-style class hierarchies
were either not traversed recursively or traversed with the wrong
context.

--HG--
branch : 1.4.0","a30c976d724c5aadb2cb592c343a4282ec701d3a","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-05 08:37:51","Classes aren't marked as interfaces anymore, in the `type` attribute.

--HG--
branch : 1.4.0","148ba340bc040fc195bd05c9f3e6dda2b37f6fd4","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-06 18:31:56","_io names itself io. This patch fixes some cyclic dependencies when solving io.BufferedReader and friends.

--HG--
branch : 1.4.0","50e7a2d327f76bf871f73a9d01e642e3eed7c2e4","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-06 19:15:34","Remove hardcoded behaviour of has_dynamic_getattr for optparse.

--HG--
branch : 1.4.0","040dfdf4fb4c74ffc2375c30e8fcc9af68392667","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-06 19:20:36","Update the docstring for has_dynamic_getattr to better reflect reality.

--HG--
branch : 1.4.0","e736a80386788ea1f10db9d533be57ada3d50bbd","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-07 10:52:36","Class.has_dynamic_getattr doesn't return True for special methods which aren't implemented in pure Python.

Since most likely the methods were coming from a live object, this implies
that all of them will have __getattr__ and __getattribute__ present and it
is wrong to consider that those methods were actually implemented
(the descriptors will be there, not necessarily implying that the function
is user implemented).

--HG--
branch : 1.4.0","52efdfc9f6720d821f6b5b97e979c3a47b002f44","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-07 19:04:40","Make sure that sys.stderr is reset after the .infer() call.

--HG--
branch : 1.4.0","880fbc42393d7eb22134583d6d6e41b70bdc7945","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-08 08:06:59","open doesn't have a __module__ attribute on Jython. Handle this case.

--HG--
branch : 1.4.0","a58b167874b5cf4bfc69f70021374e81e5afd1ca","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-08 08:13:49","Remove trailing whitespace.

--HG--
branch : 1.4.0","7ea644e4d0f884a39c5d33becabd5ce2ba77a896","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-08 11:09:48","Handle builtins without a __module__, especially for Jython.

--HG--
branch : 1.4.0","78fdee272610549f8ffbd99e13a5026ef0c75d54","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-09 14:01:47",".root() can't always return a Module, do a getattr over pure_python method instead.

--HG--
branch : 1.4.0","323d6b6688689839b5280131844b0b77a3abe89e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-09 14:20:09","local_attr_ancestors fallbacks to using .ancestors if .mro() fails.

--HG--
branch : 1.4.0","e8aa061001563221c91bafdbc2f4a2bc4e7403fe","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-09 14:25:32","Add a test which shows that using namedtuple-generated classes with classes with the same name leads to an invalid MRO.

--HG--
branch : 1.4.0","24bc9efaa02e84396e598f9a99617bd4a5e601dd","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","raylu","2015-05-13 01:35:52","Add brain module for dateutil.parser.parse

--HG--
branch : 1.4.0","21a588f7c2fd8f2d3ffe7b182935013b88f4b2c0","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-19 16:40:25","Add a new type of nodes, called *inference objects*.

Inference objects are similar with AST nodes, but they can be obtained
only after inference, so they can't be found inside the AST tree.
Their purpose is to handle at astroid level some operations which can't
be handled when using brain transforms. For instance, the first object
added is FrozenSet, which can be manipulated at astroid's level
(inferred, itered etc). Code such as this 'frozenset((1,2))'
will not return an Instance of frozenset, without having access to its
content, but a new objects.FrozenSet, which can be used just as a nodes.Set.

--HG--
branch : 1.4.0","619bf571769996f9901a693a346ee8bda1601053","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-28 09:10:00","Add a new *inference object* called Super

This patch also adds support for understanding super calls.
astroid understands the zero-argument form of super, specific to
Python 3, where the interpreter fills itself the arguments of the call. Also, we
are understanding the 2-argument form of super, both for bounded lookups
(super(X, instance)) as well as for unbounded lookups (super(X, Y)),
having as well support for validating that the object-or-type is a subtype
of the first argument. The unbounded form of super (one argument) is not
understood, since it's useless in practice and should be removed from
Python's specification. Closes issue #89.

--HG--
branch : 1.4.0","acc3fec09b1ed2330c118f13770e9106cc7dd870","","api.github.com","","False","[]","[{u'raw': u'#89', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'89', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-28 18:57:14","Update the rules for what descriptor is returned from a super(), depending on the accessed object.

--HG--
branch : 1.4.0","efb66f9936fb1fec43b0b0c9241e16994126f66e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-29 13:45:22","Fail when calling Super.super_mro if the object-or-type is not the expected type.

--HG--
branch : 1.4.0","d56b071c0b17117f04596e58ec177ed4a7db6b01","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-05-29 13:58:58","Add a new SuperError exception subclass, SuperArgumentTypeError, which is raised when there's a problem with any argument of the super call (invalid types).

--HG--
branch : 1.4.0","6f7a397196fe2a29c7523238df5f7f0d1a745d42","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","thedrow","2015-06-01 10:33:29","Fixed syntax errors in Python 3.

--HG--
branch : 1.4.0","a4479e78222c3f833f43e228d1fcf546eba573cb","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","thedrow","2015-06-02 09:13:02","print_statement -> print_function.

--HG--
branch : 1.4.0","a6d3b793e2bb1e00acd382c8fd1eb94949851cb3","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-06-09 15:16:59","Add 'assert_equals' method in nose.tools's brain plugin.

--HG--
branch : 1.4.0","6602fe72b2059c69359320d19cec4e78d787e0f5","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-06-10 17:09:32","Improve the inference of six.moves.

This patch improves especially the inferrence when using `from ... import ...`
syntax. Also, we added a new fail import hook for six.moves, which fixes the
import-error false positive from pylint. Closes issue #107.

--HG--
branch : 1.3.7","148de8189b501dfce2cb20a42505245d0c93b1b0","","api.github.com","","False","[]","[{u'raw': u'#107', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'107', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-06-10 17:22:24","Set the module name for six.moves fail hook module.

--HG--
branch : 1.3.7","a5964cc94610ac96ac7f866f6fccb528d1b8e2bd","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-06-15 12:01:08","Staticmethods retrieved with super are functions, not bound methods.

--HG--
branch : 1.4.0","2e24530c3d9585e362077e4afb8f2d553ce92165","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-06-17 19:41:49","astroid.utils.ASTWalker and astroid.utils.LocalsVisitor were moved to pylint.pyreverse.utils.

--HG--
branch : 1.4.0","7455d60169657c1b537f048dd27613daa090af79","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-06-20 10:40:47","Namedtuple's instance members gain a new .attrname attribute, since they're actually equivalent to an AssAttr node.

--HG--
branch : 1.4.0","fb3a8c24e092bc03ee634317e2d3a880296fb339","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-06-20 12:14:48","Add `igetattr` method to scoped_nodes.Function.

--HG--
branch : 1.4.0","9964fd0e8b894287e50d03fd8d3c7c189352418d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-06-21 12:21:56","Add support for Python 3.5's MatMul infix operator. See PEP 465 for more details.

--HG--
branch : 1.4.0","7f89ca7b5318d577f7156eacfa4dcc4d4fc03238","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-06-23 09:40:29","NotImplemented is detected properly now as being part of the builtins module.

Previously trying to infer the Name(NotImplemented) returned an YES object.

--HG--
branch : 1.4.0","22d49916c718dd1b6a64dbfd4a7d904ca739f321","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-06-26 10:16:02","Add __reversed__ special method to deques.

--HG--
branch : 1.4.0","a3bae9a3855513253f60b92caf909a97f929d867","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-06-30 09:27:19","Transform lambdas with a self argument at the class level to bound methods.

--HG--
branch : 1.4.0","9e49c8d12cfa6a409c30e085709a00a49680a9fe","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-06-30 23:36:45","Star unpacking in assignments returns properly a list, not the individual components. Closes issue #138.

--HG--
branch : 1.4.0","8cb28bda361092ad97b3075b4e324d13c6ec5c07","","api.github.com","","False","[]","[{u'raw': u'#138', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'138', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-01 00:28:04","Add annotation support for function.as_string(). Closes issue #37.

--HG--
branch : 1.4.0","ccdc75e91881069cefe37f32625d06727a401bb4","","api.github.com","","False","[]","[{u'raw': u'#37', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'37', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-01 16:00:45","Mark a test as an expected failure: not all staticmethod and classmethods are callable. Should be fixed when we'll understand classmethods and staticmethods.

--HG--
branch : 1.4.0","31d0434fa582227aabb53390fa48b789717e4e9d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-01 16:18:27","Add support for indexing bytes on Python 3.

--HG--
branch : 1.4.0","46c1fe9239831aaa4ce8b000075aedc594085961","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-01 20:08:46","Add support for inferring subscript on instances, which will  use __getitem__. Closes issue #124.

--HG--
branch : 1.4.0","4285c159a9b1227edacf56d4820fd9e7c498eaac","","api.github.com","","False","[]","[{u'raw': u'#124', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'124', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-02 13:41:49","Update modutils.py from logilab.common and add support for namespace packages

This patch is mostly a backport from logilab.common. The addition is the
support for pkg_resources.declare_namespace, which created a good
deal of problems so far with regard to virtualenvs.

--HG--
branch : 1.4.0","df91c59774838e00e6fe645ad6d204ed95ad5671","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-03 08:59:16","Add __enter__ and __exit__ for subprocess.Popen.

--HG--
branch : 1.4.0","62397918b87baa4cdb43e1d720550669d9aebe79","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-03 09:29:28","Add new property name in the list of known property-like objects.

--HG--
branch : 1.4.0","d0fb5ab6a4e2413a90419fa7eaceeae8f1f757f9","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-06 15:24:03","Fix the body of namedtuple._replace: return the current self and don't actually call self._make, since it's impossible to understand it.

--HG--
branch : 1.4.0","fbac8fb5ac480f48e716ef73e1a3b9d384adbba5","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-06 21:56:06","Test Super.pytype, Super.display_type and Super.name

--HG--
branch : 1.4.0","682bea860c8652a0e39eda2b23e39889f95a396d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-07 09:51:30","Understand metaclasses added with six.add_metaclass decorator. Closes issue #129.

--HG--
branch : 1.4.0","795c8649615ecee8d6527baeadd400ff69b45ae4","","api.github.com","","False","[]","[{u'raw': u'#129', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'129', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","dashea","2015-07-08 14:43:10","Duplicate calls to gi.require_version.

gobject-introspection uses gi.require_version to choose which version of a
library to import from gi.repository, and pygobject now issues a warning if
gi.require_version is not used. Find calls to require_version and duplicate
them in py2gi.py so that the version data is present in the context of the
import.

--HG--
branch : 1.4.0","3c2b79c0c1bb7c39ed9425b7de309fba94f2401c","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","dashea","2015-07-08 15:47:07","Ignore exceptions raised by gi.require_version

--HG--
branch : 1.4.0","3aaa2d6d0fa1bf959852ca5557422133a0120a3a","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-11 14:57:21","Cleanup builder.py

--HG--
branch : 1.4.0","3824753d343ed22f7280f560498ae59d9c1388d0","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-11 15:12:18","Add a new convenience API, `astroid.parse`.

This API can be used to retrieve an astroid AST from a source code string,
similar to how ast.parse can be used to obtain a Python AST from a source string.
This is the test_utils.build_module promoted to a public API.

--HG--
branch : 1.4.0","028b684439421a6c3722cce83bc258c480b67f66","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-11 15:19:06","Fix pylint issues.

--HG--
branch : 1.4.0","3c031479a244ab61642c194ca7d0fe3f27dcffc0","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-13 21:13:31","do_import_module passes the proper relative_only flag if the level is higher than 1.

This has the side effect that using `from .something import something`
in a non-package will finally result in an import-error on Pylint's side.
Until now relative_only was ignored, leading to the import of `something`,
if it was globally available.

--HG--
branch : 1.4.0","e628d616de1bdabbf639742566231c85c8b11b52","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-22 22:25:00","Patch astroid_cache in unittest_regrtest.setUp with the current builtins module, to prevent crashes when it's missing during tests.

--HG--
branch : 1.4.0","cdf3ca54193abc51ffc783db85eb0ed125740ff8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 13:16:56","Get rid of astroid.common.decorators.

This also implements an easier @cache decorator and removes @classproperty as
it only was used in an insignificant test.

--HG--
branch : 1.4.0","f9098bf9a113232baf1c6c5ae7ee834d1e591c36","","api.github.com","","False","[]","[]","[u'@cache', u'@classproperty']","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 13:35:07","Get rid of logilab.common in unittest_modutils.py.

It was only used as an example package with subpackages - now we use
xml.etree.ElementTree for those checks instead.

--HG--
branch : 1.4.0","50ef663b716a84f998fd27fc0ecf4c94dffa8e0b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 13:51:06","Get rid of logilab.common.shellutils in test data.

Instead of logilab.common.shellutils.ProgressBar we use
astroid.node_classes.Name now.

--HG--
branch : 1.4.0","c3f6e91bdf8531098b32ccdf863fb8abef03bff9","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 13:52:58","Use six.moves instead of logilab.common.compat.

--HG--
branch : 1.4.0","b2b82bd95e25502247a672202a8bfe4c102ddc2b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 14:03:49","get rid of logilab.common in modutils.

--HG--
branch : 1.4.0","bfb47cb98ffbdd2e88d46453fd0fddc2814af6b0","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 14:05:45","Fix get_module_files documentation in modutils.

--HG--
branch : 1.4.0","4cd98b77686b607e9ef956ed16c78dd1acd424b0","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 14:10:21","Get rid of logilab.common in doc example.

--HG--
branch : 1.4.0","200bacf9ac4f6112890109041b80bec70c1e0c1b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 14:12:45","Remove pytest recommendation from README.

--HG--
branch : 1.4.0","814b00de4798031cbd6a63357f9593b1a134ef97","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 14:14:54","Remove logilab-common dependency.

--HG--
branch : 1.4.0","f49c638bf5c9471e8eea78730831930296eb72f6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 14:16:25","Add changelog entry.

--HG--
branch : 1.4.0","9b10c8c8b461f98a2c026f73af8c5ff2cbb75cd1","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 14:48:51","Remove __docformat__.

--HG--
branch : 1.4.0","be803a99552fe0bb08d4d88952e3ce6f9d9e5ccd","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 14:50:30","Remove __docformat__.

--HG--
branch : 1.4.0","b30b58ef1fc2d063e3ed8d58635d3a30481bc68f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-07-25 14:54:45","Simplify decorators.cache.

--HG--
branch : 1.4.0","c0b6fe32a11528078542447bce30dea59f786e00","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-27 15:05:03","Don't forget to import six.

--HG--
branch : 1.3.7","aa2359afeddcc9db45a110aed0e2d16c336cebb3","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-27 15:08:06","Going up to 1.3.7.

--HG--
branch : 1.3.7","7e73ba32e23e2bce39251027e0c64c85600d6420","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-27 15:18:54","Limit the logilab-common version for now.

--HG--
branch : 1.3.7","d91da7593acd908cee83eef94dc9b4b5d22ba406","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-27 15:24:57","Use pylint 1.4.3 for now in the CI for astroid 1.3.7

--HG--
branch : 1.3.7","e6fb2e338668113172a677a711768f56cbeb24e0","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-07-27 15:30:07","Added tag astroid-1.3.7 for changeset cda2deee65e3

--HG--
branch : 1.3.7","2561c386760b5a66cea9f8739954617010b3a130","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","dashea","2015-07-30 17:07:59","Add a timeout parameter to Popen.communicate in PY3K.

Python 3.3 adds a timeout parameter to communicate(), so allow it if using
Python 3.

--HG--
branch : 1.4.0","557b34f323eec6d22dfe8c70b9a76dc9cef6eb4e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-02 07:03:45","There's a new separate step for transforms.

Until now, the transforms were applied at the same time the tree was
being built. This was problematic if the transform functions were
using inference, since the inference was executed on a partially
constructed tree, which led to failures when post-building
information was needed (such as setting the _from_names
for the From imports).
Now there's a separate step for transforms, which are applied
using transform.TransformVisitor.

There's a couple of other related changes:

      * astroid.parse and AstroidBuilder gained a new parameter
        `apply_transforms`, which is a boolean flag, which will
        control if the transforms are applied. We do this because
        there are uses when the vanilla tree is wanted, without
        any implicit modification.

      * the transforms are also applied for builtin modules,
        as a side effect of the fact that transform visiting
        was moved in AstroidBuilder._post_build from
        AstroidBuilder._data_build.

Closes issue #116.

--HG--
branch : 1.4.0","8ac050f4b8a4b4a87343beb3503bd01275d507de","","api.github.com","","False","[]","[{u'raw': u'#116', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'116', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-02 19:38:09","Prepare release 1.3.8

--HG--
branch : 1.3.8","ea7739523e4a3ff373ae01431e3ac8460d0013eb","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-02 20:37:43","Remove trailing whitespace.

--HG--
branch : 1.3.8","6b71db693eb148b1c776192cf1f74be474b804cb","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-02 20:38:13","Added tag astroid-1.3.8 for changeset ee51df3a10b6

--HG--
branch : 1.3.8","77e9bc8707b72ee52e6d6ccafb974b8dbb351f8a","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-05 21:58:22","Move the determination of a function type from rebuilder to Function.type.

Closes issue #162.

--HG--
branch : 1.4.0","2473d1eddc8c551472c72ed95fdba25fc540de5e","","api.github.com","","False","[]","[{u'raw': u'#162', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'162', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-06 07:57:59","Delegate the implementation of BoundMethod.infer_call_result to the parent.

The implementation is the same, they both delegate to _proxied for inference,
but UnboundMethod supports custom logic for handling object.__new__, which is
also desired for BoundMethods.

--HG--
branch : 1.4.0","1b51d2120869ebb31ac30fd489f30d7f7d18f670","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-06 08:06:00","Remove decorator support for Python < 2.6, since it's dead code anyway.

--HG--
branch : 1.4.0","451c1cc219ef484b970c2d9cd4f192381698b1e6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-06 08:11:48","decorator_list is always expected on Python > 2.6.

--HG--
branch : 1.4.0","c66019566856ce96adec8100a8c48c0f856aad0e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-06 11:38:22","Move the determination of extra_decorators directly into Function, as Function.extra_decorators.

Previously, the extra_decorators computation was done in the rebuilder,
which isn't the proper way to do it, since the rebuilder should be
responsible only from transforming vanilla ast trees to astroid trees.
Now, Function exports a propery called `extra_decorators`, which computes
at runtime the callables that are wrapping a function in a class scope.

--HG--
branch : 1.4.0","1691ad7f35cae6dc567321106599639f67becefd","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-08 20:46:08","Add CallFunc.keywords, instead of putting together args and kwargs in CallFunc.args

This patch improves the similarity with the Python's AST. Until now,
CallFunc.args contained both the positional arguments and the keyword arguments,
which was misleading and always it was required to filter out keywords when working
with arguments.

--HG--
branch : 1.4.0","497f345b522ef217ec0b206308a20c9dc4422d12","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-08 23:06:38","Move YES to astroid.util.

YES is needed by other components of astroid, components which aren't
necessarily related to astroid.bases. In order to reduce circular
interdependencies between components, YES is moved into a new module,
tailored for various *utilities*.

--HG--
branch : 1.4.0","cebc16b2bcc6665cc14580289400a5c1faa6aead","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-08 23:43:03","Drop code that inspects sys.modules unconditionally, since it breaks the expectancy of a static analysis tool.

--HG--
branch : 1.4.0","fda55823e0914b739fff6b0cfe09a26118029776","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-12 17:59:36","Move InferenceContext and CallContext into astroid.context

In order to reduce circular dependencies between components,
CallContext is moved into a new module, astroid.context.
At the same time, for increasing the cohesion inside astroid.bases,
InferenceContext was moved as well into astroid.context.

--HG--
branch : 1.4.0","f4ef1a00f1036f974b69b9409c9ca3e61b5be3b8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-20 17:34:18","Introduce a base class for Set, List and Tuple in order to avoid code duplication. Closes issue #160.

--HG--
branch : 1.4.0","8e096e38c82efd29529baa0979af05cfb447adf3","","api.github.com","","False","[]","[{u'raw': u'#160', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'160', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","obsc","2015-08-21 00:39:19","Fix infinite loop in metaclass inference
(grafted from 43857b00bf3e6f2f93358f7ea89a7588828045c0)

--HG--
branch : 1.4.0","809c9eaab13b3ad17dc662e1f18946f7226fe924","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-22 16:24:33","Install lazy_object_proxy as a dependency.

--HG--
branch : 1.4.0","de5dca25a6d07e233e9a2009a68f779a38875733","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-25 16:00:42","Use a stack level of 2 when emitting warnings, since the call site of the deprecated method should be warned upon.

--HG--
branch : 1.4.0","92911d8b09d1a3d2256594b8ce7251ca396b0813","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-25 16:34:58","Emit a warning when an old AST name is used in an isinstance call.

--HG--
branch : 1.4.0","08268afe0c7693468501c4073c197ea6fbd051ac","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-25 17:41:47","Add ChangeLog entries for the newest changes.

--HG--
branch : 1.4.0","a4dbb93322c9e92bc83deded8d2467c95a5e2cbe","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-25 18:37:34","Change the order of the mixins, so that mixins are the first in the MRO before the actual roots.
(grafted from 645389e19f48c036c1e842d0749706380e56fa02)

--HG--
branch : 1.4.0","9598c9ec813948579d64949fca15269676bdd486","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","ceridwen","2015-08-26 14:16:54","Improve decorator introspection using wrapt and functools.wraps
(grafted from e6137c433705bf363bebd0d23f6c8e625d26c821)

--HG--
branch : 1.4.0","027a6e5b6872b91f924e57191aaffe2233f00334","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","ceridwen","2015-08-26 14:50:45","Add wrapt to pkginfo
(grafted from 9c2ea4f4a393cb09dde9a1af0a62683e5778db83)

--HG--
branch : 1.4.0","655e12f48d38eb067fb8d1bebea5f89520455d95","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","obsc","2015-08-26 16:49:54","Add new _find_metaclass method to maintain signature of metaclass
(grafted from 51eac3121268902edb547dc8908f3e9f294829c3)

--HG--
branch : 1.4.0","8cfa486701b40418916dd1a881d02b3f6b92e36f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-26 17:41:35","Make seen a parameter with a default value, instead of passing explicitly None.
(grafted from 01eda9eae74feced48d627f9000bd5be2ddb1029)

--HG--
branch : 1.4.0","9a2803f2c65f5cfec8aa513252439077055341f6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-26 17:51:18","functools.wraps needs to be called with the decorated function and the implementation of cached decorator was passing the bad arguments
(grafted from 2a66d7f8cf83616b3eac63bcae61efe655678ab7)

--HG--
branch : 1.4.0","c13857606dda6be0d48a3f40d7466391b5ab951b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-08-26 19:13:33","Update the version to reflect what will be released. Some users are using the repo's version and it's misleading to have the same version for the released code.
(grafted from bd95ace775ed60df863fa297443c47c2cf0ff3b5)

--HG--
branch : 1.4.0","3b98148205d608de54006e92bec6eded37a33f20","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-09-05 14:24:32","Don't use AsStringRegexpPredicate for detecting functional Enums.

This patch fixes a problem with the detection of enums, which detected
a class named Enumeration as a builtin enum, even if there was no correlation
between them.
(grafted from 1bb9d1375f71e2ed47169982050d679ea190a29f)

--HG--
branch : 1.4.0","1de5bd8d1de8d888d8660f9b7341494a1cfa2481","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-09-07 19:57:45","First pass of the Python 3.5 support.

--HG--
branch : 1.4.0","9abcce4e83d81d8675eb836f51c37b469a0a41a8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-09-07 20:53:41","Second pass of the Python 3.5 support: adding Async nodes.

--HG--
branch : 1.4.0","4f0203fddc5d00ea3a6d7ae28a7d4ed31be76e35","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-09-08 21:16:44","Improve the understanding of arguments

This changeset introduces a better way to understand arguments
passed into call sites. The original logic was moved from
astroid.context.CallContext, which become only a container for
arguments and keyword arguments, to astroid.arguments.ArgumentInferator,
a new class for understanding arguments.

--HG--
branch : 1.4.0","523f0c616824aa620dfdffce0c76bf5e2f99568d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-09-12 11:27:21","Add Call.starargs and Call.kwargs properties

They were added in order to have a minimum level of backward
compatibility, since they were removed from the class. This is also
an easy way to retrieve them, instead of looking explicitly for them
in args or keywords respectively.

--HG--
branch : 1.4.0","55edbec58a50dfa70425aaa113cac0a6ea49e94f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-09-24 18:53:24","Add brain tip for understanding numpy.core's mutation of the __all__ variable

Since astroid doesn't understand properly augmented assignments, we have
false positives with pylint when trying to find numpy attributes defined
in some submodules, since numpy and numpy.core generates the __all__
list by appending values from the subimport's __all__.
This should fix pylint's issue #453.

--HG--
branch : 1.4.0","ff44ac707935499c4d5f467bd9f11d19addc2e8f","","api.github.com","","False","[]","[{u'raw': u'#453', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'453', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-09-24 21:33:02","Fix a crash when inferring subscripts which returned the same object all the time.

--HG--
branch : 1.4.0","3336f623e428e38c6d9961bb1875377213fb9c44","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-09-26 00:15:36","Add numpy transform tip for understanding numpy's calculation of __all__.

--HG--
branch : 1.4.0","ab4dd0eb17f91d8052227db5336954d493d2a7eb","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","ceridwen","2015-09-26 17:33:47","Hopefully actually fix #185

--HG--
branch : 1.4.0","1de79044f831e803f75154712aa1a4698fb35b04","","api.github.com","","False","[]","[{u'raw': u'#185', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'185', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-09-27 00:38:55","Add test for issue #183.

--HG--
branch : 1.4.0","1c400c2d314ae9dfa901d0992f7536b72221eab7","","api.github.com","","False","[]","[{u'raw': u'#183', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'183', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-09-28 22:03:41","Fix a crash which occurred when extra_decorators was considering non-class level assignments to the same name as decorator calls.

--HG--
branch : 1.4.0","dc6d295fcf89b5033f1b46c00fd76e79d60f441b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-09-29 12:42:30","Import test for pylint regarding context inference in relation with factory methods.

--HG--
branch : 1.4.0","fbf8d1849c2746e5bc7c719593e3dd9e2b4e95a6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-09-30 11:25:34","Import test from pylint regarding a crash that used to occur a long time ago.

--HG--
branch : 1.4.0","c929685d26223c0e96837f682f5b32d6e5d7dc45","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-03 10:47:06","Make context an optional argument for BoundMethod.infer_call_result.

--HG--
branch : 1.4.0","5659a61e46aecb6e41cc92a3bf6ae9e3c69a52df","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-03 10:54:08","Skip objects which aren't callable when inferring an instance's call result.

--HG--
branch : 1.4.0","bc7174c2c73fcd474d18953a22219d61cae3ecd8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-03 12:26:33","Add a test for issue #188, which was triggered because the transforms weren't executed in a separated step. Closes issue #188.

--HG--
branch : 1.4.0","19197c89c23ef613ce7aa30ad3eb3630ff72b4c9","","api.github.com","","False","[]","[{u'raw': u'#188', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'188', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-05 22:22:55","Add a new node, DictUnpack, for representing the unpacking of a dict using PEP 448

This is a different approach than what the builtin ast module does,
since it just uses None to represent this kind of operation,
which seems conceptually wrong, due to the fact the AST contains
non-AST nodes. Closes issue #206.

--HG--
branch : 1.4.0","e3f02a3fab7c6ed033e9003eb31648d7c8a96fd5","","api.github.com","","False","[]","[{u'raw': u'#206', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'206', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-05 22:37:27","Remove the value from the DictUnpack node, since it's used mostly to represent the ** operation.

--HG--
branch : 1.4.0","9a465a0aad08bddcfc5ae01300c7895d4a3562d2","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-05 22:59:20","Add support for looking up into DictUnpack's value in Dict.getitem

--HG--
branch : 1.4.0","e47120b9fc216f787d2b1fd049072c6a78ced9dc","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-06 14:13:09","Add brain tips for PyQt signals for supporting emit / connect and disconnect methods on them

--HG--
branch : 1.4.0","d57b4071cece6e0814b6d001df6249b8838b16b5","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-07 10:13:29","Change the signature of the ArgumentInference class to accept directly the arguments and the keywords of a call site.

--HG--
branch : 1.4.0","e5f1b48721bb29a3a127675ff4d2c2c7cd5aa351","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-07 14:22:48","Change arguments.ArgumentsInference to arguments.CallSite

This new class can be used to obtain the already unpacked arguments
and keyword arguments that a call site uses, which is especially
useful when some of arguments are packed into Starred nodes.

--HG--
branch : 1.4.0","461f5ad7ec15a3d076ba91c88261418049c71003","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-07 22:07:09","Make duplicated_kwargs a public API.

--HG--
branch : 1.4.0","6e693aa45827f8078f1c04f9a89f546e39ec8a53","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-07 23:07:59","Support PEP 448 unpackings in dict calls.

--HG--
branch : 1.4.0","df3ff310a46654e2cecf99e28de6d8661e3e8a23","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-09 18:30:22","The functional form of Enum returns a class, not an instance.

--HG--
branch : 1.4.0","104555b9f08b2bf84ec24ed479b831d2f044bf1f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","jayvdb","2015-10-19 07:48:15","Fix SyntaxError on Python 2 for print function

--HG--
branch : 1.4.0","7aa6992f712f4d8e325ada8e8d9898e9f7e6911a","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-22 09:07:02","Replace the use of print in python3/data/module.py, since it complicates the testing of as_string.

--HG--
branch : 1.4.0","98e41442f6e9018ffcb38a761011f9c78b323b3e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","dmand","2015-10-23 21:45:36","Fix inference of list multiplication operation.

Old implementation was pushing all the possible values inferred from a node
into a list, thus creating extra items in case when there are multiple infered
values yielded. New implementation takes only first infered value, preserving
the expected size of the list.

Fixes pylint's #559.

--HG--
branch : 1.4.0","c1a0546d3e648fd3e003234775cafce349fbe350","","api.github.com","","False","[]","[{u'raw': u'#559', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'559', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","dmand","2015-10-24 13:39:40","Use safe_infer for inference of elements in list multiplication operation

Now inference yields YES instead of list item value when multiple
values are inferred for one list item.

--HG--
branch : 1.4.0","724b82119e6ab2f98eefacabc8809544a6962190","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-26 12:30:08","Class.getattr('__mro__') returns the actual MRO.

Also, Class.getattr('__bases__') returns actual bases.
It previously didn't work correctly, because it was putting the
entire ancestors into the Tuple object and it put those classes
into the wrong attribute.
Closes issue #128.

--HG--
branch : 1.4.0","0219936200703447f2073768cc32218a6ee1deab","","api.github.com","","False","[]","[{u'raw': u'#128', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'128', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-26 21:10:09","Rename the brain files into something more suggestive. Closes issue #208.

--HG--
branch : 1.4.0","5e35bab2df94737fc85f761a5b129c80dda63c52","","api.github.com","","False","[]","[{u'raw': u'#208', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'208', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-28 13:27:44","Rename the brain files again to avoid naming conflicts.

--HG--
branch : 1.4.0","f87efb1ede9dbcc6562fdfb9fb1b31b444eaf34f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-10-30 10:57:03","Add missing start and shutdown methods to the SyncManager tips.

--HG--
branch : 1.4.0","694110baed6b509e1dcfc8f5350c0a5f38cd0b1d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","dmand","2015-11-04 10:53:03","Add __getitem__ method to collections.deque inferface description.

--HG--
branch : 1.4.0","ea0b63b005662ae1a1a1cebc1dad67f45eb79e27","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","ceridwen","2015-11-09 19:26:22","With the tox bug fixed, it's now possible to use one tox.ini for all testing

--HG--
branch : 1.4.0","a08a72ca2388f722aa0317363d7d4b41408c3e91","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-14 09:03:41","Fix test failures.

--HG--
branch : 1.4.0","00ee5f1d800e5481a0e6c3f8592164390662d1c0","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-14 09:43:01","Remove interfaces API, which was moved in pylint / pyreverse.

--HG--
branch : 1.4.0","18cdf80dcb285369419f1037c3460e0ea6b6a4a1","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-14 10:28:00","Remove tests related to astroid.Project, which was moved back into pylint.

--HG--
branch : 1.4.0","154c4fb26a1191e1c5e2b1eefca74677b0adfd78","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-14 17:52:26","Fix test on python 3.

--HG--
branch : 1.4.0","e63dd6050cd141417d3f27ded7ec44cd11bcf23e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-18 09:58:51","Rename ass_type, AssName and other nodes in order to be similar to ones provided by the builtin ast module

The commit is just the renaming part from changeset bcca09ca.

--HG--
branch : 1.4.0","ba9b1b64876473b7d39985f8b9c8fc50557e0e85","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-18 10:10:05","Use the correct node for the isinstance check.

--HG--
branch : 1.4.0","c82a8771097edaa0a6e4c5ef3f838992ae5183bd","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-18 14:15:07","Fix the attribute name.

--HG--
branch : 1.4.0","50ea772d645e6b80f451da0d0bb13aab3b31c94c","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-18 17:19:04","Use the proper constructor for Await and handle properly the presence of .starargs and .kwargs on Python 3.5

--HG--
branch : 1.4.0","92433198afd87270dd9759f2cd6e77e7e579a30c","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-18 18:44:06","Fix the order of arguments for _format_args.

--HG--
branch : 1.4.0","946f0b4a72035901142c3d80023bea2b4a2146f8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-19 14:24:50","Remove logilab.common import.

--HG--
branch : 1.4.0","b3bd78ba25bdf56a2c6f8f9140b2623b5f5a2d8f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-19 14:50:51","Use the new node names.

--HG--
branch : 1.4.0","b403da1a81028d00fed5150d8748ba8aa1a93d36","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-19 15:04:54","Fix tests.

--HG--
branch : 1.4.0","f0778c57516a89fc1e82d7e32ad533275e55e44d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-19 15:46:42","Fix pylint errors.

--HG--
branch : 1.4.0","da0276ffb914ee2f9f34a4ae5f492c3dddbb17d6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","ceridwen","2015-11-20 23:10:38","Add deprecations for node attributes in scoped_nodes

--HG--
branch : 1.4.0","96228676c3692f341789f533406f2ae2d0ece4ff","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-21 00:05:06","Materialize the items when iterating them in Dict's constructor

This fixes a bug that can occur when the items object is changed during iteration.
It can happen when items is sys.modules, coming through inference at some point
and if there's an additional installed library that modifies sys.modules when
it is imported, as it is the case for pytest.AliasModule.

--HG--
branch : 1.4.0","408eec4aa3f3f93a02d7668779c777cd900f16b8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","ceridwen","2015-11-21 02:31:47","Add deprecation warnings and forward-compatibility APIs for node attributes

--HG--
branch : 1.4.0","3c24884c5b460aa5c1e5200a6b3516df140c77a5","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","ceridwen","2015-11-21 02:32:59","Merge fix for sys.modules changing

--HG--
branch : 1.4.0","f893a602afc45eb0cff265e2cc8952eb031337f6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-23 12:17:01","Handle the cases when a List can contain Uninferable as its elements

This can happen for instance when the list contains objects which
weren't inferable in the first place. There were a bunch of places
affected by this bug: unpack_infer, the inference of list additions
and the handling of the namedtuple's fields.

--HG--
branch : 1.4.0","918f8278f9d4a204361d1c46cefb744d836b5ecf","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-26 12:31:21","Add __setitem__ to deque's brain tip.

--HG--
branch : 1.4.0","0b94e7e4e922bcd47414f0f7e4cd42b39b48665d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-26 15:11:42","Add __delitem__ to deque's brain tip.

--HG--
branch : 1.4.0","8ca55154a557d6fd8cd048918dac985e10f10215","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-29 15:18:53","Prepare the release.

--HG--
branch : 1.4.0","71c4cc5a6ee59edf0bad1d81cf79295b5eb3f996","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-29 16:03:32","Disable redefined-variable-type for now.

--HG--
branch : 1.4.0","469b8151b451627c9a9f03e2e13be9b755d2a92e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-29 16:25:32","Added tag astroid-1.4 for changeset 9a398270ddec

--HG--
branch : 1.4.0","916ce790ef67c329531c74c03824f2d0cecd8e86","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-29 17:13:55","Add astroid as a dependency for pylint, since it's not picked up.

--HG--
branch : 1.4.0","4a6e9d71342805cdf9a4f4a1abf3122d28590a97","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-29 17:14:47","Removed tag astroid-1.4

--HG--
branch : 1.4.0","d6660f21823902fac82b6806fe9bdcbc9fd8ef4c","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-29 17:15:00","Added tag astroid-1.4 for changeset 5b5738496f0c

--HG--
branch : 1.4.0","6e37cb55bdfa9de0048a08fad1f0ca6989df7c76","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-29 17:27:15","Removed tag astroid-1.4

--HG--
branch : 1.4.0","c952e53d65a0ff047018b43c5addd03a13fa34c9","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-29 17:27:28","Don't forget to install pylint as well.

--HG--
branch : 1.4.0","920176392adabfbb1c62310c1c1d182f72df1df4","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-29 17:27:31","Added tag astroid-1.4 for changeset 3c78efb03537

--HG--
branch : 1.4.0","7b1d8950de39d9c9037a5e26a5a2b3a725931bc3","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-29 20:11:22","Add support for handling Uninferable nodes when calling as_string

Some object, for instance List or Tuple can have, after inference,
Uninferable as their elements, happening when their components
weren't couldn't be inferred properly. This means that as_string
needs to cope with expecting Uninferable nodes part of the other
nodes coming for a string transformation. The patch adds a visit
method in AsString and ``accept`` on Yes / Uninferable nodes.
Closes issue #270.

--HG--
branch : 1.4.0","0b910bde09d4c914ec577ce70810851633b81c34","","api.github.com","","False","[]","[{u'raw': u'#270', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'270', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-29 20:45:14","Prepare a new bug fix release.

--HG--
branch : 1.4.0","ef20af65a00488feea31f269a78c7ea3040efdbb","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-11-29 21:08:31","Added tag astroid-1.4.1 for changeset 90a41f5f9e8f

--HG--
branch : 1.4.0","bcd6dfe5f98fe27ed54bfbb45410134b6bc85d56","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-01 16:49:47","Use printf-style formatting in as_string, in order
 to avoid a potential problem with encodings when using .format.


Closes issue #273.

--HG--
branch : 1.4.0","900747213bfb106eacf650e09ef821b3289df2ac","","api.github.com","","False","[]","[{u'raw': u'#273', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'273', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-05 11:25:34","assigned_stmts methods have the same signature from now on.

They used to have different signatures and each one made
assumptions about what could be passed to other implementations,
leading to various possible crashes when one or more arguments weren't given.
Closes issue #277.

--HG--
branch : 1.4.0","653e3d14b4358866d1f33fd0a4537733b70a624f","","api.github.com","","False","[]","[{u'raw': u'#277', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'277', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-08 09:54:18","Make pylint happy.

--HG--
branch : 1.4.0","2f2ea80047aea471afb0db4f5cb39fe869cd809e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","dashea","2015-12-11 20:04:21","Check for flags/enum types before checking for int

gobject-introspection enum and flag types inherit from int, so the check
for a unusable string represenation needs to happen before checking if
the values can be used as integers. This fixes syntax errors in the
generated stubs for gobject-introspection modules containing flag and
enum types.","e97b7765624d82187809f4594dd954f0b9c95cc6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2015-12-11 12:00:26","Delete .hgtags","f15d6cb1cc3ba99cc27339e3212e36822cf89576","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","arusahni","2015-12-10 11:37:34","Port hgignore to gitignore.

For future iterations, we should switch to using pre-canned ignore lists
from https://gitignore.io.","005eb73443096ba5ad2cec0225f454637e465e45","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-11 07:14:43","Include a travis.yml file for configuring Travis builds

This patch also brings a couple of small changes to the
setup.py file, in order to make it work installing from
another directory.","456d9581f00ad7082fcd0ca348f134b311016834","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-10 22:02:57","Change the extension of the README file, so it gets rendered by github.","8cb5a9c9b9c0bac0bd53681f3541e378bdb83ece","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-11 12:19:12","Make _get_file_from_object more robust by verifying explicitly the extension

This should fix a crash on PyPy, which occurred because
_get_file_from_object was  returning files with .pyc extension, without
stripping the 'c' from it.","4b99a460aa9f49ca159fbcfb047886ccfaef766b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-15 13:13:18","Add support for not byte-compiling test files invalid by design.","19a0c822b34225b61c9909059845a8288df63c3d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-15 15:22:22","Add a test for is_standard_module with datetime.

This is an interesting example, since datetime, on pypy,
is under lib_pypy, rather than the usual Lib directory.","14285674261046b8546fa249ce9e974ebd04dfb0","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-15 16:06:44","Add lib_pypy into the list of standard library modules for PyPy

Unfortunately it is not detected in any way by
distutils.sysconfig.get_python_lib. This can detect datetime as a
builtin module on PyPy.","7ac5cdcbc95c4c3ff2ad74487f7533b7d2916dc3","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-15 17:16:57","Improve the detection of lib_pypy, which was faulty.","1a1551fba30a4e9d27498105f9013bf1ac653c51","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-15 19:12:38","Move code which doesn't trigger DistutilsPlatformError outside of the try block.","59969400c706bffc06d530cb0a09b787c16244e8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-15 19:41:30","Add lib_pypy from the real installation of Python

This solves a problem with pypy and virtualenv, the latter deciding
not to copy some of the modules into the virtual environment, such
as datetime, which means that STD_LIB_DIRS needs to be updated in
order to look there as well.","141d03f5bf8b4222299826b8758b87b642c9d7e3","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","laura.medioni@logilab.fr","2015-12-16 10:18:22","Add information about parent module to the elements defined in this module

solves issue #265","1d773dd4ac0660c8307622f8bb9441b52dd3fe04","","api.github.com","","False","[]","[{u'raw': u'#265', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'265', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-18 19:08:50","The slots() method conflates all the slots from the ancestors into a list of current and parent slots.

We're doing this because this is the right semantics of slots,
they get inherited, as long as each parent defines a __slots__
entry.","140146588893702631b49809af5c1ba9f361ddfe","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-18 19:16:52","Trigger NotImplementedError with slots message before mro gets executed (will fail for old style classes)","433531cd5bf9f2424bf380325b33c198ed0bae5e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-21 00:06:08","Prepare 1.4.2 release.","55e38faa8240ad2324376a32d0c1be27ec44e8dd","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-21 10:33:56","Make the pkg_resources brain tip a bit more specific

The brain tip for pkg_resources was lacking proper returns,
which led to an inadvertent assignment-from-no-return false positive,
which assumed that the functions are indeed not returning anything
useful. The bug was uncovered by 058a28.","935f68f7582cd6400837f714a333170cdfa287f3","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-21 10:40:04","Add changelog entry for 935f6","f98f7780ae05393bbbd8a0d108bfbb1b2f68b6d6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-19 21:42:09","Add /usr/lib and /usr/lib64 to the list of stdlib paths","b1659cc9f75c0a6e09c2c83d60614f13191b3e3c","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-21 11:56:54","Add ChangeLog entry for b1659cc","f54683515f902e970bce878d5531f28eabc132ad","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-21 16:10:18","Add a new possible property-descriptor, lazy.

Since we don't understand descriptors at all, we're relying
on a list of possible property-descriptors, that is, decorators
which transforms a method into its value, the exact process that
a property does. While this is a bad approach, it works, at least
until we can provide support for this high level of understanding.
Closes #279","fcd146bd2d82fe57db931cfdec5b9414783cd5d8","","api.github.com","","False","[]","[{u'raw': u'#279', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'279', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2015-12-24 15:03:56","Prepare 1.4.3 release","9f297c8712d2dbbc9b6b4fb104896b8cd2c18ff5","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-01-11 22:50:49","Enforce strong updates per frames.

When looking up a name in a scope, Scope.lookup will return
only the values which will be reachable after execution, as seen
in the following code:

   a = 1
   a = 2

In this case it doesn't make sense to return two values, but
only the last one.","b2ece4f4d0e32cdc4791ccb7e7ba6758ac615491","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-01-14 21:11:24","Support accessing properties using super().","da683ae017cc5e29a16f63b670272821afdf3b29","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","mbdevpl","2016-01-14 10:47:11","added 3 pkg_resources functions to brain

[Those 3 are] methods of WorkingSet objects [that] are also available
as module- level functions in pkg_resources that apply to the default
working_set instance. Thus, you can use e.g. pkg_resources.require()
as an abbreviation for pkg_resources.working_set.require()

above taken from:
https://pythonhosted.org/setuptools/pkg_resources.html#basic-workingset-methods

this fixes https://github.com/PyCQA/pylint/issues/780

Signed-off-by: Mateusz Bysiek <mb@mbdev.pl>","547117638d99bf3cbc8a2e070ac139a0b6422158","","api.github.com","","False","[u'https://github.com/PyCQA/pylint/issues/780', u'https://pythonhosted.org/setuptools/pkg_resources.html#basic-workingset-methods']","[{u'raw': u'https://github.com/PyCQA/pylint/issues/780', u'refstyle': u'url', u'parts': [u'PyCQA', u'pylint', u'780', u'']}]","[u'@mbdev']","[]"
"pull_request_commit","373","pycqa","astroid","dbaum","2016-01-14 17:14:39","Fix unpack_infer to fail if results are empty

This should prevent a StopIteration leaking when next is called
over unpack_infer.","d4f0e00eab3ad48e85ed40c7bb553dec949075a9","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-01-15 13:28:49","raise_if_nothing_inferred is in bases, not in decorators.","8d035f7e3eb3834a48545998101da903dd833568","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-01-15 17:01:24","Prepare 1.4.4 release.","33f7812ddda513315ec7c3e0ae3200ab3b0d6551","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-01-15 17:04:40","Fix pylint warnings.","942577fc5b5c44bc53937a9131a4e9ec476590d4","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","jcristau","2016-02-10 14:15:02","doc: fix build

Stop hardcoding an outdated version number, don't reference nonexistent
_static directory, and fix ""inference"" module reference.

Signed-off-by: Julien Cristau <julien.cristau@logilab.fr>
(cherry picked from commit f505daf0bdd2b4dab1297b75f47e1f047bf142ec)","44dbc8a7d89cdf7027ea6fc50fd95586664de43d","","api.github.com","","False","[]","[]","[u'@logilab']","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-02-16 18:15:20","Set the parent to the BinOp node when inferring nodes created during binary operations

In order to do so, we had to change the signature of infer_binary_operation to receive
the binary operation instead of the operator itself.","ce80c835a492ccdf05b9786f0e0960327a51826e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-02-18 21:55:32","imported_names() got replaced by public_names()

Our understanding of wildcard imports through __all__ was
half baked to say at least, since we couldn't account for
modifications of the list, which results in tons of false positives.
Instead, we replaced it with public_names(), a method which returns
all the names that are publicly available in a module, that is that
don't start with an underscore, even though this means that there
is a possibility for other names to be leaked out even though
they are not present in the __all__ variable.","1d5bf7ec3c74496e2b9b5772cbe953a962ccd3d9","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-03-11 01:04:54","decoratornames() does not leak InferenceError anymore.","6294d0d503baa4d2d1e8c814415e037da9991fd5","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-03-21 18:18:55","Prepare 1.4.5","2499594771a8ecf00ddb798107e46ce4fc12820c","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-03-21 18:23:46","Remove trailing whitespace.","fcf5925ce15afbac4630aad07f19bd41d1f6854f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-03-24 17:31:47","Add brain tips for the ssl library.","10122275a6b6aa6b39d8085d07a9c1ea193d4946","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-04-13 11:32:37","Functional form of enums support accessing values through __call__.","ce8966980cd4bceecbe23969e3f03258a473b51e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-05-20 16:18:45","Fix a crash which occurred when the class of a namedtuple could not be inferred.","e888fb3c45178929259b8544100c5b9e70db7a79","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-06-06 14:27:05","Prepare 1.4.6","bb3ff4e34620ed442fbddb3c6f479bfe65c47946","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-06-27 17:24:18","Add more up-to-date package information. Close #330","5007c49ef63936ec7e4889c211801a1971598060","","api.github.com","","False","[]","[{u'raw': u'#330', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'330', u'']}]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-05-25 13:45:38","Stop saving assignment locals in ExceptHandlers, when the context is a store.

This fixes a tripping case, where the RHS of a ExceptHandler can be redefined
by the LHS, leading to a local save. For instance, ``except KeyError, exceptions.IndexError``
could result in a local save for IndexError as KeyError, resulting in potential unexpected
inferences. Since we don't lose a lot, this syntax gets prohibited.","2c48ede51875814bc039279462f45d7eeb219da3","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-07-02 11:02:51","Prepare 1.4.7","14fe475f76e1817521b4542f5db27a642affd2ca","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-07-07 16:13:31","Add the new date of the release.","106661a53742d611e1833116171e3d58a2141731","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-07-26 22:51:15","Add `returns` into the proper order in FunctionDef._astroid_fields

The order is important, since it determines the last child,
which in turn determines the last line number of a scoped node.","8f1d6bba30aeae80770df4a85d8d497a2d73a39d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","PCManticore","2016-07-26 23:10:48","Prepare 1.4.8","44f0753684247a246d36cf27bc5f4a0d176d176b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","373","pycqa","astroid","The-Compiler","2016-08-22 08:21:50","Add pytest 3 compatibility in brain_pytest (#357)

This change adjusts brain_pytest for pytest 3, while also reintroducing pytest 2 compatibility.","436687c385dbeebcfb7faaedc745491a5a115195","","api.github.com","","False","[]","[{u'raw': u'#357', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'357', u'']}]","[]","[]"
"pull_request_commit","374","pycqa","astroid","degustaf","2016-11-30 15:19:15","Remove pylint errors","f9a0611585eef681488a36f4aecb0c15acd8d232","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","379","pycqa","astroid","Scal-jbb","2016-12-14 23:06:36","Force cast __path__ to a list

__path__ can be an '_frozen_importlib_external._NamespacePath' object for a namespace module (declared by setuptools) with python 3.5+.","3885f5ad2389419bfdc3f760f03c12ba7f6cd3e1","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","381","pycqa","astroid","rogalski","2016-12-18 12:35:13","improve inference of OrderedDict","85fda7af9f2026e98e34e4cf2c161b84b9343c92","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","382","pycqa","astroid","rogalski","2016-12-29 19:47:55","infer results of open() and file() calls","67f992c74e95d5c1e0930497ce519f577374c5f3","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","382","pycqa","astroid","rogalski","2016-12-29 20:39:08","fix module name in py3 case","ba9dff896aea967125da66d9b52e51fa978a9bd0","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","382","pycqa","astroid","rogalski","2016-12-30 21:13:32","correct py3 inference, added usage of builtin objects instead of stubs, add context manager stubs","0432a6315e647e38ade645ccbdf68ac2c4871ffc","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","382","pycqa","astroid","rogalski","2016-12-30 23:03:29","open: infer only built-in calls","98fe5c8dd2ef305bb728cb4ce91bfc8fd21ff088","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","382","pycqa","astroid","rogalski","2016-12-30 23:22:46","Merge branch 'last_correct_branch' into infer-open-calls","24180efab9bcb3f593bc5f9888f153b4d9dcc8df","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","382","pycqa","astroid","rogalski","2017-01-01 17:50:17","minor changes based on Claudiu review (part1)","97d8fde555baf76105460155fdfeb0913a7c303d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","383","pycqa","astroid","rogalski","2016-12-30 17:34:40","Revert ""Improve inference of OrderedDict (#381)""

This reverts commit ef05be71134054abaa3aa68e4c7ea67d701e5c13.","8e1fb76b5f89b2029b7f8f9b460bba9fe6369454","","api.github.com","","False","[]","[{u'raw': u'#381', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'381', u'']}]","[]","[]"
"pull_request_commit","383","pycqa","astroid","rogalski","2016-12-30 23:33:38","Fix regression by adding a under method","01ff77350863355d7bd05da84a7b7fa91d775ece","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","384","pycqa","astroid","degustaf","2017-01-01 08:03:42","Make ClassDefs support keyword arguments.","cd6e1d65273c0cf43c394ce169b9cfff6ff5a35f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","385","pycqa","astroid","david@dropbox.com","2017-01-04 04:54:36","Implement __getitem__ inference for classes (using the metaclass)

Essentially implement the getitem method in ClassDef which returns the correct value.

Fixes #348","8465159364fb994e3828d8db6473f458e18372a2","","api.github.com","","False","[]","[{u'raw': u'#348', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'348', u'']}]","[]","[]"
"pull_request_commit","386","pycqa","astroid","degustaf","2017-01-10 13:51:49","Make is_argument search kwonlyargs.","9cba0050acd69a021f4c3053a377bb838089e01a","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","387","pycqa","astroid","degustaf","2017-01-23 20:04:51","Add getitem to defaultdict brain.","0fea1205efb6e97923a8f9f470b4ef2711829c52","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","388","pycqa","astroid","rogalski","2017-01-24 21:04:21","Mark __init_subclass__ as classmethod

Just a POC, needs test coverage","c36f7ab2c60b0218804387c5f0a3694297da5493","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","388","pycqa","astroid","rogalski","2017-01-25 20:52:15","Add unittest","f8f81da69dc7ec59d8f93577612e621e8a0a85af","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","388","pycqa","astroid","rogalski","2017-01-25 21:58:58","Fix __init_subclass__ method doc","e763de912cde91495534d9a07ad10fa302b26ed2","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","388","pycqa","astroid","rogalski","2017-01-25 22:12:56","Fix unittests","18d0ae343a92ebe349b454c96ebf56ddd08fcbec","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","388","pycqa","astroid","rogalski","2017-01-25 22:26:44","Fix unittests from another modules","4926bc8b48fb4f1daf946dc94b6fc78f465399de","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","388","pycqa","astroid","rogalski","2017-01-26 19:37:08","Revert ""Fix unittests from another modules""

This reverts commit 4926bc8b48fb4f1daf946dc94b6fc78f465399de.","c7072d8995eedf9e25570788052db4c1e5be6d46","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","388","pycqa","astroid","rogalski","2017-01-26 19:37:10","Revert ""Fix unittests""

This reverts commit 18d0ae343a92ebe349b454c96ebf56ddd08fcbec.","430a93617e92a8937259dfdcfaee8d2b9355b1e4","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","388","pycqa","astroid","rogalski","2017-01-26 19:37:13","Revert ""Fix __init_subclass__ method doc""

This reverts commit e763de912cde91495534d9a07ad10fa302b26ed2.","d8d28d10b8547545f5b3dcd21bcd62b0d5e78023","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","388","pycqa","astroid","rogalski","2017-01-26 19:38:50","Fix once again","efea818ebaed016dde53dd2db16a488028a66196","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","388","pycqa","astroid","rogalski","2017-01-30 20:47:41","remove old version of the test","5932083ad363222b795f8387d07cc14eeb40f65d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","389","pycqa","astroid","rogalski","2017-01-25 22:04:30","mark __init_subclass__ as classmethod","0390c52fa90301405b692973988e69109bb5f7df","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","389","pycqa","astroid","rogalski","2017-01-25 22:10:58","Fix unittests","8c006b4be8b0290923d78fc3142c6854004453ca","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","389","pycqa","astroid","rogalski","2017-01-25 22:29:01","Fix unit tests from another modules","663da96b86ab71a01d583d5fd7d385d4aaa97b0e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","389","pycqa","astroid","rogalski","2017-01-26 19:24:51","Revert ""Fix unit tests from another modules""

This reverts commit 663da96b86ab71a01d583d5fd7d385d4aaa97b0e.","4554b016a738f8fca24b12c14e672f5e8010c303","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","389","pycqa","astroid","rogalski","2017-01-26 19:25:03","Revert ""Fix unittests""

This reverts commit 8c006b4be8b0290923d78fc3142c6854004453ca.","4553c0e8ca411413ba29c86b3048b5d8afb32c83","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","389","pycqa","astroid","rogalski","2017-01-26 19:25:30","Revert ""mark __init_subclass__ as classmethod""

This reverts commit 0390c52fa90301405b692973988e69109bb5f7df.","98e0ef2bfcdc5c7298c3f6b9f01b8d6df7f559da","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","389","pycqa","astroid","rogalski","2017-01-26 19:36:47","Mark __init_subclass__ as classmethoid in Python 3.6+","9ddd35461c302a06e6b07b33ed56e19414a00cc8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","390","pycqa","astroid","david@dropbox.com","2017-01-05 15:33:03","Add inference for typing.NamedTuple","f3d76aabc725d87a897af1d3d4bffe2fb5d7431f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","390","pycqa","astroid","david@dropbox.com","2017-03-01 06:00:32","Code review comments","cf3b1cb0e84ee97957567c3362c1005fc12b533b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","390","pycqa","astroid","david@dropbox.com","2017-03-01 06:27:44","Fix tests","5208bd413a8135bd449ad1cc4319edcf4700343e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","390","pycqa","astroid","david@dropbox.com","2017-03-01 06:44:55","Fix lint issues","cfe156629037195eeb43181efa5bdd09eb15c1c0","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","392","pycqa","astroid","david@dropbox.com","2017-01-10 02:14:56","Type comments, take 1","857c91f59f9e3d278dba0f1bb176075771ca3d3d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","392","pycqa","astroid","david@dropbox.com","2017-01-13 20:55:24","Speed up parsing","2a125d4640fd72de17e9b0f4a8b87df7273fb418","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","392","pycqa","astroid","david@dropbox.com","2017-01-14 22:52:08","Fix start of function comments","52955b81ac3ea7c820f4fc343126288ee806c347","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","392","pycqa","astroid","david@dropbox.com","2017-01-28 01:35:01","WIP: type_comments","4b7b51a501c13fa894d7e468925e50223b2c4fbb","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","392","pycqa","astroid","david@dropbox.com","2017-01-28 15:48:58","WIP: type_comments","72a454d664972ecaaa56f355b78a866620b9e907","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","392","pycqa","astroid","david@dropbox.com","2017-01-28 15:59:02","WIP: type_comments","af549696be2d252250dd0681d104c88569babe6b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","394","pycqa","astroid","rr-","2017-01-30 08:45:55","Add support for annotated assignment nodes","437560727e58b738c660b273c85bcea5badb4e71","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-05 13:53:56","review fixes","b7c88492163f36559dad3c673b81566f48ab03a2","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-07 16:45:20","review fixes (II)","60b384f8668b588f33cd03ef92820f06b3ba21c4","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-07 16:47:18","add changelog entry","5bd21c2d1caaf4783a3b07892c1690c3f8629f6c","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-07 16:57:06","fix indentation","f39ab6377dce29292f8e8b8867f571b1e99eb73a","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-07 20:41:17","fix too long line","275ff6135e7befc807e0f6169a7c5b7b69a15d48","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-07 22:30:59","make non-optional arguments required","462925a0942847272744b1742a6bbfc4e83d38b1","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","394","pycqa","astroid","rr-","2017-02-07 22:32:47","use visit_const","ddc652e44fc1c9946cf9439aecaea3d82d217ff8","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","396","pycqa","astroid","rogalski","2017-01-30 23:44:08","Infer starred expressions in (tuple, list, dict) literals

Just a POC, needs:

1) Guidance on if it’s a correct way to solve a problem
2) Extra tests
3) Docs entries

Aims to solve PyCQA/pylint#957","21063712c5a54d06c154ec3bf8e36cd42120c743","","api.github.com","","False","[]","[{u'raw': u'PyCQA/pylint#957', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'957', u'']}]","[]","[]"
"pull_request_commit","396","pycqa","astroid","rogalski","2017-02-05 12:51:58","Fix namespace population when wildcard import is used (#397)

Fix PyCQA/pylint#1312","9a8eec14016123f1cbc106eab04ce2ac3156670d","","api.github.com","","False","[]","[{u'raw': u'#397', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'397', u'']}, {u'raw': u'PyCQA/pylint#1312', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1312', u'']}]","[]","[]"
"pull_request_commit","396","pycqa","astroid","rogalski","2017-02-05 12:57:40","Revert ""Fix namespace population when wildcard import is used (#397)"" (#398)

This reverts commit 3e6ef99928137a396a6ee9c75351f4194b2471e8.","7dbd9bde02cc8c53a7ac46fe7ce0a11d9ce3c36f","","api.github.com","","False","[]","[{u'raw': u'#397', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'397', u'']}, {u'raw': u'#398', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'398', u'']}]","[]","[]"
"pull_request_commit","396","pycqa","astroid","rogalski","2017-02-05 15:18:39","Extra tests, raise InferenceError when starred expressions cannot be inferred","5cc5e5b3c75c96efff11482dd4db1396098f2304","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","396","pycqa","astroid","rogalski","2017-02-07 20:36:20","Overall improvements in docs, raised exceptions and more","b5b5eaf6ea7173f6f8e79516c87c53b578dd316a","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","396","pycqa","astroid","rogalski","2017-02-14 19:02:55","Merge branch 'master' into infer_starred","bb218dd1e3cd2e6ffe67109f99aef24b9a736005","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","396","pycqa","astroid","rogalski","2017-02-14 19:04:16","Rename unused name to underscore","aeac1c12b1e8272f12a64f290c71671847901dcd","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","397","pycqa","astroid","rogalski","2017-02-05 12:31:39","Fix inference of names exported via wildcard-import

Fix PyCQA/pylint#1312","0c57b08c12d9f12dc3fbd98e7d5469b38ba6636a","","api.github.com","","False","[]","[{u'raw': u'PyCQA/pylint#1312', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1312', u'']}]","[]","[]"
"pull_request_commit","397","pycqa","astroid","rogalski","2017-02-05 12:41:20","Clean up tests","55a90c5658b1e314c5f058e4bee4edfba02c5e51","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","398","pycqa","astroid","rogalski","2017-02-05 12:55:49","Revert ""Fix namespace population when wildcard import is used (#397)""

This reverts commit 3e6ef99928137a396a6ee9c75351f4194b2471e8.","2c5fca58cbebc3964b1a384faece553d01e08d9c","","api.github.com","","False","[]","[{u'raw': u'#397', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'397', u'']}]","[]","[]"
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-07 21:49:36","Initial support for asynchronous comprehensions","d50417eea03d2e0098f4309166acc4aff652f51b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-07 21:53:20","Fix obvious regression for older interpreters, remove redundant comment","edee41c6ffbc7fddbfada91b7d0b069a46b6d648","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-07 21:56:43","Fix regression part2: add default value for getattr (...)","df99e25f292aa987f6c533f461666095781e6eed","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-07 22:04:10","Fix bugs found by pylint","30dad28076353d8890b6542e60117d6205fc97ba","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-09 18:26:02","Merge remote-tracking branch 'PyCQA/master' into async_comprehensions

# Conflicts:
#	ChangeLog","1a12c78b5444c27ff4cea448f9a5d95bfb142842","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-09 18:34:15","Fix review comments","f8eec36010a522b978567709beee8d99fa1c7316","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-09 18:39:39","Reuse inherited code instead of copy-pasting it","17874b88d3836c15c25f88a974e1350412b9cc10","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-28 20:16:15","Disable assigned_stmts for async fors and async comprehensions","00e28c5cabb88f06844c396a37d0969b51feda8e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","400","pycqa","astroid","rogalski","2017-03-01 18:38:34","Merge remote-tracking branch 'PyCQA/master' into async_comprehensions

# Conflicts:
#	ChangeLog","714abcc4758ff2120a0824533a2d075a8a57da69","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","402","pycqa","astroid","rogalski","2017-02-08 20:34:46","Add failing test","2f0f32abb1b7d336f1823dead2f3f94975928a81","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","402","pycqa","astroid","rogalski","2017-02-08 20:35:49","rebuilder: fix metaclass detection when multiple keywords are used in ClassDef","74daf09a0131b31a2dda95d8ea011192cd9cd9fb","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","402","pycqa","astroid","rogalski","2017-02-08 20:37:04","Add changeling entry","d7ca7e88e697c5aa94265f07cf966d48201f77d6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","403","pycqa","astroid","rogalski","2017-02-08 21:04:29","Fix typing.NamedTuple being not callable","9f7a91baff9113188784f7ed952e831761f5c69d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","403","pycqa","astroid","rogalski","2017-02-08 21:17:01","Rewrite a test to check if asserted behaviour is what interpreter does","6c03951713cb891982de7ab152235dd9e5eae7e5","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","403","pycqa","astroid","rogalski","2017-02-08 21:24:20","UT: If one of inferred is Uninferable, skip check for being callable","79e66536b786287adf4c0efce6823cc00039f9da","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","403","pycqa","astroid","rogalski","2017-02-08 21:29:20","Fix pylon warning","37280b4906b137dfbd8f2be4d8fce611181fa662","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","403","pycqa","astroid","rogalski","2017-02-09 22:26:24","Merge branch 'master' into fix-namedtuple-not-callable","b9d4879ca962838bb5803e0408f0367234a789d3","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","403","pycqa","astroid","rogalski","2017-02-09 22:27:55","run tests for named tuple being callable only in python 3.6+","7d3741e4324527b4c06e1bb4db63e65153ca1ed3","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","404","pycqa","astroid","rogalski","2017-02-09 18:50:25","Add failing tests to help debug an issue","85fc68a017e59471eababbbbb43d10d708d0fd82","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","404","pycqa","astroid","rogalski","2017-02-28 19:33:03","Drastically simplify tests","255314c0dfa14b33462cf302056d4698bae2cc37","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","405","pycqa","astroid","rogalski","2017-02-11 19:32:19","Improve inference of namedtuples

Closes PyCQA/pylint#1033","34546e3706ca9cc93c31846a31dd29723dcedb3d","","api.github.com","","False","[]","[{u'raw': u'PyCQA/pylint#1033', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1033', u'']}]","[]","[]"
"pull_request_commit","405","pycqa","astroid","rogalski","2017-02-14 18:35:24","Break long field_def to two implicitly joined lines","fe317aab96678ce72451af8fd4d5b6c9ffb36888","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","407","pycqa","astroid","rogalski","2017-02-28 19:22:25","Add brain_re.py for correct inference of regex flags in Py3.6","4ebed8c1b6709528d21eb8b69a6a06918fc35ffd","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","408","pycqa","astroid","rogalski","2017-02-28 21:19:22","builder: fix detection of whether found file is a package when there is a __init__.py in file name

Fixes PyCQA/pylint#1348","d8791ff449ef5cb8518a9ac0e59c1084842fdf7d","","api.github.com","","False","[]","[{u'raw': u'PyCQA/pylint#1348', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1348', u'']}]","[]","[]"
"pull_request_commit","408","pycqa","astroid","rogalski","2017-03-27 19:56:47","Add unit test","5a88003f5c366c81cf209cb7d8faa8dcb76efde7","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","408","pycqa","astroid","rogalski","2017-03-27 19:57:06","Merge branch 'master' into builder_fix_detection_of_package","f1257b9265eea33a0969ca45f790dd2e6090653c","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","408","pycqa","astroid","rogalski","2017-04-02 11:42:47","remove not needed test","f0dd1d23dddfe5ed571a73d6e96d2e9e5805ca77","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","408","pycqa","astroid","rogalski","2017-04-02 11:48:21","remove not needed empty line removal","093f16b1f35464f84203689d94710cb72367f9eb","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","409","pycqa","astroid","asottile","2017-02-28 21:37:44","No longer install tox / pip twice in travis","ac9b9cdd92b465c324824f07312d5ca0ca470956","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","410","pycqa","astroid","cpennington","2017-03-08 19:30:55","Add a test of binary operations on types with unknown bases","dfc8141c0ec3df56180c84b3633e966c61b2f585","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","410","pycqa","astroid","cpennington","2017-03-08 15:21:25","Quickstart _infer_binary_operation to raise errors that occur during startup.

Since https://github.com/PyCQA/astroid/commit/3e27213914271309a4716662b09fda91fca9efa1,
is_subtype and is_supertype raise exceptions when they can't find a
relationship between types. This is caught by the callers of
_infer_binary_operation. However, the error is only thrown after the
generator return by _infer_binary_operation is started.

Prior to this patch, the generator is only started inside the else
clause of:

try:
    results = _infer_binary_operation(lhs, rhs, self, context, _get_binop_flow)
except exceptions._NonDeducibleTypeHierarchy:
    yield util.Uninferable
else:
    for result in results:
        yield result

To address this, the quickstart decorator pulls the first value from the
generator when it's called, and then buffers that first result until it is
needed by the later iteration.","3179195b225baed9c27e774124ba3a5ba9269959","","api.github.com","","False","[u'https://github.com/PyCQA/astroid/commit/3e27213914271309a4716662b09fda91fca9efa1']","[]","[]","[]"
"pull_request_commit","411","pycqa","astroid","cpennington","2017-03-08 15:25:08","Add a brain for the json module.

This implements the fix suggested in https://github.com/PyCQA/pylint/issues/922
for the result of `json.load` being inferred as a `bool`.","713ef82146e2e8538fba75f1c9d5e00712516b1e","","api.github.com","","False","[u'https://github.com/PyCQA/pylint/issues/922']","[{u'raw': u'https://github.com/PyCQA/pylint/issues/922', u'refstyle': u'url', u'parts': [u'PyCQA', u'pylint', u'922', u'']}]","[]","[]"
"pull_request_commit","411","pycqa","astroid","cpennington","2017-03-08 20:08:34","fixup! Add a brain for the json module.","25bb64117665e1b11b3383166ee73c1910b43213","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","412","pycqa","astroid","cpennington","2017-03-08 19:10:15","Fix an infinite loop that could occur during inference of __nonzero__.

For example:

class AccessResponse(object):
    def __init__(self, has_access):
        self.has_access = has_access

    def __nonzero__(self):
        return self.has_access

not AccessResponse(False)","50cad740924a2ba984a3b0dd7d02719f23a92981","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","412","pycqa","astroid","cpennington","2017-03-08 20:17:36","Add a test for variable-value __nonzero__ methods","46e5ac18f1c6d6fc0f53f6eb19ec0c45c8aaca0d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","413","pycqa","astroid","cpennington","2017-03-10 19:28:11","Make functools.lru_cache available in all python versions","76acbb5f6cfefef92121b757e223be61413c014d","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","413","pycqa","astroid","cpennington","2017-03-10 19:28:21","Cache object attributes","432c519234798563c5b7b16d4c107acd3ed04d04","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","415","pycqa","astroid","rogalski","2017-04-02 15:45:57","Support rename=True in named tuple inference

Fixes PyCQA/pylint#1367","e2a233e58bb427a970b84bf87a1e5808aab874dd","","api.github.com","","False","[]","[{u'raw': u'PyCQA/pylint#1367', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1367', u'']}]","[]","[]"
"pull_request_commit","415","pycqa","astroid","rogalski","2017-04-02 16:25:54","Fix clashing tests","0fb82cee2684351e8db1253aab16d97215ab95a1","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","415","pycqa","astroid","rogalski","2017-04-02 17:01:29","add a test case for uninferable rename argument","9ad88dddf957aa7cee55f0574c3b3e03bcc4020a","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","415","pycqa","astroid","rogalski","2017-04-02 17:08:16","fix test","85b0867aba6b7cecaed26c69229bab3ccbca7e55","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","415","pycqa","astroid","rogalski","2017-04-02 17:21:35","add changelog entry","b6cbe714549d98cd11b1753de5b1bcf362a86d86","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","416","pycqa","astroid","cpennington","2017-03-13 19:57:50","Use set-difference rather than nested loops

On https://github.com/edx/edx-platform/tree/master/common/lib/xmodule/xmodule,
this resulted in the following performance improvement (with no change in the
errors detected):

Before:

Command exited with non-zero status 30
619.70user 322.11system 15:44.25elapsed 99%CPU (0avgtext+0avgdata 587068maxresident)k
0inputs+464outputs (0major+201145minor)pagefaults 0swaps

After:

Command exited with non-zero status 30
294.99user 10.76system 5:05.97elapsed 99%CPU (0avgtext+0avgdata 583536maxresident)k
0inputs+440outputs (0major+167856minor)pagefaults 0swaps","1c1babdb6e1fd91d92d0c13aaf96d4ae41707867","","api.github.com","","False","[u'https://github.com/edx/edx-platform/tree/master/common/lib/xmodule/xmodule']","[]","[]","[]"
"pull_request_commit","417","pycqa","astroid","cpennington","2017-03-15 14:59:28","Cache the computation of which modules haven't been added to the path_importer_cache yet","265dd95c1f6cef3ef8a1b5609c580c4da39d8629","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","418","pycqa","astroid","degustaf","2017-03-19 21:23:44","Catch exceptions raised in running pylint on enum.py.","c0afa1803dc06d3f3771be42d99ea5a27de73bbb","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","418","pycqa","astroid","degustaf","2017-04-04 02:05:57","Remove references to inspect.stack.","a6c800a7c1ba0a108c3203c01d01eb10ae651f3b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","420","pycqa","astroid","rogalski","2017-03-28 21:04:12","Fix assigned_stmts() for AnnAssign nodes without value

Fixes #419 and PyCQA/pylint#1389","fa2bbce797c49b9a4627c03fddd20753fc28d838","","api.github.com","","False","[]","[{u'raw': u'#419', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'419', u'']}, {u'raw': u'PyCQA/pylint#1389', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1389', u'']}]","[]","[]"
"pull_request_commit","420","pycqa","astroid","rogalski","2017-03-28 21:04:50","Merge remote-tracking branch 'PyCQA/master' into annassign_heritance","e2f57d34f87be182e89022325ec47a930f9b09c1","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","420","pycqa","astroid","rogalski","2017-03-28 21:11:53","Fix assertion","db1074e84dec6fa8b68d44598c1d2b0ead9233fe","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","422","pycqa","astroid","ivamiholic@gambitresearch.com","2017-04-21 09:00:59","Variable name is found_spec, not spec","f471c74aeb5d759fa693cff41e3d0af1aa77714b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","423","pycqa","astroid","cpennington","2017-04-21 15:47:02","Allow pylint/astroid to correctly interpret a class whose baseclass has been assigned to

If a class is derived from a base class that had been assigned to elsewhere in
the code, _is_metaclass will see an AssignAttr or an AssignName as an
inferred baseobj. These don't have qname(), so we use the first assigned
value as the baseobj instead.","09b10aa61f1bc585fac708e74347ed62078649d6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","427","pycqa","astroid","Mic92","2017-04-27 05:17:05",".travis.yml: python3.6 is no longer in development","3cdfd04f653fa3d0b8ed3f7e97a51f766410b196","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","429","pycqa","astroid","rogalski","2017-05-10 19:20:03","Fix an inference for trying to unpack Uninferable value in context manager

Closes PyCQA/pylint#1463","6e383a01826152a624611e4bbcc3cb30de500f3d","","api.github.com","","False","[]","[{u'raw': u'PyCQA/pylint#1463', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1463', u'']}]","[]","[]"
"pull_request_commit","429","pycqa","astroid","rogalski","2017-05-14 08:32:06","make test case a minimal","8ed088f88314ba0728be4c724f8b87048d56211f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","429","pycqa","astroid","rogalski","2017-05-14 08:32:37","Merge remote-tracking branch 'PyCQA/master' into uninferable_with_stmt","aba0cb16d3587b69102f45c7d796b6802a562d5f","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","429","pycqa","astroid","rogalski","2017-05-14 08:33:44","Add changelog entry","9a2d619c6a465da62a344ca2c85eb552f1101dc5","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","429","pycqa","astroid","rogalski","2017-05-14 08:59:12","actual minimum test case","20e20b2918dd9e7912db545945bb8faeb1d75f4a","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","429","pycqa","astroid","PCManticore","2017-05-22 12:55:49","Merge branch 'master' into uninferable_with_stmt","bcf534288881fc1ea19caba0afa2796556dbb161","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","430","pycqa","astroid","rogalski","2017-05-13 12:20:37","Force enum34 1.1.3 or later

Closes PyCQA/pylint#1388","5d8ce249217efe79f57eec3abbf9221e3944fa62","","api.github.com","","False","[]","[{u'raw': u'PyCQA/pylint#1388', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1388', u'']}]","[]","[]"
"pull_request_commit","431","pycqa","astroid","rogalski","2017-05-14 07:33:55",".gitignore some PyCharm-related directories","780404989443cb7d542827a630221dc993065c0e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","432","pycqa","astroid","rogalski","2017-05-14 08:37:55","tox.ini: do not force interpreter version when trying to run pylint","486631aa63978b0fe9a81d7d8bba25e48d639cad","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","433","pycqa","astroid","rogalski","2017-05-14 13:18:59","threading.X objects are now correctly recognised as ctx managers

Closes PyCQA/Pylint#782","acd0d5e051400b3a65b73c4df5145078675159a2","","api.github.com","","False","[]","[{u'raw': u'PyCQA/Pylint#782', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'Pylint', u'782', u'']}]","[]","[]"
"pull_request_commit","436","pycqa","astroid","rogalski","2017-05-18 19:22:54","Add tests for ImportFrom aliasing","ee0fa5b2946e79f4b86960faa3dd2b1177d0dabe","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","440","pycqa","astroid","ioanatia@github.com","2017-06-03 10:06:56","Fix finder for namespace packages","6099e8526f38dd7f1437ec7225c673a7be444f14","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","441","pycqa","astroid","rogalski","2017-06-04 10:56:00","Improve understanding of collections.deque

Closes PyCQA/pylint#1476","3c0b67232d49acedeb400ac25ddbd32e96079c39","","api.github.com","","False","[]","[{u'raw': u'PyCQA/pylint#1476', u'refstyle': u'o/p#d', u'parts': [u'PyCQA', u'pylint', u'1476', u'']}]","[]","[]"
"pull_request_commit","443","pycqa","astroid","mmaslowskicc","2017-07-03 15:01:00","Catch _NonDeducibleTypeHierarchy in inference._infer_augassign

Similarly to _infer_binop, we have to handle exceptions raised by
helpers.is_subtype and helpers.is_supertype in _infer_augassign.","77f46b98425dd098d7696b74b43835401414115a","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","448","pycqa","astroid","rogalski","2017-08-13 21:06:30","Correctly infer typing.X() and typing.X[] constructs as classdefs","138eb7bcf1cc0d442b5b8edcfd0be9f1ef47f19b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","448","pycqa","astroid","rogalski","2017-08-13 21:16:21","make typing types subscriptable","6ef95a63a6e42810a11ca46ead52ae3ac873c5d9","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","448","pycqa","astroid","rogalski","2017-08-13 21:33:01","make class subscriptable - fix","34734de679112c2f4351c1618478a11bbae7aec4","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","449","pycqa","astroid","hippo91","2017-08-19 16:33:18","Trying to solve pylint bug #1477 concerning false positive with numpy","a625d361e3e1f57cc0a3ed3dd4fe170d3bba04a7","","api.github.com","","False","[]","[{u'raw': u'#1477', u'refstyle': u'#d', u'parts': [u'pycqa', u'astroid', u'1477', u'']}]","[]","[]"
"pull_request_commit","452","pycqa","astroid","hippo91","2017-10-08 14:57:48","Add of a test inside _can_load_extension to allow numpy c modules to be dynamically loaded","e4f08be3fb9d3eefaba64b94f671f67bf0a75f80","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","452","pycqa","astroid","hippo91","2017-10-08 14:58:48","Cleaning up brain for numpy just keeping the essential","84d31285f9925637a207839d7ae82bfded9a3c71","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","453","pycqa","astroid","hugovk","2017-10-12 06:14:14","Update classifiers","6523045937c1e84725e6a322c7838cb91c7b35e6","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","455","pycqa","astroid","hugovk","2017-10-12 08:52:24","Mark failing test as expected failure","eef6a7628da0ccbf6f659e0156a98a86d92ed387","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","456","pycqa","astroid","mathieui","2017-10-13 18:24:12","Add brain_curses.py for curses attributes defined at runtime

Explanation for the need of curses brain: https://github.com/PyCQA/pylint/issues/1703
Most of the curses module attributes are defined at runtime (for
portability reasons, apparently), so there is a need for an astroid
brain in order to infer correctly.

The names currently in the brain were extracted from the python
documentation.","49f17f8afdc289988f096bc3efe3b4dafc41ff38","","api.github.com","","False","[u'https://github.com/PyCQA/pylint/issues/1703']","[{u'raw': u'https://github.com/PyCQA/pylint/issues/1703', u'refstyle': u'url', u'parts': [u'PyCQA', u'pylint', u'1703', u'']}]","[]","[]"
"pull_request_commit","458","pycqa","astroid","AWhetter","2017-10-16 04:25:40","Public facing node documentation","3c70cc4cbfc774dfdf7bc05094bc1e0dad56e30e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","460","pycqa","astroid","macbeth322","2017-10-26 18:56:45","fix nested namespace package import","a53bbc967935a23968fef2193601d7d61e0e130b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","461","pycqa","astroid","hippo91","2017-10-21 16:49:08","Introduction of numpy.core.umath functions signatures inside numpy brain + add of a dedicated unit test","8efb4da2476711e2450c9e10c0981a718c94aa18","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","461","pycqa","astroid","hippo91","2017-10-29 16:09:19","Introduction of numpy.random.mtrand functions signatures inside numpy brain + add of a dedicated unit test","2215ca48bb656a4d71f7e19972625ebcc4edeac1","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","461","pycqa","astroid","hippo91","2017-10-29 18:34:33","Add of a class that wrapps the call to unittest.subTest method to handle different versions of python","d54f3dfd921c73728c6a8364fcdb5feb43f2cd88","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","461","pycqa","astroid","hippo91","2017-10-29 18:39:52","Add of encoding utf-8 declaration","312afcc037534d5701a01219615aa0417e78cd79","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","461","pycqa","astroid","hippo91","2017-11-02 16:56:13","Merge branch 'master' into numpy_brain_refinement","8fd433f89e9fbc70fbb7c8f51a13c8e75fb19332","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","461","pycqa","astroid","hippo91","2017-11-03 08:37:44","Deletion of old numpy test (replaced by a dedicated class)","a1666c629e8be784ad029a7251131c943895821b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","461","pycqa","astroid","hippo91","2017-11-03 08:39:13","Add of copyright and simplification of the mock to try to pass python3.3 CI","53ff606ba91865d6981d5eb541c3ca5c109bdf03","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","461","pycqa","astroid","hippo91","2017-11-03 09:53:00","Add of decorator to skip the tests if numy module is not present","68385d4311245c36704c61fae6d75432600b1788","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","462","pycqa","astroid","brycepg","2017-10-30 06:01:39","Add transform for attr library to fix unsupported-assignment-operation false positives","b72588718044fdd9fe49f5a5c785bc85987e1df4","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","463","pycqa","astroid","rogalski","2017-11-01 12:19:06","treat coroutines as generators

I know it’s technically not true, but it’s good enough approximation
for initial support of asyncio.","59d5893c68e155acc4b2056a111bdedbaba455f2","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","463","pycqa","astroid","rogalski","2017-11-02 17:06:24","patch","ed45cb127cad954570862acb657484d2389686fa","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","468","pycqa","astroid","hugovk","2017-12-01 12:35:07","Drop support for EOL Python 3.3","7a55fbe6cd1cacd32028b4c96586452ee946d64e","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","468","pycqa","astroid","hugovk","2017-12-11 09:34:12","Update version comparisons after review","39f5d8042140f626678ee2b4381fc28b12f18c66","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","474","pycqa","astroid","brycepg","2017-12-27 19:21:54","Assign __module__ and __qualname__ to class locals implicitly

This prevents __qualname__ and __module__, when called as locals in the class definition,
from raising a false-positive no-member in pylint","5262b6f454916e6a5634b44a3b1e640e2b971b66","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","474","pycqa","astroid","PCManticore","2018-01-03 10:44:47","Fix lint errors","0cba62405b9c3ce1c83a8452493ac3892eb02853","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","476","pycqa","astroid","brycepg","2017-12-30 03:11:30","Allow pytest to recognize the tests","6abb7b93da2628fc65992a1a5ce447fb82cbbd02","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","477","pycqa","astroid","brycepg","2017-12-30 19:53:50","Use latest release of pylint for linting instead of pylint master due to astroid version conflict","993990c38be78f413914f407be1808ca2c50bc1b","","api.github.com","","False","[]","[]","[]","[]"
"pull_request_commit","477","pycqa","astroid","brycepg","2017-12-30 20:01:10","Fix bad-whitespace","3fdc0646512043e4004a43573b84c46daed53c13","","api.github.com","","False","[]","[]","[]","[]"
