"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","116","pycqa","astroid","pylint-bot","2015-06-20 14:52:41","Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

astroid's transform are executed at the same step as the tree rebuilding, which means that if the transform function is doing inference, then it is inferring on a partial tree, which might result in potential errors. In fact, there is a known report of this kind of crash: https://bitbucket.org/logilab/pylint/issue/426/inference-system-errors-out-on-imported
We should separate these steps into two: first build the tree and on the resulting tree apply the transformations.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/116
","start issue","Add a separate step for transforms"
"issue_closed","116","pycqa","astroid","pylint-bot","2015-12-09 05:53:42","","closed issue","Add a separate step for transforms"
"issue_comment","116","pycqa","astroid","pylint-bot","2015-08-02 07:03:55","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

There's a new separate step for transforms.

Until now, the transforms were applied at the same time the tree was
being built. This was problematic if the transform functions were
using inference, since the inference was executed on a partially
constructed tree, which led to failures when post-building
information was needed (such as setting the _from_names
for the From imports).
Now there's a separate step for transforms, which are applied
using transform.TransformVisitor.

There's a couple of other related changes:

```
  * astroid.parse and AstroidBuilder gained a new parameter
    `apply_transforms`, which is a boolean flag, which will
    control if the transforms are applied. We do this because
    there are uses when the vanilla tree is wanted, without
    any implicit modification.

  * the transforms are also applied for builtin modules,
    as a side effect of the fact that transform visiting
    was moved in AstroidBuilder._post_build from
    AstroidBuilder._data_build.
```

Closes issue #116.
","",""
"issue_comment","116","pycqa","astroid","pylint-bot","2015-11-14 17:53:53","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

There's a new separate step for transforms.

Until now, the transforms were applied at the same time the tree was
being built. This was problematic if the transform functions were
using inference, since the inference was executed on a partially
constructed tree, which led to failures when post-building
information was needed (such as setting the _from_names
for the From imports).
Now there's a separate step for transforms, which are applied
using transform.TransformVisitor.

There's a couple of other related changes:

```
  * astroid.parse and AstroidBuilder gained a new parameter
    `apply_transforms`, which is a boolean flag, which will
    control if the transforms are applied. We do this because
    there are uses when the vanilla tree is wanted, without
    any implicit modification.

  * the transforms are also applied for builtin modules,
    as a side effect of the fact that transform visiting
    was moved in AstroidBuilder._post_build from
    AstroidBuilder._data_build.
```

Closes issue #116.
","",""
