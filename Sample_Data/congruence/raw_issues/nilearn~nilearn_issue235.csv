"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","235","nilearn","nilearn","GaelVaroquaux","2014-09-10 16:04:42","In CanICA, the fastica loop could be parallelized.

I have in mind the 'for rs in range(self.n_init)...' loop in the fit of CanICA.

One thing to keep in mind is that random_state need to be reseeded after a fork (elsewhere the seed is the same everywhere). Thus we can parallelize the loop only for scikit-learn > 0.13 (I suggest setting n_job to one else) and we need to use a pattern resembling https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/cluster/k_means_.py#L306
","start issue","The CanICA loop could be made parallel"
"issue_closed","235","nilearn","nilearn","lesteve","2014-11-21 14:01:59","","closed issue","The CanICA loop could be made parallel"
"issue_comment","235","nilearn","nilearn","AlexandreAbraham","2014-09-10 16:11:30","Isn't there a bug on line 158 of canica.py? Shouldn't it be `rs` instead of `random_state`?
","",""
"issue_comment","235","nilearn","nilearn","GaelVaroquaux","2014-09-10 16:14:41","No, it's fine, because we are not forking, for now. Thus we are simply passing a RNG, and more data is drawn from this RNG.
","",""
