"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","400","pycqa","astroid","rogalski","2017-02-07 21:49:58","Fixes #399.","start issue","Asynchronous comprehensions"
"issue_closed","400","pycqa","astroid","rogalski","2017-03-01 18:47:31","","closed issue","Asynchronous comprehensions"
"pull_request_title","400","pycqa","astroid","rogalski","2017-02-07 21:49:58","Fixes #399.","714abcc4758ff2120a0824533a2d075a8a57da69","Asynchronous comprehensions"
"pull_request_merged","400","pycqa","astroid","rogalski","2017-03-01 18:47:31","Asynchronous comprehensions","bf3d6876c310b39d045f6338ec8b93d2b1967072","Pull request merge from rogalski/astroid:async_comprehensions to PyCQA/astroid:master"
"issue_comment","400","pycqa","astroid","coveralls","2017-02-07 21:54:01","
[![Coverage Status](https://coveralls.io/builds/10042723/badge)](https://coveralls.io/builds/10042723)

Coverage decreased (-2.03%) to 87.275% when pulling **edee41c6ffbc7fddbfada91b7d0b069a46b6d648 on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
","",""
"issue_comment","400","pycqa","astroid","coveralls","2017-02-07 21:57:34","
[![Coverage Status](https://coveralls.io/builds/10042781/badge)](https://coveralls.io/builds/10042781)

Coverage decreased (-2.03%) to 87.275% when pulling **df99e25f292aa987f6c533f461666095781e6eed on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
","",""
"issue_comment","400","pycqa","astroid","coveralls","2017-02-07 22:01:48","
[![Coverage Status](https://coveralls.io/builds/10042803/badge)](https://coveralls.io/builds/10042803)

Coverage increased (+0.008%) to 89.311% when pulling **df99e25f292aa987f6c533f461666095781e6eed on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
","",""
"issue_comment","400","pycqa","astroid","coveralls","2017-02-07 22:09:01","
[![Coverage Status](https://coveralls.io/builds/10042923/badge)](https://coveralls.io/builds/10042923)

Coverage increased (+0.008%) to 89.311% when pulling **30dad28076353d8890b6542e60117d6205fc97ba on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
","",""
"issue_comment","400","pycqa","astroid","coveralls","2017-02-07 22:09:01","
[![Coverage Status](https://coveralls.io/builds/10042923/badge)](https://coveralls.io/builds/10042923)

Coverage increased (+0.008%) to 89.311% when pulling **30dad28076353d8890b6542e60117d6205fc97ba on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
","",""
"issue_comment","400","pycqa","astroid","coveralls","2017-02-07 22:09:01","
[![Coverage Status](https://coveralls.io/builds/10042923/badge)](https://coveralls.io/builds/10042923)

Coverage increased (+0.008%) to 89.311% when pulling **30dad28076353d8890b6542e60117d6205fc97ba on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
","",""
"issue_comment","400","pycqa","astroid","coveralls","2017-02-07 22:09:01","
[![Coverage Status](https://coveralls.io/builds/10042923/badge)](https://coveralls.io/builds/10042923)

Coverage increased (+0.008%) to 89.311% when pulling **30dad28076353d8890b6542e60117d6205fc97ba on rogalski:async_comprehensions** into **9ee1f58ba91a52148829a781f3bfcff6f659139e on PyCQA:master**.
","",""
"issue_comment","400","pycqa","astroid","rogalski","2017-02-09 18:44:30","@PCManticore thanks for the review, see new commits for fixes","",""
"issue_comment","400","pycqa","astroid","rogalski","2017-02-14 20:38:25","@PCManticore since dunder for async iterables is `__aiter__` and not `__iter__`, I'd expect that by default some stuff will fail. I'll try to come up with a test case, but I haven't used asyncio at all, so it may take a while.","",""
"issue_comment","400","pycqa","astroid","PCManticore","2017-03-01 09:26:59","@rogalski I think we can merge this as is, and create a new issue for adding support for ``__aiter__`` and async comprehension's ``assigned_stmts``. ","",""
"issue_comment","400","pycqa","astroid","rogalski","2017-03-01 11:43:46","@PCManticore agreed. I'll do a merge commit, just so all tests can complete successfully and _squash and merge_ it afterwards.","",""
"pull_request_commit_comment","400","pycqa","astroid","PCManticore","2017-02-09 08:18:36","Let's put ``is_async`` in ``_other_fields``. ``_astroid_fields`` is only for objects which are AST objects.","714abcc4758ff2120a0824533a2d075a8a57da69","(None, '', u'astroid/node_classes.py')"
"pull_request_commit_comment","400","pycqa","astroid","PCManticore","2017-02-09 08:19:58","``' '.join('if %s' % n.accept(self) for i in ...)`` feels more natural to me.","714abcc4758ff2120a0824533a2d075a8a57da69","(None, '', u'astroid/as_string.py')"
"pull_request_commit_comment","400","pycqa","astroid","PCManticore","2017-02-09 08:20:42","Check my previous comment regarding ``is_async``. Sorry, I think I misled you in a different PR, with a similar use case.","714abcc4758ff2120a0824533a2d075a8a57da69","(None, '', u'astroid/rebuilder.py')"
"pull_request_commit_comment","400","pycqa","astroid","PCManticore","2017-02-09 08:23:48","You can use ``@`` to extract a particular node, instead of doing it manually, such as in this example:

```
f = extract_node('''
async def f():
   return [i async for i in...] #@
''')
# now f is the Return
```
Or you can use ``__()`` for a fine grained approach, as in:

```
f = extract_node('''
async def f():
   return __([i async for i in...])
''')
# now f is the comprehension
```","714abcc4758ff2120a0824533a2d075a8a57da69","(None, '', u'astroid/tests/unittest_python3.py')"
"pull_request_commit_comment","400","pycqa","astroid","PCManticore","2017-02-09 08:24:25","A comment should be enough here. If I remember correctly, docstrings have special meaning in unittests.","714abcc4758ff2120a0824533a2d075a8a57da69","(None, '', u'astroid/tests/unittest_python3.py')"
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-07 21:49:36","Initial support for asynchronous comprehensions","d50417eea03d2e0098f4309166acc4aff652f51b",""
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-07 21:53:20","Fix obvious regression for older interpreters, remove redundant comment","edee41c6ffbc7fddbfada91b7d0b069a46b6d648",""
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-07 21:56:43","Fix regression part2: add default value for getattr (...)","df99e25f292aa987f6c533f461666095781e6eed",""
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-07 22:04:10","Fix bugs found by pylint","30dad28076353d8890b6542e60117d6205fc97ba",""
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-09 18:26:02","Merge remote-tracking branch 'PyCQA/master' into async_comprehensions

# Conflicts:
#	ChangeLog","1a12c78b5444c27ff4cea448f9a5d95bfb142842",""
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-09 18:34:15","Fix review comments","f8eec36010a522b978567709beee8d99fa1c7316",""
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-09 18:39:39","Reuse inherited code instead of copy-pasting it","17874b88d3836c15c25f88a974e1350412b9cc10",""
"pull_request_commit","400","pycqa","astroid","rogalski","2017-02-28 20:16:15","Disable assigned_stmts for async fors and async comprehensions","00e28c5cabb88f06844c396a37d0969b51feda8e",""
"pull_request_commit","400","pycqa","astroid","rogalski","2017-03-01 18:38:34","Merge remote-tracking branch 'PyCQA/master' into async_comprehensions

# Conflicts:
#	ChangeLog","714abcc4758ff2120a0824533a2d075a8a57da69",""
