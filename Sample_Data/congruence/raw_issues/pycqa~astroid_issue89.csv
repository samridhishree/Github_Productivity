"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","89","pycqa","astroid","pylint-bot","2015-04-16 09:01:11","Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Since we have a way to retrieve the mro, we could try to understand `super()` calls. This can be used to find errors, such as in this case:

```
#!python

class A(object):
    def do_test(self):
        pass


class B(A):
    def __init__(self):
        super(B, self).do_tes()


B()
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/89
","start issue","Understand super"
"issue_closed","89","pycqa","astroid","pylint-bot","2015-12-09 05:53:18","","closed issue","Understand super"
"issue_comment","89","pycqa","astroid","pylint-bot","2015-05-28 16:29:04","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add a new _inference object_ called Super

This patch also adds support for understanding super calls.
astroid understands the zero-argument form of super, specific to
Python 3, where the interpreter fills itself the arguments of the call. Also, we
are understanding the 2-argument form of super, both for bounded lookups
(super(X, instance)) as well as for unbounded lookups (super(X, Y)),
having as well support for validating that the object-or-type is a subtype
of the first argument. The unbounded form of super (one argument) is not
understood, since it's useless in practice and should be removed from
Python's specification. Closes issue #89.
","",""
"issue_comment","89","pycqa","astroid","pylint-bot","2015-11-19 14:27:03","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add a new _inference object_ called Super

This patch also adds support for understanding super calls.
astroid understands the zero-argument form of super, specific to
Python 3, where the interpreter fills itself the arguments of the call. Also, we
are understanding the 2-argument form of super, both for bounded lookups
(super(X, instance)) as well as for unbounded lookups (super(X, Y)),
having as well support for validating that the object-or-type is a subtype
of the first argument. The unbounded form of super (one argument) is not
understood, since it's useless in practice and should be removed from
Python's specification. Closes issue #89.
","",""
