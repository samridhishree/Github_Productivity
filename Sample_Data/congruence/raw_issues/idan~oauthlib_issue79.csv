"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","79","idan","oauthlib","ib-lundgren","2012-11-16 19:33:35","While most users are likely better of using requests (http://docs.python-requests.org/en/latest/index.html) to make OAuth requests some might not have that option.  A few examples of how to use the Client class would be useful. 

Some users might try to use OAuthLib with urllib2 not knowing there are better alternatives out there, a little note in the docs would help them out.
","start issue","Client usage docs"
"issue_closed","79","idan","oauthlib","ib-lundgren","2013-05-30 11:29:39","","closed issue","Client usage docs"
"issue_comment","79","idan","oauthlib","warsaw","2012-11-16 21:58:33","On Nov 16, 2012, at 11:33 AM, Ib Lundgren wrote:

> While most users are likely better of using requests
> (http://docs.python-requests.org/en/latest/index.html) to make OAuth requests
> some might not have that option.  A few examples of how to use the Client
> class would be useful.
> 
> Some users might try to use OAuthLib with urllib2 not knowing there are
> better alternatives out there, a little note in the docs would help them out.

Yes, please!  There are very good reasons to want to use oauthlib without
requests, e.g. as a straight up replacement for the long abandoned oauth.  In
fact, a little user guide for converting from oauth to oauthlib would be
fantastic.  It's not a difficult conversion, although it's a bit of a brain
twister at first because of the different terminology.

Sorry, my stack is too deep at the moment to contribute such documentation,
but if pressed I could probably dig up a diff.
","",""
"issue_comment","79","idan","oauthlib","ib-lundgren","2012-11-16 22:25:31","I'll try and add a few examples with urllib2 and requests soonish, unless someone beats me to it. As far as the old oauth library I've actually never used it so would not be able to create a guide on top of my head. Any chance you could dig up some code using the library?  Then I could simply port that over and show how in the docs.

Is it http://pypi.python.org/pypi/oauth/1.0.1 ?
","",""
"issue_comment","79","idan","oauthlib","warsaw","2012-11-16 23:06:09","On Nov 16, 2012, at 02:25 PM, Ib Lundgren wrote:

> I'll try and add a few examples with urllib2 and requests soonish, unless
> someone beats me to it. As far as the old oauth library I've actually never
> used it so would not be able to create a guide on top of my head. Any chance
> you could dig up some code using the library?  Then I could simply port that
> over and show how in the docs.
> 
> Is it http://pypi.python.org/pypi/oauth/1.0.1 ?

Yep.  Notice the Uploaded date :)

Okay, piston-mini-client is one package I'm working on.  This is not fully
tested yet (note the as yet unported PLAINTEXT signature method), but it
should give you an idea of what I had to change to do the conversion.  Once I
get this working, I might even submit a more detailed blurb for the
documentation.

=== modified file 'piston_mini_client/auth.py'
--- piston_mini_client/auth.py  2012-07-30 17:09:26 +0000
+++ piston_mini_client/auth.py  2012-11-12 21:15:28 +0000
@@ -31,17 +29,15 @@

```
 def sign_request(self, url, method, body, headers):
     """"""Sign a request with OAuth credentials.""""""
```
-        # Import oauth here so that you don't need it if you're not going
-        # Import oauthlib here so that you don't need it if you're not going
       # to use it.  Plan B: move this out into a separate oauth module.
-        from oauth.oauth import (OAuthRequest, OAuthConsumer, OAuthToken,
-                                 OAuthSignatureMethod_PLAINTEXT)
-        consumer = OAuthConsumer(self.consumer_key, self.consumer_secret)
-        token = OAuthToken(self.token_key, self.token_secret)
-        oauth_request = OAuthRequest.from_consumer_and_token(
-            consumer, token, http_url=url)
-        oauth_request.sign_request(OAuthSignatureMethod_PLAINTEXT(),
-                                   consumer, token)
-        headers.update(oauth_request.to_header(self.oauth_realm))
-        from oauthlib.oauth1 import Client
-        oauth_client = Client(self.consumer_key, self.consumer_secret,
-                              self.token_key, self.token_secret,
-                              realm=self.oauth_realm)
-        uri, signed_headers, body = oauth_client.sign(
-            url, method, body, headers)
- ```
     headers.update(signed_headers)
  ```
  
  class BasicAuthorizer(object):
","",""
"issue_comment","79","idan","oauthlib","ib-lundgren","2012-11-17 00:27:30","The oauthlib bits look alright. If you want to use plaintext as a signature method use either

```
Client(..., signature_method=""PLAINTEXT"")
```

or

```
from oauthlib.oauth1.rfc5849 import SIGNATURE_PLAINTEXT
Client(..., signature_method=SIGNATURE_PLAINTEXT)
```

Will add imports of the constants in oauthlib.oauth1.**init**.py tomorrow so you can omit ""rfc4849"". If you are interested in RSA-SHA1 signatures have a look at https://gist.github.com/2584789
","",""
"issue_comment","79","idan","oauthlib","ib-lundgren","2013-02-05 21:38:42","It might not be much but it is a start

https://oauthlib.readthedocs.org/en/latest/
","",""
