"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","137","idan","oauthlib","taestone","2013-04-18 08:05:33","","start issue","add def resource_response with decorate"
"issue_closed","137","idan","oauthlib","taestone","2013-04-19 09:25:26","","closed issue","add def resource_response with decorate"
"pull_request_title","137","idan","oauthlib","taestone","2013-04-18 08:05:33","","07eecf938bdedbb0be93773ac482ea2672c5031d","add def resource_response with decorate"
"issue_comment","137","idan","oauthlib","ib-lundgren","2013-04-18 20:45:17","Good idea to add a demo in the skeleton too. You might want to return a HttpResponse rather than a dict, or does django wrap that for you?

Nitpick, the token verification is likely to be with the token endpoint rather than the authorization endpoint, although they might be the same process.
","",""
"issue_comment","137","idan","oauthlib","taestone","2013-04-19 01:48:27","thanks for your comments. 

I'm trying to implement the RequestValidator with django 1.5 (provider) and learn about oauth2 client, provider :)
In  WebApplicationServer, It works well. I'll try MobileApplicationServer case.

as you said, the token verification(access to protected resource) is beyound oauth2. It's better to be commented but left for understanding oauth2 process well. 
","",""
"pull_request_commit","137","idan","oauthlib","taestone","2013-04-18 08:05:22","add def resource_response with decorate","07eecf938bdedbb0be93773ac482ea2672c5031d",""
