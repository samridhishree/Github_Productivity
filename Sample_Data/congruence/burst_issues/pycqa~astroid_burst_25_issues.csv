,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,393,pycqa,astroid,cdunklau,2017-01-29 19:00:52,"Looks like astroid doesn't yet support PEP 526 variable type hints, new in Python 3.6

### Steps to reproduce

1. Put the code `myvar: int` in a file.
2. Run pylint against that file

### Current behavior

Pylint crashes with this traceback. Appears to point at the new node introduced in Python 3.6's AST: `AnnAssign(expr target, expr annotation, expr? value, int simple)`

```
Traceback (most recent call last):
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/pylint/lint.py"", line 927, in get_ast
    return MANAGER.ast_from_file(filepath, modname, source=True)
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/astroid/manager.py"", line 86, in ast_from_file
    return AstroidBuilder(self).file_build(filepath, modname)
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/astroid/builder.py"", line 141, in file_build
    module = self._data_build(data, modname, path)
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/astroid/builder.py"", line 185, in _data_build
    module = builder.visit_module(node, modname, node_file, package)
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/astroid/rebuilder.py"", line 154, in visit_module
    newnode.body = [self.visit(child, newnode) for child in node.body]
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/astroid/rebuilder.py"", line 154, in <listcomp>
    newnode.body = [self.visit(child, newnode) for child in node.body]
  File ""/Users/cdunklau/Development/pngdoctor/.tox/style/lib/python3.6/site-packages/astroid/rebuilder.py"", line 165, in visit
    visit_method = getattr(self, visit_name)
AttributeError: 'TreeRebuilder3k' object has no attribute 'visit_annassign'
************* Module pylint_breaks_on_AnnAssign
F:  1, 0: <class 'AttributeError'>: 'TreeRebuilder3k' object has no attribute 'visit_annassign' (astroid-error)
```

### Expected behavior

No crash, perhaps a warning about this not being supported yet?


### Pylint and Astroid Versions
- pylint 1.6.5,
- astroid 1.4.9
- Python 3.6.0 (default, Jan  9 2017, 19:38:03)
",start issue,Crash when trying to interpret PEP 526 variable type hints
1,issue_closed,393,pycqa,astroid,PCManticore,2017-02-09 08:58:46,,closed issue,Crash when trying to interpret PEP 526 variable type hints
2,issue_comment,393,pycqa,astroid,rr-,2017-01-29 19:30:41,"""I have no idea what I'm doing"" kind of patch:

```diff
diff --git a/astroid/node_classes.py b/astroid/node_classes.py
index fb92849..3d5c4ec 100644
--- a/astroid/node_classes.py
+++ b/astroid/node_classes.py
@@ -1051,6 +1051,19 @@ class Assign(mixins.AssignTypeMixin, Statement):
         self.value = value
 
 
+class AnnAssign(mixins.AssignTypeMixin, Statement):
+    """"""class representing an AnnAssign node""""""
+    _astroid_fields = ('targets', 'value', 'annotation',)
+    targets = None
+    value = None
+    annotation = None
+
+    def postinit(self, targets=None, value=None, annotation=None):
+        self.targets = targets
+        self.value = value
+        self.annotation = annotation
+
+
 class AugAssign(mixins.AssignTypeMixin, Statement):
     """"""class representing an AugAssign node""""""
     _astroid_fields = ('target', 'value')
diff --git a/astroid/nodes.py b/astroid/nodes.py
index 3397294..861b0a6 100644
--- a/astroid/nodes.py
+++ b/astroid/nodes.py
@@ -28,7 +28,7 @@ on ImportFrom and Import :
 # pylint: disable=unused-import,redefined-builtin
 
 from astroid.node_classes import (
-    Arguments, AssignAttr, Assert, Assign,
+    Arguments, AssignAttr, Assert, Assign, AnnAssign,
     AssignName, AugAssign, Repr, BinOp, BoolOp, Break, Call, Compare,
     Comprehension, Const, Continue, Decorators, DelAttr, DelName, Delete,
     Dict, Expr, Ellipsis, EmptyNode, ExceptHandler, Exec, ExtSlice, For,
@@ -56,7 +56,7 @@ from astroid.scoped_nodes import (
 ALL_NODE_CLASSES = (
     AsyncFunctionDef, AsyncFor, AsyncWith, Await,
 
-    Arguments, AssignAttr, Assert, Assign, AssignName, AugAssign,
+    Arguments, AssignAttr, Assert, Assign, AnnAssign, AssignName, AugAssign,
     Repr, BinOp, BoolOp, Break,
     Call, ClassDef, Compare, Comprehension, Const, Continue,
     Decorators, DelAttr, DelName, Delete,
diff --git a/astroid/protocols.py b/astroid/protocols.py
index 4058802..a6e6a97 100644
--- a/astroid/protocols.py
+++ b/astroid/protocols.py
@@ -357,6 +357,7 @@ def assign_assigned_stmts(self, node=None, context=None, asspath=None):
                              assign_path=asspath, context=context))
 
 nodes.Assign.assigned_stmts = assign_assigned_stmts
+nodes.AnnAssign.assigned_stmts = assign_assigned_stmts
 nodes.AugAssign.assigned_stmts = assign_assigned_stmts
 
 
diff --git a/astroid/rebuilder.py b/astroid/rebuilder.py
index 4b3506b..f25c794 100644
--- a/astroid/rebuilder.py
+++ b/astroid/rebuilder.py
@@ -214,6 +214,17 @@ class TreeRebuilder(object):
                          self.visit(node.value, newnode))
         return newnode
 
+    def visit_annassign(self, node, parent):
+        """"""visit a AnnAssign node by returning a fresh instance of it""""""
+        newnode = nodes.AnnAssign(node.lineno, node.col_offset, parent)
+        annotation = None
+        if node.annotation:
+            annotation = self.visit(node.annotation, newnode)
+        newnode.postinit([self.visit(node.target, newnode)],
+                         self.visit(node.value, newnode),
+                         annotation)
+        return newnode
+
     def visit_assignname(self, node, parent, node_name=None):
         '''visit a node and return a AssignName node'''
         newnode = nodes.AssignName(node_name, getattr(node, 'lineno', None),
```

This seems to work and does not complain about unused imports in scenarios like this:

```python
from typing import Optional
test: Optional[str] = None
```

(where the imported `Optional` is used only in variable annotations)",,
3,issue_comment,393,pycqa,astroid,rogalski,2017-01-30 08:39:49,"@rr- do you mind creating a ""proper"" pull request? At least we can start with code review and making change ready for merge.",,
4,issue_comment,393,pycqa,astroid,rr-,2017-01-30 08:40:57,Yes sir,,
5,issue_comment,393,pycqa,astroid,PCManticore,2017-02-09 08:58:46,"Thanks to @rr-, this now works in master branch.",,
0,issue_title,389,pycqa,astroid,rogalski,2017-01-25 22:04:44,,start issue,mark __init_subclass__ as classmethod [master branch]
1,issue_closed,389,pycqa,astroid,PCManticore,2017-01-28 09:45:27,,closed issue,mark __init_subclass__ as classmethod [master branch]
2,pull_request_title,389,pycqa,astroid,rogalski,2017-01-25 22:04:44,,9ddd35461c302a06e6b07b33ed56e19414a00cc8,mark __init_subclass__ as classmethod [master branch]
3,pull_request_merged,389,pycqa,astroid,PCManticore,2017-01-28 09:45:27,mark __init_subclass__ as classmethod [master branch],48148a5092291323909052f7ce2fdfa97272057c,Pull request merge from rogalski/astroid:init-subclass-master to PyCQA/astroid:master
4,issue_comment,389,pycqa,astroid,coveralls,2017-01-25 22:10:26,"
[![Coverage Status](https://coveralls.io/builds/9845478/badge)](https://coveralls.io/builds/9845478)

Coverage decreased (-3.9%) to 85.36% when pulling **0390c52fa90301405b692973988e69109bb5f7df on rogalski:init-subclass-master** into **bf6bb6fb4a01dd38d477f8ee980023ff2db42cb9 on PyCQA:master**.
",,
5,issue_comment,389,pycqa,astroid,coveralls,2017-01-25 22:41:09,"
[![Coverage Status](https://coveralls.io/builds/9846088/badge)](https://coveralls.io/builds/9846088)

Coverage decreased (-1.7%) to 87.555% when pulling **663da96b86ab71a01d583d5fd7d385d4aaa97b0e on rogalski:init-subclass-master** into **bf6bb6fb4a01dd38d477f8ee980023ff2db42cb9 on PyCQA:master**.
",,
6,issue_comment,389,pycqa,astroid,coveralls,2017-01-25 22:41:09,"
[![Coverage Status](https://coveralls.io/builds/9846088/badge)](https://coveralls.io/builds/9846088)

Coverage decreased (-1.7%) to 87.555% when pulling **663da96b86ab71a01d583d5fd7d385d4aaa97b0e on rogalski:init-subclass-master** into **bf6bb6fb4a01dd38d477f8ee980023ff2db42cb9 on PyCQA:master**.
",,
7,issue_comment,389,pycqa,astroid,rogalski,2017-01-25 22:46:11,"Looks like I've tried to modify unittests that are not very ""unit"" in nature. I'll revisit it tomorrow (same goes to 2.0 change).",,
8,issue_comment,389,pycqa,astroid,coveralls,2017-01-26 19:41:39,"
[![Coverage Status](https://coveralls.io/builds/9861795/badge)](https://coveralls.io/builds/9861795)

Coverage remained the same at 89.304% when pulling **9ddd35461c302a06e6b07b33ed56e19414a00cc8 on rogalski:init-subclass-master** into **bf6bb6fb4a01dd38d477f8ee980023ff2db42cb9 on PyCQA:master**.
",,
9,pull_request_commit,389,pycqa,astroid,rogalski,2017-01-25 22:04:30,mark __init_subclass__ as classmethod,0390c52fa90301405b692973988e69109bb5f7df,
10,pull_request_commit,389,pycqa,astroid,rogalski,2017-01-25 22:10:58,Fix unittests,8c006b4be8b0290923d78fc3142c6854004453ca,
11,pull_request_commit,389,pycqa,astroid,rogalski,2017-01-25 22:29:01,Fix unit tests from another modules,663da96b86ab71a01d583d5fd7d385d4aaa97b0e,
12,pull_request_commit,389,pycqa,astroid,rogalski,2017-01-26 19:24:51,"Revert ""Fix unit tests from another modules""

This reverts commit 663da96b86ab71a01d583d5fd7d385d4aaa97b0e.",4554b016a738f8fca24b12c14e672f5e8010c303,
13,pull_request_commit,389,pycqa,astroid,rogalski,2017-01-26 19:25:03,"Revert ""Fix unittests""

This reverts commit 8c006b4be8b0290923d78fc3142c6854004453ca.",4553c0e8ca411413ba29c86b3048b5d8afb32c83,
14,pull_request_commit,389,pycqa,astroid,rogalski,2017-01-26 19:25:30,"Revert ""mark __init_subclass__ as classmethod""

This reverts commit 0390c52fa90301405b692973988e69109bb5f7df.",98e0ef2bfcdc5c7298c3f6b9f01b8d6df7f559da,
15,pull_request_commit,389,pycqa,astroid,rogalski,2017-01-26 19:36:47,Mark __init_subclass__ as classmethoid in Python 3.6+,9ddd35461c302a06e6b07b33ed56e19414a00cc8,
0,issue_title,390,pycqa,astroid,euresti,2017-01-26 06:41:36,"### Fixes / new features
- Adds support so typing.NamedTuple(...) actually infers something useful.
",start issue,Add inference for typing.NamedTuple
1,issue_closed,390,pycqa,astroid,PCManticore,2017-03-01 09:16:44,,closed issue,Add inference for typing.NamedTuple
2,pull_request_title,390,pycqa,astroid,euresti,2017-01-26 06:41:36,"### Fixes / new features
- Adds support so typing.NamedTuple(...) actually infers something useful.
",cfe156629037195eeb43181efa5bdd09eb15c1c0,Add inference for typing.NamedTuple
3,pull_request_merged,390,pycqa,astroid,PCManticore,2017-03-01 09:16:44,Add inference for typing.NamedTuple,8b1806802047b59bc316578689d5d7421b930e10,Pull request merge from euresti/astroid:brain_typing_namedtuple to PyCQA/astroid:master
4,issue_comment,390,pycqa,astroid,coveralls,2017-01-26 06:45:30,"
[![Coverage Status](https://coveralls.io/builds/9850372/badge)](https://coveralls.io/builds/9850372)

Coverage decreased (-2.2%) to 87.126% when pulling **abf03d062a53208d662a973c34cd395907c1987d on euresti:brain_typing_namedtuple** into **a9430c92981124e1868c525a29f053f0d7661e4b on PyCQA:master**.
",,
5,issue_comment,390,pycqa,astroid,rogalski,2017-02-28 19:35:09,@euresti are you willing to make tests all tests pass and finish up this change? It would be nice to have it before releasing Pylint 1.7.0 (first release wih Python 3.6 support).,,
6,issue_comment,390,pycqa,astroid,euresti,2017-03-01 00:38:25,Sorry for the delay I'll work on this today or tomorrow.,,
7,issue_comment,390,pycqa,astroid,euresti,2017-03-01 06:51:16,Ok hope that's good enough.  ,,
8,issue_comment,390,pycqa,astroid,PCManticore,2017-03-01 09:17:04,Thanks so much @euresti for this! Thank you @rogalski for helping with the review.,,
9,pull_request_commit_comment,390,pycqa,astroid,PCManticore,2017-02-09 09:00:07,This can raise ``InferenceError``. We need to catch it and raise ``UseInferenceDefault`` instead.,cfe156629037195eeb43181efa5bdd09eb15c1c0,"(None, '', u'astroid/brain/brain_typing.py')"
10,pull_request_commit_comment,390,pycqa,astroid,PCManticore,2017-02-13 22:20:58,Why would this block raise AttributeError?,cfe156629037195eeb43181efa5bdd09eb15c1c0,"(None, '', u'astroid/brain/brain_typing.py')"
11,pull_request_commit_comment,390,pycqa,astroid,euresti,2017-02-17 14:50:18,"Well I'm not checking whether `node.args[1]` actually has an `elts` Or whether that elt has more elts in `elt.elts[0]`
  ",cfe156629037195eeb43181efa5bdd09eb15c1c0,"(None, '', u'astroid/brain/brain_typing.py')"
12,pull_request_commit_comment,390,pycqa,astroid,euresti,2017-02-17 14:50:57,I'll fix this.,cfe156629037195eeb43181efa5bdd09eb15c1c0,"(None, '', u'astroid/brain/brain_typing.py')"
13,pull_request_commit_comment,390,pycqa,astroid,rogalski,2017-02-19 20:06:22,Decorate it with `@test_utils.require_version('3.6')`,cfe156629037195eeb43181efa5bdd09eb15c1c0,"(None, '', u'astroid/tests/unittest_brain.py')"
14,pull_request_commit_comment,390,pycqa,astroid,rogalski,2017-02-19 20:09:10,Maybe moving it just above actual usage is a good idea?,cfe156629037195eeb43181efa5bdd09eb15c1c0,"(None, '', u'astroid/brain/brain_typing.py')"
15,pull_request_commit_comment,390,pycqa,astroid,rogalski,2017-02-19 20:11:11,"I'd limit catching AttributeErrpr just to `node.args[1].elts`.

Can you clarify second statement in comment above?",cfe156629037195eeb43181efa5bdd09eb15c1c0,"(None, '', u'astroid/brain/brain_typing.py')"
16,pull_request_commit_comment,390,pycqa,astroid,euresti,2017-03-01 00:47:39,"`node.args[1].elts` can raise an AttributeError if node.args[1] is not a Tuple.
`elt.elts` can also raise an AttributeError if node.args[1] is a Tuple but doesn't have a Tuple inside it.

I can add a bunch of isinstance checks if you like.
",cfe156629037195eeb43181efa5bdd09eb15c1c0,"(None, '', u'astroid/brain/brain_typing.py')"
17,pull_request_commit_comment,390,pycqa,astroid,euresti,2017-03-01 00:48:08,Technically typing is available in python2 also but in pypi.  Though for tests maybe I should limit it to 3.6,cfe156629037195eeb43181efa5bdd09eb15c1c0,"(None, '', u'astroid/tests/unittest_brain.py')"
18,pull_request_commit_comment,390,pycqa,astroid,euresti,2017-03-01 00:48:28,Will do,cfe156629037195eeb43181efa5bdd09eb15c1c0,"(None, '', u'astroid/brain/brain_typing.py')"
19,pull_request_commit,390,pycqa,astroid,david@dropbox.com,2017-01-05 15:33:03,Add inference for typing.NamedTuple,f3d76aabc725d87a897af1d3d4bffe2fb5d7431f,
20,pull_request_commit,390,pycqa,astroid,david@dropbox.com,2017-03-01 06:00:32,Code review comments,cf3b1cb0e84ee97957567c3362c1005fc12b533b,
21,pull_request_commit,390,pycqa,astroid,david@dropbox.com,2017-03-01 06:27:44,Fix tests,5208bd413a8135bd449ad1cc4319edcf4700343e,
22,pull_request_commit,390,pycqa,astroid,david@dropbox.com,2017-03-01 06:44:55,Fix lint issues,cfe156629037195eeb43181efa5bdd09eb15c1c0,
0,issue_title,387,pycqa,astroid,degustaf,2017-01-24 19:37:57,"### Fixes / new features
- Add getitem to brain for defaultdict.
",start issue,Add getitem to defaultdict brain.
1,issue_closed,387,pycqa,astroid,PCManticore,2017-01-25 19:09:17,,closed issue,Add getitem to defaultdict brain.
2,pull_request_title,387,pycqa,astroid,degustaf,2017-01-24 19:37:57,"### Fixes / new features
- Add getitem to brain for defaultdict.
",0fea1205efb6e97923a8f9f470b4ef2711829c52,Add getitem to defaultdict brain.
3,pull_request_merged,387,pycqa,astroid,PCManticore,2017-01-25 19:09:17,Add getitem to defaultdict brain.,a2b025003ecb128681df8b29fd6ba8dcf614a6d7,Pull request merge from degustaf/astroid:fix_regression to PyCQA/astroid:master
4,issue_comment,387,pycqa,astroid,coveralls,2017-01-24 19:43:30,"
[![Coverage Status](https://coveralls.io/builds/9823432/badge)](https://coveralls.io/builds/9823432)

Coverage remained the same at 89.304% when pulling **0fea1205efb6e97923a8f9f470b4ef2711829c52 on degustaf:fix_regression** into **ae223fa514a2178d36da5121a1d87d626cf143fb on PyCQA:master**.
",,
5,issue_comment,387,pycqa,astroid,coveralls,2017-01-24 19:43:30,"
[![Coverage Status](https://coveralls.io/builds/9823432/badge)](https://coveralls.io/builds/9823432)

Coverage remained the same at 89.304% when pulling **0fea1205efb6e97923a8f9f470b4ef2711829c52 on degustaf:fix_regression** into **ae223fa514a2178d36da5121a1d87d626cf143fb on PyCQA:master**.
",,
6,issue_comment,387,pycqa,astroid,coveralls,2017-01-24 19:43:31,"
[![Coverage Status](https://coveralls.io/builds/9823432/badge)](https://coveralls.io/builds/9823432)

Coverage remained the same at 89.304% when pulling **0fea1205efb6e97923a8f9f470b4ef2711829c52 on degustaf:fix_regression** into **ae223fa514a2178d36da5121a1d87d626cf143fb on PyCQA:master**.
",,
7,issue_comment,387,pycqa,astroid,coveralls,2017-01-24 19:43:31,"
[![Coverage Status](https://coveralls.io/builds/9823432/badge)](https://coveralls.io/builds/9823432)

Coverage remained the same at 89.304% when pulling **0fea1205efb6e97923a8f9f470b4ef2711829c52 on degustaf:fix_regression** into **ae223fa514a2178d36da5121a1d87d626cf143fb on PyCQA:master**.
",,
8,issue_comment,387,pycqa,astroid,coveralls,2017-01-24 19:43:31,"
[![Coverage Status](https://coveralls.io/builds/9823432/badge)](https://coveralls.io/builds/9823432)

Coverage remained the same at 89.304% when pulling **0fea1205efb6e97923a8f9f470b4ef2711829c52 on degustaf:fix_regression** into **ae223fa514a2178d36da5121a1d87d626cf143fb on PyCQA:master**.
",,
9,issue_comment,387,pycqa,astroid,PCManticore,2017-01-25 19:08:42,Let's go with it. Thanks!,,
10,pull_request_commit,387,pycqa,astroid,degustaf,2017-01-23 20:04:51,Add getitem to defaultdict brain.,0fea1205efb6e97923a8f9f470b4ef2711829c52,
0,issue_title,392,pycqa,astroid,euresti,2017-01-28 16:03:12,"### Fixes / new features
- Added annotations to the PY2 ast.
- Adds a second pass of the source looking for `# type:` comments.  Adds those into the nodes.
- Some perf improvements.

Just looking for comments on my approach here.",start issue,RFC: Inject type comments 
1,pull_request_title,392,pycqa,astroid,euresti,2017-01-28 16:03:12,"### Fixes / new features
- Added annotations to the PY2 ast.
- Adds a second pass of the source looking for `# type:` comments.  Adds those into the nodes.
- Some perf improvements.

Just looking for comments on my approach here.",af549696be2d252250dd0681d104c88569babe6b,RFC: Inject type comments 
2,issue_comment,392,pycqa,astroid,coveralls,2017-01-28 16:07:31,"
[![Coverage Status](https://coveralls.io/builds/9887994/badge)](https://coveralls.io/builds/9887994)

Coverage increased (+0.07%) to 89.378% when pulling **af549696be2d252250dd0681d104c88569babe6b on euresti:type_comments** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
3,issue_comment,392,pycqa,astroid,coveralls,2017-01-28 16:07:31,"
[![Coverage Status](https://coveralls.io/builds/9887994/badge)](https://coveralls.io/builds/9887994)

Coverage increased (+0.07%) to 89.378% when pulling **af549696be2d252250dd0681d104c88569babe6b on euresti:type_comments** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
4,issue_comment,392,pycqa,astroid,coveralls,2017-01-28 16:07:31,"
[![Coverage Status](https://coveralls.io/builds/9887994/badge)](https://coveralls.io/builds/9887994)

Coverage increased (+0.07%) to 89.378% when pulling **af549696be2d252250dd0681d104c88569babe6b on euresti:type_comments** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
5,issue_comment,392,pycqa,astroid,coveralls,2017-01-28 16:07:31,"
[![Coverage Status](https://coveralls.io/builds/9887994/badge)](https://coveralls.io/builds/9887994)

Coverage increased (+0.07%) to 89.378% when pulling **af549696be2d252250dd0681d104c88569babe6b on euresti:type_comments** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
6,issue_comment,392,pycqa,astroid,ceridwen,2017-01-30 20:48:29,"Python 3.6 adds a new node to the ast, AnnAssign, and the same approach should be used here for type annotations on assignment statements, instead of adding a field to AssignNode nodes, see #394.

More broadly, we don't use type comments in pylint or astroid at the moment, so this pull request should be part of a larger discussion about when or if we want to use type comments.  We have discussed in the past the possibility of making the parser pluggable, so that someone could replace a 2.7 parser that doesn't process type comments with one that does.  That approach might still be better than this one.  As it is, astroid parses the code once with the standard library's ast module, rewrites the tree using rebuilder, and pylint reparses the code using tokenizer to find pragmas.  As-is, this patch adds another tokenizer pass to this process.  Aside from the performance implications, I feel like this is too much code duplication across the two code bases.",,
7,pull_request_commit,392,pycqa,astroid,david@dropbox.com,2017-01-10 02:14:56,"Type comments, take 1",857c91f59f9e3d278dba0f1bb176075771ca3d3d,
8,pull_request_commit,392,pycqa,astroid,david@dropbox.com,2017-01-13 20:55:24,Speed up parsing,2a125d4640fd72de17e9b0f4a8b87df7273fb418,
9,pull_request_commit,392,pycqa,astroid,david@dropbox.com,2017-01-14 22:52:08,Fix start of function comments,52955b81ac3ea7c820f4fc343126288ee806c347,
10,pull_request_commit,392,pycqa,astroid,david@dropbox.com,2017-01-28 01:35:01,WIP: type_comments,4b7b51a501c13fa894d7e468925e50223b2c4fbb,
11,pull_request_commit,392,pycqa,astroid,david@dropbox.com,2017-01-28 15:48:58,WIP: type_comments,72a454d664972ecaaa56f355b78a866620b9e907,
12,pull_request_commit,392,pycqa,astroid,david@dropbox.com,2017-01-28 15:59:02,WIP: type_comments,af549696be2d252250dd0681d104c88569babe6b,
13,issue_closed,392,pycqa,astroid,euresti,2018-01-12 19:32:21,,closed issue,RFC: Inject type comments 
14,issue_comment,392,pycqa,astroid,euresti,2018-01-12 19:32:21,This is real old.  ,,
0,issue_title,396,pycqa,astroid,rogalski,2017-01-30 23:44:20,"Just a POC, needs:

1) Guidance on if it’s a correct way to solve a problem
2) Extra tests
3) Docs entries

Aims to solve PyCQA/pylint#957",start issue,"Infer starred expressions in tuple, list, set and dict literals"
1,issue_closed,396,pycqa,astroid,rogalski,2017-02-14 19:32:24,,closed issue,"Infer starred expressions in tuple, list, set and dict literals"
2,pull_request_title,396,pycqa,astroid,rogalski,2017-01-30 23:44:20,"Just a POC, needs:

1) Guidance on if it’s a correct way to solve a problem
2) Extra tests
3) Docs entries

Aims to solve PyCQA/pylint#957",aeac1c12b1e8272f12a64f290c71671847901dcd,"Infer starred expressions in tuple, list, set and dict literals"
3,pull_request_merged,396,pycqa,astroid,rogalski,2017-02-14 19:32:24,"Infer starred expressions in tuple, list, set and dict literals",4e7d9fee4080d2e0db67a3e0463be8b196e56a95,Pull request merge from rogalski/astroid:infer_starred to PyCQA/astroid:master
4,issue_comment,396,pycqa,astroid,coveralls,2017-01-30 23:50:29,"
[![Coverage Status](https://coveralls.io/builds/9915288/badge)](https://coveralls.io/builds/9915288)

Coverage decreased (-1.9%) to 87.449% when pulling **21063712c5a54d06c154ec3bf8e36cd42120c743 on rogalski:infer_starred** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
5,issue_comment,396,pycqa,astroid,rogalski,2017-01-30 23:52:33,Lack of coverage is due to guard except clause not being hit. May be easily improved by adding additional tests.,,
6,issue_comment,396,pycqa,astroid,coveralls,2017-02-05 15:23:11,"
[![Coverage Status](https://coveralls.io/builds/10002169/badge)](https://coveralls.io/builds/10002169)

Coverage increased (+0.02%) to 89.325% when pulling **5cc5e5b3c75c96efff11482dd4db1396098f2304 on rogalski:infer_starred** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
7,issue_comment,396,pycqa,astroid,coveralls,2017-02-07 20:41:06,"
[![Coverage Status](https://coveralls.io/builds/10041446/badge)](https://coveralls.io/builds/10041446)

Coverage increased (+0.02%) to 89.325% when pulling **b5b5eaf6ea7173f6f8e79516c87c53b578dd316a on rogalski:infer_starred** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
8,issue_comment,396,pycqa,astroid,coveralls,2017-02-07 20:41:06,"
[![Coverage Status](https://coveralls.io/builds/10041446/badge)](https://coveralls.io/builds/10041446)

Coverage increased (+0.02%) to 89.325% when pulling **b5b5eaf6ea7173f6f8e79516c87c53b578dd316a on rogalski:infer_starred** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
9,issue_comment,396,pycqa,astroid,coveralls,2017-02-07 20:41:06,"
[![Coverage Status](https://coveralls.io/builds/10041446/badge)](https://coveralls.io/builds/10041446)

Coverage increased (+0.02%) to 89.325% when pulling **b5b5eaf6ea7173f6f8e79516c87c53b578dd316a on rogalski:infer_starred** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
10,issue_comment,396,pycqa,astroid,coveralls,2017-02-07 20:41:06,"
[![Coverage Status](https://coveralls.io/builds/10041446/badge)](https://coveralls.io/builds/10041446)

Coverage increased (+0.02%) to 89.325% when pulling **b5b5eaf6ea7173f6f8e79516c87c53b578dd316a on rogalski:infer_starred** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
11,issue_comment,396,pycqa,astroid,coveralls,2017-02-07 20:41:06,"
[![Coverage Status](https://coveralls.io/builds/10041446/badge)](https://coveralls.io/builds/10041446)

Coverage increased (+0.02%) to 89.325% when pulling **b5b5eaf6ea7173f6f8e79516c87c53b578dd316a on rogalski:infer_starred** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
12,pull_request_commit_comment,396,pycqa,astroid,PCManticore,2017-02-13 22:36:52,We don't use ``v``.,aeac1c12b1e8272f12a64f290c71671847901dcd,"(None, '', u'astroid/inference.py')"
13,pull_request_commit,396,pycqa,astroid,rogalski,2017-01-30 23:44:08,"Infer starred expressions in (tuple, list, dict) literals

Just a POC, needs:

1) Guidance on if it’s a correct way to solve a problem
2) Extra tests
3) Docs entries

Aims to solve PyCQA/pylint#957",21063712c5a54d06c154ec3bf8e36cd42120c743,
14,pull_request_commit,396,pycqa,astroid,rogalski,2017-02-05 12:51:58,"Fix namespace population when wildcard import is used (#397)

Fix PyCQA/pylint#1312",9a8eec14016123f1cbc106eab04ce2ac3156670d,
15,pull_request_commit,396,pycqa,astroid,rogalski,2017-02-05 12:57:40,"Revert ""Fix namespace population when wildcard import is used (#397)"" (#398)

This reverts commit 3e6ef99928137a396a6ee9c75351f4194b2471e8.",7dbd9bde02cc8c53a7ac46fe7ce0a11d9ce3c36f,
16,pull_request_commit,396,pycqa,astroid,rogalski,2017-02-05 15:18:39,"Extra tests, raise InferenceError when starred expressions cannot be inferred",5cc5e5b3c75c96efff11482dd4db1396098f2304,
17,pull_request_commit,396,pycqa,astroid,rogalski,2017-02-07 20:36:20,"Overall improvements in docs, raised exceptions and more",b5b5eaf6ea7173f6f8e79516c87c53b578dd316a,
18,pull_request_commit,396,pycqa,astroid,rogalski,2017-02-14 19:02:55,Merge branch 'master' into infer_starred,bb218dd1e3cd2e6ffe67109f99aef24b9a736005,
19,pull_request_commit,396,pycqa,astroid,rogalski,2017-02-14 19:04:16,Rename unused name to underscore,aeac1c12b1e8272f12a64f290c71671847901dcd,
0,issue_title,395,pycqa,astroid,sscherfke,2017-01-30 15:29:59,"### Steps to reproduce
1. Run pylint on this code:
    ```python
    import pandas
    pandas.read_sql('spam', engine=None)['key'].value
    ```
    The actual SQL query or engine don't matter. It seems to be the `['key']` (maybe in combination with `.value`.

### Current behavior
```
Traceback (most recent call last):
  File "".../bin/pylint"", line 6, in <module>
    sys.exit(pylint.run_pylint())
  File "".../lib/python3.6/site-packages/pylint/__init__.py"", line 13, in run_pylint
    Run(sys.argv[1:])
  File "".../lib/python3.6/site-packages/pylint/lint.py"", line 1300, in __init__
    linter.check(args)
  File "".../lib/python3.6/site-packages/pylint/lint.py"", line 726, in check
    self._do_check(files_or_modules)
  File "".../lib/python3.6/site-packages/pylint/lint.py"", line 855, in _do_check
    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)
  File "".../lib/python3.6/site-packages/pylint/lint.py"", line 934, in check_astroid_module
    walker.walk(ast_node)
  File "".../lib/python3.6/site-packages/pylint/utils.py"", line 973, in walk
    self.walk(child)
  File "".../lib/python3.6/site-packages/pylint/utils.py"", line 973, in walk
    self.walk(child)
  File "".../lib/python3.6/site-packages/pylint/utils.py"", line 970, in walk
    cb(astroid)
  File "".../lib/python3.6/site-packages/pylint/checkers/typecheck.py"", line 612, in
 visit_attribute
    infered = list(node.expr.infer())
  File "".../lib/python3.6/site-packages/astroid/decorators.py"", line 85, in wrapped
    res = next(generator)
  File "".../lib/python3.6/site-packages/astroid/decorators.py"", line 138, in raise_if_nothing_inferred
    yield next(generator)
  File "".../lib/python3.6/site-packages/astroid/inference.py"", line 260, in infer_subscript
    assigned = value.getitem(index_value, context)
  File "".../lib/python3.6/site-packages/astroid/scoped_nodes.py"", line 1523, in getitem
    methods = dunder_lookup.lookup(self, '__getitem__')
  File "".../lib/python3.6/site-packages/astroid/interpreter/dunder_lookup.py"", line 54, in lookup
    return _class_lookup(node, name)
  File "".../lib/python3.6/site-packages/astroid/interpreter/dunder_lookup.py"", line 67, in _class_lookup
    target=node
astroid.exceptions.AttributeInferenceError: '__getitem__' not found on <ClassDef.generator l.0 at 0x7f06c4310860>.
```


### Expected behavior

No exception.

### ``python -c ""from astroid import __pkginfo__; print(__pkginfo__.version)""`` output
1.5.0
PyCQA/astroid@d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25
PyCQA/pylint@7daed7b8982480c868b0f642a5251f00ffb253c6",start issue,AttributeInferenceError: __getitem__ with Pandas
1,issue_closed,395,pycqa,astroid,PCManticore,2017-03-01 10:11:28,,closed issue,AttributeInferenceError: __getitem__ with Pandas
2,issue_comment,395,pycqa,astroid,degustaf,2017-01-30 15:41:33,"@sscherfke I can see from your traceback that you are using Python3.6, which isn't officially supported yet.  Do you get the same error with other versions of Python?",,
3,issue_comment,395,pycqa,astroid,sscherfke,2017-01-30 19:01:45,Haven’t tried yet – will do it tomorrow. But since Py36 support is on your roadmap anyways. ;-),,
4,issue_comment,395,pycqa,astroid,degustaf,2017-01-30 19:45:57,@sscherfke Not trying to suggest it won't get done.  Just trying to better understand the issue :),,
5,issue_comment,395,pycqa,astroid,ceridwen,2017-01-30 20:22:20,What version of pandas is this with?  I can't replicate this error on Python 2.7 or 3.5 with pandas 0.19.2. For now I'm tagging this issue with 3.6.,,
6,issue_comment,395,pycqa,astroid,sscherfke,2017-01-31 07:39:34,"Hm. I can reproduce this with the system's Python 2.7 and 3.5 as well:
```console
$ mktmpenv --python=/usr/bin/python3
$ pip install pandas
Successfully installed numpy-1.12.0 pandas-0.19.2 python-dateutil-2.6.0 pytz-2016.10
$ pip install git+https://github.com/PyCQA/astroid@d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25
Successfully installed astroid-1.5.0 lazy-object-proxy-1.2.2 wrapt-1.10.8
$ pip install git+https://github.com/PyCQA/pylint@7daed7b8982480c868b0f642a5251f00ffb253c6
Successfully installed editdistance-0.3.1 isort-4.2.5 mccabe-0.6.1 pylint-2.0.0
$ cat /tmp/pylinttest.py
import pandas
pandas.read_sql('spam', engine=None)['key'].value
$ pylint --version
pylint 2.0.0,
astroid 1.5.0
Python 3.5.2 (default, Oct 14 2016, 12:54:53)
[GCC 6.2.1 20160916 (Red Hat 6.2.1-2)]
$ pylint /tmp/pylinttest.py
************* Module pylinttest
W:  2, 0: Expression ""pandas.read_sql('spam', engine=None)['key'].value"" is assigned to nothing (expression-not-assigned)
Traceback (most recent call last):
  File ""/.virtualenvs/tmp-b168b6a226f0cec/bin/pylint"", line 11, in <module>
    load_entry_point('pylint==2.0.0', 'console_scripts', 'pylint')()
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/pylint/__init__.py"", line 13, in run_pylint
    Run(sys.argv[1:])
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/pylint/lint.py"", line 1300, in __init__
    linter.check(args)
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/pylint/lint.py"", line 726, in check
    self._do_check(files_or_modules)
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/pylint/lint.py"", line 855, in _do_check
    self.check_astroid_module(ast_node, walker, rawcheckers, tokencheckers)
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/pylint/lint.py"", line 934, in check_astroid_module
    walker.walk(ast_node)
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/pylint/utils.py"", line 973, in walk
    self.walk(child)
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/pylint/utils.py"", line 973, in walk
    self.walk(child)
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/pylint/utils.py"", line 970, in walk
    cb(astroid)
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/pylint/checkers/typecheck.py"", line 612, in visit_attribute
    infered = list(node.expr.infer())
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/astroid/decorators.py"", line 85, in wrapped
    res = next(generator)
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/astroid/decorators.py"", line 138, in raise_if_nothing_inferred
    yield next(generator)
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/astroid/inference.py"", line 260, in infer_subscript
    assigned = value.getitem(index_value, context)
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/astroid/scoped_nodes.py"", line 1523, in getitem
    methods = dunder_lookup.lookup(self, '__getitem__')
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/astroid/interpreter/dunder_lookup.py"", line 54, in lookup
    return _class_lookup(node, name)
  File ""/.virtualenvs/tmp-b168b6a226f0cec/lib/python3.5/site-packages/astroid/interpreter/dunder_lookup.py"", line 67, in _class_lookup
    target=node
astroid.exceptions.AttributeInferenceError: '__getitem__' not found on <ClassDef.generator l.0 at 0x7fe311ffdbe0>.
```",,
7,issue_comment,395,pycqa,astroid,rr-,2017-02-05 14:01:39,"Minimal example

```python
from typing import Dict

def test(params: Dict[str, str]):
    pass
```
",,
0,issue_title,394,pycqa,astroid,rr-,2017-01-30 08:48:02,Crude implementation for #393 ,start issue,Add support for annotated assignment nodes
1,issue_closed,394,pycqa,astroid,PCManticore,2017-02-09 08:14:11,,closed issue,Add support for annotated assignment nodes
2,pull_request_title,394,pycqa,astroid,rr-,2017-01-30 08:48:02,Crude implementation for #393 ,ddc652e44fc1c9946cf9439aecaea3d82d217ff8,Add support for annotated assignment nodes
3,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 08:55:37,"
[![Coverage Status](https://coveralls.io/builds/9900337/badge)](https://coveralls.io/builds/9900337)

Coverage decreased (-0.1%) to 89.203% when pulling **1319a00eab7833c5986ebb40173c8d63bc54d5a0 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
4,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 08:55:37,"
[![Coverage Status](https://coveralls.io/builds/9900337/badge)](https://coveralls.io/builds/9900337)

Coverage decreased (-0.1%) to 89.203% when pulling **1319a00eab7833c5986ebb40173c8d63bc54d5a0 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
5,issue_comment,394,pycqa,astroid,ceridwen,2017-01-30 20:31:09,Can you add a test for this to unittest_nodes.py?  The existing test Python35AyncTest in that file should be a good model.,,
6,issue_comment,394,pycqa,astroid,rr-,2017-01-30 21:50:03,Pushed a basic test,,
7,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 21:55:04,"
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
8,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 21:55:04,"
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
9,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 21:55:04,"
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
10,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 21:55:04,"
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
11,issue_comment,394,pycqa,astroid,coveralls,2017-01-30 21:55:04,"
[![Coverage Status](https://coveralls.io/builds/9913381/badge)](https://coveralls.io/builds/9913381)

Coverage increased (+0.03%) to 89.329% when pulling **9469c0b87836f7d0091bc6ba16814a68cbed65fc on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
12,issue_comment,394,pycqa,astroid,ceridwen,2017-01-30 22:36:16,"Sorry I forgot to mention this before, but you should use the _visit_or_none helper function in the rebuilder method, and it should be in TreeRebuilder3 since it's a Python 3 feature.",,
13,issue_comment,394,pycqa,astroid,rr-,2017-01-31 08:01:04,Updated~,,
14,issue_comment,394,pycqa,astroid,coveralls,2017-01-31 08:05:30,"
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
15,issue_comment,394,pycqa,astroid,coveralls,2017-01-31 08:05:30,"
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
16,issue_comment,394,pycqa,astroid,coveralls,2017-01-31 08:05:30,"
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
17,issue_comment,394,pycqa,astroid,coveralls,2017-01-31 08:05:30,"
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
18,issue_comment,394,pycqa,astroid,coveralls,2017-01-31 08:05:30,"
[![Coverage Status](https://coveralls.io/builds/9919171/badge)](https://coveralls.io/builds/9919171)

Coverage increased (+0.02%) to 89.326% when pulling **437560727e58b738c660b273c85bcea5badb4e71 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
19,issue_comment,394,pycqa,astroid,rr-,2017-02-05 13:54:18,"Updated~ (made separate commit to ease the review, it's to be squashed at later time)",,
20,issue_comment,394,pycqa,astroid,coveralls,2017-02-05 13:59:03,"
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
21,issue_comment,394,pycqa,astroid,coveralls,2017-02-05 13:59:03,"
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
22,issue_comment,394,pycqa,astroid,coveralls,2017-02-05 13:59:03,"
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
23,issue_comment,394,pycqa,astroid,coveralls,2017-02-05 13:59:03,"
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
24,issue_comment,394,pycqa,astroid,coveralls,2017-02-05 13:59:03,"
[![Coverage Status](https://coveralls.io/builds/10001677/badge)](https://coveralls.io/builds/10001677)

Coverage increased (+0.03%) to 89.332% when pulling **b7c88492163f36559dad3c673b81566f48ab03a2 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
25,issue_comment,394,pycqa,astroid,ceridwen,2017-02-07 15:44:06,"I'm going to merge this tomorrow or so if there are no more comments, unless someone else wants to do it.  The remaining CI failure looks like a misconfiguration of pylint somehow.",,
26,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 16:51:19,"
[![Coverage Status](https://coveralls.io/builds/10036976/badge)](https://coveralls.io/builds/10036976)

Coverage increased (+0.03%) to 89.335% when pulling **5bd21c2d1caaf4783a3b07892c1690c3f8629f6c on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
27,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 16:51:19,"
[![Coverage Status](https://coveralls.io/builds/10036976/badge)](https://coveralls.io/builds/10036976)

Coverage increased (+0.03%) to 89.335% when pulling **5bd21c2d1caaf4783a3b07892c1690c3f8629f6c on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
28,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 16:51:19,"
[![Coverage Status](https://coveralls.io/builds/10036976/badge)](https://coveralls.io/builds/10036976)

Coverage increased (+0.03%) to 89.335% when pulling **5bd21c2d1caaf4783a3b07892c1690c3f8629f6c on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
29,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 16:54:27,"
[![Coverage Status](https://coveralls.io/builds/10037020/badge)](https://coveralls.io/builds/10037020)

Coverage increased (+0.03%) to 89.335% when pulling **5bd21c2d1caaf4783a3b07892c1690c3f8629f6c on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
30,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 17:02:18,"
[![Coverage Status](https://coveralls.io/builds/10037203/badge)](https://coveralls.io/builds/10037203)

Coverage increased (+0.03%) to 89.335% when pulling **f39ab6377dce29292f8e8b8867f571b1e99eb73a on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
31,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 20:45:53,"
[![Coverage Status](https://coveralls.io/builds/10041540/badge)](https://coveralls.io/builds/10041540)

Coverage increased (+0.03%) to 89.335% when pulling **275ff6135e7befc807e0f6169a7c5b7b69a15d48 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
32,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:35:57,"
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
33,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:35:57,"
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
34,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:35:57,"
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
35,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:35:58,"
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
36,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:35:58,"
[![Coverage Status](https://coveralls.io/builds/10043400/badge)](https://coveralls.io/builds/10043400)

Coverage increased (+0.03%) to 89.336% when pulling **462925a0942847272744b1742a6bbfc4e83d38b1 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
37,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:38:28,"
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
38,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:38:28,"
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
39,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:38:28,"
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
40,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:38:28,"
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
41,issue_comment,394,pycqa,astroid,coveralls,2017-02-07 22:38:28,"
[![Coverage Status](https://coveralls.io/builds/10043441/badge)](https://coveralls.io/builds/10043441)

Coverage increased (+0.05%) to 89.351% when pulling **ddc652e44fc1c9946cf9439aecaea3d82d217ff8 on rr-:annassign** into **d0b5acdfebcdda5c949584c32a8cbc0f31d5cf25 on PyCQA:master**.
",,
42,issue_comment,394,pycqa,astroid,PCManticore,2017-02-09 08:14:11,"I merged this manually, with a couple of small changes, such as putting ``simple`` in ``_other_fields``, instead of ``_astroid_fields``. Thank you so much @rr- for your contribution!",,
43,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-05 10:49:09,"Please extend test suite for more complex cases found in [PEP526](https://www.python.org/dev/peps/pep-0526/):

```
primes: List[int] = []

captain: str  # Note: no initial value!

class Starship:
    stats: ClassVar[Dict[str, int]] = {}
```",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/tests/unittest_nodes.py')"
44,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-05 10:50:09,Consider using `test_utils.require_version` decorator.,ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/tests/unittest_nodes.py')"
45,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-05 10:57:14,"this likely should be named `target`, not `targets`. Annotated assign cannot be done anyway:

```
>>> (a, b): (int, int)
  File ""<stdin>"", line 1
SyntaxError: only single target (not tuple) can be annotated
```

Also, `help(_ast.AnnAssign)` yields:

    _fields = ('target', 'annotation', 'value', 'simple')

Astroid is supposed to be superset of `ast` and should be consistent with it. I'll recommend changing `_astroid_fields` value quoted above.

[PEP](https://www.python.org/dev/peps/pep-0526/#runtime-effects-of-type-annotations) also mentions _simple name_, but I don't think it affects us in any way.",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/node_classes.py')"
46,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-07 15:53:00,"we should add `simple` and change ordering to be in conformance with built-in `ast`.

```
>>> ast.parse('a: int').body[0]._fields
('target', 'annotation', 'value', 'simple')
```",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/node_classes.py')"
47,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-07 15:54:05,maybe actually indenting it and using `textwrap.dedent` will look slightly nicer in a code.,ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/tests/unittest_nodes.py')"
48,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-07 15:55:42,"Just a nitpick, test cases should be correct, let's use type specification for both keys and values: `Dict[str, str]`",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/tests/unittest_nodes.py')"
49,pull_request_commit_comment,394,pycqa,astroid,PCManticore,2017-02-07 16:31:01,visit an*,ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/rebuilder.py')"
50,pull_request_commit_comment,394,pycqa,astroid,rogalski,2017-02-07 21:32:11,"@PCManticore just before merging it - is it correct way to do it (creation of fake Const node)?

I encountered a very similar situation during implementation of [async comprehensions] support for astroid. ",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/rebuilder.py')"
51,pull_request_commit_comment,394,pycqa,astroid,PCManticore,2017-02-07 21:36:45,"Mm, now that you mention this, we can probably call ``visit_const`` instead of building it on our own. Thanks for finding this.",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/rebuilder.py')"
52,pull_request_commit_comment,394,pycqa,astroid,ceridwen,2017-02-07 21:39:53,"Something I just noticed: which of these fields are optional in the standard-library ast nodes?  I'm assuming that the annotation, target, and value fields aren't, but I haven't looked at 3.6 myself.  Whatever fields aren't optional should have required arguments.  There's legacy code that requires that it be possible to build some AST nodes without having all the mandatory fields set, but this is bad practice, and we shouldn't be carrying it forward to new nodes.",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/node_classes.py')"
53,pull_request_commit_comment,394,pycqa,astroid,rr-,2017-02-07 21:45:18,"https://docs.python.org/3/library/ast.html
```
          -- 'simple' indicates that we annotate simple name without parens
          | AnnAssign(expr target, expr annotation, expr? value, int simple)
```

Looks like only `value` is optional",ddc652e44fc1c9946cf9439aecaea3d82d217ff8,"(None, '', u'astroid/node_classes.py')"
54,pull_request_commit,394,pycqa,astroid,rr-,2017-01-30 08:45:55,Add support for annotated assignment nodes,437560727e58b738c660b273c85bcea5badb4e71,
55,pull_request_commit,394,pycqa,astroid,rr-,2017-02-05 13:53:56,review fixes,b7c88492163f36559dad3c673b81566f48ab03a2,
56,pull_request_commit,394,pycqa,astroid,rr-,2017-02-07 16:45:20,review fixes (II),60b384f8668b588f33cd03ef92820f06b3ba21c4,
57,pull_request_commit,394,pycqa,astroid,rr-,2017-02-07 16:47:18,add changelog entry,5bd21c2d1caaf4783a3b07892c1690c3f8629f6c,
58,pull_request_commit,394,pycqa,astroid,rr-,2017-02-07 16:57:06,fix indentation,f39ab6377dce29292f8e8b8867f571b1e99eb73a,
59,pull_request_commit,394,pycqa,astroid,rr-,2017-02-07 20:41:17,fix too long line,275ff6135e7befc807e0f6169a7c5b7b69a15d48,
60,pull_request_commit,394,pycqa,astroid,rr-,2017-02-07 22:30:59,make non-optional arguments required,462925a0942847272744b1742a6bbfc4e83d38b1,
61,pull_request_commit,394,pycqa,astroid,rr-,2017-02-07 22:32:47,use visit_const,ddc652e44fc1c9946cf9439aecaea3d82d217ff8,
0,issue_title,388,pycqa,astroid,rogalski,2017-01-24 21:05:55,"Just a POC, needs test coverage
",start issue,Mark __init_subclass__ as classmethod [2.0 branch]
1,issue_closed,388,pycqa,astroid,rogalski,2017-01-30 21:01:57,,closed issue,Mark __init_subclass__ as classmethod [2.0 branch]
2,pull_request_title,388,pycqa,astroid,rogalski,2017-01-24 21:05:55,"Just a POC, needs test coverage
",5932083ad363222b795f8387d07cc14eeb40f65d,Mark __init_subclass__ as classmethod [2.0 branch]
3,pull_request_merged,388,pycqa,astroid,rogalski,2017-01-30 21:01:57,Mark __init_subclass__ as classmethod [2.0 branch],ac425e60a2c243eaf0b41ba1eb33b84a49d11eb7,Pull request merge from rogalski/astroid:init_subclass to PyCQA/astroid:2.0
4,issue_comment,388,pycqa,astroid,degustaf,2017-01-24 21:13:13,"Sorry, missed the POC comment when I reviewed this.",,
5,issue_comment,388,pycqa,astroid,rogalski,2017-01-24 21:16:34,@degustaf hopefully tomorrow,,
6,issue_comment,388,pycqa,astroid,PCManticore,2017-01-25 19:13:01,"This looks good. Needs tests, of course. Also, is this targetted to 2.0? I am on the phone and can't really see the destination, but the changed file is ``tree/scoped_nodes.py``.",,
7,issue_comment,388,pycqa,astroid,rogalski,2017-01-25 20:52:51,"@PCManticore yes, it targets 2.0 branch. Should it?",,
8,issue_comment,388,pycqa,astroid,PCManticore,2017-01-25 20:56:40,"Probably no, it could target the master branch, which will be released much sooner than 2.0 is expected to be.",,
9,issue_comment,388,pycqa,astroid,PCManticore,2017-01-28 09:51:12,Looks good. Feel free to merge once you remove the extraneous test.,,
10,pull_request_commit_comment,388,pycqa,astroid,PCManticore,2017-01-28 09:50:48,We need to drop this test.,5932083ad363222b795f8387d07cc14eeb40f65d,"(None, '', u'astroid/tests/unittest_builder.py')"
11,pull_request_commit,388,pycqa,astroid,rogalski,2017-01-24 21:04:21,"Mark __init_subclass__ as classmethod

Just a POC, needs test coverage",c36f7ab2c60b0218804387c5f0a3694297da5493,
12,pull_request_commit,388,pycqa,astroid,rogalski,2017-01-25 20:52:15,Add unittest,f8f81da69dc7ec59d8f93577612e621e8a0a85af,
13,pull_request_commit,388,pycqa,astroid,rogalski,2017-01-25 21:58:58,Fix __init_subclass__ method doc,e763de912cde91495534d9a07ad10fa302b26ed2,
14,pull_request_commit,388,pycqa,astroid,rogalski,2017-01-25 22:12:56,Fix unittests,18d0ae343a92ebe349b454c96ebf56ddd08fcbec,
15,pull_request_commit,388,pycqa,astroid,rogalski,2017-01-25 22:26:44,Fix unittests from another modules,4926bc8b48fb4f1daf946dc94b6fc78f465399de,
16,pull_request_commit,388,pycqa,astroid,rogalski,2017-01-26 19:37:08,"Revert ""Fix unittests from another modules""

This reverts commit 4926bc8b48fb4f1daf946dc94b6fc78f465399de.",c7072d8995eedf9e25570788052db4c1e5be6d46,
17,pull_request_commit,388,pycqa,astroid,rogalski,2017-01-26 19:37:10,"Revert ""Fix unittests""

This reverts commit 18d0ae343a92ebe349b454c96ebf56ddd08fcbec.",430a93617e92a8937259dfdcfaee8d2b9355b1e4,
18,pull_request_commit,388,pycqa,astroid,rogalski,2017-01-26 19:37:13,"Revert ""Fix __init_subclass__ method doc""

This reverts commit e763de912cde91495534d9a07ad10fa302b26ed2.",d8d28d10b8547545f5b3dcd21bcd62b0d5e78023,
19,pull_request_commit,388,pycqa,astroid,rogalski,2017-01-26 19:38:50,Fix once again,efea818ebaed016dde53dd2db16a488028a66196,
20,pull_request_commit,388,pycqa,astroid,rogalski,2017-01-30 20:47:41,remove old version of the test,5932083ad363222b795f8387d07cc14eeb40f65d,
