"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","308","pycqa","astroid","dbaum","2016-01-15 20:03:39","The unit test shows some very strange source code that can cause an infinite recursion in astroid.  It looks like the context normally provides protection against this sort of thing, but it isn't plumbed through to the check of the assignment.  Here's one possible fix.  I'm completely open to other solutions for fixing this since adding the context arg to a few methods does seem a bit invasive.  Maybe there's a cleaner solution.
","start issue","Fix metaclass infinite loop when a class is its own metaclass."
"issue_closed","308","pycqa","astroid","PCManticore","2016-02-17 11:35:03","","closed issue","Fix metaclass infinite loop when a class is its own metaclass."
"pull_request_title","308","pycqa","astroid","dbaum","2016-01-15 20:03:39","The unit test shows some very strange source code that can cause an infinite recursion in astroid.  It looks like the context normally provides protection against this sort of thing, but it isn't plumbed through to the check of the assignment.  Here's one possible fix.  I'm completely open to other solutions for fixing this since adding the context arg to a few methods does seem a bit invasive.  Maybe there's a cleaner solution.
","9f5de2f1dc6f4e57b67222663c95d5d184155547","Fix metaclass infinite loop when a class is its own metaclass."
"issue_comment","308","pycqa","astroid","ceridwen","2016-01-19 01:27:47","This looks fine to me.  @PCManticore?
","",""
"issue_comment","308","pycqa","astroid","PCManticore","2016-01-19 14:55:38","I'm not sure we should proliferate the use of the context as a parameter for all these methods. I'll look closely into the problem later today to see if there's another solution we might use for fixing this.
","",""
"issue_comment","308","pycqa","astroid","dbaum","2016-01-29 18:28:43","Any ideas on this?  It's not urgent, but if you have suggestions on other ways to fix the problem please let me know.
","",""
"issue_comment","308","pycqa","astroid","PCManticore","2016-02-02 12:05:07","Taking a look today or tomorrow, sorry for the delay, I got sidetracked in January with a lot of stuff.
","",""
"issue_comment","308","pycqa","astroid","PCManticore","2016-02-17 11:35:03","It seems that this is fixed in 2.0, but it reproduces on master. Unfortunately I couldn't find the commit where this got fixed, but since 2.0 will become the new master in the next couple of weeks, I'm considering this fixed. Sorry for taking me so long to look over this issue and please let me know if it still reproduces for you on 2.0 (please note though that it is in an unstable test and pylint doesn't work yet with it)
","",""
"pull_request_commit","308","pycqa","astroid","dbaum","2016-01-15 19:57:43","Fix metaclass infinite loop when a class is its own metaclass.","9f5de2f1dc6f4e57b67222663c95d5d184155547",""
