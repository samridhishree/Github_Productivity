,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,3,idan,oauthlib,ghickman,2012-03-13 04:11:59,None,start issue,Add basic setup.py
1,issue_closed,3,idan,oauthlib,dgouldin,2012-03-13 04:57:32,,closed issue,Add basic setup.py
2,pull_request_title,3,idan,oauthlib,ghickman,2012-03-13 04:11:59,None,84184ede1f30f31325334e1328d44b8523b5acce,Add basic setup.py
3,issue_comment,3,idan,oauthlib,kennethreitz,2012-03-13 04:12:35,":cake:
",,
4,issue_comment,3,idan,oauthlib,dgouldin,2012-03-13 04:57:32,"The setup.py commit has been cherry-picked. I'm closing this pull request.
",,
5,pull_request_commit,3,idan,oauthlib,ghickman,2012-03-13 04:11:07,Add basic setup.py,f5946ed1053146661e4415fff73579f7a06c2ca9,
6,pull_request_commit,3,idan,oauthlib,ghickman,2012-03-13 04:11:33,Merge branch 'master' of git://github.com/idangazit/oauthlib,84184ede1f30f31325334e1328d44b8523b5acce,
0,issue_title,11,idan,oauthlib,ib-lundgren,2012-03-16 19:00:03,"It is annoying and forces us to use list of tuples rather than dicts but it is very clear from 3.4.1.3.1. that multiple keys are allowed as well as empty strings. Only OAuth parameters are allowed in the header and the current implementation does not strip empty values so no change needed.
",start issue,Allow empty strings and duplicate keys in query and body
1,issue_closed,11,idan,oauthlib,dgouldin,2012-03-24 17:52:07,,closed issue,Allow empty strings and duplicate keys in query and body
2,pull_request_title,11,idan,oauthlib,ib-lundgren,2012-03-16 19:00:03,"It is annoying and forces us to use list of tuples rather than dicts but it is very clear from 3.4.1.3.1. that multiple keys are allowed as well as empty strings. Only OAuth parameters are allowed in the header and the current implementation does not strip empty values so no change needed.
",6f95a037af0901d49ff3174d33672105b7ef3a08,Allow empty strings and duplicate keys in query and body
3,pull_request_merged,11,idan,oauthlib,dgouldin,2012-03-24 17:52:07,Allow empty strings and duplicate keys in query and body,932fbb36a31dca5f5edad27e8f9078180df67488,Pull request merge from ib-lundgren/oauthlib:duplicate_keys to idan/oauthlib:master
4,issue_comment,11,idan,oauthlib,dgouldin,2012-03-24 17:37:48,"Comments added to the commits, both very minor.
",,
5,pull_request_commit,11,idan,oauthlib,ib-lundgren,2012-03-16 18:57:28,Allow empty strings and duplicate keys in query,26205a0a72fe5dcb95db18bb2bb90af701eacfb5,
6,pull_request_commit,11,idan,oauthlib,ib-lundgren,2012-03-16 19:08:56,Allow empty strings in body,d703a2047c9ab6f1c4e8154782f5d503d9701550,
7,pull_request_commit,11,idan,oauthlib,ib-lundgren,2012-03-24 17:46:34,Merge branch 'master' of https://github.com/idangazit/oauthlib into duplicate_keys,80691afb3e404d23f25644849ce0c64de5e32db6,
8,pull_request_commit,11,idan,oauthlib,ib-lundgren,2012-03-24 17:47:35,added keywords,6f95a037af0901d49ff3174d33672105b7ef3a08,
9,pull_request_commit_comment,11,idan,oauthlib,dgouldin,2012-03-24 17:33:48,"parse_qsl(uri_query, keep_blank_values=True) please. It's easier to read.
",26205a0a72fe5dcb95db18bb2bb90af701eacfb5,"(5, 89, u'oauthlib/signature.py')"
10,pull_request_commit_comment,11,idan,oauthlib,dgouldin,2012-03-24 17:35:40,"keep_blank_values=True here as well, please
",d703a2047c9ab6f1c4e8154782f5d503d9701550,"(5, 100, u'oauthlib/signature.py')"
0,issue_title,8,idan,oauthlib,ib-lundgren,2012-03-15 22:24:12,"Client secret and resource owner secret are both optional per spec (http://tools.ietf.org/html/rfc5849#section-3.4.2, see key 2) even if it would make no sense to not use at least one. Both secrets can safely be set to None without affecting HMAC. Also if the request is signed with RSA-SHA1 then none of the secrets will be used.

Resource owner key is only available in step 2 & 3 of the 3 step authentication (http://tools.ietf.org/html/rfc5849#section-2). While it could still be submitted with an empty string as a value I think it is a better idea to leave it out of the parameters altogether.
",start issue,Changed secrets and resource owner key to optional
1,issue_closed,8,idan,oauthlib,dgouldin,2012-03-24 17:28:42,,closed issue,Changed secrets and resource owner key to optional
2,pull_request_title,8,idan,oauthlib,ib-lundgren,2012-03-15 22:24:11,"Client secret and resource owner secret are both optional per spec (http://tools.ietf.org/html/rfc5849#section-3.4.2, see key 2) even if it would make no sense to not use at least one. Both secrets can safely be set to None without affecting HMAC. Also if the request is signed with RSA-SHA1 then none of the secrets will be used.

Resource owner key is only available in step 2 & 3 of the 3 step authentication (http://tools.ietf.org/html/rfc5849#section-2). While it could still be submitted with an empty string as a value I think it is a better idea to leave it out of the parameters altogether.
",1f4697bd02cd37eed49c425f776c122afd350e03,Changed secrets and resource owner key to optional
3,pull_request_merged,8,idan,oauthlib,dgouldin,2012-03-24 17:28:42,Changed secrets and resource owner key to optional,200648a9d5fad4fe15b4ebbe6078de94100af46f,Pull request merge from ib-lundgren/oauthlib:argument_changes to idan/oauthlib:master
4,issue_comment,8,idan,oauthlib,dgouldin,2012-03-16 05:21:07,"This looks good. Please update OAuth1aServer.check_request_signature accordingly and then I'll merge it.
",,
5,issue_comment,8,idan,oauthlib,ib-lundgren,2012-03-16 10:32:30,"Updated now, hope those changes were what you had in mind. 

Have a vague memory of reading in the spec somewhere that the client_key is optional but very highly recommended and I am not aware of any service that does not use it or why they would not. Since I cant link to it as of now and since it does not make sense not to use it I left it as a mandatory argument.
",,
6,issue_comment,8,idan,oauthlib,dgouldin,2012-03-24 16:54:51,"Getting closer, but not quite there yet.  There's some validation that happens before determining that the uri is valid.  See:

https://github.com/ib-lundgren/oauthlib/blob/785fe3cd04560d81331c6a7cbac6b6a95e85118f/oauthlib/oauth.py#L181

Please update this validation to reflect the new state of required vs optional parameters.
",,
7,pull_request_commit,8,idan,oauthlib,ib-lundgren,2012-03-15 22:16:34,Changed some arguments to optional per spec,cdf86d96eb6f6011f5743ea553e7c549deb0df73,
8,pull_request_commit,8,idan,oauthlib,ib-lundgren,2012-03-16 10:24:00,Changed OAuthServer to match argument changes,785fe3cd04560d81331c6a7cbac6b6a95e85118f,
9,pull_request_commit,8,idan,oauthlib,ib-lundgren,2012-03-24 17:11:45,Merge branch 'master' of https://github.com/idangazit/oauthlib into argument_changes,b7933f3572efaf5c4e4f50ff4cdaa14a931e4398,
10,pull_request_commit,8,idan,oauthlib,ib-lundgren,2012-03-24 17:14:39,Removed oauth_token from required params,72557abea0956324ea34c9edf5e93cde283eab51,
11,pull_request_commit,8,idan,oauthlib,ib-lundgren,2012-03-24 17:16:18,Merge branch 'master' of https://github.com/idangazit/oauthlib into argument_changes,aa4196a2e48cb320247f4fb6fc5e3c1574bb2ab8,
12,pull_request_commit,8,idan,oauthlib,ib-lundgren,2012-03-24 17:27:23,signature -> request_signature,1f4697bd02cd37eed49c425f776c122afd350e03,
0,issue_title,10,idan,oauthlib,ib-lundgren,2012-03-16 18:43:56,"I know the request is big and I can break it down into smaller pieces if that is desired. They are however almost all related to one paragraph of Section 3.2. 

My updates include key checks and asserting that parameters are not passed in multiple times and places. In case of a bad request a ValueError is raised, on an unauthorized request False is returned.

```
The server SHOULD return a 400 (Bad Request) status code when
receiving a request with unsupported parameters, an unsupported
signature method, missing parameters, or duplicated protocol
parameters.  The server SHOULD return a 401 (Unauthorized) status
code when receiving a request with invalid client credentials, an
invalid or expired token, an invalid signature, or an invalid or used
nonce.
```

As well as a snippet from 3.5

```
 When making an OAuth-authenticated request, protocol parameters as
 well as any other parameter using the ""oauth_"" prefix SHALL be
 included in the request using one and only one of the following
 locations, listed in order of decreasing preference:
```

I noticed that OAuthServer takes a signature method as an argument and then omit parsing it from requests, this is wrong. All clients should supply the signature method parameter on all requests, servers are free to allow clients to use any signature method they please and they may change between requests as well. A server may however want to restrict signature methods to only one, if that is the case then a list of allowed signature methods could be passed to the constructor (will send another pull request detailing this).
",start issue,Section 3.(2|4|5) changes
1,issue_closed,10,idan,oauthlib,dgouldin,2012-04-07 21:09:42,,closed issue,Section 3.(2|4|5) changes
2,pull_request_title,10,idan,oauthlib,ib-lundgren,2012-03-16 18:43:56,"I know the request is big and I can break it down into smaller pieces if that is desired. They are however almost all related to one paragraph of Section 3.2. 

My updates include key checks and asserting that parameters are not passed in multiple times and places. In case of a bad request a ValueError is raised, on an unauthorized request False is returned.

```
The server SHOULD return a 400 (Bad Request) status code when
receiving a request with unsupported parameters, an unsupported
signature method, missing parameters, or duplicated protocol
parameters.  The server SHOULD return a 401 (Unauthorized) status
code when receiving a request with invalid client credentials, an
invalid or expired token, an invalid signature, or an invalid or used
nonce.
```

As well as a snippet from 3.5

```
 When making an OAuth-authenticated request, protocol parameters as
 well as any other parameter using the ""oauth_"" prefix SHALL be
 included in the request using one and only one of the following
 locations, listed in order of decreasing preference:
```

I noticed that OAuthServer takes a signature method as an argument and then omit parsing it from requests, this is wrong. All clients should supply the signature method parameter on all requests, servers are free to allow clients to use any signature method they please and they may change between requests as well. A server may however want to restrict signature methods to only one, if that is the case then a list of allowed signature methods could be passed to the constructor (will send another pull request detailing this).
",fd45119491908a63a4dc81b45beb416bc2669710,Section 3.(2|4|5) changes
3,pull_request_merged,10,idan,oauthlib,dgouldin,2012-04-07 21:09:42,Section 3.(2|4|5) changes,e9fd3ff3d87cf3276e12ab1e25c95f2be76f678a,Pull request merge from ib-lundgren/oauthlib:parameter_verification to idan/oauthlib:master
4,issue_comment,10,idan,oauthlib,dgouldin,2012-03-31 23:38:55,"Apply this style of signature type checking and I'll merge the changes:

https://gist.github.com/c9d37af4bbf596d345b0/11ccbc671428b9576b191e2769c9c53ee6a33c0f
",,
5,pull_request_commit,10,idan,oauthlib,ib-lundgren,2012-03-16 18:18:05,Section 3.(2|4|5) changes,d2357291dfe04bd640de7376fc60dafe584373be,
6,pull_request_commit,10,idan,oauthlib,ib-lundgren,2012-03-24 17:36:02,merge prep,354c07006f885b0ff468f44efebe1c4d8df646ec,
7,pull_request_commit,10,idan,oauthlib,ib-lundgren,2012-03-24 17:37:09,more merge prep,04f38ecee9c40dc80a7fe15934800ee5067f9b0f,
8,pull_request_commit,10,idan,oauthlib,ib-lundgren,2012-04-07 10:15:50,New method get_signature_type_and_params,fd45119491908a63a4dc81b45beb416bc2669710,
0,issue_title,12,idan,oauthlib,ib-lundgren,2012-03-16 22:40:49,"Very often you will have the POST data in either a dictionary or a list rather than a nicely encoded string. 

```
post = { u""status"" : u""hello world"" }
uri, body, headers = oauth_client.sign_request(update_url, http_method=u""POST"", body=post)
```
",start issue,Allow body=dict/list in sign_request
1,issue_closed,12,idan,oauthlib,dgouldin,2012-03-24 18:02:33,,closed issue,Allow body=dict/list in sign_request
2,pull_request_title,12,idan,oauthlib,ib-lundgren,2012-03-16 22:40:49,"Very often you will have the POST data in either a dictionary or a list rather than a nicely encoded string. 

```
post = { u""status"" : u""hello world"" }
uri, body, headers = oauth_client.sign_request(update_url, http_method=u""POST"", body=post)
```
",9ab832ce8a2694e08a2399d3d161bc3bedfb7a50,Allow body=dict/list in sign_request
3,pull_request_merged,12,idan,oauthlib,dgouldin,2012-03-24 18:02:33,Allow body=dict/list in sign_request,0de5bae4c34ff57c92d1eb4e3340529b818bdfbf,Pull request merge from ib-lundgren/oauthlib:dict_and_list_as_body to idan/oauthlib:master
4,issue_comment,12,idan,oauthlib,dgouldin,2012-03-24 17:51:42,"Added comment to commit:

https://github.com/ib-lundgren/oauthlib/commit/6059f9b483d9ca0a1f53a1edfc08b75347bc84e0#commitcomment-1127384
",,
5,pull_request_commit,12,idan,oauthlib,ib-lundgren,2012-03-16 22:37:44,Allow body=dict/list in sign_request,6059f9b483d9ca0a1f53a1edfc08b75347bc84e0,
6,pull_request_commit,12,idan,oauthlib,ib-lundgren,2012-03-18 09:52:58,Refactored body check,bd3691cde7124d059162753c35b06cfb41472fa4,
7,pull_request_commit,12,idan,oauthlib,ib-lundgren,2012-03-24 18:00:05,Updated per dgouldins tip + pull,9ab832ce8a2694e08a2399d3d161bc3bedfb7a50,
8,pull_request_commit_comment,12,idan,oauthlib,dgouldin,2012-03-24 17:50:55,"list.extend will take any iterable, so it should be tried last.  Something like this would be more robust:

```
if isinstance(body, (str, unicode)):
    params.extend(urlparse.parse_qsl(body))
elif isinstance(body, dict):
    params.extend(body.items())
else:
    try:
        params.extend(body)
    except TypeError:
        raise ValueError(""body must be a string, dict, or iterable"")
```
",6059f9b483d9ca0a1f53a1edfc08b75347bc84e0,"(None, None, None)"
0,issue_title,5,idan,oauthlib,ib-lundgren,2012-03-15 10:41:19,"Added an equality test against an openssl generated signature. Copied the secrets from ""self"" and manually created the hmac key. Alternatively this could be generated from the self.client_secret & self.resource_owner_secret but then it should also run against openssl rather than use the hard coded signature. Felt that it was better to use a few statics string, what do you think?
",start issue,Updated HMAC test
1,issue_closed,5,idan,oauthlib,dgouldin,2012-03-24 17:15:15,,closed issue,Updated HMAC test
2,pull_request_title,5,idan,oauthlib,ib-lundgren,2012-03-15 10:41:19,"Added an equality test against an openssl generated signature. Copied the secrets from ""self"" and manually created the hmac key. Alternatively this could be generated from the self.client_secret & self.resource_owner_secret but then it should also run against openssl rather than use the hard coded signature. Felt that it was better to use a few statics string, what do you think?
",6069b12a36a6dcc5e77db594dd842743e786a0e4,Updated HMAC test
3,pull_request_merged,5,idan,oauthlib,dgouldin,2012-03-24 17:15:15,Updated HMAC test,42c0e24c632f492b39ede8aedba5af609290cc93,Pull request merge from ib-lundgren/oauthlib:hmac_test to idan/oauthlib:master
4,issue_comment,5,idan,oauthlib,dgouldin,2012-03-24 16:48:24,"I'm -1 on moving string constants into test functions if they're used by multiple tests. While DRY doesn't really apply to testing as much, self. is clear enough here that duplication of the string feels unnecessary.

I'll accept the control_signature part if you'd like to split that out.
",,
5,pull_request_commit,5,idan,oauthlib,ib-lundgren,2012-03-15 10:36:40,Updated HMAC test,e89e18c784758988c858a87f5c19fb2bb6bbd771,
6,pull_request_commit,5,idan,oauthlib,ib-lundgren,2012-03-24 17:04:38,Extracted out string constants,a504910b814c46d835cda372d5c3a8f4cdfd6ee1,
7,pull_request_commit,5,idan,oauthlib,ib-lundgren,2012-03-24 17:05:12,Merge branch 'master' of https://github.com/idangazit/oauthlib into hmac_test,3f84a28055620ab656304ebd6e75ff71c02b9c95,
8,pull_request_commit,5,idan,oauthlib,ib-lundgren,2012-03-24 17:07:48,Added control hmac key,6069b12a36a6dcc5e77db594dd842743e786a0e4,
0,issue_title,7,idan,oauthlib,ib-lundgren,2012-03-15 20:21:01,"Curious to why they are named OAuth1a when OAuth 1a is obsoleted by the OAuth RFC 5849? (http://oauth.net/core/1.0a/)

I suggest renaming them to OAuthClient and OAuthServer and have the module define the version:

```
# OAuth 1
from oauthlib.oauth import OAuthClient

# Possible future OAuth 2 scenario...
from oauthlib.oauth2 import OAuthConfidentialClient , OAuthPublicClient
```

What do you think?

Also, does questions like this one go under ""Issues"" or somewhere else?
",start issue,OAuth1aClient & OAuth1aServer
1,issue_closed,7,idan,oauthlib,ib-lundgren,2012-04-13 11:14:09,,closed issue,OAuth1aClient & OAuth1aServer
2,issue_comment,7,idan,oauthlib,dgouldin,2012-03-15 21:04:42,"I wasn't aware that the RFC was different from 1.0a. Thanks for pointing that out.

I think the correct answer is to namespace everything currently under oauthlib/ to oauthlib/oauth1_RFC5849/ but keeping the class names OAuthServer and OAuthClient.  Then when we implement oauth2 it can be namespaced under oauthlib/oauth2_draft18/ or whatever.

@idangazit didn't want to change it right now, so I'll follow his lead on when is the best time to restructure.
",,
3,issue_comment,7,idan,oauthlib,ib-lundgren,2012-03-15 21:42:06,"Sounds good. Really like the structure of the OAuthLib now and think its advancing awesomely.

Noted another thing...

Currently resource owner key and resource owner secret is set to mandatory arguments to OAuthClient which might not be what we want. When obtaining a request/temporary token the client will usually have neither, the resource owner secret is most often obtained together with the ""access token"" in the last step of the authentication. 

The oauth_token parameter may be set to an empty string so maybe that would be a good default value? Or None and not include it in params at all if not set. (http://tools.ietf.org/html/rfc5849#section-2.1)

The resource owner secret could safely be set to None without affecting the HMAC-SHA signature. 
",,
4,issue_comment,7,idan,oauthlib,dgouldin,2012-03-15 21:55:56,"Changes required to the library should in theory be very straightforward.  Simply point out where we're not adhering to the spec, and if you're correct, it's a bug, without exception.  In the case where a paramater has a default if not specified or is not required, it should be represented as a keyword argument in the method used to fulfill that part of the spec, again without exception.

If you'd like to send a pull request for this particular change, I'd be happy to look it over and give you pointers if it's not pythonic, but I think you have the right idea.  To satisfy the pedant in me, please open as a separate issue if you want to send a pull request.
",,
5,issue_comment,7,idan,oauthlib,ib-lundgren,2012-03-15 22:00:00,"Right, I'll do that in the future then =)
",,
6,issue_comment,7,idan,oauthlib,ib-lundgren,2012-04-13 11:14:09,"Closing since these changes have been made.
",,
0,issue_title,13,idan,oauthlib,ib-lundgren,2012-03-16 23:09:18,"Converted my old twitter example, went very smoothly =)

The example is very basic and far from using best practices but thought it might be of interest for people to see a working example. Who knows one day it might evolve into something decent.

It does require pull request #8, #12 to be merged to work.
",start issue,Added flask twitter example
1,issue_closed,13,idan,oauthlib,ib-lundgren,2012-03-16 23:32:39,,closed issue,Added flask twitter example
2,pull_request_title,13,idan,oauthlib,ib-lundgren,2012-03-16 23:09:18,"Converted my old twitter example, went very smoothly =)

The example is very basic and far from using best practices but thought it might be of interest for people to see a working example. Who knows one day it might evolve into something decent.

It does require pull request #8, #12 to be merged to work.
",b8f66ade7a728c37beefba8543bf05fdccd7f673,Added flask twitter example
3,issue_comment,13,idan,oauthlib,dgouldin,2012-03-16 23:22:57,"We can put this somewhere in the documentation, though ideally we would work with flask core devs to build this into flask itself.  However, I'm uncomfortable even hinting at a dependency in the repo's code itself, so I'm -1 on adding anything flask-based to oauthlib.
",,
4,issue_comment,13,idan,oauthlib,ib-lundgren,2012-03-16 23:32:39,"Hrm can see where you are coming from. OAuthClient is so simple to work with that it makes it very tempting to just throw an example together, which ultimately might get people into bad habits of crafting their own (flask/django/requests/etc) oauth extensions rather than using carefully crafted ones. Good point, did not even occur to me. Closing.
",,
5,pull_request_commit,13,idan,oauthlib,ib-lundgren,2012-03-16 23:03:01,Added flask twitter example,b8f66ade7a728c37beefba8543bf05fdccd7f673,
0,issue_title,6,idan,oauthlib,ib-lundgren,2012-03-15 14:50:10,"Tiny addition. 
1.  The port MUST be included if it is not the default port for the scheme, and MUST be excluded if it is the default.  Specifically, the port MUST be excluded when making an HTTP request [RFC2616] to port 80 **or when making an HTTPS request [RFC2818] to port 443**. All other non-default port numbers MUST be included.
",start issue,Strip HTTPS port
1,issue_closed,6,idan,oauthlib,dgouldin,2012-03-15 17:48:57,,closed issue,Strip HTTPS port
2,pull_request_title,6,idan,oauthlib,ib-lundgren,2012-03-15 14:50:10,"Tiny addition. 
1.  The port MUST be included if it is not the default port for the scheme, and MUST be excluded if it is the default.  Specifically, the port MUST be excluded when making an HTTP request [RFC2616] to port 80 **or when making an HTTPS request [RFC2818] to port 443**. All other non-default port numbers MUST be included.
",0361b5dda0707f9ce36b55315004ffb86b09ab23,Strip HTTPS port
3,pull_request_merged,6,idan,oauthlib,dgouldin,2012-03-15 17:48:57,Strip HTTPS port,b28f8beb8db124dd0bae697bc09a78c5925277ca,Pull request merge from ib-lundgren/oauthlib:filter_https to idan/oauthlib:master
4,issue_comment,6,idan,oauthlib,pydanny,2012-03-15 15:55:35,"I'm not in a good place to review this properly, but I have to say these are nicely done pull requests. :)
",,
5,issue_comment,6,idan,oauthlib,dgouldin,2012-03-15 16:00:23,"@ib-lundgren good catch, but I'd rather you pair the scheme with the port since it is possible for somebody to use 80 for https or 443 for http:

```
if (scheme == u'http' and port == u'80') or (scheme == u'https' and port == u'443'):
```
",,
6,issue_comment,6,idan,oauthlib,dgouldin,2012-03-15 16:03:35,"Better yet:

```
default_ports = (
    (u'http', u'80'),
    (u'https', u'443'),
)
if (scheme, port) in default_ports:
```
",,
7,issue_comment,6,idan,oauthlib,ib-lundgren,2012-03-15 17:33:20,"Thanks @pydanny, was aiming for a slightly less tangled mess than last time.

Good idea @dgouldin , have updated to match your suggestion. Am a bit uncertain where to put the defaults port in the code though... in the method (as it is now)? inside the if u':'  block? or on top level as a constant DEFAULT_PORTS?
",,
8,pull_request_commit,6,idan,oauthlib,ib-lundgren,2012-03-15 14:45:52,Strip HTTPS port,bd87217afa222cd799b5ee842a473be501ca3840,
9,pull_request_commit,6,idan,oauthlib,ib-lundgren,2012-03-15 17:30:16,Filter port based on scheme as suggested by dgouldin,0361b5dda0707f9ce36b55315004ffb86b09ab23,
0,issue_title,9,idan,oauthlib,ib-lundgren,2012-03-15 22:39:09,,start issue,Ignore Vim .swp files
1,issue_closed,9,idan,oauthlib,kennethreitz,2012-03-15 22:39:40,,closed issue,Ignore Vim .swp files
2,pull_request_title,9,idan,oauthlib,ib-lundgren,2012-03-15 22:39:09,,5f76b1485649278d690c1ab35a5237ad33b128c2,Ignore Vim .swp files
3,pull_request_merged,9,idan,oauthlib,kennethreitz,2012-03-15 22:39:40,Ignore Vim .swp files,4cd72a97f8dbf8a2878bbfb2c5353ab69104f7fe,Pull request merge from ib-lundgren/oauthlib:Viiiiim to idan/oauthlib:master
4,issue_comment,9,idan,oauthlib,kennethreitz,2012-03-15 22:39:38,":cake:
",,
5,pull_request_commit,9,idan,oauthlib,ib-lundgren,2012-03-15 22:37:56,Ignore Vim .swp files,5f76b1485649278d690c1ab35a5237ad33b128c2,
0,issue_title,4,idan,oauthlib,ib-lundgren,2012-03-14 23:19:41,"Hey guys

Wrote a test for RSA signatures, then it took me 2 hours to figure out branches and how to make a fresh new one :S

Its tested against a signature generated by openssl as mentioned in the comments. Let me know if I should change it somehow.
",start issue,Added RSA Test
1,issue_closed,4,idan,oauthlib,dgouldin,2012-03-24 16:35:44,,closed issue,Added RSA Test
2,pull_request_title,4,idan,oauthlib,ib-lundgren,2012-03-14 23:19:41,"Hey guys

Wrote a test for RSA signatures, then it took me 2 hours to figure out branches and how to make a fresh new one :S

Its tested against a signature generated by openssl as mentioned in the comments. Let me know if I should change it somehow.
",3f5339e4a4a7400e4f9cd86f0a167d05282db999,Added RSA Test
3,pull_request_merged,4,idan,oauthlib,dgouldin,2012-03-24 16:35:43,Added RSA Test,8373cc91d446b357009d09830faa68ae3715d0d5,Pull request merge from ib-lundgren/oauthlib:rsa_test to idan/oauthlib:master
4,pull_request_commit,4,idan,oauthlib,ib-lundgren,2012-03-14 23:15:38,Added RSA Test,3f5339e4a4a7400e4f9cd86f0a167d05282db999,
