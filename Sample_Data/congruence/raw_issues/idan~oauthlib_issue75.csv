"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","75","idan","oauthlib","ib-lundgren","2012-11-16 19:19:13","OAuth 2 Core (http://tools.ietf.org/html/rfc6749) and Bearer Token Usage (http://tools.ietf.org/html/rfc6750) have been released and we should follow.

This is a glorious and adventorous task, that includes the somewhat time consuming task of going over whats in oauth2/draft25 and making sure it matches what is instructed in the RFCs =)

The code should match well but the links will need some updating. When that is done simply rename the directory and ensure all imports are ok.
","start issue","From OAuth2 draft to RFC"
"issue_closed","75","idan","oauthlib","ib-lundgren","2013-05-30 11:13:31","","closed issue","From OAuth2 draft to RFC"
"issue_comment","75","idan","oauthlib","lepture","2012-11-22 05:01:48","Great job! I am wondering what's the status of OAuth2 provider.
","",""
"issue_comment","75","idan","oauthlib","ib-lundgren","2012-11-22 21:18:22","The OAuth 2 provider is taking shape nicely but due to the limited time I can put in it is still going to take a little while before it's ready for use. I've not really kept track of the status anywhere so guess I might as well give the update here as anywhere else.

My current plan is along the lines of:
- Add a number of convenience methods to common.Request to facilitate parameter finding for grant_types
- Sort out resource endpoint error reporting and go over authorization and token endpoint error reporting and make sure it mimics the spec and my plans
- Bearer token token_type estimation
- Weed out the most broken bits of the endpoints and grant types by implementing extensive endpoint tests
- Play around with making a basic but fully functional oauth provider with Django or Flask to find any missing features, annoyances and see if the API is at level of usability I'm happy with
- Write some docs ;)
- MAC, JWT, SAML token support
- More docs ;)

I'm already working on some of this but I've not pushed it yet. Expect to see incremental improvements each week.
","",""
"issue_comment","75","idan","oauthlib","wiliamsouza","2012-11-25 20:41:46","Good job Ib,
tell me more about Django basic oauth provider. How can I help you?
I'm interested in oauth 2 for Installed applications like described at google documentation [1].

I think that a good starting point is to learn how google do it and start write some 
Django views that mimics the google way of do things. I mean a Django app or view to register your application,
branding information and get your generated clients ID like google api console [2]. It can be a django admin page
for now.

What do you think?

[1] https://developers.google.com/accounts/docs/OAuth2InstalledApp
[2] https://code.google.com/apis/console/
","",""
"issue_comment","75","idan","oauthlib","Evlos","2012-12-23 12:20:20","GJ guys, hope this feature could be done soon.
","",""
"issue_comment","75","idan","oauthlib","ib-lundgren","2013-01-15 21:12:10","Sorry for taking so long. I'm struggling to squeeze open source in as much as I'd like but rest assured when I do I'll start crossing off my oauth 2 provider to-do list =)

I have many ideas for a django-oauth extension but afraid I won't be able to get to it before the summer. It's a good idea to have a look at the Google API Console and spend time streamlining the processes around registering and maintaining clients. Essentially such an extension could boil, if done right, reduce the complexity of authorizing api use with OAuth down to a simple decorator. Now that is the future, for now I'll focus on getting the OAuth 2 support in oauthlib working, spec compliant and well tested.
","",""
"issue_comment","75","idan","oauthlib","ib-lundgren","2013-02-05 21:39:32","OAuth 2 provider support is shaping up nicely. A preview available in the newly added docs

https://oauthlib.readthedocs.org/en/latest/server2.html
","",""
"issue_comment","75","idan","oauthlib","lepture","2013-05-30 11:17:38","Great.
","",""
