"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","22","idan","oauthlib","calebbrown","2012-04-19 05:12:05","According to [Section 3.4.1.3.1](http://tools.ietf.org/html/rfc5849#section-3.4.1.3.1) in rfc5849 the request body should only be added to the base string the signature is generated from if it has the content type `application/x-www-form-urlencoded`.

If it has another content type the body shouldn't be added to the base string. This is so that it is possible to support requests that include multipart file uploads or other content types.

These changes add support for passing through an optional `content_type` parameter which is then used to decide whether or not to include the body in the signature.

The alternative would be for a developer to maintain this logic outside of the library, but considering that this would be a fairly common pattern I think it best to include it in OAuthLib.

**note:**
The fix is in the last changesets

Like pull request #21 this one also includes everything from pull request #20.
","start issue","Add support for content_type so we can properly include or exclude the body in signatures."
"issue_closed","22","idan","oauthlib","ib-lundgren","2012-06-27 17:31:37","","closed issue","Add support for content_type so we can properly include or exclude the body in signatures."
"pull_request_title","22","idan","oauthlib","calebbrown","2012-04-19 05:12:05","According to [Section 3.4.1.3.1](http://tools.ietf.org/html/rfc5849#section-3.4.1.3.1) in rfc5849 the request body should only be added to the base string the signature is generated from if it has the content type `application/x-www-form-urlencoded`.

If it has another content type the body shouldn't be added to the base string. This is so that it is possible to support requests that include multipart file uploads or other content types.

These changes add support for passing through an optional `content_type` parameter which is then used to decide whether or not to include the body in the signature.

The alternative would be for a developer to maintain this logic outside of the library, but considering that this would be a fairly common pattern I think it best to include it in OAuthLib.

**note:**
The fix is in the last changesets

Like pull request #21 this one also includes everything from pull request #20.
","97e66774fa27a014d5b4b0d5c4d57939474b5bfe","Add support for content_type so we can properly include or exclude the body in signatures."
"issue_comment","22","idan","oauthlib","idan","2012-04-19 05:20:36","First: this is amazing. Thank you so much for writing this huge pile of awesome. Bonus points for adopting a quote-the-spec mentality. :)

I actually have an unpublished branch where I've attacked some of these issues (but not all). I'll pick through the changesets there and figure out where we overlap, and merge.
","",""
"issue_comment","22","idan","oauthlib","ib-lundgren","2012-06-27 17:31:37","Closing since Content-Type checks are now quite well addressed in Client although suggestions for improvements are welcome.

Addressed in Server with a Content-Type check deciding whether or not to include body data in the verification. (0.2.1)

Once again, thank you @calebbrown =)
","",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-18 10:53:36","Fix some some broken constants and vars in the OAuth1 Server.","d98d067bd807cbe5a1d3067f57397909e387618b",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-18 11:38:41","Extract the signature method for the signature method, not the
signature.","7118970bb198b1bd34c43e0073da54df3d09d749",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-18 11:40:38","urllib.unqoute doesn't take 'safe' as an arg. Add a test and fix.","e569fc16ed65a2bfe50061a58f21579025eff3c3",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-18 11:51:58","Fix a bug in oauth1.signature.collect_parameters preventing unescaping.","1f292e6923aa9419d28e3700e22102dffd447886",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-18 13:13:27","Pass through the request method to the client when generating signature.","cb1997081a873e59cf4f2e55d19246cb244a2a60",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-18 13:14:17","Make prepare_headers return non-unicode strings.

Because there is an assumption that headers are encoding in ASCII,
and because all the parameters are passed through utils.escape anyway
we shouldn't use unicode strings when building the header.

When it was returning unicode strings the base string used to generate
the signature was being double encoded.","028ff8dced3c63365c580345a145a5e997c312d0",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-18 13:17:25","Update the tests. Strengthen the unescape and escape tests and add more
server tests.","361d306d11efedaa63b281d2e87b25f54ef91b38",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-18 13:51:18","Make sure the OAuth1 client doens't drop headers when signing requests.","f744f6ca1f81e6d48044f7416472f39dbd6e573c",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-18 13:54:30","Add support to OAuth1 for including body in the base string based on
encoding.

Section 3.4.1.3.1. (Parameter Sources) in rfc5849 indicates that
multipart bodies are excluded from the base string when generating the
signature.","ae386c2154f65054427f33419bf17b6feda563d5",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-18 14:03:50","Allow empty secrets when generating the OAuth1 HMAC SHA1 Signature.

Previously the secrets would be 'None' and would cause utils.escape
to throw an except.","eb0858a1627f8d58456020d20c74c75830c67c11",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-19 02:56:50","Revert ""Add support to OAuth1 for including body in the base string based on""

This reverts commit ae386c2154f65054427f33419bf17b6feda563d5.

Will be replaced in favour of passing a 'content_type' parameter.","a3ae77f63b46bed830c171d22137cb5eb4ee9c3e",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-19 03:00:18","Revert ""Make prepare_headers return non-unicode strings.""

This reverts commit 028ff8dced3c63365c580345a145a5e997c312d0.

Rather than converting to non-unicode strings the desire is to have
unicode everywhere.

So this is being removed in favour of improving the unicode support elsewhere.

In particular utils.unescape() and signature.collect_parameters()
need to have their unicode support improved.","a0f10d6455ee285d713dee34e99131cdc6ab0b95",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-19 03:07:05","Add comment indicating why we need ""safe='~'"" in the call to urllib.quote.","b373b48ab363fea2195d00f4e2a91cc77315f2a0",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-19 03:08:02","Add self to AUTHORS","6d56d09ac887130a1cc2c1f0d3cce30fc70b629b",""
"pull_request_commit","22","idan","oauthlib","calebbrown","2012-04-19 04:54:54","Add support for only including body in sigs if it has the correct content-type

Add the ability to specify a content_type when generating signatures or
checking the validity of a request.

The default is set to u'application/x-www-form-urlencoded' which will
attempt to parse any body content passed in.

If it is set to anything else the body won't be included in the
generation of the signature.

This brings it into line with Section 3.4.1.3.1. (Parameter Sources) in
rfc5849.","97e66774fa27a014d5b4b0d5c4d57939474b5bfe",""
"pull_request_commit_comment","22","idan","oauthlib","idan","2012-04-24 14:23:09","First pass: It looks like the client-related stuff is obviated by the Request-class work.
- `Client.sign()` does a bit of sanity checking (could be made stronger)
- `Client.render()` checks to see that the original body was either empty or contained formencoded params, and sets the content-type header

Figuring out what checks this is doing that I'm not, then moving on to the server stuff.
","97e66774fa27a014d5b4b0d5c4d57939474b5bfe","(None, None, None)"
