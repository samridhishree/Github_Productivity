,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,184,aio-libs,aioredis,popravich,2017-01-17 11:01:18,"aioredis may stuck (pool especially) if Redis server is not responsive.

(don't know why nobody notice it is missing)",start issue,Add connect timeout
1,issue_closed,184,aio-libs,aioredis,popravich,2017-06-23 07:06:27,,closed issue,Add connect timeout
2,issue_comment,184,aio-libs,aioredis,popravich,2017-01-17 13:20:13,"TODO:
* [ ] add connect timeout
* [ ] test with slow connection",,
3,issue_comment,184,aio-libs,aioredis,SeavantUUz,2017-04-27 12:25:02,"I met some problem, but I could not support your suggestion. What I had seen, although redis server is fine, aioredis got stuck too.

In redis-py, why you could pass an optional argument to pool, is redis-py chose block queue as its pool's implement. The timeout argument actually is used to tell pool the queue had been empty for specific time. aioredis used deque as its pool's implement, so you can't pass a timeout.

Maybe you pointed in `socket_timeout` or `socket_keepalive` and so on ? I have added part of them into my project, and waiting for conclusion.
",,
4,issue_comment,184,aio-libs,aioredis,popravich,2017-04-28 07:59:42,"What I mean is that aioredis can stuck for some time (probably long enough) when using pool,
basically, the call to `ConnectionsPool._create_new_connection()` need to have some timeout
otherwise it will block the whole pool.",,
5,issue_comment,184,aio-libs,aioredis,pfreixes,2017-05-01 07:16:18,"We might be having this issue, I can work on a fix ASAP",,
6,issue_comment,184,aio-libs,aioredis,pfreixes,2017-05-12 14:19:36,This can be closed.,,
0,issue_title,104,aio-libs,aioredis,ciscorn,2016-01-23 11:36:46,"Do you have any plan to support Redis Sentinel?
",start issue,Any plan to support Redis Sentinel?
1,issue_closed,104,aio-libs,aioredis,popravich,2017-01-17 09:53:57,,closed issue,Any plan to support Redis Sentinel?
2,issue_comment,104,aio-libs,aioredis,popravich,2016-01-23 11:57:16,"Hi, I plan to support Redis Sentinel.

There is also other branch [jettify/aioredis](https://github.com/jettify/aioredis/tree/sentinel).
But there are no any Pull Requests yet.
",,
3,issue_comment,104,aio-libs,aioredis,jettify,2016-01-23 12:42:21,"Hi our solution is working and we are using it. I have plan to make PR
soon, maybe in the middle of next week.

On Sat, Jan 23, 2016, 13:57 Alexey Popravka notifications@github.com
wrote:

> Hi, I plan to support Redis Sentinel.
> 
> There is also other branch jettify/aioredis
> https://github.com/jettify/aioredis/tree/sentinel.
> But there are no any Pull Requests yet.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/aio-libs/aioredis/issues/104#issuecomment-174177627.
",,
4,issue_comment,104,aio-libs,aioredis,ciscorn,2016-01-23 13:10:33,"OK. Does that impl support connection pooling?
",,
5,issue_comment,104,aio-libs,aioredis,popravich,2017-01-17 09:53:57,Sentinel feature is now available in master branch; still under development but already working.,,
0,issue_title,181,aio-libs,aioredis,popravich,2017-01-13 13:49:50,,start issue,Sentinel implementation
1,issue_closed,181,aio-libs,aioredis,popravich,2017-01-17 09:46:18,,closed issue,Sentinel implementation
2,pull_request_title,181,aio-libs,aioredis,popravich,2017-01-13 13:49:50,,7e931b7c85215b3546d29ded9ae4df6692540822,Sentinel implementation
3,pull_request_merged,181,aio-libs,aioredis,popravich,2017-01-17 09:46:18,Sentinel implementation,940e54b12a6ee92bb4f70ce936b4a485ee1d22c4,Pull request merge from aio-libs/aioredis:sentinel2 to aio-libs/aioredis:master
4,issue_comment,181,aio-libs,aioredis,codecov-io,2017-01-13 15:27:16,"## [Current coverage](https://codecov.io/gh/aio-libs/aioredis/pull/181?src=pr) is 95.23% (diff: 86.37%)
> Merging [#181](https://codecov.io/gh/aio-libs/aioredis/pull/181?src=pr) into [master](https://codecov.io/gh/aio-libs/aioredis/branch/master?src=pr) will decrease coverage by **1.28%**

```diff
@@             master       #181   diff @@
==========================================
  Files            50         55     +5   
  Lines          6267       7053   +786   
  Methods           0          0          
  Messages          0          0          
  Branches        481        573    +92   
==========================================
+ Hits           6049       6717   +668   
- Misses          165        244    +79   
- Partials         53         92    +39   
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [f1f5980...7e931b7](https://codecov.io/gh/aio-libs/aioredis/compare/f1f598072ba4eaff46feb55b28cf8f72d7b72736...7e931b7c85215b3546d29ded9ae4df6692540822?src=pr)",,
5,pull_request_commit,181,aio-libs,aioredis,bdrosen96,2015-08-24 18:46:45,Some redis sentinel WIP,5b93dea220d6d6acc01f789e41b321bfec8f8e44,
6,pull_request_commit,181,aio-libs,aioredis,bdrosen96,2015-08-24 19:53:09,Cleaned up somewhat and did some simple testing,38cc0ce146f815c1cd10e2a1e1b8a01d5a833344,
7,pull_request_commit,181,aio-libs,aioredis,bdrosen96,2015-08-25 12:01:38,"Some cleanup, basic operations working",e4915d0174a73e85ee72343806a099c168ea90bb,
8,pull_request_commit,181,aio-libs,aioredis,bdrosen96,2015-08-25 18:08:58,Tests mostly working (one test case has intermittent failure,89bcce55414cfdbc89809a819073ec3b61164c04,
9,pull_request_commit,181,aio-libs,aioredis,bdrosen96,2015-08-25 18:48:24,Fix bug with failover for slave,336f1e1aba920e42553f29f97f6315d397296e23,
10,pull_request_commit,181,aio-libs,aioredis,bdrosen96,2015-08-26 15:02:36,pub sub working,dec407c3312aa85fae9893138ac7501dd0a923bf,
11,pull_request_commit,181,aio-libs,aioredis,jettify,2015-09-13 19:17:05,minor clean up,dc5312db1b4840d96704773b894f9efff8ff0ac2,
12,pull_request_commit,181,aio-libs,aioredis,jettify,2016-02-09 21:49:52,fix flake8 error,23dda48b34868ad1c6b4f4b8bf9b00584286236c,
13,pull_request_commit,181,aio-libs,aioredis,jettify,2016-02-09 22:28:39,get rid of pytest,e412690ec4fba03de77e06f41f22e6639ec404c9,
14,pull_request_commit,181,aio-libs,aioredis,jettify,2016-02-09 22:41:30,more clean asserts on exception,5545b78c021097b10fcbb239a5e70478847b27c4,
15,pull_request_commit,181,aio-libs,aioredis,jettify,2016-02-09 22:59:36,clean up doc strings,e9f2ea34d7e4fd830f5554998360f7a2b6b98a09,
16,pull_request_commit,181,aio-libs,aioredis,jettify,2016-02-10 07:15:39,add missed coroutine decorator,4fa6d3df84e6befb34ae5cef990cca266f5d385c,
17,pull_request_commit,181,aio-libs,aioredis,popravich,2016-02-29 10:18:29,drop  function,2462ebea96dd0bcfcdb73ddf1c3339856c8a8f2b,
18,pull_request_commit,181,aio-libs,aioredis,popravich,2016-02-29 10:21:45,.travis.yml updated,0b24337f776f778078704601eb30a6c9b525c71f,
19,pull_request_commit,181,aio-libs,aioredis,popravich,2016-02-29 12:39:57,test assertions fixed,f4a7a969fbfe56588ee0d6a88f7df2401c3018dc,
20,pull_request_commit,181,aio-libs,aioredis,popravich,2016-02-29 16:17:49,RedisSentinelTest refactoring,2b8f0e07b6c101d113e17f1b900239e6c33404bd,
21,pull_request_commit,181,aio-libs,aioredis,popravich,2016-03-01 11:28:55,fixed sentinel tests,7eed8f576bb95f34882e2d7131d817b2db33beb4,
22,pull_request_commit,181,aio-libs,aioredis,popravich,2016-07-15 08:40:37,convert failing sentinel tests to py.test and mark xfail,a50d78dc96e48ee4577effc4967aa97065d0ee2f,
23,pull_request_commit,181,aio-libs,aioredis,popravich,2016-07-29 14:52:12,Pool: change db initial value to None (do not issue SELECT command),3dc3b7d1cc32c0b7533f2c7cabe6092f90bf0605,
24,pull_request_commit,181,aio-libs,aioredis,popravich,2016-07-29 14:52:36,fix sentinel info for role command,4fc0a0e26667c560bc4ac4af3afa003df4f8fb68,
25,pull_request_commit,181,aio-libs,aioredis,popravich,2016-07-29 14:54:30,update conftest: add sentinel server runner,7c708297162c9608ac082ff491e9f6c62b494615,
26,pull_request_commit,181,aio-libs,aioredis,popravich,2016-07-30 10:32:36,sentinel test: redis min version,84ea3a5d6aa2e335c6e60d4898c936e45cafc431,
27,pull_request_commit,181,aio-libs,aioredis,popravich,2016-08-01 09:38:57,"adopt sentinel tests

add delay in start_sentinel

fix sentinel tests

adopt sentinel monitor/remove tests

few more tests

assert on _waiters size

fix tests after rebase

mark sentinel tests with xfail",2a9391fc5442d11b25fa2745a859e45cb4057639,
28,pull_request_commit,181,aio-libs,aioredis,popravich,2016-12-29 16:45:47,"Sentinel implementation;
working but more tests needed.

drop old code; drop some dev notes; update min sentinel redis version to 2.8.12

fix pubsub.Listener -> pubsub.Receiver",a6e1c7692ee8b812395f7dee203504f4668a0ed2,
29,pull_request_commit,181,aio-libs,aioredis,popravich,2017-01-13 16:01:08,.travis.yml update; conftest win32 fixes,1c8d267e5280b72f4b29b319f11cd71282fd5b3d,
30,pull_request_commit,181,aio-libs,aioredis,popravich,2017-01-16 08:30:19,mark two sentinel tests xfail (until fixed),c2b6b5647546722bca381bdc726ace18895bfc3a,
31,pull_request_commit,181,aio-libs,aioredis,popravich,2017-01-16 09:25:46,drop sentinel_pubsub tests (basically duplicate simple pubsub tests),1ab46a6c90ba791bec3de634420f1a6f737cf7aa,
32,pull_request_commit,181,aio-libs,aioredis,popravich,2017-01-16 13:40:37,split sentinel tests into commands and failover tests,844f97c6bd334384c6cba25af15eaefb32f5494f,
33,pull_request_commit,181,aio-libs,aioredis,popravich,2017-01-16 14:44:32,get rid of wait_for in conftest,8ee8b671c8186647f2a79c66bd7cb44d56515a0f,
34,pull_request_commit,181,aio-libs,aioredis,popravich,2017-01-16 15:44:26,increase sentinel tests timeout,f2a89593160c7f48137ffa0ee61684bc38c68e41,
35,pull_request_commit,181,aio-libs,aioredis,popravich,2017-01-16 17:07:32,skip sentinel tests on windows (unstable),914f3eb2fe0a0bc2044517e96edc2bbfa1438a85,
36,pull_request_commit,181,aio-libs,aioredis,popravich,2017-01-16 19:21:57,pytest doesn't fail from pytest.raises with wrong error,9c950fd60d109cf8e3d127e2f4e0e3e8c70b5319,
37,pull_request_commit,181,aio-libs,aioredis,popravich,2017-01-16 19:41:25,call _do_close directly from _read_data,9a3fcfb871a8c05707644b9cdbc1a4506ae289db,
38,pull_request_commit,181,aio-libs,aioredis,popravich,2017-01-16 19:49:00,try to fix test_quit for win32,7e931b7c85215b3546d29ded9ae4df6692540822,
0,issue_title,22,aio-libs,aioredis,popravich,2014-07-04 06:25:05,"Implementation status:
- [x] connection commands http://redis.io/commands/#connection
- [x] generic commands http://redis.io/commands/#generic
- [x] string commands http://redis.io/commands/#string
- [x] hash commands http://redis.io/commands/#hash
- [x] list commands http://redis.io/commands/#list
- [x] set commands http://redis.io/commands/#set
- [x] sorted set commands http://redis.io/commands/#sorted_set
- [x] hyperloglog commands http://redis.io/commands/#hyperloglog
- [x] transactions commands http://redis.io/commands/#transactions
- [x] scripting commands http://redis.io/commands/#scripting
- [x] server commands http://redis.io/commands/#server (except `client kill` & `monitor`)
- [x] pub/sub commands http://redis.io/commands/#pubsub
",start issue,Commands Mixins Implementation status
1,issue_closed,22,aio-libs,aioredis,popravich,2017-01-17 09:57:36,,closed issue,Commands Mixins Implementation status
0,issue_title,127,aio-libs,aioredis,Artimi,2016-05-30 19:27:44,"Hi,

I would like to use pubsub where I dynamically add and remove channels to subscriber. Subscriber then should listen to all of them and wait for first incoming message from whichever channel. Basically, I want to have some object like this:

``` python
import asyncio
import aioredis

class RedisSubscriber:
    @asyncio.coroutine
    async def connect(self):
        self._connection = await aioredis.create_redis(('localhost', 6379))

    @asyncio.coroutine
    async def subscribe(self, channel):
        await self._connection.subscribe(channel)

    @asyncio.coroutine
    async def get(self):
        channel, reply = await self._connection.listen()  # this is made up
        return channel, reply
```

I want to just call `get` in loop and get replies with their channels even when I add new channels to subscribe after `get` was called. Is something similar possible with `aioredis`?
",start issue,Pubsub with listen to all subscribed channels?
1,issue_closed,127,aio-libs,aioredis,popravich,2017-01-17 09:56:25,,closed issue,Pubsub with listen to all subscribed channels?
2,issue_comment,127,aio-libs,aioredis,popravich,2016-05-31 16:40:45,"Hi, @Artimi 
You can simply create one subscriber and subscribe to pattern `*`
and you'll receive all messages for all channels (including channel name to which message is published) 
",,
3,issue_comment,127,aio-libs,aioredis,popravich,2016-05-31 16:42:44,"See [this test](https://github.com/aio-libs/aioredis/blob/master/tests/pubsub_commands_test.py#L70-L83) for example
",,
4,issue_comment,127,aio-libs,aioredis,Artimi,2016-06-02 19:40:56,"Hi @popravich 
Thank you for response. I now see that my question is misleading. In my setup I want several subscribers that will listen to subset of channels available in pubsub. For example I will have channels `1, 2, 3, 4` and two subscribers like this:

```
s1: 1, 2
s2: 4
```

I could subscribe to more channels and listen to all of them with `asyncio.gather` but I would need to somehow reset `get` function from my example.
",,
5,issue_comment,127,aio-libs,aioredis,bharling,2016-10-29 12:16:05,"+1 from me, It would be nice to have a way to just subscribe a single listener coroutine to a dynamic set of channels and receive all messages on those channels without needing to specify which we're listening to. 

In my project, I have a separate system managing which channels are subscribed by a given listening coroutine and it won't know in advance what those channels are. The subscriptions are also added and removed fairly frequently. 

redis-py does allow this I think? ( example linked below ). In their implementation there appears to just be a 'pubsub' object that is channel agnostic and can subscribe and unsubscribe to any number of channels as needed. This is the behaviour I'm looking for really, but in async 👍 

https://gist.github.com/jobliz/2596594
",,
6,issue_comment,127,aio-libs,aioredis,khazhyk,2016-11-05 21:04:19,"+1, I passed on this library earlier due to lack of being able to subscribe to multiple patterns on a single listener. Listening to '*' is not ideal, and having to have many channel listeners is also not ideal. A system where a subscriber can subscribe to multiple explicit channels (and only those channels) would be great. 
",,
7,issue_comment,127,aio-libs,aioredis,popravich,2017-01-11 14:38:20,"Hi @Artimi, @bharling, @khazhyk 
Sorry for long silence.
I have just made a new release `v0.3.0` including requested pub/sub feature — aioredis.pubsub.Receiver.
It can be used as follows:
```python
from aioredis.pubsub import Receiver

mpsc = Receiver()

async def single_reader():
    while await mpsc.wait_message():
        sender, message = await mpsc.get()
        print(""Got message {!r} from {!r}"", message, sender.name)
# run reader
asyncio.ensure_future(single_reader())
# use mpsc to add channles
await redis.subscribe(
    mpsc.channel('channel:1'),
    mpsc.channel('channel:3'))
# ...and/or patterns
await redis.psubscribe(mpsc.channel('patt*'))
```
",,
8,issue_comment,127,aio-libs,aioredis,popravich,2017-01-17 09:56:25,"I'm closing this, if you find any issues using this please open a new one.",,
9,issue_comment,127,aio-libs,aioredis,bharling,2017-02-08 16:55:07,"Thanks - missed your reply, but thanks for the fix, will have a look when i get a chance",,
