"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","556","nilearn","nilearn","demianw","2015-04-22 13:14:33","Added an optional Normalizer to the edge colouring of plotted graphs to be able to modulate edge colors.
","start issue","[MRG+1] Added the possibility to use a Normalize class to modulate edge coloring "
"issue_closed","556","nilearn","nilearn","lesteve","2015-04-30 11:51:17","","closed issue","[MRG+1] Added the possibility to use a Normalize class to modulate edge coloring "
"pull_request_title","556","nilearn","nilearn","demianw","2015-04-22 13:14:33","Added an optional Normalizer to the edge colouring of plotted graphs to be able to modulate edge colors.
","d0aa6205af63171f4fadbe49803fee8331306fe3","[MRG+1] Added the possibility to use a Normalize class to modulate edge coloring "
"pull_request_merged","556","nilearn","nilearn","lesteve","2015-04-30 11:51:17","[MRG+1] Added the possibility to use a Normalize class to modulate edge coloring ","6cf01a245da357155e1ce1003cba4162e54c161f","Pull request merge from demianw/nilearn:change_norm_for_connectome_plots to nilearn/nilearn:master"
"issue_comment","556","nilearn","nilearn","GaelVaroquaux","2015-04-22 15:03:34","I am not very excited about exposing this super technical option to the
user while we are really striving to target simpler, less technical
users.

Is there a reason why you cannot process your data, for instance applying a
log, and then use a standard normalization?
","",""
"issue_comment","556","nilearn","nilearn","GaelVaroquaux","2015-04-22 15:34:49","OK, but trying to solve every corner case is going to blow up the
cyclomatic complexity of nilearn and make the API really hard to
understand (matplotlib is a good example of this). So we are taking the
""Steve Jobs"" position on this and only catering to the 99% usecase.

Just to stress that this is not a theoretical argument but a practical
one, the recent few additions to the colorbar have made our codebase much
more complex and lead to a buggy release. We don't have the resources to
address these issues.
","",""
"issue_comment","556","nilearn","nilearn","GaelVaroquaux","2015-04-22 15:43:29","> Sounds like an absolutely reasonable criteria. Would you rather I change it for
> the simpler vmin, vmax?

Yes, such an API is easily understandable by non technical users.

> Nowadays the vmin-vmax behaviour is internally hardcoded and not documented.
> It's in lines 266-270 of nilearn/plotting/displays.py

I agree that from a design perspective this is not ideal. I think that
exposing it and documentating it is a clear cut improvement.

Thanks
","",""
"issue_comment","556","nilearn","nilearn","GaelVaroquaux","2015-04-30 11:24:32","IMHO, the only remaining item to be done on this PR is the vmin / vmax behavior when the other is none (as discussed in inline comments). The rest is :+1: from me.

I'd love to get this in the 0.1.3 release.
","",""
"issue_comment","556","nilearn","nilearn","GaelVaroquaux","2015-04-30 11:35:58","LGTM, :+1: for merge.

Thanks @demianw !
","",""
"issue_comment","556","nilearn","nilearn","GaelVaroquaux","2015-04-30 11:52:22","> Merged #556.

Hurry. Thanks again Demian
","",""
"issue_comment","556","nilearn","nilearn","lesteve","2015-04-22 14:37:45","Just curious, what's your use case, making it easier to visually compare different connectome plots by using the same norm for all these plots?

Maybe having `edge_vmin` and `edge_vmax` arguments in plot_connectome would be easier to understand for the user.
","",""
"issue_comment","556","nilearn","nilearn","lesteve","2015-04-28 06:24:54","Sorry I completely missed the fact that you implemented the proposed changes. I'll take a closer look today.
","",""
"issue_comment","556","nilearn","nilearn","lesteve","2015-04-30 11:51:15","Merging, thanks a lot!
","",""
"pull_request_commit_comment","556","nilearn","nilearn","banilo","2015-04-28 13:45:51","Just wondering, does it work if `vmin==vmax`, that is, all all connectivity strengths have the same value?
","d0aa6205af63171f4fadbe49803fee8331306fe3","(None, '', u'nilearn/plotting/displays.py')"
"pull_request_commit_comment","556","nilearn","nilearn","banilo","2015-04-28 13:47:44","might not be explicit enough to convey the effect of `edge_vmin/max`on the plot...
","d0aa6205af63171f4fadbe49803fee8331306fe3","(72, '', u'nilearn/plotting/displays.py')"
"pull_request_commit_comment","556","nilearn","nilearn","demianw","2015-04-28 14:02:21","This is replicates the previous implicit behaviour of the function where vmin and vmax where set. So the functional description still works. If vmin == vmax then all will be the same color which is the current matplotlib behaviour too
","d0aa6205af63171f4fadbe49803fee8331306fe3","(None, '', u'nilearn/plotting/displays.py')"
"pull_request_commit_comment","556","nilearn","nilearn","demianw","2015-04-28 14:03:46","I copied the current descritpion style in matplotlib. Do you have concrete suggestions?
","d0aa6205af63171f4fadbe49803fee8331306fe3","(72, '', u'nilearn/plotting/displays.py')"
"pull_request_commit_comment","556","nilearn","nilearn","GaelVaroquaux","2015-04-28 17:53:33","I think that the logic of this code will be surprising when vmin is none but not vmax.

I think that vmax should be set first,  and then vmin set to -vmax if none. 
","d0aa6205af63171f4fadbe49803fee8331306fe3","(None, '', u'nilearn/plotting/displays.py')"
"pull_request_commit_comment","556","nilearn","nilearn","demianw","2015-04-28 17:56:47","I agree. This type of clamping is very much an fMRI or co-variance matrix use-case so I rely on your expertise.
","d0aa6205af63171f4fadbe49803fee8331306fe3","(None, '', u'nilearn/plotting/displays.py')"
"pull_request_commit_comment","556","nilearn","nilearn","demianw","2015-04-28 18:03:56","However, @GaelVaroquaux , what happens in your case if vmin is positive and vmax is None?
","d0aa6205af63171f4fadbe49803fee8331306fe3","(None, '', u'nilearn/plotting/displays.py')"
"pull_request_commit_comment","556","nilearn","nilearn","demianw","2015-04-28 18:05:34","also the case where vmin is None and vmax is None will be quirky.
","d0aa6205af63171f4fadbe49803fee8331306fe3","(None, '', u'nilearn/plotting/displays.py')"
"pull_request_commit_comment","556","nilearn","nilearn","lesteve","2015-04-29 09:34:55","> I think that vmax should be set first, and then vmin set to -vmax if none.

Agreed. That means:
- vmin and vmax are None: current behaviour, `vmax = np.max(np.abs(edge_data))`, `vmin = -vmax`
- vmin is None, vmax set: `vmin = -vmax`
- vmin set, vmax is None: `vmax = np.max(np.abs(edge_data))`, leave vmin as provided
- vmin and vmax set: leave vmax and vmin as provided

> However, @GaelVaroquaux , what happens in your case if vmin is positive and vmax is None?

See above. About these weird edge cases, I would be in favor of not trying to catch them all and just letting the matplotlib code do whatever it does in these cases.
","d0aa6205af63171f4fadbe49803fee8331306fe3","(None, '', u'nilearn/plotting/displays.py')"
"pull_request_commit_comment","556","nilearn","nilearn","demianw","2015-04-29 09:41:15","I can do whatever you think is the best case however the lack of symmetry between cases 2 and 3 that you, @lesteve . I would either go with 
- vmin is None, vmax set: vmin = -vmax (throwing a ValueError if vmin is positive) 
- vmax is None, vmin set: vmax = -vmin (throwing a ValueError if vmax is negative)

or 
- vmin set, vmax is None: vmax = np.max(np.abs(edge_data))
- vmax set, vmin is None: vmin = -np.max(np.abs(edge_data))

But you guys have the last word
","d0aa6205af63171f4fadbe49803fee8331306fe3","(None, '', u'nilearn/plotting/displays.py')"
"pull_request_commit_comment","556","nilearn","nilearn","GaelVaroquaux","2015-04-29 10:37:12",">   • vmin is None, vmax set: vmin = -vmax (throwing a ValueError if vmin is
>     positive)
>   • vmax is None, vmin set: vmax = -vmin (throwing a ValueError if vmax is
>     negative)
> 
> or
> 
>   • vmin set, vmax is None: vmax = np.max(np.abs(edge_data))
>   • vmax set, vmin is None: vmin = -np.max(np.abs(edge_data))

First option is what I would expect.
","d0aa6205af63171f4fadbe49803fee8331306fe3","(None, '', u'nilearn/plotting/displays.py')"
"pull_request_commit_comment","556","nilearn","nilearn","lesteve","2015-04-29 10:51:14","> First option is what I would expect.

Makes more sense than what I said indeed.
","d0aa6205af63171f4fadbe49803fee8331306fe3","(None, '', u'nilearn/plotting/displays.py')"
"pull_request_commit","556","nilearn","nilearn","demianw","2015-04-22 13:12:37","Added the possibility to use a Normalize class to modulate the coloring on graph edges","8bb45f5ae4f697543e07ea16db2021f014a15a27",""
"pull_request_commit","556","nilearn","nilearn","demianw","2015-04-22 15:58:06","Changed the interface for edge coloring from a Normalizer class to the vmin/vmax parameters","2402ea3cfcc44d1ad429add78469537db3ccebc8",""
"pull_request_commit","556","nilearn","nilearn","demianw","2015-04-30 11:30:30","Changed the behaviour of vmin/vmax on the connectome plotting function","d0aa6205af63171f4fadbe49803fee8331306fe3",""
