"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","382","pycqa","astroid","rogalski","2016-12-29 19:50:16","Needed for PyCQA/pylint#1245.

It’s a very rough draft, input will be appreciated.","start issue","infer results of open() and file() calls"
"pull_request_title","382","pycqa","astroid","rogalski","2016-12-29 19:50:16","Needed for PyCQA/pylint#1245.

It’s a very rough draft, input will be appreciated.","97d8fde555baf76105460155fdfeb0913a7c303d","infer results of open() and file() calls"
"issue_comment","382","pycqa","astroid","coveralls","2016-12-29 19:57:09","
[![Coverage Status](https://coveralls.io/builds/9463307/badge)](https://coveralls.io/builds/9463307)

Coverage decreased (-0.1%) to 89.251% when pulling **1436e39fd048699b8f84d172d1dfefde72ca94a5 on rogalski:infer-open-calls** into **9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd on PyCQA:master**.
","",""
"issue_comment","382","pycqa","astroid","coveralls","2016-12-29 20:05:41","
[![Coverage Status](https://coveralls.io/builds/9463404/badge)](https://coveralls.io/builds/9463404)

Coverage decreased (-0.1%) to 89.251% when pulling **67f992c74e95d5c1e0930497ce519f577374c5f3 on rogalski:infer-open-calls** into **9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd on PyCQA:master**.
","",""
"issue_comment","382","pycqa","astroid","rogalski","2016-12-29 20:10:26","I'm not sure why coverage dropped.","",""
"issue_comment","382","pycqa","astroid","coveralls","2016-12-29 20:47:12","
[![Coverage Status](https://coveralls.io/builds/9463821/badge)](https://coveralls.io/builds/9463821)

Coverage decreased (-0.1%) to 89.251% when pulling **ba9dff896aea967125da66d9b52e51fa978a9bd0 on rogalski:infer-open-calls** into **9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd on PyCQA:master**.
","",""
"issue_comment","382","pycqa","astroid","coveralls","2016-12-29 20:47:12","
[![Coverage Status](https://coveralls.io/builds/9463821/badge)](https://coveralls.io/builds/9463821)

Coverage decreased (-0.3%) to 89.068% when pulling **ba9dff896aea967125da66d9b52e51fa978a9bd0 on rogalski:infer-open-calls** into **9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd on PyCQA:master**.
","",""
"issue_comment","382","pycqa","astroid","PCManticore","2016-12-30 16:05:05","Looks good, but check my suggestion to see if it can improve the situation for Python 3.","",""
"issue_comment","382","pycqa","astroid","rogalski","2016-12-30 16:07:51","@PCManticore most definitely, Python3 will be improved, thanks for your comments!","",""
"issue_comment","382","pycqa","astroid","rogalski","2016-12-30 20:54:54","@PCManticore

How would I reasonably infer arguments of function call? Covering only kwargs/only args/unpacking/defaults etc. will be tricky. Is `CallSite` something which may be used here?
","",""
"issue_comment","382","pycqa","astroid","coveralls","2016-12-30 21:20:20","
[![Coverage Status](https://coveralls.io/builds/9474394/badge)](https://coveralls.io/builds/9474394)

Coverage decreased (-0.05%) to 89.318% when pulling **0432a6315e647e38ade645ccbdf68ac2c4871ffc on rogalski:infer-open-calls** into **9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd on PyCQA:master**.
","",""
"issue_comment","382","pycqa","astroid","rogalski","2016-12-30 21:28:53","It needs more work, but conceptually it's much closer to final patch comparing to previous one.

Coverage drop is due to guard clauses not being hit.","",""
"issue_comment","382","pycqa","astroid","coveralls","2016-12-30 23:09:54","
[![Coverage Status](https://coveralls.io/builds/9475271/badge)](https://coveralls.io/builds/9475271)

Coverage decreased (-0.04%) to 89.326% when pulling **98fe5c8dd2ef305bb728cb4ce91bfc8fd21ff088 on rogalski:infer-open-calls** into **9f8e6f074ba7d9d060355a67a22c30a0c2cb44fd on PyCQA:master**.
","",""
"issue_comment","382","pycqa","astroid","coveralls","2016-12-30 23:30:11","
[![Coverage Status](https://coveralls.io/builds/9475428/badge)](https://coveralls.io/builds/9475428)

Coverage increased (+0.07%) to 89.326% when pulling **24180efab9bcb3f593bc5f9888f153b4d9dcc8df on rogalski:infer-open-calls** into **7b5a3bfb99d7a4554f64e3529daaf3275052cf74 on PyCQA:master**.
","",""
"issue_comment","382","pycqa","astroid","rogalski","2017-01-01 19:52:16","Quick question - why does astroid seems to be unable to fill arguments in inferred value for `open()` function? Inferred function seems to be correct - at least doc parameter is copied from proper built-in function.

`inspect` module seems to retrieve this signature easily, it looks like there's no reason for AST to not contain these information.

```
>>> print(next(astroid.extract_node('open').infer()).args)
Arguments(vararg=None,
          kwarg=None,
          args=None,
          defaults=[],
          kwonlyargs=[],
          kw_defaults=[],
          annotations=[],
          varargannotation=None,
          kwargannotation=None)
>>> import inspect
>>> inspect.signature(open)
<Signature (file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)>
>>> 

```","",""
"issue_comment","382","pycqa","astroid","coveralls","2017-01-01 19:57:06","
[![Coverage Status](https://coveralls.io/builds/9483988/badge)](https://coveralls.io/builds/9483988)

Coverage increased (+0.04%) to 89.297% when pulling **97d8fde555baf76105460155fdfeb0913a7c303d on rogalski:infer-open-calls** into **7b5a3bfb99d7a4554f64e3529daaf3275052cf74 on PyCQA:master**.
","",""
"issue_comment","382","pycqa","astroid","PCManticore","2017-01-01 21:06:43","Because it is a builtin and we have limited support for inferring builtins. Check raw_building, where everything happens (and also check the rewrite from 2.0; unfortunately, in 2.0, we cannot infer open() at all, but that is due to a bug). inspect.signature is not a good comparison, since it is inspecing ``__text_signature__`` for builtins. astroid might access this in the future, since, for builtins, we are operating with the actual objects, so we can take this hints into account.","",""
"issue_comment","382","pycqa","astroid","rogalski","2017-01-02 12:49:46","@PCManticore I can either hardcode information on open() signature in astroid code, or use inspect module to try to fill all objects built in `raw_builder.py`. For me, second option is much better than the first, but I guess it should target 2.0 branch, given huge rewrite was merged in that branch. On the same time, it's such a ""big"" change that you may be reluctant to do right now.

I see three options:
- hard-code information on open signature in astroid code, merge changes in pylint and astroid, postpone implementing generic feature of inspecting live objects to build more rich AST
- start implementing using instect to build more rich AST (which should target 2.0 branch)
- mark PRs as blocked and start working on them again after 2.0 is released

What you think about it?","",""
"issue_comment","382","pycqa","astroid","PCManticore","2017-01-03 07:58:21","I think we can wait for 2.0, if you don't mind. We can just do the work once, in 2.0's ``raw_building.py``, rather than duplicating it for 1.5 and , then, for 2.0. 
While the code is there for quite some time, after pylint 2.0, I want to have more often releases, so this should be out pretty fast.","",""
"issue_comment","382","pycqa","astroid","ceridwen","2017-01-30 20:55:29","Note that I rewrote raw_building.py in 2.0 to use inspect, including for building the builtin modules.  You should look at the result of that code and start from there, since this is target 2.0 anyways.","",""
"issue_comment","382","pycqa","astroid","rogalski","2017-01-30 21:14:36","@ceridwen in which commit it was implemented?","",""
"issue_comment","382","pycqa","astroid","PCManticore","2017-01-30 21:17:04","You can check the branch, I think there were multiple commits.","",""
"issue_comment","382","pycqa","astroid","ceridwen","2017-01-30 21:26:02","@rogalski, It's a complete rewrite, so many different commits.  As @PCManticore said, the 2.0 branch holds the current version of raw_building.py.","",""
"pull_request_commit_comment","382","pycqa","astroid","rogalski","2016-12-30 21:15:18","Is `CallSite` a way to go here?","97d8fde555baf76105460155fdfeb0913a7c303d","(81, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","rogalski","2016-12-30 21:18:28","I think this is (or may be) a generic operation. We have a ""dummy"" `ClassDef` built based on C-implemented built-ins where `FunctionDef` in bodies are empty.

General task would be to patch instances (based on predicate)  - based on some fake node. Key statement here is to _patch_ selectively, not to _replace_ with stub.","97d8fde555baf76105460155fdfeb0913a7c303d","(94, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","rogalski","2016-12-30 21:19:59","It's duplicated here, because all brain modules weren't importing anything outside of `astroid` root.","97d8fde555baf76105460155fdfeb0913a7c303d","(17, '', u'astroid/brain/brain_io.py')"
"pull_request_commit_comment","382","pycqa","astroid","rogalski","2016-12-30 21:23:05","Before my changes, inferred value was `Uninferable`. Now it's `InferenceError`.","97d8fde555baf76105460155fdfeb0913a7c303d","(5, '', u'astroid/tests/unittest_regrtest.py')"
"pull_request_commit_comment","382","pycqa","astroid","PCManticore","2016-12-31 09:14:51","Yes, definitely, we can use CallSite here.","97d8fde555baf76105460155fdfeb0913a7c303d","(81, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","PCManticore","2016-12-31 09:27:14","This use case, dummy ``ClassDef`` built based on C-implemented builtin-ins, sounds like a case for ``raw_building.py``. We have there code for building exactly these dummy classes, in order to provide us with some hints on what might be going on at the built-in level. You can also check the code from 2.0 branch, which is rewritten and far better than what we have currently in master.

Now, leaving that aside, I think it would be better if you replace the enter method in ``node.body`` with a newly generated one and returning the same node from the transform. It should be okay as you did right now, but, for astroid 2.0, we are aiming to have immutable nodes, so every time one wants to patch a node, he will have to return another node instead. Not relying on monkey patching would ease my job for porting this code to 2.0.","97d8fde555baf76105460155fdfeb0913a7c303d","(94, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","rogalski","2016-12-29 20:41:54","Extracted class nodes should be kept in module namespace instead of recreating them each time.","97d8fde555baf76105460155fdfeb0913a7c303d","(None, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","rogalski","2016-12-29 20:44:08","TODO: inheritance structure is fairly complicated in Py3 case (with BytesIO, TextIO, buffering etc.). For 100% proper inference logic here needs to be significantly improved.

Maybe we should write a simple testcase that generates all valid combos of input arguments and checks if inferred values are equivalent to actually interpreted objects.","97d8fde555baf76105460155fdfeb0913a7c303d","(None, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","PCManticore","2016-12-30 16:00:58","Not sure I'm understanding what you are saying. Can you explain what do you mean?","97d8fde555baf76105460155fdfeb0913a7c303d","(None, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","PCManticore","2016-12-30 16:03:40","I think another good approach, which I considered at some point, is to check the arguments of the ``open`` call. Depending on these, my idea was to return a different object. You can try this idea, in combination with another trick for not regenerating the classes all the time. Instead of building them as you are building them now, you might try to use this:

```
node = extract_node('''
from io import YourIOClass
YourIOClass
''')
inferred = next(n.infer())
return inferred.instantiate_class()
```
What do you think? Can you try this to see if it can work?","97d8fde555baf76105460155fdfeb0913a7c303d","(None, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","PCManticore","2016-12-30 16:04:35","This means instead of returning a code string, you can return an instance instead.","97d8fde555baf76105460155fdfeb0913a7c303d","(None, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","rogalski","2016-12-30 16:05:20","Currently, for each inference of ""open"", mock is recreated each time. It may (and should) be created only once, and on each inference it should just create a Instance node.","97d8fde555baf76105460155fdfeb0913a7c303d","(None, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","rogalski","2016-12-30 16:07:03","Yes, for Python 3 it'll have to check input arguments to figure out correct instance.

Using import in place of hand-written mocks is also a great idea that I wasn't aware of. Thanks!","97d8fde555baf76105460155fdfeb0913a7c303d","(None, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","rogalski","2016-12-30 21:22:21","As comment says, brute-force, but I guess it does what it should?","97d8fde555baf76105460155fdfeb0913a7c303d","(None, '', u'astroid/tests/unittest_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","PCManticore","2016-12-31 09:27:44","Why can't you use ``.locals`` here instead?","97d8fde555baf76105460155fdfeb0913a7c303d","(None, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","PCManticore","2016-12-31 09:33:38","No need for dedent, ``extract_node('file')`` is enough","97d8fde555baf76105460155fdfeb0913a7c303d","(None, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","PCManticore","2016-12-31 09:34:12","Protect this with ``except InferenceError``.","97d8fde555baf76105460155fdfeb0913a7c303d","(None, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit_comment","382","pycqa","astroid","PCManticore","2016-12-31 09:36:14","Also, drop the ``_get`` from the name.","97d8fde555baf76105460155fdfeb0913a7c303d","(None, '', u'astroid/brain/brain_builtin_inference.py')"
"pull_request_commit","382","pycqa","astroid","rogalski","2016-12-29 19:47:55","infer results of open() and file() calls","67f992c74e95d5c1e0930497ce519f577374c5f3",""
"pull_request_commit","382","pycqa","astroid","rogalski","2016-12-29 20:39:08","fix module name in py3 case","ba9dff896aea967125da66d9b52e51fa978a9bd0",""
"pull_request_commit","382","pycqa","astroid","rogalski","2016-12-30 21:13:32","correct py3 inference, added usage of builtin objects instead of stubs, add context manager stubs","0432a6315e647e38ade645ccbdf68ac2c4871ffc",""
"pull_request_commit","382","pycqa","astroid","rogalski","2016-12-30 23:03:29","open: infer only built-in calls","98fe5c8dd2ef305bb728cb4ce91bfc8fd21ff088",""
"pull_request_commit","382","pycqa","astroid","rogalski","2016-12-30 23:22:46","Merge branch 'last_correct_branch' into infer-open-calls","24180efab9bcb3f593bc5f9888f153b4d9dcc8df",""
"pull_request_commit","382","pycqa","astroid","rogalski","2017-01-01 17:50:17","minor changes based on Claudiu review (part1)","97d8fde555baf76105460155fdfeb0913a7c303d",""
