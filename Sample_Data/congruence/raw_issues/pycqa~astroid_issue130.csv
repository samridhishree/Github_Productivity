"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","130","pycqa","astroid","pylint-bot","2015-06-20 15:20:58","Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We could understand these cases:

```
#!python

self.__dict__ = some_dict # the members of the class are the values from the dictionary
self.__dict__[key] = something # instance.key should return something
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/130
","start issue","Understand assignment and modifications to __dict__"
"issue_comment","130","pycqa","astroid","pylint-bot","2015-07-18 15:30:23","_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Along the same lines, it would be nice if `vars`, `object.__get__`, and similar ways to circumvent the usual assignment/access procedures were handled.  I use these patterns quite often when building certain kinds of immutable objects.
","",""
"issue_comment","130","pycqa","astroid","pylint-bot","2015-07-18 22:09:15","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Right, I was planning to support vars as well, while understanding descriptors will be pretty hard at first, I guess. Anyway, it will take some time before starting to implement this.
","",""
