"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","490","nilearn","nilearn","AlexandreAbraham","2015-03-05 21:39:39","As far as I understood, we are dropping the idea of supporting any `niimg-like` object and will rely on `nibabel`. If we do so, I see no reason to keep reimplementing features already coded in nibabel.

Namely:
- `nilearn.image.resampling.reorder_img` is a duplicate of `nibabel.func.as_closest_canonical`
- several usage of `nilearn._utils.niimg_conversion.concat_niimgs` are covered by `nibabel.funcs.concat_images`.
- `nilearn._utils.niimg_conversion._index_niimgs` can be rewritten using `nibabel.funcs.four_to_three`

There may be other modifications that I don't know of.
","start issue","Remove duplicate code already present in nibabel."
"issue_closed","490","nilearn","nilearn","AlexandreAbraham","2015-04-08 08:48:22","","closed issue","Remove duplicate code already present in nibabel."
"issue_comment","490","nilearn","nilearn","AlexandreAbraham","2015-03-05 21:48:41","As a sidenote, we could support SpatialImage type from nibabel (that supersedes Nifti1, Nifti2, Analyze...).
","",""
"issue_comment","490","nilearn","nilearn","GaelVaroquaux","2015-03-05 21:49:19","> As a sidenote, we could support SpatialImage type from nibabel (that
> supersedes Nifti1, Nifti2, Analyze...).

Yes. Agreed.
","",""
"issue_comment","490","nilearn","nilearn","AlexandreAbraham","2015-04-08 08:48:21","As nibabel functions do not exactly what we do (lazy loading, etc), I close this issue.
","",""
