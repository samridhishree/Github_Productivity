"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","174","idan","oauthlib","didip","2013-06-06 00:43:16","I see that the library supports it:

https://github.com/idan/oauthlib/blob/master/oauthlib/oauth2/rfc6749/grant_types/resource_owner_password_credentials.py
","start issue","Do you have any examples on how to create provider that supports resource owner password credentials?"
"issue_comment","174","idan","oauthlib","ib-lundgren","2013-06-06 10:06:33","It is supported and in fact much easier to implement than the Authorization Code Grant outlined in the docs  at http://oauthlib.readthedocs.org/en/latest/oauth2/server.html

The docs would be very similar for Resource Owner Password Credentials Grant except you could skip the `AuthorizationView` and instead of `WebApplicationServer` use `LegacyApplicationServer`.

```
from oauthlib.oauth2 import LegacyApplicationServer

validator = MyRequestValidator()
server = LegacyApplicationServer(validator)
```

You would also need to implement `validate_user` but could skip a few others. Which grant uses which validator methods is mentioned at http://oauthlib.readthedocs.org/en/latest/oauth2/validator.html

Hope this helps a little. Will try and get around to a full example / tutorial at some point.
","",""
"issue_comment","174","idan","oauthlib","didip","2013-06-06 16:40:38","This is a great starting point, thank you!
","",""
