"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 12:42:47","This actually make the code of the examples significantly simpler.

Fixes #182
","start issue","MRG: Implement a function to compute mean img"
"issue_closed","185","nilearn","nilearn","GaelVaroquaux","2014-04-26 11:11:45","","closed issue","MRG: Implement a function to compute mean img"
"pull_request_title","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 12:42:47","This actually make the code of the examples significantly simpler.

Fixes #182
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","MRG: Implement a function to compute mean img"
"pull_request_merged","185","nilearn","nilearn","GaelVaroquaux","2014-04-26 11:11:45","MRG: Implement a function to compute mean img","b4fdd0b5e8c7993097e07dcc1028aa22a643e859","Pull request merge from GaelVaroquaux/nilearn:mean_img to nilearn/nilearn:master"
"issue_comment","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 13:20:53","This is now ready for merge. Please review!
","",""
"issue_comment","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 18:03:29","Addressed all your comments.
","",""
"issue_comment","185","nilearn","nilearn","GaelVaroquaux","2014-04-21 14:31:36","> anecdotal: it has saved me from not understanding what is going on by just
> raising an exception

Raising good exceptions is critical to the usability of a library. We
absolutely need to be good at that in nilearn, for the sake of our users.
","",""
"issue_comment","185","nilearn","nilearn","GaelVaroquaux","2014-04-22 14:44:25","I took in account all comments, did all the modifications, and did a rebase on master (the branch was no longer merging right, and as a result the tests were not running on travis).

This should be ready for merge. Thanks a lot for all the comments.
","",""
"issue_comment","185","nilearn","nilearn","GaelVaroquaux","2014-04-26 11:11:43","No further comments? Merging this guy. I welcome post-merge comments.
","",""
"issue_comment","185","nilearn","nilearn","bthirion","2014-04-14 11:24:28","OK for merging.
","",""
"issue_comment","185","nilearn","nilearn","VirgileFritsch","2014-04-15 09:12:02","Tests of `nilearn/masking.py` raise a warning about the computation of an empty mask. Is it normal? Is it worth catching?
","",""
"issue_comment","185","nilearn","nilearn","VirgileFritsch","2014-04-15 09:12:13","OK for merge.
","",""
"issue_comment","185","nilearn","nilearn","AlexandreAbraham","2014-04-15 16:46:28","The empty mask warning may be due to the change in mask computation strategy. I can't take a look at it right now.
","",""
"issue_comment","185","nilearn","nilearn","eickenberg","2014-04-15 16:47:41","anecdotal: it has saved me from not understanding what is going on by just
raising an exception

On Tuesday, April 15, 2014, Alexandre Abraham notifications@github.com
wrote:

> The empty mask warning may be due to the change in mask computation
> strategy. I can't take a look at it right now.
> 
> â€”
> Reply to this email directly or view it on GitHubhttps://github.com/nilearn/nilearn/pull/185#issuecomment-40505143
> .
","",""
"pull_request_commit_comment","185","nilearn","nilearn","AlexandreAbraham","2014-04-09 14:34:36","I guess that parenthesis are missing:
`if not ( total_n_imgs == 1 and n_imgs == 1 ):`

but this would make more sense to me:
`if total_n_imgs is None or n_imgs < total_n_imgs:`
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(None, '', u'nilearn/image/image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","eickenberg","2014-04-10 08:41:45","[irrelevant to this PR] The call to resampling.resample_img inherits the weird behaviour that function currently exhibits if a 4x4 target affine is given and no shape. I will complete https://github.com/nilearn/nilearn/pull/175 as quickly as possible.
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(None, '', u'nilearn/image/image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","eickenberg","2014-04-10 08:50:26","I am probably missing something very simple here, but what are the conceivable cases for the except branch?
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(183, '', u'nilearn/image/image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","eickenberg","2014-04-10 09:20:11","Without checking the interior of `resample_img`, one could check whether `mean_img` actually uses it properly by doing

```
target_affine = affine[:, [1, 0, 2, 3]]  # permutation of axes
mean_img_with_resampling = image.mean_img(niimg, target_affine=target_affine)
resampled_mean_image = resampling.resample_img(mean_img, target_affine=target_affine)
assert_array_equal(resampled_mean_image.get_data(), mean_img_with_resampling.get_data())
assert_array_equal(resampled_mean_image.get_affine(), mean_img_with_resampling.get_affine())
assert_array_equal(mean_img_with_resampling.get_affine(), target_affine)
```
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(107, '', u'nilearn/image/tests/test_image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","GaelVaroquaux","2014-04-10 09:45:22","> I am probably missing something very simple here, but what are the conceivable
> cases for the except branch?

A generator or an iterator.
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(183, '', u'nilearn/image/image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","eickenberg","2014-04-10 09:49:53","OK
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(183, '', u'nilearn/image/image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","bthirion","2014-04-14 11:23:49","Why don't you use it here ?
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(5, '', u'plot_visualization.py')"
"pull_request_commit_comment","185","nilearn","nilearn","VirgileFritsch","2014-04-15 08:58:40","Why not to use `ndimage.gaussian_filter`? It already understand sigma as a scalar or a tuple.
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(85, '', u'nilearn/image/image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","eickenberg","2014-04-15 09:02:59","What about 4D images then? Typically you don't want to smooth across time. Does it behave well if you pass it a sigma=0 on one axis? 
In any case, gaussian filtering is separable, and internally the nd version should be doing the same as is stated here.
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(85, '', u'nilearn/image/image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","VirgileFritsch","2014-04-15 09:03:01","pep8: Two spaces before ""#""
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(None, '', u'nilearn/image/tests/test_image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","eickenberg","2014-04-15 09:07:55","https://github.com/scipy/scipy/blob/master/scipy/ndimage/filters.py#L303

Internally `ndimage.gaussian_filter` does several 1D filters. But it doesn't seem to treat degenerate cases, `sigma_i=0` in any special way. So I would refrain from using it in our case.
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(85, '', u'nilearn/image/image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","eickenberg","2014-04-15 09:10:57","https://github.com/scipy/scipy/blob/master/scipy/ndimage/filters.py#L299

My bad, actually it _does_

So Virgile's suggestion would make the code more concise
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(85, '', u'nilearn/image/image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","GaelVaroquaux","2014-04-22 13:48:19","Thanks, I added a test based on this.
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(107, '', u'nilearn/image/tests/test_image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","GaelVaroquaux","2014-04-22 13:50:45","Because the purpose of this example is to teach users to do things manually.

We'll need to break examples in sub directories, to separate advanced from simple examples. However, this means that we'll have to move examples in sub-dirs, which means that we won't be able to rely on the current behavior that people download the package, don't install it, and it works. I want to do this only when we do an actual release.
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(5, '', u'plot_visualization.py')"
"pull_request_commit_comment","185","nilearn","nilearn","GaelVaroquaux","2014-04-22 13:52:24","Would it? We would have to create an extended tuple padded with zeros.
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(85, '', u'nilearn/image/image.py')"
"pull_request_commit_comment","185","nilearn","nilearn","eickenberg","2014-04-22 16:32:05","Exactly, you would need to pad with zeros to fill the shape. But I think the overhead incurred by doing that and using `ndimage.gaussian_filter` and the overhead incurred by looping over the axes with `ndimage.gaussian_filter_1d` is about the same. The outcome is identical, since one calls the other internally. So if there is no convincing supplementary reason to change this, ntrs
","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4","(85, '', u'nilearn/image/image.py')"
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 09:48:20","ENH: Implementation of compute_mean_img

fixes #182","b514bb09549b22a3fe9953ad18673f8fb6ff8573",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 10:07:04","BUG: old numpy versions","9791376080f3d04d3de7989efa6b528e265825de",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 10:54:53","DOC: image.mean_img in examples

This actually removes a lot of code.","4d651b16bab2d31b8d0d172a285406195a3845bf",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 13:02:43","DOC: add docstrings","0faa553197c773ddbff32e8951499effb1edc9ad",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 13:18:41","TEST: test with files too","14e7c35bf19dd5106bf1d477417c4157c7c68c10",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 13:22:18","DOC: more precise docstring","69ed8a82787478fbcb94702df07cb5c679af3162",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 13:27:57","DOC: add pointers to the function","e166ac8d250ddb1f8a43a9e5201865f713f4d001",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 18:00:03","ENH: resample only mean img","2b0a3cd34edf87da4828592052b1e889f76d09c4",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-09 18:01:20","Cosmit","d3c05ac7641a8a523a441541aff0e049a57fe7ee",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-22 12:00:14","ENH: don't cache fast operations

Address @AlexandreAbraham's comment","a60b11579ff88f0f6b4fae2fd1398ff4643b60dd",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-22 13:38:53","BUG: address suboptimal mean_img","2fdf0d481b867a8fe5b2c32378ed0413b9e18a5a",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-22 13:44:40","TST: test resampling in mean_img

As suggested by @eickenberg","1350173523859b2ff1a10cedd5a792d78a215a07",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-22 13:55:30","Cosmit for PEP8","d3e8c7bcc8d27fdde2e103aac76913e57dd4b897",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-22 14:03:01","TEST: capture warning

As noted by @VirgileFritsch","49596c8dda9c4ad6b84fb985ece0ac4b29cf1906",""
"pull_request_commit","185","nilearn","nilearn","GaelVaroquaux","2014-04-22 14:41:39","BUG: resampling in mean_img","a0deaac9edef2520b33ba32698beb8c8ec9f4ae4",""
