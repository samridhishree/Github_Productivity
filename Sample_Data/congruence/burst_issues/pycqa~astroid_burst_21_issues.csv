,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,330,pycqa,astroid,ceridwen,2016-04-18 19:22:25,"`__pkginfo__.py` has some obsolete information in it like the URL of the BitBucket page that should be changed.
",start issue,Update __pkginfo__
1,issue_closed,330,pycqa,astroid,PCManticore,2016-06-27 17:24:36,,closed issue,Update __pkginfo__
0,issue_title,221,pycqa,astroid,pylint-bot,2015-10-21 07:48:28,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/221
",start issue,"Test failures on pypy, pypy3 and jython"
1,issue_closed,221,pycqa,astroid,PCManticore,2016-06-27 17:35:30,,closed issue,"Test failures on pypy, pypy3 and jython"
2,issue_comment,221,pycqa,astroid,pylint-bot,2015-11-06 23:51:40,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

PyPy tests should be clean as of b68ee1186e5f.
",,
3,issue_comment,221,pycqa,astroid,PCManticore,2016-06-27 17:35:30,"PyPy and Jython are again erroring out with the latest astroid. I'm closing this issue, since we already have the errors in the CI (and we should strive to make it green all the time).
",,
0,issue_title,340,pycqa,astroid,PCManticore,2016-06-04 21:19:47,"Would be useful to have coverage reporting, as well as the .github template which we have in Pylint.
",start issue,Import the coverage and .github configurations from pylint
1,issue_closed,340,pycqa,astroid,PCManticore,2016-06-27 20:20:58,,closed issue,Import the coverage and .github configurations from pylint
2,issue_comment,340,pycqa,astroid,PCManticore,2016-06-27 20:20:58,"We now have proper coverage support
",,
0,issue_title,159,pycqa,astroid,pylint-bot,2015-07-13 15:49:29,"Originally reported by: **Benedikt Reinartz (BitBucket: [filmor](http://bitbucket.org/filmor), GitHub: @filmor?)**

---

Currently, it is not possible to properly use pylint on modules using .NET classes through Python.NET, as the imports fail. This is due to `modutils.find_from_modpath` essentially relying on `imp.find_module`, which does not work for this kind of pseudo-module.

I'd gladly work on a PR if one can provide me a hint on how this is supposed to be handled.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/159
",start issue,Support for Python.NET
1,issue_closed,159,pycqa,astroid,PCManticore,2016-06-27 17:37:53,,closed issue,Support for Python.NET
2,issue_comment,159,pycqa,astroid,pylint-bot,2015-07-13 15:07:03,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Python.NET is IronPython or it's different? I will be happy to assist you on a PR, but first I got to see why it fails. ;-)
",,
3,issue_comment,159,pycqa,astroid,pylint-bot,2015-07-14 11:38:29,"_Original comment by_ **Benedikt Reinartz (BitBucket: [filmor](http://bitbucket.org/filmor), GitHub: @filmor?)**:

---

No, [Python.NET](http://pythonnet.github.io/) is a library to import and use CLR assemblies like Python modules.

I don't know yet what the exact loading mechanism is, it's not exposed to Python, but it allows you to do stuff like `from System import String` to use .NET classes.
",,
4,issue_comment,159,pycqa,astroid,pylint-bot,2015-07-31 07:41:20,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Probably we could fix this by adding AST transforms. Have a look at astroid.brain, there's a bunch of transforms that could be useful for inspiration. Adding support for this in modutils doesn't seem the right approach.
",,
5,issue_comment,159,pycqa,astroid,filmor,2015-12-09 14:30:38,"Hi again, I now know a bit more about the loading mechanism. Basically, Python.NET overloads `__import__` in a brute-force way as soon as you `import clr`. I will have a look at `astroid.brain`, didn't have the time, yet.
",,
6,issue_comment,159,pycqa,astroid,PCManticore,2016-01-04 08:07:04,"Hi @filmor I somehow missed your comment. Yes, astroid.brain seems the proper way for solving this. Just ping me if you need any help.
",,
7,issue_comment,159,pycqa,astroid,denfromufa,2016-01-30 04:03:07,"@filmor this would be really useful! let me know how it goes?
",,
8,issue_comment,159,pycqa,astroid,PCManticore,2016-06-27 17:37:53,"Closing for the lack of activity. I don't have a particular interest in Python .NET, but I would be happy to help anyone that wants to tackle this issue, by implementing transforms or other changes required for astroid to work on this platform, but there is no point, for now, to keep this issue opened if there is no interest in supporting it by the core.
",,
9,issue_comment,159,pycqa,astroid,denfromufa,2016-09-14 03:37:46,"@PCManticore @filmor by building pure python skeletons programmatically (reflection on imported .NET types) like in pycharm this should be possible even without patching pylint and other static analysis tools:

https://github.com/JetBrains/python-skeletons/blob/master/numpy/core/multiarray.py
",,
0,issue_title,289,pycqa,astroid,ceridwen,2015-12-12 01:19:25,"Now that we're using Travis CI, we might consider supporting and testing on IronPython.  At least one project seems to have IronPython working on Travis: https://github.com/earthreader/libearth/blob/master/.travis.yml 
",start issue,Consider adding IronPython to supported versions
1,issue_closed,289,pycqa,astroid,PCManticore,2016-06-27 17:32:52,,closed issue,Consider adding IronPython to supported versions
2,issue_comment,289,pycqa,astroid,PCManticore,2016-06-27 17:32:52,"I don't think it is worth it. The last release that they seemed to have, according to their homepage (http://ironpython.net/), was at the end of 2014. We already have some backwards compatibility problems with Jython and PyPy and it is quite hard to provide a good support story with our current limited resources. I would prefer to invest in CPython and PyPy for now.
",,
0,issue_title,155,pycqa,astroid,pylint-bot,2015-07-06 23:48:27,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We should improve our test coverage. We have a pretty decent coverage (87%), but we can go beyond it:

```
#!python

----------------------------------------------------
astroid                   42      0   100%
astroid.__pkginfo__       13      0   100%
astroid.as_string        281     65    77%   38-40, 44-73, 121, 151, 156, 200, 222-230, 238, 242-249, 289, 309, 350-355, 359-368, 409, 441-444, 461, 502
astroid.astpeephole       33      3    91%   30-31, 82
astroid.bases            443     57    87%   37-38, 74, 76, 165, 188, 236-237, 257, 268-270, 275, 283-287, 293, 323, 330-331, 336, 340, 346, 358, 368, 376, 385, 388, 391, 394, 397, 400, 569, 575-576, 584, 587-588,
 604-616, 641-642, 700, 709, 716-717
astroid.builder          146     24    84%   51-54, 58-79, 123-126, 225-229, 232
astroid.exceptions        33      0   100%
astroid.helpers           89      7    92%   49, 54, 107-108, 111, 113, 141
astroid.inference        422     65    85%   92-104, 107-119, 122, 124, 210, 214, 218-220, 228, 256, 262-267, 287, 295-296, 318-320, 331-332, 386-390, 405, 412, 565-567, 583, 643-644, 655-656, 678, 725
astroid.manager          194     29    85%   39-40, 75-76, 78, 84, 96-97, 109, 118, 121-123, 126, 142, 158-159, 208, 211-215, 220-224, 230-231, 280
astroid.mixins            61      4    93%   42, 110, 112-113
astroid.modutils         313     48    85%   43-44, 54-55, 83-84, 105-111, 125, 203, 205, 232-233, 327-330, 365, 372, 378-381, 383-384, 419-420, 449, 492, 498, 520, 550-553, 576-577, 613-614, 654, 672-673, 682, 69
6
astroid.node_classes     576     77    87%   39-42, 107, 179, 192, 216, 291, 304, 324-326, 341, 346-350, 356, 368-371, 380, 382, 388, 426, 438-439, 455, 467-468, 507, 519, 523-533, 550, 553, 556-558, 561, 607, 618
-620, 623, 629, 651, 668, 670, 677-679, 730, 750, 789, 808, 826-828, 836, 859, 862, 865, 896, 938, 957, 969-970, 986, 1030
astroid.nodes              5      0   100%
astroid.objects           89      4    96%   62, 118, 167-168
astroid.protocols        295     30    90%   113, 128-131, 206, 209-210, 214-217, 222-232, 269-270, 332-333, 339, 347-348, 462, 466, 494, 508
astroid.raw_building     233     28    88%   143, 145, 150, 160-167, 204-208, 216-219, 222-223, 227, 253-255, 269, 279, 311, 323-326
astroid.rebuilder        633     88    86%   54-55, 193-194, 202-204, 217-223, 254, 281-284, 349, 355-357, 392, 440-442, 446-456, 460-467, 506, 645-647, 683-689, 693-701, 751-756, 760-764, 791-802, 894
astroid.scoped_nodes     895    108    88%   94, 300, 317, 336-337, 344, 361-362, 381, 391, 395, 398-403, 446, 477-482, 488-489, 491, 501-502, 527, 540, 552, 562, 571, 582, 616-617, 620, 633, 661-663, 673, 696, 70
4, 735, 742, 749, 784, 798-799, 810-811, 866, 890, 892, 896, 898, 901-902, 923-924, 932, 980, 982, 995, 1002, 1007, 1010, 1040, 1045-1046, 1121, 1154, 1262, 1337-1338, 1350-1369, 1399-1402, 1409, 1419, 1429, 1435,
 1437-1438, 1451, 1490-1491, 1493, 1495, 1510, 1525-1526
----------------------------------------------------
TOTAL                   4796    637    87%
----------------------------------------------------------------------
Ran 522 tests in 37.299s

OK (SKIP=42)
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/155
",start issue,Improve the coverage of the tests
1,issue_closed,155,pycqa,astroid,PCManticore,2016-06-27 17:38:17,,closed issue,Improve the coverage of the tests
2,issue_comment,155,pycqa,astroid,PCManticore,2016-06-27 17:38:17,"Would be nice, but not a priority.
",,
0,issue_title,276,pycqa,astroid,pylint-bot,2015-12-03 09:50:26,"Originally reported by: **BitBucket: [jlec](http://bitbucket.org/jlec), GitHub: @jlec?**

---

Happens with all Cpython and pypy

```
#!python

test_from_imports (unittest_brain.SixBrainTest) ... FAIL

======================================================================
FAIL: test_from_imports (unittest_brain.SixBrainTest)
----------------------------------------------------------------------
Traceback (most recent call last)
  File ""/usr/lib64/python3.4/unittest/case.py"", line 58, in testPartExecutor
    yield
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'f_back', 'f_builtins', 'f_code', 'f_globals', 'f_lasti', 'f_lineno', 'f_locals', 'f_trace'] == 'unittest_brain'

    ------------------------ local variables -------------------------
    exc_info: None
    isTest: True
    old_success: True
    self: <unittest.case._Outcome object at 0x7fd03a713d68>
      self.errors: [(<unittest_brain.SixBrainTest testMethod=test_from_imports>, None), (<unittest_brain.SixBrainTest testMethod=test_from_imports>, (<class 'AssertionError'>, AssertionError(""YES is not an instance of <class 'astroid.scoped_nodes.ClassDef'>"",), <traceback object at 0x7fd038222948>)), (<unittest_brain.SixBrainTest testMethod=test_from_imports>, None)]
      self.expectedFailure: None
      self.expecting_failure: False
      self.result: <logilab.common.pytest.SkipAwareTestResult run=21 errors=0 failures=0>
      self.result_supports_subtests: True
      self.skipped: []
      self.success: False
    test_case: <unittest_brain.SixBrainTest testMethod=test_from_imports>
    ------------------------------------------------------------------

  File ""/usr/lib64/python3.4/unittest/case.py"", line 577, in run
    testMethod()
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'f_back', 'f_builtins', 'f_code', 'f_globals', 'f_lasti', 'f_lineno', 'f_locals', 'f_trace'] == 'unittest_brain'

    ------------------------ local variables -------------------------
    expecting_failure: False
    orig_result: <logilab.common.pytest.SkipAwareTestResult run=21 errors=0 failures=0>
    outcome: <unittest.case._Outcome object at 0x7fd03a713d68>
    result: <logilab.common.pytest.SkipAwareTestResult run=21 errors=0 failures=0>
    self: <unittest_brain.SixBrainTest testMethod=test_from_imports>
      self._cleanups: []
      self._outcome: <unittest.case._Outcome object at 0x7fd03a713d68>
      self._subtest: None
      self._testMethodDoc: None
      self._testMethodName: 'test_from_imports'
      self._type_equality_funcs: {<class 'str'>: 'assertMultiLineEqual', <class 'dict'>: 'assertDictEqual', <class 'set'>: 'assertSetEqual', <class 'tuple'>: 'assertTupleEqual', <class 'frozenset'>: 'assertSetEqual', <class 'list'>: 'assertListEqual'}
    testMethod: <bound method SixBrainTest.test_from_imports of <unittest_brain.SixBrainTest testMethod=test_from_imports>>
    ------------------------------------------------------------------

  File ""/var/tmp/portage/dev-python/astroid-1.4.1/work/astroid-1.4.1-python3_4/build/lib/astroid/tests/unittest_brain.py"", line 276, in test_from_imports
    self.assertIsInstance(inferred, nodes.ClassDef)
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'f_back', 'f_builtins', 'f_code', 'f_globals', 'f_lasti', 'f_lineno', 'f_locals', 'f_trace'] == 'unittest_brain'

    ------------------------ local variables -------------------------
    ast_node: <Attribute(HTTPSConnection) l.3 [] at 0x7fd03814e358>
    inferred: YES
    self: <unittest_brain.SixBrainTest testMethod=test_from_imports>
      self._cleanups: []
      self._outcome: <unittest.case._Outcome object at 0x7fd03a713d68>
      self._subtest: None
      self._testMethodDoc: None
      self._testMethodName: 'test_from_imports'
      self._type_equality_funcs: {<class 'str'>: 'assertMultiLineEqual', <class 'dict'>: 'assertDictEqual', <class 'set'>: 'assertSetEqual', <class 'tuple'>: 'assertTupleEqual', <class 'frozenset'>: 'assertSetEqual', <class 'list'>: 'assertListEqual'}
    ------------------------------------------------------------------

  File ""/usr/lib64/python3.4/unittest/case.py"", line 1213, in assertIsInstance
    self.fail(self._formatMessage(msg, standardMsg))
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'f_back', 'f_builtins', 'f_code', 'f_globals', 'f_lasti', 'f_lineno', 'f_locals', 'f_trace'] == 'unittest_brain'

    ------------------------ local variables -------------------------
    cls: <class 'astroid.scoped_nodes.ClassDef'>
    msg: None
    obj: YES
    self: <unittest_brain.SixBrainTest testMethod=test_from_imports>
      self._cleanups: []
      self._outcome: <unittest.case._Outcome object at 0x7fd03a713d68>
      self._subtest: None
      self._testMethodDoc: None
      self._testMethodName: 'test_from_imports'
      self._type_equality_funcs: {<class 'str'>: 'assertMultiLineEqual', <class 'dict'>: 'assertDictEqual', <class 'set'>: 'assertSetEqual', <class 'tuple'>: 'assertTupleEqual', <class 'frozenset'>: 'assertSetEqual', <class 'list'>: 'assertListEqual'}
    standardMsg: ""YES is not an instance of <class 'astroid.scoped_nodes.ClassDef'>""
    ------------------------------------------------------------------

  File ""/usr/lib64/python3.4/unittest/case.py"", line 642, in fail
    raise self.failureException(msg)
['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'f_back', 'f_builtins', 'f_code', 'f_globals', 'f_lasti', 'f_lineno', 'f_locals', 'f_trace'] == 'unittest_brain'

    ------------------------ local variables -------------------------
    msg: ""YES is not an instance of <class 'astroid.scoped_nodes.ClassDef'>""
    self: <unittest_brain.SixBrainTest testMethod=test_from_imports>
      self._cleanups: []
      self._outcome: <unittest.case._Outcome object at 0x7fd03a713d68>
      self._subtest: None
      self._testMethodDoc: None
      self._testMethodName: 'test_from_imports'
      self._type_equality_funcs: {<class 'str'>: 'assertMultiLineEqual', <class 'dict'>: 'assertDictEqual', <class 'set'>: 'assertSetEqual', <class 'tuple'>: 'assertTupleEqual', <class 'frozenset'>: 'assertSetEqual', <class 'list'>: 'assertListEqual'}
    ------------------------------------------------------------------

AssertionError: YES is not an instance of <class 'astroid.scoped_nodes.ClassDef'>

                              no stdout
                              no stderr
======================================================================
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/276
",start issue,Testfailures with 1.4.1
1,issue_closed,276,pycqa,astroid,PCManticore,2016-06-27 17:34:05,,closed issue,Testfailures with 1.4.1
2,issue_comment,276,pycqa,astroid,pylint-bot,2015-12-03 15:52:18,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

I can't replicate this failure.  Can you give us some more information about what conditions you're seeing the failure under?
",,
3,issue_comment,276,pycqa,astroid,pylint-bot,2015-12-03 17:51:01,"_Original comment by_ **BitBucket: [jlec](http://bitbucket.org/jlec), GitHub: @jlec?**:

---

Okay, the original report happened when running pytest.

Using the new unittest way I see

```
#!python

python -m unittest discover -p ""unittest*.py"" --verbose
....
test_from_imports (astroid.tests.unittest_brain.SixBrainTest) ... FAIL

======================================================================
FAIL: test_from_imports (astroid.tests.unittest_brain.SixBrainTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""astroid/tests/unittest_brain.py"", line 276, in test_from_imports
    self.assertIsInstance(inferred, nodes.ClassDef)
AssertionError: YES is not an instance of <class 'astroid.scoped_nodes.ClassDef'>

----------------------------------------------------------------------
Ran 495 tests in 10.969s

```
",,
4,issue_comment,276,pycqa,astroid,pylint-bot,2015-12-03 17:52:09,"_Original comment by_ **BitBucket: [jlec](http://bitbucket.org/jlec), GitHub: @jlec?**:

---

The whole thing is when I am running the test suite during installation on a Gentoo Linux system.
",,
5,issue_comment,276,pycqa,astroid,pylint-bot,2015-12-03 18:30:20,"_Original comment by_ **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**:

---

Can you check that six is installed correctly for the Python interpreter you're using?  If it is, try running:

``` python
from six.moves import http_client
http_client.HTTPSConnection
```

and describe what happens. 
",,
6,issue_comment,276,pycqa,astroid,PCManticore,2016-06-27 17:34:05,"Closing for now, since we can't reproduce it. If you manage to reproduce this issue with the current master version (the future 1.5.0), please reopen it.
",,
