"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","990","nilearn","nilearn","arthurmensch","2016-02-17 09:30:56","This would be great for algorithms that are sequential with a large IO bottleneck. The way I see it would be to have a `MultiNiftiMasker.transform(imgs, lazy=True`), which would return a list of MemorizedFunctions with a method `.get()`, using `call_and_shelve` from joblib.

This is quite expert usage, but
- it would be great for developing new estimators
- it would be great for users that build their own pipeline as well

the parmaeter `lazy` could be a class parameter, which would preserve the API of `transform`
","start issue","MultNiftiMasker should propose lazy transform with shelving"
"issue_closed","990","nilearn","nilearn","AlexandreAbraham","2016-07-19 13:17:30","","closed issue","MultNiftiMasker should propose lazy transform with shelving"
"issue_comment","990","nilearn","nilearn","GaelVaroquaux","2016-02-17 09:37:17","Agreed on the general idea. I think that @AlexandreAbraham uses this in
his MSDL code.

Wether it should be a new method or a class parameter, I don't know. Any
opinions?

G
","",""
"issue_comment","990","nilearn","nilearn","bthirion","2016-02-17 19:00:24","As suggested by Arthur, a class parameter sounds more natural imho.
","",""
"issue_comment","990","nilearn","nilearn","AlexandreAbraham","2016-02-18 09:50:47","> Agreed on the general idea. I think that @AlexandreAbraham uses this in his MSDL code.

Yes I do, I also already have a branch that adds it to the maskers.

Actually, the issue already exists #203 and some code to fix it also already exists #278. The problem is that if we enable it, we have to propagate everywhere. Meaning `compute_multi_epi_mask` should use it, `CanICA` should use it, etc.

+1 for the class parameter.
","",""
