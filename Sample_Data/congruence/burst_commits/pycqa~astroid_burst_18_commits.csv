,rectype,issueid,project_owner,project_name,actor,time,text,action,title,provenance,paths,plus_1,urls,issues,userref,code,formatted_time
1084,commit_messages,,pycqa,astroid,PCManticore,2016-02-18 21:55:32,"imported_names() got replaced by public_names()

Our understanding of wildcard imports through __all__ was
half baked to say at least, since we couldn't account for
modifications of the list, which results in tons of false positives.
Instead, we replaced it with public_names(), a method which returns
all the names that are publicly available in a module, that is that
don't start with an underscore, even though this means that there
is a possibility for other names to be leaked out even though
they are not present in the __all__ variable.",82c6ef644a2efb77217a23d9b8a6cfb5caffb4ba,,"api.github.com,git_clone","[u'[""astroid/scoped_nodes.py"", ""astroid/builder.py"", ""astroid/tests/unittest_scoped_nodes.py"", ""ChangeLog""]']",False,[],[],[],[],2016-02-18
2390,pull_request_commit,373.0,pycqa,astroid,PCManticore,2016-02-18 21:55:32,"imported_names() got replaced by public_names()

Our understanding of wildcard imports through __all__ was
half baked to say at least, since we couldn't account for
modifications of the list, which results in tons of false positives.
Instead, we replaced it with public_names(), a method which returns
all the names that are publicly available in a module, that is that
don't start with an underscore, even though this means that there
is a possibility for other names to be leaked out even though
they are not present in the __all__ variable.",1d5bf7ec3c74496e2b9b5772cbe953a962ccd3d9,,api.github.com,,False,[],[],[],[],2016-02-18
