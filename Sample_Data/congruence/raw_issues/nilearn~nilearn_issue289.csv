"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","289","nilearn","nilearn","banilo","2014-11-21 16:18:24","Fixes a number of PEP8 violations in affine matrix example.
","start issue","PEP8 fixes in plot_affine_transformation.py"
"issue_closed","289","nilearn","nilearn","lesteve","2014-11-24 10:55:24","","closed issue","PEP8 fixes in plot_affine_transformation.py"
"pull_request_title","289","nilearn","nilearn","banilo","2014-11-21 16:18:24","Fixes a number of PEP8 violations in affine matrix example.
","bacdc849c54e32c880e1da1cea7058c9a464cc97","PEP8 fixes in plot_affine_transformation.py"
"pull_request_merged","289","nilearn","nilearn","lesteve","2014-11-24 10:55:24","PEP8 fixes in plot_affine_transformation.py","46b3f2f3d070666d29de70e1ff81b6e98aa5cacb","Pull request merge from banilo/nilearn:ex_affine to nilearn/nilearn:master"
"issue_comment","289","nilearn","nilearn","bthirion","2014-11-23 21:08:50","LGTM. makes emacs happy.

That's probably only a matter of test, but I'd rather have the 4 examples on one figure with subplots.
","",""
"issue_comment","289","nilearn","nilearn","lesteve","2014-11-24 07:42:44","> That's probably only a matter of test, but I'd rather have the 4 examples on one figure with subplots.

The only downside with a single figure is that it sometimes clashes with the way we use examples as step by step instructions. For example: [here](http://nilearn.github.io/building_blocks/manipulating_mr_images.html#smoothing) and [there](http://nilearn.github.io/building_blocks/manipulating_mr_images.html#selecting-features). Two plots were put on the same figure and it is slightly misleading.
","",""
"issue_comment","289","nilearn","nilearn","GaelVaroquaux","2014-11-24 10:03:20","> That's probably only a matter of test, but I'd rather have the 4 examples on
> one figure with subplots.

I'd rather not. It's much easier to insert in the documentation in the
current state, and this example is mostly made for the narrative
documentation.
","",""
"issue_comment","289","nilearn","nilearn","bthirion","2014-11-24 10:05:24","OK, let's keep it as is.
","",""
"issue_comment","289","nilearn","nilearn","banilo","2014-11-24 10:37:38","Fixed missing word. Looks like it might be mergable now...
","",""
"issue_comment","289","nilearn","nilearn","lesteve","2014-11-24 10:55:39","Merged, thanks for this!
","",""
"pull_request_commit_comment","289","nilearn","nilearn","bthirion","2014-11-23 21:02:00","missing 'without' ?
","bacdc849c54e32c880e1da1cea7058c9a464cc97","(None, '', u'plot_affine_transformation.py')"
"pull_request_commit_comment","289","nilearn","nilearn","lesteve","2014-11-24 08:03:37","> missing 'without' ?

Looks like it, good catch. @banilo if you fix that, I'll merge this one.
","bacdc849c54e32c880e1da1cea7058c9a464cc97","(None, '', u'plot_affine_transformation.py')"
"pull_request_commit_comment","289","nilearn","nilearn","dohmatob","2014-11-24 08:11:57","+1 for merge.

On Mon, Nov 24, 2014 at 9:03 AM, Loïc Estève notifications@github.com
wrote:

> In plot_affine_transformation.py:
> 
> > @@ -25,9 +25,19 @@
> >     given and no shape given
> >  3) 4x4 affine matrix given and no shape given
> > 
> > ## -While 1) needs no further explanation (it returns an image exactly as specified, with a new view on the data in millimeter space), 2) and 3) are missing some specification, which is subsequently inferred by `resample_img`: If the affine offset is missing (3x3 transformation, case 2), then the new image will be the closest bounding box possible around the data along the new axes. If the affine offset is given, but no shape provided, the resulting image will be the closest bounding box around the union of the data points and the affine offset.
> > 
> > -Note that specifying a shape specifying a 3x3 transformation matrix causes an error message, because `resample_img` will not know where to start the bounding box (there is no intelligent way of inferring this given the bounding box shape).
> > +While 1) needs no further explanation (it returns an image exactly as
> > +specified, with a new view on the data in millimeter space), 2) and 3) are
> > +missing some specification, which is subsequently inferred by `resample_img`:
> > +If the affine offset is missing (3x3 transformation, case 2), then the new
> > +image will be the closest bounding box possible around the data along the
> > +new axes. If the affine offset is given, but no shape provided, the
> > +resulting image will be the closest bounding box around the union of the
> > +data points and the affine offset.
> > +
> > +Note that specifying a shape specifying a 3x3 transformation matrix causes
> 
>  missing 'without' ?
> 
> Looks like it, good catch. @banilo https://github.com/banilo if you fix
> that, I'll merge this one.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/nilearn/nilearn/pull/289/files#r20776194.

## 

DED
","bacdc849c54e32c880e1da1cea7058c9a464cc97","(None, '', u'plot_affine_transformation.py')"
"pull_request_commit","289","nilearn","nilearn","banilo","2014-11-21 16:19:08","PEP8 fixes","9f89edf4b4e09262c1367388ac3331ff269732ec",""
"pull_request_commit","289","nilearn","nilearn","banilo","2014-11-24 10:38:00","restored omitted word","bacdc849c54e32c880e1da1cea7058c9a464cc97",""
