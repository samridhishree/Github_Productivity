"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","646","nilearn","nilearn","amadeuskanaan","2015-07-13 13:04:11","would simplify connectome plots. 
","start issue","Add functions to grab center of mass coords of probabilistic and parcellation atlases"
"issue_comment","646","nilearn","nilearn","GaelVaroquaux","2015-07-13 13:13:52","You should be a bit more explicit in the description. It will help you later. Let me give you hints:
- You need two functions: one for probabilistic atlas, another for parcellations
- It will be used to make plot_multi_subject_connectome.py simpler
","",""
"issue_comment","646","nilearn","nilearn","amadeuskanaan","2015-07-14 09:12:44","Noted.... here is a stab at a center of mass coord grabber for parcellation atlases. it uses code from largest_connected_components to throw warnings if there are no non-zero-values in a component. 

how can this be improved? 

``` python
%matplotlib inline
from nilearn import datasets, plotting
from nilearn._utils import  check_niimg
import numpy as np 
from nilearn._utils.ndimage import largest_connected_component 
from scipy import ndimage
from nilearn.image import resampling

destrieux = datasets.fetch_atlas_destrieux_2009()

def get_parcellation_coordinates(label_img):
    # grab data and affine
    label_img = check_niimg(label_img)
    label_data = label_img.get_data()
    label_affine = label_img.get_affine()

    # grab number of unique values in 3d image
    label_unique = np.unique(label_data)[1:]

    # grab center of mass from parcellations and dump into coords list
    coord_list = []
    for i, cur_label in enumerate(label_unique):
        cur_img = label_data == cur_label

        #take the largest connected component
        volume = np.asarray(cur_img)
        labels, label_nb = ndimage.label(volume)
        if not label_nb:
            raise ValueError('No non-zero values: no connected components')
        if label_nb == 1:
            volume = volume.astype(np.bool) 

        # get parcellation center of mass
        center_of_mass = ndimage.center_of_mass(volume)
        world_coords = resampling.coord_transform(center_of_mass[0],
                                                  center_of_mass[1],
                                                  center_of_mass[2],
                                                  label_affine)

        coord_list.append((world_coords[0], 
                           world_coords[1], 
                           world_coords[2]))

    return coord_list
```

<img width=""529"" alt=""screen shot 2015-07-14 at 11 09 33 am"" src=""https://cloud.githubusercontent.com/assets/2376624/8669968/1625bb84-2a19-11e5-968e-ebf23ee464e0.png"">
<img width=""524"" alt=""screen shot 2015-07-14 at 11 09 37 am"" src=""https://cloud.githubusercontent.com/assets/2376624/8669969/1626fecc-2a19-11e5-838f-d7f347e0c6fe.png"">
","",""
"issue_comment","646","nilearn","nilearn","banilo","2015-07-14 09:18:23","The questions of center of mass indeed often pops, people do not always know how to go about to tcompute these and whether there are any special things to pay attention to. I therefore that it would be beneficial to provide simple, general functions to compute these (not only in a connectome setting).

Furthermore, I could image two flavors of such a center of mass computation:
a) weight-naive version: mean of all non-zero coordinates (for hard/discrete clusterings, e.g. k-means)
b) weight-sensible version: collapse coordinates of every axis as a function of the voxel-weight (for soft division, e.g. nodes of ICA networks or gray-matter-probability based probability atalses)
","",""
