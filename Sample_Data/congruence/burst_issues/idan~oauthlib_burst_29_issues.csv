,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,267,idan,oauthlib,whit537,2014-09-17 14:08:23,"RFC6749 [specifies](http://tools.ietf.org/html/rfc6749#section-5.1) that the `access_token` is given in a JSON struct:

> The parameters are included in the entity-body of the HTTP response using the ""application/json"" media type as defined by [RFC4627].

However, as @gulopine points out at https://github.com/idan/oauthlib/issues/44#issuecomment-6356991, Facebook [returns](https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow/v2.1#confirm) the data in an URL-encoded string instead:

> The response you will receive from this endpoint, if successful, is
> 
> `access_token={access-token}&expires={seconds-til-expiration}`

@ib-lundgren claims that ""the first versions [of the spec] did in fact use url encoded strings,"" though I haven't verified this. @gulopine suggests that GitHub also uses URL-encoded strings; in my testing they do serve JSON, at least when asked for it via `Accept`.

We should support Facebook.
",start issue,parse_token_response assumes JSON
1,issue_closed,267,idan,oauthlib,ib-lundgren,2014-09-22 14:35:52,,closed issue,parse_token_response assumes JSON
2,issue_comment,267,idan,oauthlib,ib-lundgren,2014-09-22 13:02:03,"I've worked around this in requests-oauthlib by converting facebook to json encoding but never yet got around to doing a semi-intelligent fixing of responses directly in oauthlib. 
",,
3,issue_comment,267,idan,oauthlib,whit537,2014-09-22 13:58:12,"@ib-lundgren Glad to hear I wasn't the first to run into this issue! I couldn't imagine I was the first to try using `oauthlib` (via `requests-oauthlib`) with Facebook. :-)
",,
4,issue_comment,267,idan,oauthlib,whit537,2014-09-22 14:15:12,"And I did consider casting to JSON in the Facebook case, but that could only really happen in the `requests-oauthlib` layer. It seemed better to push this behavior down further, so that, on the one hand, other libraries also depending on `oauthlib` will get the fix, and on the other, we can be robust in the face of other providers besides Facebook that use the old, non-JSON behavior.
",,
0,issue_title,212,idan,oauthlib,ib-lundgren,2013-09-18 16:25:48,"Grant types are lacking unittests although most of their features are tested from a higher level (the endpoint tests). However some minor functionality is not tested and it would be good to use mocks to ensure the correct validator methods are called as well.
",start issue,OAuth 2 grant type tests lacking/missing
1,issue_closed,212,idan,oauthlib,ib-lundgren,2014-09-24 16:29:31,,closed issue,OAuth 2 grant type tests lacking/missing
0,issue_title,266,idan,oauthlib,singingwolfboy,2014-09-16 02:24:14,,start issue,Add links to Flask-Dance
1,issue_closed,266,idan,oauthlib,ib-lundgren,2014-09-22 13:00:27,,closed issue,Add links to Flask-Dance
2,pull_request_title,266,idan,oauthlib,singingwolfboy,2014-09-16 02:24:14,,4aa81a592e92c4b33add235db308b28adfa4b9fe,Add links to Flask-Dance
3,pull_request_merged,266,idan,oauthlib,ib-lundgren,2014-09-22 13:00:27,Add links to Flask-Dance,e255f3c8848f945c83aa09b8ac7e6ea42d2014cd,Pull request merge from singingwolfboy/oauthlib:flask-dance-in-readme to idan/oauthlib:master
4,pull_request_commit,266,idan,oauthlib,singingwolfboy,2014-09-16 02:23:51,Add links to Flask-Dance,4aa81a592e92c4b33add235db308b28adfa4b9fe,
0,issue_title,268,idan,oauthlib,whit537,2014-09-17 14:29:53,"Facebook uses URL-encoding instead of JSON for access token response bodies, and they use `expires` instead of `expires_in`. Fixes https://github.com/idan/oauthlib/issues/267.
",start issue,work around Facebook's non-conformance
1,issue_closed,268,idan,oauthlib,ib-lundgren,2014-09-22 14:35:52,,closed issue,work around Facebook's non-conformance
2,pull_request_title,268,idan,oauthlib,whit537,2014-09-17 14:29:53,"Facebook uses URL-encoding instead of JSON for access token response bodies, and they use `expires` instead of `expires_in`. Fixes https://github.com/idan/oauthlib/issues/267.
",c49028af26b89ebdc08a72d3cebbf553fa0ddef6,work around Facebook's non-conformance
3,pull_request_merged,268,idan,oauthlib,ib-lundgren,2014-09-22 14:35:52,work around Facebook's non-conformance,eae926ad1187fe4af178ee3e3bd513ca562ca981,Pull request merge from Unknown:facebook to idan/oauthlib:master
4,issue_comment,268,idan,oauthlib,whit537,2014-09-17 15:52:43,"Hmm ... Facebook also doesn't include a `token_type`, which is hard-required in [`validate_token_parameters`](https://github.com/idan/oauthlib/blob/8fcceae9ef2d6e3c0cdf38b12ac71bc538dd6432/oauthlib/oauth2/rfc6749/parameters.py#L315-L316). Raising an exception seems to me to violate the [robustness principle](http://en.wikipedia.org/wiki/Robustness_principle):

> [C]ode that sends commands or data to other machines (or to other programs on the same machine) should conform completely to the specifications, but code that receives input should accept non-conformant input as long as the meaning is clear.

In `Client` we [default](https://github.com/idan/oauthlib/blob/8fcceae9ef2d6e3c0cdf38b12ac71bc538dd6432/oauthlib/oauth2/rfc6749/clients/base.py#L34) to a token type of `Bearer`, and we [gracefully degrade](https://github.com/idan/oauthlib/blob/8fcceae9ef2d6e3c0cdf38b12ac71bc538dd6432/oauthlib/oauth2/rfc6749/clients/base.py#L182-L183) if `token_type` is not present in the params [passed](https://github.com/idan/oauthlib/blob/8fcceae9ef2d6e3c0cdf38b12ac71bc538dd6432/oauthlib/oauth2/rfc6749/clients/web_application.py#L272) to `_populate_attributes` after calling `parse_token_response` (under which we call `validate_token_parameters`). I can see raising if there is no access token: the meaning would not be clear in that case. For `token_type` I think we should raise only if the developer wants strict parsing.
",,
5,issue_comment,268,idan,oauthlib,whit537,2014-09-17 18:29:59,"Okay! Ready for review. :-)
",,
6,issue_comment,268,idan,oauthlib,whit537,2014-09-17 18:30:27,"cc: @ib-lundgren @idan @singingwolfboy @gulopine
",,
7,issue_comment,268,idan,oauthlib,singingwolfboy,2014-09-18 15:07:52,"LGTM, but you should document the `OAUTHLIB_STRICT_TOKEN_TYPE` envvar somewhere.
",,
8,issue_comment,268,idan,oauthlib,ib-lundgren,2014-09-22 13:13:28,"Looks good :) 

Maybe add a comment in http://oauthlib.readthedocs.org/en/latest/oauth2/clients/client.html  (change docs as you like btw).
",,
9,issue_comment,268,idan,oauthlib,whit537,2014-09-22 14:08:12,"@ib-lundgren It seemed better to add documentation to http://oauthlib.readthedocs.org/en/latest/oauth2/tokens/tokens.html. Look okay to you? :-)
",,
10,issue_comment,268,idan,oauthlib,whit537,2014-09-22 14:43:15,"Yay! Thanks @ib-lundgren! :D
",,
11,pull_request_commit_comment,268,idan,oauthlib,ib-lundgren,2014-09-22 13:05:31,"Maybe we should simply add token type Bearer here in non-strict mode. Ideally logging that so was done on DEBUG level.
",c49028af26b89ebdc08a72d3cebbf553fa0ddef6,"(41, '', u'oauthlib/oauth2/rfc6749/parameters.py')"
12,pull_request_commit_comment,268,idan,oauthlib,whit537,2014-09-22 13:36:53,"I figured we could depend on the default behavior of the calling class, as described [above](https://github.com/idan/oauthlib/pull/268#issuecomment-55915122).
",c49028af26b89ebdc08a72d3cebbf553fa0ddef6,"(41, '', u'oauthlib/oauth2/rfc6749/parameters.py')"
13,pull_request_commit_comment,268,idan,oauthlib,ib-lundgren,2014-09-22 13:39:13,"Fair enough.
",c49028af26b89ebdc08a72d3cebbf553fa0ddef6,"(41, '', u'oauthlib/oauth2/rfc6749/parameters.py')"
14,pull_request_commit,268,idan,oauthlib,whit537,2014-09-17 14:26:29,"Failing test for URL-encoded access tokens

Facebook doesn't use JSON, see https://github.com/idan/oauthlib/issues/267.",abf6bd5e9c413ad7f538f86604c0d1c29494882e,
15,pull_request_commit,268,idan,oauthlib,whit537,2014-09-17 14:33:55,Implement URL-encoding fallback for access tokens,0a21ddfcdd0bfc108d7225d3074d58141259f519,
16,pull_request_commit,268,idan,oauthlib,whit537,2014-09-17 15:02:13,Failing test for expires as alias for expires_in,d2937b275f23d7cb9c555c61ceb69fbebeace2ae,
17,pull_request_commit,268,idan,oauthlib,whit537,2014-09-17 15:10:03,Support expires as an alias for expires_in,0d87ea236379023aa646a91df21e52c1c674dd6a,
18,pull_request_commit,268,idan,oauthlib,whit537,2014-09-17 16:07:17,Failing test for token_type relaxation,3afd5cd84ee21312b0081850f7f4895c95bb121d,
19,pull_request_commit,268,idan,oauthlib,whit537,2014-09-17 16:19:39,Relax token_type checking,0544857516745f4ba6c9829702253e17c9f77458,
20,pull_request_commit,268,idan,oauthlib,whit537,2014-09-22 14:07:03,Add documentation of OAUTHLIB_STRICT_TOKEN_TYPE,c49028af26b89ebdc08a72d3cebbf553fa0ddef6,
0,issue_title,28,idan,oauthlib,idan,2012-05-01 08:29:38,,start issue,Write tests for OAuth1 Client class
1,issue_closed,28,idan,oauthlib,ib-lundgren,2014-09-24 16:29:08,,closed issue,Write tests for OAuth1 Client class
2,issue_comment,28,idan,oauthlib,ib-lundgren,2012-11-16 19:04:26,"There are many things that would be useful to add as tests. On top of my head ...
- Tests serve as great documentation, show off the different signature methods with tests, i.e. rsa and plaintext.
- Requests with application/x-www-form-urlencoded, ensure it affects the signature
- Requests with non application/x-www-form-urlencoded, ensure it does not affect the signature. For examples see http://en.wikipedia.org/wiki/MIME_type
- Possible run over a set of sample ""real"" requests with more complex combinations of query params, headers and body than the usual basic test.
- Similar to the above would be to generate possible combinations of combinations with nonsensical but valid data and see if there are odd edge cases. 
",,
