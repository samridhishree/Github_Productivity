,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,124,pycqa,astroid,pylint-bot,2015-06-20 15:05:34,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

```
#!python

class A:
    def __getitem__(self, index):
         return index + 1

a = A()
a[4] # this should be five
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/124
",start issue,Understand instance.__getitem__
1,issue_closed,124,pycqa,astroid,pylint-bot,2015-12-09 05:53:48,,closed issue,Understand instance.__getitem__
2,issue_comment,124,pycqa,astroid,pylint-bot,2015-07-01 20:08:56,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add support for inferring subscript on instances, which will  use **getitem**. Closes issue #124.
",,
3,issue_comment,124,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Add support for inferring subscript on instances, which will  use **getitem**. Closes issue #124.
",,
0,issue_title,128,pycqa,astroid,pylint-bot,2015-06-20 15:12:04,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given this code, A.getattr('**mro**') doesn't actually return the mro, but the ancestors
as returned by Class.ancestors(). This should call Class.mro() instead.

```
#!python

from astroid.test_utils import extract_node
n = extract_node('''
class A:
   pass
''')
print(n.getattr('__mro__'))
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/128
",start issue,Class.getattr('__mro__') doesn't actually return the mro
1,issue_closed,128,pycqa,astroid,pylint-bot,2015-12-09 05:53:51,,closed issue,Class.getattr('__mro__') doesn't actually return the mro
2,issue_comment,128,pycqa,astroid,pylint-bot,2015-10-26 14:17:33,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Closed by https://bitbucket.org/logilab/astroid/commits/aab2116ebe0b80a096b111d2e6765b47bc992d12
",,
3,issue_comment,128,pycqa,astroid,pylint-bot,2015-10-26 14:25:32,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Class.getattr('**mro**') returns the actual MRO.

Also, Class.getattr('**bases**') returns actual bases.
It previously didn't work correctly, because it was putting the
entire ancestors into the Tuple object and it put those classes
into the wrong attribute.
Closes issue #128.
",,
4,issue_comment,128,pycqa,astroid,pylint-bot,2015-11-19 13:22:50,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Class.getattr('**mro**') returns the actual MRO.

Also, Class.getattr('**bases**') returns actual bases.
It previously didn't work correctly, because it was putting the
entire ancestors into the Tuple object and it put those classes
into the wrong attribute.
Closes issue #128.
",,
0,issue_title,117,pycqa,astroid,pylint-bot,2015-06-20 14:55:26,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

There are a couple of syntactic changes to Python 3.5:
- the new @ (matmul) operator
- additional unpacking generalization
- async and await keywords

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/117
",start issue,Support Python 3.5
1,issue_closed,117,pycqa,astroid,pylint-bot,2015-12-09 05:53:43,,closed issue,Support Python 3.5
2,issue_comment,117,pycqa,astroid,pylint-bot,2015-10-14 21:48:01,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

We do support 3.5 in astroid 1.4.0 for instance. There are some issues with the understanding of a couple of Python 3.5's features, but they can be considered separate of this (#201 and #202 for instance).
",,
3,issue_comment,117,pycqa,astroid,pylint-bot,2015-10-15 08:11:23,"_Original comment by_ **Robert Kuska (BitBucket: [xkuska](http://bitbucket.org/xkuska))**:

---

Hi Claudiu, when do you plan to release v1.4.0? 
",,
4,issue_comment,117,pycqa,astroid,pylint-bot,2015-10-15 08:26:17,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I don't know honestly. We have these 5 issues that blocks the release (https://bitbucket.org/logilab/astroid/issues?priority=blocker&status=open&status=new) but I didn't have enough time to tackle them. Could take a week or two or something like that.
",,
5,issue_comment,117,pycqa,astroid,pylint-bot,2015-11-02 09:42:49,"_Original comment by_ **Robert Kuska (BitBucket: [xkuska](http://bitbucket.org/xkuska))**:

---

Astroid is blocking our update to python3.5 in Fedora, any news with the release date?
",,
6,issue_comment,117,pycqa,astroid,pylint-bot,2015-11-02 09:45:26,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

It's still going to take some time to fix those blocker issues, since they require more architectural changes than a couple of fixes. But since the release it's taking too long, our plans is to start cherrypicking some features, including 3.5 support, into a new branch and release the new version from there. That's something that I plan to start doing this week and hopefully it will be done by next week. If I don't comeback with an answer until then, please ping me back.
",,
7,issue_comment,117,pycqa,astroid,pylint-bot,2015-11-11 08:06:34,"_Original comment by_ **Robert Kuska (BitBucket: [xkuska](http://bitbucket.org/xkuska))**:

---

I don't want to rush you or anything, but do you have some ETA for the python3.5 support release?
",,
8,issue_comment,117,pycqa,astroid,pylint-bot,2015-11-11 15:17:57,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Thank you for the ping. I started to graft changesets from the default branch into a 1.4.0 branch (https://bitbucket.org/logilab/astroid/commits/branch/1.4.0) and hopefully I would finish this in the following days, together with pylint. I'm trying to have it finished by weekend.
",,
9,issue_comment,117,pycqa,astroid,pylint-bot,2015-11-29 18:05:56,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I just released pylint 1.5.0, together with astroid 1.4.0. I'm extremely sorry for this delay, we'll try to have a better release schedule in place in order to avoid long-awaited releases such as this one.
",,
0,issue_title,131,pycqa,astroid,pylint-bot,2015-06-20 15:56:42,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given the following code, A.test will be inferred as an UnboundMethod, which is wrong, because there's no unbound method on Python 3. We should probably return a function instead.

```
#!python

from astroid.test_utils import extract_node
n = extract_node('''
class A:
    def test(self): pass
A.test #@
''')
inferred = next(n.infer())
print(inferred)
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/131
",start issue,There's no unbound method on Python 3
1,issue_closed,131,pycqa,astroid,PCManticore,2016-01-04 08:08:46,,closed issue,There's no unbound method on Python 3
2,issue_comment,131,pycqa,astroid,PCManticore,2016-01-04 08:08:46,"Closes as duplicate of #257
",,
0,issue_title,111,pycqa,astroid,pylint-bot,2015-06-20 14:35:20,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Improve the data model for all objects we support right now. We should know the dunder attributes of functions, classes and any other object.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/111
",start issue,Better data model
1,issue_closed,111,pycqa,astroid,PCManticore,2016-02-18 22:04:44,,closed issue,Better data model
2,issue_comment,111,pycqa,astroid,PCManticore,2016-02-18 22:04:44,"Closing, since it will be handled by https://github.com/PyCQA/astroid/pull/319
",,
0,issue_title,127,pycqa,astroid,pylint-bot,2015-06-20 15:09:20,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Currently, doing this will result in `module` having `print_function` as a local:

```
#!python

from __future__ import print_function
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/127
",start issue,__future__ statements should not be locals of the module
1,issue_closed,127,pycqa,astroid,pylint-bot,2015-12-09 05:53:51,,closed issue,__future__ statements should not be locals of the module
2,issue_comment,127,pycqa,astroid,pylint-bot,2015-07-07 09:00:33,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Actually it's not a problem at all, since print_function will be available as an object in that module.
",,
0,issue_title,114,pycqa,astroid,pylint-bot,2015-06-20 14:39:51,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

This should be done only when Class.getattr is invoked and not from Instance.getattr (since attributes of the metaclass can only be accessed from the class, not the instance). 

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/114
",start issue,Make Class.getattr to look into Class.implicit_metaclass()
1,issue_closed,114,pycqa,astroid,pylint-bot,2015-12-09 05:53:40,,closed issue,Make Class.getattr to look into Class.implicit_metaclass()
2,issue_comment,114,pycqa,astroid,pylint-bot,2015-07-26 08:50:00,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Class.getattr looks by default in the implicit and the explicit metaclasses, which is `type` on Python 3.

Closes issue #114.
",,
0,issue_title,119,pycqa,astroid,pylint-bot,2015-06-20 14:58:16,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

In Python 3, the scope of DATA is not the list comprehension, but the parent scope of list comprehension. Currently, everything that is found in a list/set/generator comprehension is believed to have the comprehension as the scope.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/119
",start issue,Wrong scope for DATA in  [x for x in DATA]
1,issue_closed,119,pycqa,astroid,pylint-bot,2015-12-09 05:53:44,,closed issue,Wrong scope for DATA in  [x for x in DATA]
2,issue_comment,119,pycqa,astroid,pylint-bot,2015-11-10 17:07:47,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Fixed in 2.0 by 0a27d529944caa52ee97867f277d7397973b3bf9
",,
0,issue_title,120,pycqa,astroid,pylint-bot,2015-06-20 14:59:47,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

.root() should guarantee that what it returns is a module. Unfortunately, I found a couple of cases, which involved transforms, where .root() return classes instead of modules. We should raise an error in that case (and probably we should fix whatever was returning a class to return a module instead).

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/120
",start issue,Raise an error if .root() is not a module
1,issue_closed,120,pycqa,astroid,pylint-bot,2015-12-09 05:53:45,,closed issue,Raise an error if .root() is not a module
2,issue_comment,120,pycqa,astroid,pylint-bot,2015-08-21 07:33:33,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Actually this can happen if the tree was spliced from another and it is in the course of being transformed.
",,
0,issue_title,134,pycqa,astroid,pylint-bot,2015-06-20 19:01:23,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

We currently don't have an Arg node for Python 3's arguments, because we are using AssName instead (this is how it works on Python 2).

```
#!python

>>> from ast import parse
>>> x = parse('''
... def test(a): pass
... ''')
>>> print(x)
<_ast.Module object at 0x0000000DBEF6F908>
>>> x.body
[<_ast.FunctionDef object at 0x0000000DBEF6F940>]
>>> x.body[0]
<_ast.FunctionDef object at 0x0000000DBEF6F940>
>>> x.body[0].args
<_ast.arguments object at 0x0000000DBEF6FA20>
>>> x.body[0].args.args
[<_ast.arg object at 0x0000000DBEF76A58>]
>>>
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/134
",start issue,Introduce a new Arg node for Python 3 function arguments
1,issue_closed,134,pycqa,astroid,pylint-bot,2015-12-09 05:53:56,,closed issue,Introduce a new Arg node for Python 3 function arguments
2,issue_comment,134,pycqa,astroid,pylint-bot,2015-08-10 19:48:33,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

In fact, it's nicer to have AssName instead of a new Arg node, since it needs to be the same on both Python 2 and Python 3. Introducing a new node will change that requirement.
",,
0,issue_title,138,pycqa,astroid,pylint-bot,2015-06-20 20:18:59,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Given the following code, `c` is inferred as an int, not as a list.

```
#!python

a = (1, 2, 3)
b, *c = a #
print(c.lala)
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/138
",start issue,Understand tuple unpacking correctly
1,issue_closed,138,pycqa,astroid,pylint-bot,2015-12-09 05:54:00,,closed issue,Understand tuple unpacking correctly
2,issue_comment,138,pycqa,astroid,pylint-bot,2015-06-30 23:36:52,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Star unpacking in assignments returns properly a list, not the individual components. Closes issue #138.
",,
3,issue_comment,138,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Star unpacking in assignments returns properly a list, not the individual components. Closes issue #138.
",,
0,issue_title,116,pycqa,astroid,pylint-bot,2015-06-20 14:52:41,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

astroid's transform are executed at the same step as the tree rebuilding, which means that if the transform function is doing inference, then it is inferring on a partial tree, which might result in potential errors. In fact, there is a known report of this kind of crash: https://bitbucket.org/logilab/pylint/issue/426/inference-system-errors-out-on-imported
We should separate these steps into two: first build the tree and on the resulting tree apply the transformations.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/116
",start issue,Add a separate step for transforms
1,issue_closed,116,pycqa,astroid,pylint-bot,2015-12-09 05:53:42,,closed issue,Add a separate step for transforms
2,issue_comment,116,pycqa,astroid,pylint-bot,2015-08-02 07:03:55,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

There's a new separate step for transforms.

Until now, the transforms were applied at the same time the tree was
being built. This was problematic if the transform functions were
using inference, since the inference was executed on a partially
constructed tree, which led to failures when post-building
information was needed (such as setting the _from_names
for the From imports).
Now there's a separate step for transforms, which are applied
using transform.TransformVisitor.

There's a couple of other related changes:

```
  * astroid.parse and AstroidBuilder gained a new parameter
    `apply_transforms`, which is a boolean flag, which will
    control if the transforms are applied. We do this because
    there are uses when the vanilla tree is wanted, without
    any implicit modification.

  * the transforms are also applied for builtin modules,
    as a side effect of the fact that transform visiting
    was moved in AstroidBuilder._post_build from
    AstroidBuilder._data_build.
```

Closes issue #116.
",,
3,issue_comment,116,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

There's a new separate step for transforms.

Until now, the transforms were applied at the same time the tree was
being built. This was problematic if the transform functions were
using inference, since the inference was executed on a partially
constructed tree, which led to failures when post-building
information was needed (such as setting the _from_names
for the From imports).
Now there's a separate step for transforms, which are applied
using transform.TransformVisitor.

There's a couple of other related changes:

```
  * astroid.parse and AstroidBuilder gained a new parameter
    `apply_transforms`, which is a boolean flag, which will
    control if the transforms are applied. We do this because
    there are uses when the vanilla tree is wanted, without
    any implicit modification.

  * the transforms are also applied for builtin modules,
    as a side effect of the fact that transform visiting
    was moved in AstroidBuilder._post_build from
    AstroidBuilder._data_build.
```

Closes issue #116.
",,
0,issue_title,137,pycqa,astroid,pylint-bot,2015-06-20 20:16:31,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

Could be useful for these kind of checks:

```
#!python

a = (1, 2, 3)
x = a[:2]
print(x[0].lala) # int has no attribute lala
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/137
",start issue,Understand tuple/list/set slicing
1,issue_closed,137,pycqa,astroid,pylint-bot,2015-12-09 05:53:59,,closed issue,Understand tuple/list/set slicing
2,issue_comment,137,pycqa,astroid,pylint-bot,2015-08-20 21:25:32,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Issue #90 was marked as a duplicate of this issue.
",,
3,issue_comment,137,pycqa,astroid,pylint-bot,2015-08-20 21:54:52,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Understand slices of tuples, lists, strings and instances with support for slices.

Closes issue #137.
",,
0,issue_title,129,pycqa,astroid,pylint-bot,2015-06-20 15:15:14,"Originally reported by: **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**

---

By using @six.add_metaclass decorator, we can add a new metaclass for the decorated class.
Class.metaclass can be smarter and it can detect this case.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/129
",start issue,Understand @six.add_metaclass
1,issue_closed,129,pycqa,astroid,pylint-bot,2015-12-09 05:53:52,,closed issue,Understand @six.add_metaclass
2,issue_comment,129,pycqa,astroid,pylint-bot,2015-07-07 09:51:41,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Understand metaclasses added with six.add_metaclass decorator. Closes issue #129.
",,
3,issue_comment,129,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Understand metaclasses added with six.add_metaclass decorator. Closes issue #129.
",,
