,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,307,pycqa,astroid,dbaum,2016-01-15 17:44:46,"This particular test sometimes fails, although I have not figured out a way to make it fail reliably.  Here is the error message:
## FAIL: test_builtin_fromlineno_missing (unittest_nodes.ArgumentsNodeTC)

Traceback (most recent call last):
  File ""/Users/dbaum/Desktop/pylint/astroid/astroid/tests/unittest_nodes.py"", line 507, in test_builtin_fromlineno_missing
    self.assertEqual(new.args.fromlineno, 0)
AssertionError: 1 != 0

Unfortunately, altering the test code often causes the flakiness to go away which is making it hard to instrument.  I was able to get it to fail occasionally with the following instrumentation:

```
    new_list = cls.getattr('__new__')
    for x in new_list:
      try:
        print x.name, x.args.fromlineno
      except Exception:
        print x
    new = new_list[-1]
    self.assertEqual(new.args.fromlineno, 0)
```

On I failure I see:

**new** ImportFrom.**new**(modname='**builtin**',
                   names=[('**new**', None)],
                   level=0)
**new** ImportFrom.**new**(modname='**builtin**',
                   names=[('**new**', None)],
                   level=0)
**new** 0
**new** 0
**new** 1

On success I see:

**new** ImportFrom.**new**(modname='**builtin**',
                   names=[('**new**', None)],
                   level=0)
**new** ImportFrom.**new**(modname='**builtin**',
                   names=[('**new**', None)],
                   level=0)
**new** 0
**new** 1
**new** 0

This leads me to believe that the order of getattr() results is non-deterministic.
",start issue,unittest_nodes.ArgumentsNodeTC.test_builtin_fromlineno_missing is flaky
1,issue_closed,307,pycqa,astroid,dbaum,2016-01-15 20:08:02,,closed issue,unittest_nodes.ArgumentsNodeTC.test_builtin_fromlineno_missing is flaky
2,issue_comment,307,pycqa,astroid,dbaum,2016-01-15 17:52:39,"More info: upon success the last two values from getattr() are 

<BoundMethod **new** of **builtin**.type at 0x4597724240
<BoundMethod **new** of **builtin**.object at 0x4597883472

on failure they are:

<BoundMethod **new** of **builtin**.object at 0x4529744784
<BoundMethod **new** of **builtin**.type at 0x4529787216

So it comes down to the ordering of object and type and one has an args with fromlineno=0 and the other has fromlineno=1.
",,
3,issue_comment,307,pycqa,astroid,dbaum,2016-01-15 17:59:45,"Now I'm very confused.  When running just the one test file it looks like the fromlineno on both type and object are 0.  When running all tests via test discovery then the args for type seem to have fromlineno=1.  But I'm not even sure this is 100% true.  I'm out of my depth here.
",,
4,issue_comment,307,pycqa,astroid,PCManticore,2016-01-15 19:53:49,"There's also https://github.com/PyCQA/astroid/issues/195 for tracking this issue, which has nothing to do with the order of the results of getattr. The problem is caused by https://github.com/PyCQA/astroid/blob/master/astroid/node_classes.py#L387, which uses as a line number, in case one is not defined for a node, the first one of the children or the parents of the node. This happens usually with builtin modules, since there is no way to find out on which lines they actually are. The approach is definitely not a good idea and the fix would be to remove fixed_source_line altogether and leave such nodes with a line number not set. While this is rather easy, the hard thing is going through pylint and see where this might trip an exception or something undefined. Unfortunately I didn't have time to look over pylint for this issue. 
",,
5,issue_comment,307,pycqa,astroid,dbaum,2016-01-15 20:08:02,"I'm fine with closing this issue since #195 is tracking it (or perhaps there's a way to merge this into #195 as a duplicate).
",,
0,issue_title,305,pycqa,astroid,dbaum,2016-01-14 17:23:57,"As expected, this will also fix pylint so that it correctly deals with ""raise ()"" in the python3 checker.
",start issue,Fix unpack_infer() to fail if results are empty.
1,issue_closed,305,pycqa,astroid,PCManticore,2016-01-15 13:13:20,,closed issue,Fix unpack_infer() to fail if results are empty.
2,pull_request_title,305,pycqa,astroid,dbaum,2016-01-14 17:23:57,"As expected, this will also fix pylint so that it correctly deals with ""raise ()"" in the python3 checker.
",3567d7da03d7b9e4bfbc59c7d047b99c3b4ebf3e,Fix unpack_infer() to fail if results are empty.
3,issue_comment,305,pycqa,astroid,PCManticore,2016-01-15 13:13:20,"Merged localy https://github.com/PyCQA/astroid/commit/99a3870d4ba212a036dd629ad9ee020333009425. I also squashed your commits into one and cherry-picked it in multiple branches.
",,
4,issue_comment,305,pycqa,astroid,dbaum,2016-01-15 16:22:15,"Thanks!

I'm new to using github, etc.  Is there something I should have done to
make the pull easier for you?  Should I have combined the commits
together?  Should I have not tried to synced with upstream/master?

I'm asking because it is likely that I'll have a few more small patches to
astroid in the near future and I want to make things as smooth as possible
for you.

Dave

On Fri, Jan 15, 2016 at 7:13 AM Claudiu Popa notifications@github.com
wrote:

> Closed #305 https://github.com/PyCQA/astroid/pull/305.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/PyCQA/astroid/pull/305#event-516132730.
",,
5,issue_comment,305,pycqa,astroid,PCManticore,2016-01-15 16:26:10,"No worries. I prefer to have the commits squashed if they are not part of a bigger feature, in that case having some smaller chunks makes more sense. Also you should use rebase for feature branches, so that you won't be needing syncing with the upstream/master. It should be good after that, the cherry-picking is something that I must do, since we have multiple branches of development at the moment.

Thanks for the (future) contributions, let me know if there is something I could help you with.
",,
6,issue_comment,305,pycqa,astroid,dbaum,2016-01-15 16:38:46,"I'm trying to understand the workflow.  Should I be doing my work on a
brach, keep my master at (or behind) the upstream master, then rebase my
feature branch to master and squash the commits at that point?  Something
like:

git checkout -b new-feature master
git commit -a -m ""some work""
git commit -a -m ""some more work""

# I'm a little fuzzy on exactly what commands to use here.  The idea is to

bring my

# master up to date with the upstream master.

git pull upsstream/master

# Go back to working on my fix...

git checkout new-feature
git commit -a -m ""even more work""

# Clean things up before a pull request.

git rebase -i master

On Fri, Jan 15, 2016 at 10:26 AM Claudiu Popa notifications@github.com
wrote:

> No worries. I prefer to have the commits squashed if they are not part of
> a bigger feature, in that case having some smaller chunks makes more sense.
> Also you should use rebase for feature branches, so that you won't be
> needing syncing with the upstream/master. It should be good after that, the
> cherry-picking is something that I must do, since we have multiple branches
> of development at the moment.
> 
> Thanks for the (future) contributions, let me know if there is something I
> could help you with.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/PyCQA/astroid/pull/305#issuecomment-172006547.
",,
7,issue_comment,305,pycqa,astroid,PCManticore,2016-01-15 16:41:34,"Exactly, that's the workflow that I'm using mostly.
",,
8,pull_request_commit,305,pycqa,astroid,dbaum,2016-01-14 17:14:39,fix unpack_infer() to fail if results are empty,0786e08e9d7b7e5022a9f41cdfac0263301d2754,
9,pull_request_commit,305,pycqa,astroid,dbaum,2016-01-14 17:18:35,added a blank line,dd5e3f71e8502005416a970930f4bb66fce17c1b,
10,pull_request_commit,305,pycqa,astroid,dbaum,2016-01-14 23:31:09,Merge remote-tracking branch 'upstream/master',3567d7da03d7b9e4bfbc59c7d047b99c3b4ebf3e,
0,issue_title,303,pycqa,astroid,mbdevpl,2016-01-14 10:34:15,"[Those 3 are] methods of WorkingSet objects [that] are also available
as module- level functions in pkg_resources that apply to the default
working_set instance. Thus, you can use e.g. pkg_resources.require()
as an abbreviation for pkg_resources.working_set.require()

above taken from:
https://pythonhosted.org/setuptools/pkg_resources.html#basic-workingset-methods

this fixes https://github.com/PyCQA/pylint/issues/780

Signed-off-by: Mateusz Bysiek mb@mbdev.pl
",start issue,added 3 pkg_resources functions to brain
1,issue_closed,303,pycqa,astroid,PCManticore,2016-01-15 12:13:33,,closed issue,added 3 pkg_resources functions to brain
2,pull_request_title,303,pycqa,astroid,mbdevpl,2016-01-14 10:34:15,"[Those 3 are] methods of WorkingSet objects [that] are also available
as module- level functions in pkg_resources that apply to the default
working_set instance. Thus, you can use e.g. pkg_resources.require()
as an abbreviation for pkg_resources.working_set.require()

above taken from:
https://pythonhosted.org/setuptools/pkg_resources.html#basic-workingset-methods

this fixes https://github.com/PyCQA/pylint/issues/780

Signed-off-by: Mateusz Bysiek mb@mbdev.pl
",c639f03b302dda84825061ba35a68e2037f4c951,added 3 pkg_resources functions to brain
3,pull_request_merged,303,pycqa,astroid,PCManticore,2016-01-15 12:13:33,added 3 pkg_resources functions to brain,b81aa95f62d174d8431fdc7953f14a5e2c8d3e55,Pull request merge from Unknown:pkg_resources_fix to PyCQA/astroid:master
4,issue_comment,303,pycqa,astroid,The-Compiler,2016-01-14 10:48:50,"I'm not very familiar with astroid brain stuff, but isn't the point of this to _not_ call the real code behind it, i.e. should it call stuff from `pkg_resources`?
",,
5,issue_comment,303,pycqa,astroid,PCManticore,2016-01-14 10:56:09,"That's a string, it doesn't call real functions.
",,
6,pull_request_commit,303,pycqa,astroid,mbdevpl,2016-01-14 10:47:11,"added 3 pkg_resources functions to brain

[Those 3 are] methods of WorkingSet objects [that] are also available
as module- level functions in pkg_resources that apply to the default
working_set instance. Thus, you can use e.g. pkg_resources.require()
as an abbreviation for pkg_resources.working_set.require()

above taken from:
https://pythonhosted.org/setuptools/pkg_resources.html#basic-workingset-methods

this fixes https://github.com/PyCQA/pylint/issues/780

Signed-off-by: Mateusz Bysiek <mb@mbdev.pl>",c639f03b302dda84825061ba35a68e2037f4c951,
0,issue_title,304,pycqa,astroid,Daenyth,2016-01-14 16:48:24,"And then the issues page on bitbucket points to github.
",start issue,"http://www.astroid.org/ ""Contribute"" link points to bitbucket"
1,issue_closed,304,pycqa,astroid,The-Compiler,2016-01-14 17:18:39,,closed issue,"http://www.astroid.org/ ""Contribute"" link points to bitbucket"
2,issue_comment,304,pycqa,astroid,jcristau,2016-01-14 17:17:39,"updated the astroid.org web site, thanks.
",,
0,issue_title,308,pycqa,astroid,dbaum,2016-01-15 20:03:39,"The unit test shows some very strange source code that can cause an infinite recursion in astroid.  It looks like the context normally provides protection against this sort of thing, but it isn't plumbed through to the check of the assignment.  Here's one possible fix.  I'm completely open to other solutions for fixing this since adding the context arg to a few methods does seem a bit invasive.  Maybe there's a cleaner solution.
",start issue,Fix metaclass infinite loop when a class is its own metaclass.
1,issue_closed,308,pycqa,astroid,PCManticore,2016-02-17 11:35:03,,closed issue,Fix metaclass infinite loop when a class is its own metaclass.
2,pull_request_title,308,pycqa,astroid,dbaum,2016-01-15 20:03:39,"The unit test shows some very strange source code that can cause an infinite recursion in astroid.  It looks like the context normally provides protection against this sort of thing, but it isn't plumbed through to the check of the assignment.  Here's one possible fix.  I'm completely open to other solutions for fixing this since adding the context arg to a few methods does seem a bit invasive.  Maybe there's a cleaner solution.
",9f5de2f1dc6f4e57b67222663c95d5d184155547,Fix metaclass infinite loop when a class is its own metaclass.
3,issue_comment,308,pycqa,astroid,ceridwen,2016-01-19 01:27:47,"This looks fine to me.  @PCManticore?
",,
4,issue_comment,308,pycqa,astroid,PCManticore,2016-01-19 14:55:38,"I'm not sure we should proliferate the use of the context as a parameter for all these methods. I'll look closely into the problem later today to see if there's another solution we might use for fixing this.
",,
5,issue_comment,308,pycqa,astroid,dbaum,2016-01-29 18:28:43,"Any ideas on this?  It's not urgent, but if you have suggestions on other ways to fix the problem please let me know.
",,
6,issue_comment,308,pycqa,astroid,PCManticore,2016-02-02 12:05:07,"Taking a look today or tomorrow, sorry for the delay, I got sidetracked in January with a lot of stuff.
",,
7,issue_comment,308,pycqa,astroid,PCManticore,2016-02-17 11:35:03,"It seems that this is fixed in 2.0, but it reproduces on master. Unfortunately I couldn't find the commit where this got fixed, but since 2.0 will become the new master in the next couple of weeks, I'm considering this fixed. Sorry for taking me so long to look over this issue and please let me know if it still reproduces for you on 2.0 (please note though that it is in an unstable test and pylint doesn't work yet with it)
",,
8,pull_request_commit,308,pycqa,astroid,dbaum,2016-01-15 19:57:43,Fix metaclass infinite loop when a class is its own metaclass.,9f5de2f1dc6f4e57b67222663c95d5d184155547,
0,issue_title,306,pycqa,astroid,PCManticore,2016-01-15 11:43:14,"There are some issues with With, AsyncWith and WithItem in 2.0. There are some variables which are undefined in as_string and AsyncWith is broken in Python 3.5. @ceridwen could you fix these issues? While you're at it, can you remove the use of optional_vars so that we can start using WithItem across the board for both Python 2 and 3?
",start issue,Issues with With implementation in 2.0
1,issue_closed,306,pycqa,astroid,ceridwen,2016-01-15 23:46:18,,closed issue,Issues with With implementation in 2.0
2,issue_comment,306,pycqa,astroid,ceridwen,2016-01-15 23:46:18,"Should be fixed as of 5971b00.
",,
