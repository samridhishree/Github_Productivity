"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","49","aio-libs","aioredis","lud4ik","2014-09-24 23:02:27","Do you have any suggestions for API? 
","start issue","Lock support"
"issue_closed","49","aio-libs","aioredis","lud4ik","2014-09-28 17:25:08","","closed issue","Lock support"
"pull_request_title","49","aio-libs","aioredis","lud4ik","2014-09-24 23:02:27","Do you have any suggestions for API? 
","5b0874f4792879f1580fea85398213a2baadfafe","Lock support"
"issue_comment","49","aio-libs","aioredis","jettify","2014-09-25 18:47:46","Hi Luda!
I suggest look through following article  [1]. Where  extension to algorithm [2] is described. As result, lock would be possible to use on multiple nodes.
[1] http://redis.io/topics/distlock
[2] http://redis.io/commands/set 
","",""
"issue_comment","49","aio-libs","aioredis","lud4ik","2014-09-25 18:53:23","Maybe, I don't get, but what's wrong with my pull request code? Actually, I have already read second article and used it, first I've read long ago ... so did I miss smth?
I asked question because, maybe, author think it would be better with cm (not sure it's possible because release is also coroutine) or to extend api with method for making lock live longer for specified tms. It's my first asyncio code:)
","",""
"issue_comment","49","aio-libs","aioredis","popravich","2014-09-25 19:22:50","Hi Luda,
I need to look into your pull request.
I will come back a bit later 
","",""
"issue_comment","49","aio-libs","aioredis","jettify","2014-09-25 19:23:30","http://redis.io/topics/distlock is extension of your approach for multiple servers. It is nice feature to have :) Since it is common case where you have to run  some kind of service on several nodes and use distributed locking mechanism. 

I am not an author of this library, and my comments are just my 2 cents :) 
","",""
"issue_comment","49","aio-libs","aioredis","tailhook","2014-09-25 20:50:10","From quick skimming:
1. The ""register_script"" thing. I believe common pattern is try evalsha and if there is no such script at server-side, send whole script. It seems a convenience method for such behavior should be implemented first.
2. ""sleep"" may need to be growing (not sure)
3. uuid.uuid4() is too slow and overkill for the task

About the API, it would be cool if it look like:

```
with (yield from self.redis.acquire(""name"")):
   something
```

Having the ""release"" thing in an asynchronous task. Not sure if this is as cool as it looks.
","",""
"issue_comment","49","aio-libs","aioredis","lud4ik","2014-09-25 23:05:22","Travis failed not from my fault.

> Having the ""release"" thing in an asynchronous task. Not sure if this is as cool as it looks.

It looks like you desire impossible thing
","",""
"issue_comment","49","aio-libs","aioredis","tailhook","2014-09-25 23:12:18","The `urandom` thing is **the** slow thing in uuid.uuid4(). Some simpler value non involving system calls should be used IMO. You don't need cryptographically secure random value here.

> It looks like you desire impossible thing

Something along the lines of:

```
def __exit__(self, _, _, _):
  Task(self.release(), loop=self._loop)
```

I'm not sure its a good pattern though.
","",""
"issue_comment","49","aio-libs","aioredis","popravich","2014-09-26 07:43:25","Hi Luda,

I appreciate your effort, but this PR has too much things that could be done simplier and cleaner.

Regarding API:
1. Lock should be available as context manager (for implementation you can see either CM in pool.py or locks.py in asyncio);
2. I'm still not sure if locks should be implemented through `LockMixin`,
I thing it would be better if lock is implemented as stand-alone feature and could be used as:
`lock = Lock(redis, 'lock-key', ...)`;
summarizing points above for end-user usage should look like:

``` python
redis = yield from aioredis.create_redis(....)
with (yield from aioredis.extra.Lock(redis, 'my-lock-key')):
    pass # do some work
```

Regarding code itself see my line comments.
","",""
"issue_comment","49","aio-libs","aioredis","lud4ik","2014-09-26 12:26:44","Thank you. Fixed.
What params would you like to drop? Honestly, I've taken a look at params of sync client realization. There api consider situation for continue trying forever if blocking_timeout is None and blocking = True. I guess it's not a use case, so I've dropped blocking param. blocking_timeout = None means stop trying after first fail.
I don't understand why ""timeout should be decremented each time you failed acquireing lock"". This parameter is for expiration of key, there are no such remark for single node algorithm. 
In release I must check token (it's coroutine), so code after with block should block until it has yieded. Does using Task in **exit** method guarantee it?

I guess that No because other test failed because of my test. Even in twisted if one of tests has a delayed call it would fail that test and here if I've properly understood, my test's call falled during other test execution and my tests succeeded.
Don't know how to fix.
","",""
"pull_request_commit_comment","49","aio-libs","aioredis","popravich","2014-09-26 07:53:41","Too much parameters here.
- `blocking_timeout` and `timeout` are used improperly:
- `timeout` should be decremented each time you failed acquireing lock;
- `blocking_timeout` should be used as `yield from asyncio.wait_for(self._acquire(), blocking_timeout)`
  because `_acquire` can block for longer period then specified in `blocking_timeout`;
","5b0874f4792879f1580fea85398213a2baadfafe","(None, '', u'aioredis/extra/lock.py')"
"pull_request_commit_comment","49","aio-libs","aioredis","popravich","2014-09-26 07:56:40","here test will fail because there is no global event loop (the `loop` argument should be passed explicitly).
","5b0874f4792879f1580fea85398213a2baadfafe","(None, '', u'aioredis/extra/lock.py')"
"pull_request_commit","49","aio-libs","aioredis","lud4ik","2014-09-24 22:58:29","Lock support","e0bccaf5f761cb82415e39071663986607d7474b",""
"pull_request_commit","49","aio-libs","aioredis","lud4ik","2014-09-24 23:14:58","Fixes","a95a83b6cd3c133a2b8827a9b318117978bafaaf",""
"pull_request_commit","49","aio-libs","aioredis","lud4ik","2014-09-24 23:22:27","Fix pep8","ca24262d0b7275ada74ec3685a03d9e0be7786f7",""
"pull_request_commit","49","aio-libs","aioredis","lud4ik","2014-09-25 22:48:41","Fixes: replace uuid with urandom, sleep factor, handling of NOSCRIPT","dac2d236f4a9975c0e422431042799b77e96b370",""
"pull_request_commit","49","aio-libs","aioredis","lud4ik","2014-09-25 23:34:16","fix","1fd58e3cda98e03b980b71a6b723b18381ea7dd2",""
"pull_request_commit","49","aio-libs","aioredis","lud4ik","2014-09-26 12:20:34","cm & fixes","5b0874f4792879f1580fea85398213a2baadfafe",""
