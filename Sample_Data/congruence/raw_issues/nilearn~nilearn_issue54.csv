"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","54","nilearn","nilearn","pgervais","2013-05-14 12:26:07","The ""standardize"" parameter of nisl.signals.clean() is now used for setting to
unit variance the _output_ signals, instead of the _input_ before confounds
removal. This latter operation is now performed in all cases. This standardization
is robust to signals that are (almost) zero everywhere.

This modification may have a lot of consequences. It has been made because standardizing the output of clean() was required for plot_regions_covariance.py in the ""roi"" branch. The new behaviour is technically consistent, but I'd like to have everyone's opinion before merging into ""roi"" (or master).
","start issue","Changed behaviour of nisl.signals.clean()"
"issue_closed","54","nilearn","nilearn","pgervais","2013-05-17 07:35:06","","closed issue","Changed behaviour of nisl.signals.clean()"
"pull_request_title","54","nilearn","nilearn","pgervais","2013-05-14 12:26:07","The ""standardize"" parameter of nisl.signals.clean() is now used for setting to
unit variance the _output_ signals, instead of the _input_ before confounds
removal. This latter operation is now performed in all cases. This standardization
is robust to signals that are (almost) zero everywhere.

This modification may have a lot of consequences. It has been made because standardizing the output of clean() was required for plot_regions_covariance.py in the ""roi"" branch. The new behaviour is technically consistent, but I'd like to have everyone's opinion before merging into ""roi"" (or master).
","c0ce06d6bb76a315743279826a3c1491c27a6ca1","Changed behaviour of nisl.signals.clean()"
"pull_request_merged","54","nilearn","nilearn","pgervais","2013-05-17 07:35:06","Changed behaviour of nisl.signals.clean()","5e009c669f429f69df8ef84663c36de4ad9fa5cc","Pull request merge from pgervais/nilearn:clean to nilearn/nilearn:master"
"issue_comment","54","nilearn","nilearn","pgervais","2013-05-15 15:13:18","In the state before this commit, the output of clean() is indeed not necessarily standardized, even if the option is set to True (standardization is performed only at the beginning). However, it seems that the only case for which non-standardized signals are output, is when there's some filtering (low_pass or high_pass not None).

In the original state of clean(), there was two standardizations: one at the beginning, one at the end, and both were controlled by the ""standardize"" option. However, they correspond to very different things: the first standardization enhance the conditionning of the linear system which is to be inverted, whereas the second is only a convenience for downstream computations. This is why 1) I removed the second standardization some times ago, 2) I now re-add this standardization, but make only this one optional.
","",""
"issue_comment","54","nilearn","nilearn","pgervais","2013-05-16 07:13:56","This is not a problem: just call clean() this way:

```
clean(detrend=True, standardize=True)
```
","",""
"pull_request_commit","54","nilearn","nilearn","pgervais","2013-05-07 16:03:26","Changed behaviour of nisl.signals.clean()

The ""standardize"" parameter of nisl.signals.clean() is now used for setting to
unit variance the *output* signals, instead of the *input* before confounds
removal. This latter operation is now performed in all cases. This standardization
is robust to signals that are (almost) zero everywhere.","25160f0f689acc62e421bf4feeb461c5019848c0",""
"pull_request_commit","54","nilearn","nilearn","pgervais","2013-05-16 13:01:16","Merge branch 'master' into clean

Conflicts:
	nisl/signals.py","c0ce06d6bb76a315743279826a3c1491c27a6ca1",""
