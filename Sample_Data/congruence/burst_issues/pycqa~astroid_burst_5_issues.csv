,rectype,issueid,project_owner,project_name,actor,time,text,action,title
0,issue_title,162,pycqa,astroid,pylint-bot,2015-07-13 22:32:16,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

visit_assign in the rebuilder is currently using the stdlib ast node types to assign the type attribute on astroid function nodes.  This should be internalized to one of the node classes rather than being an external assignment.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/162
",start issue,Move the method type determination logic from visit_assign to one of the node classes.
1,issue_closed,162,pycqa,astroid,pylint-bot,2015-12-09 05:54:21,,closed issue,Move the method type determination logic from visit_assign to one of the node classes.
2,issue_comment,162,pycqa,astroid,pylint-bot,2015-08-05 21:58:41,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Move the determination of a function type from rebuilder to Function.type.

Closes issue #162.
",,
3,issue_comment,162,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Move the determination of a function type from rebuilder to Function.type.

Closes issue #162.
",,
0,issue_title,160,pycqa,astroid,pylint-bot,2015-07-13 22:26:58,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

The first three are virtually alpha-equivalent.  Dict also has some overlapping code.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/160
",start issue,"Duplicate code in List, Set, Tuple, and Dict in node_classes.py"
1,issue_closed,160,pycqa,astroid,pylint-bot,2015-12-09 05:54:19,,closed issue,"Duplicate code in List, Set, Tuple, and Dict in node_classes.py"
2,issue_comment,160,pycqa,astroid,pylint-bot,2015-07-26 12:43:03,"_Original comment by_ **Florian Bruhin (BitBucket: [The-Compiler](http://bitbucket.org/The-Compiler), GitHub: @The-Compiler?)**:

---

Are you sure you're looking at astroid and not at pylint?

If you're still at the sprints, I'm currently at the pytest table (in the same roon the Django sprint is) - just come there if you need help :)
",,
3,issue_comment,160,pycqa,astroid,pylint-bot,2015-07-26 12:52:08,"_Original comment by_ **Micha≈Ç Bultrowicz (BitBucket: [Lagoena](http://bitbucket.org/Lagoena))**:

---

Ye... i dind't notice it was astroid, pylint :) So I'll come there
",,
4,issue_comment,160,pycqa,astroid,pylint-bot,2015-08-20 21:54:52,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Introduce a base class for Set, List and Tuple in order to avoid code duplication. Closes issue #160.
",,
5,issue_comment,160,pycqa,astroid,pylint-bot,2015-11-14 17:53:53,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Introduce a base class for Set, List and Tuple in order to avoid code duplication. Closes issue #160.
",,
0,issue_title,159,pycqa,astroid,pylint-bot,2015-07-13 15:49:29,"Originally reported by: **Benedikt Reinartz (BitBucket: [filmor](http://bitbucket.org/filmor), GitHub: @filmor?)**

---

Currently, it is not possible to properly use pylint on modules using .NET classes through Python.NET, as the imports fail. This is due to `modutils.find_from_modpath` essentially relying on `imp.find_module`, which does not work for this kind of pseudo-module.

I'd gladly work on a PR if one can provide me a hint on how this is supposed to be handled.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/159
",start issue,Support for Python.NET
1,issue_closed,159,pycqa,astroid,PCManticore,2016-06-27 17:37:53,,closed issue,Support for Python.NET
2,issue_comment,159,pycqa,astroid,pylint-bot,2015-07-13 15:07:03,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Python.NET is IronPython or it's different? I will be happy to assist you on a PR, but first I got to see why it fails. ;-)
",,
3,issue_comment,159,pycqa,astroid,pylint-bot,2015-07-14 11:38:29,"_Original comment by_ **Benedikt Reinartz (BitBucket: [filmor](http://bitbucket.org/filmor), GitHub: @filmor?)**:

---

No, [Python.NET](http://pythonnet.github.io/) is a library to import and use CLR assemblies like Python modules.

I don't know yet what the exact loading mechanism is, it's not exposed to Python, but it allows you to do stuff like `from System import String` to use .NET classes.
",,
4,issue_comment,159,pycqa,astroid,pylint-bot,2015-07-31 07:41:20,"_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Probably we could fix this by adding AST transforms. Have a look at astroid.brain, there's a bunch of transforms that could be useful for inspiration. Adding support for this in modutils doesn't seem the right approach.
",,
5,issue_comment,159,pycqa,astroid,filmor,2015-12-09 14:30:38,"Hi again, I now know a bit more about the loading mechanism. Basically, Python.NET overloads `__import__` in a brute-force way as soon as you `import clr`. I will have a look at `astroid.brain`, didn't have the time, yet.
",,
6,issue_comment,159,pycqa,astroid,PCManticore,2016-01-04 08:07:04,"Hi @filmor I somehow missed your comment. Yes, astroid.brain seems the proper way for solving this. Just ping me if you need any help.
",,
7,issue_comment,159,pycqa,astroid,denfromufa,2016-01-30 04:03:07,"@filmor this would be really useful! let me know how it goes?
",,
8,issue_comment,159,pycqa,astroid,PCManticore,2016-06-27 17:37:53,"Closing for the lack of activity. I don't have a particular interest in Python .NET, but I would be happy to help anyone that wants to tackle this issue, by implementing transforms or other changes required for astroid to work on this platform, but there is no point, for now, to keep this issue opened if there is no interest in supporting it by the core.
",,
9,issue_comment,159,pycqa,astroid,denfromufa,2016-09-14 03:37:46,"@PCManticore @filmor by building pure python skeletons programmatically (reflection on imported .NET types) like in pycharm this should be possible even without patching pylint and other static analysis tools:

https://github.com/JetBrains/python-skeletons/blob/master/numpy/core/multiarray.py
",,
0,issue_title,161,pycqa,astroid,pylint-bot,2015-07-13 22:28:55,"Originally reported by: **BitBucket: [ceridwenv](http://bitbucket.org/ceridwenv), GitHub: @ceridwen**

---

All the comprehensions share some identical code.

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/161
",start issue,[easy] Duplicated code in the comprehensions in scoped_nodes.py
1,issue_closed,161,pycqa,astroid,PCManticore,2016-02-19 16:36:22,,closed issue,[easy] Duplicated code in the comprehensions in scoped_nodes.py
2,issue_comment,161,pycqa,astroid,PCManticore,2016-02-19 16:36:22,"Closing. The only shared code they have right now is the postinit initialisation, which is only two lines long for each class. Other solutions would complicate the code needlessly (mixins or base classes).
",,
