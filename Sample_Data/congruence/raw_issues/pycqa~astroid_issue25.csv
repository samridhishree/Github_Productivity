"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","25","pycqa","astroid","pylint-bot","2014-04-21 10:58:08","Originally reported by: **BitBucket: [DXist](http://bitbucket.org/DXist), GitHub: @DXist?**

---

After update of astroid to 1.1.0 I get ""maximum recursion depth exceeded"". Reproduced on Python 2.7.5 and Python 2.7.6.

```
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 686, in _is_metaclass
    if _is_metaclass(baseobj):
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 678, in _is_metaclass
    for baseobj in base.infer():
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 313, in wrapped
    for res in _func(node, context, **kwargs):
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 337, in wrapper
    for node in func(*args, **kwargs):
File ""/PYTHON2.7/site-packages/astroid/inference.py"", line 213, in infer_getattr
    for owner in self.expr.infer(context):
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 313, in wrapped
    for res in _func(node, context, **kwargs):
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 337, in wrapper
    for node in func(*args, **kwargs):
File ""/PYTHON2.7/site-packages/astroid/inference.py"", line 213, in infer_getattr
    for owner in self.expr.infer(context):
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 313, in wrapped
    for res in _func(node, context, **kwargs):
File ""/PYTHON2.7/site-packages/astroid/inference.py"", line 146, in infer_name
    frame, stmts = self.lookup(self.name)
File ""/PYTHON2.7/site-packages/astroid/node_classes.py"", line 119, in lookup
    return self.scope().scope_lookup(self, name)
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 816, in scope_lookup
    return frame._scope_lookup(node, name, offset)
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 141, in _scope_lookup
    return pscope.scope_lookup(node, name)
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 273, in scope_lookup
    return self._scope_lookup(node, name, offset)
File ""/PYTHON2.7/site-packages/astroid/scoped_nodes.py"", line 130, in _scope_lookup
    stmts = node._filter_stmts(self.locals[name], self, offset)
File ""/PYTHON2.7/site-packages/astroid/node_classes.py"", line 146, in _filter_stmts
    myframe = self.frame()
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 443, in frame
    return self.parent.frame()
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 443, in frame
    return self.parent.frame()
File ""/PYTHON2.7/site-packages/astroid/bases.py"", line 443, in frame
    return self.parent.frame()
RuntimeError: maximum recursion depth exceeded
```

---
- Bitbucket: https://bitbucket.org/logilab/astroid/issue/25
","start issue","RuntimeError: maximum recursion depth exceeded"
"issue_closed","25","pycqa","astroid","pylint-bot","2015-12-09 05:51:58","","closed issue","RuntimeError: maximum recursion depth exceeded"
"issue_comment","25","pycqa","astroid","pylint-bot","2014-04-21 16:01:35","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Could you provide a sample code on which it fails with this?
","",""
"issue_comment","25","pycqa","astroid","pylint-bot","2014-04-21 22:54:01","_Original comment by_ **Michael Barrientos (BitBucket: [mbarrien](http://bitbucket.org/mbarrien), GitHub: @mbarrien?)**:

---

Same error happened to me due to some monkey patching within our code and running it through pylint. The following exhibits the error in pylint 1.2.0/astroid 1.1.0, but not in pylint 1.1.0/astroid 1.0.1.

###

# In base.py

```
#!python

class Base(object):
    pass
```

# In derived.py

```
#!python

import base

_real_Base = base.Base

class Derived(_real_Base):
    pass

def run():
    base.Base = Derived
```

###

From what I saw in my investigation, when astroid analyzes the class Derived, inside somewhere in infer(), it incorrectly infers that Base's list of base classes also includes Derived, which ends up with a loop in the class hierarchy.

The following does NOT cause an error when base.py and derived.py are merged in the same file.

# In all.py

```
#!python

class Base(object):
    pass

_real_Base = Base

class Derived(_real_Base):
    pass

def run():
    Base = Derived
```

(Our actual case involved monkey patching some code for suppressing some WSGI logging in Django, so this is not just a theoretical case.)
","",""
"issue_comment","25","pycqa","astroid","pylint-bot","2014-04-22 07:16:03","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Merged in PCManticore/astroid/ancestors (pull request #31)

Skip the same infered nodes as the base class in _is_metaclass. Closes issue #25
","",""
"issue_comment","25","pycqa","astroid","pylint-bot","2014-04-22 07:16:03","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Merged in PCManticore/astroid/ancestors (pull request #31)

Skip the same infered nodes as the base class in _is_metaclass. Closes issue #25
","",""
"issue_comment","25","pycqa","astroid","pylint-bot","2014-04-22 07:16:03","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

Skip the same infered nodes as the base class in _is_metaclass. Closes issue #25.
","",""
"issue_comment","25","pycqa","astroid","pylint-bot","2014-04-22 07:17:29","_Original comment by_ **Claudiu Popa (BitBucket: [PCManticore](http://bitbucket.org/PCManticore), GitHub: @PCManticore)**:

---

I added a potential fix. DXist, could you tell me that this also fixes your problem?
","",""
"issue_comment","25","pycqa","astroid","pylint-bot","2014-04-22 07:38:35","_Original comment by_ **BitBucket: [DXist](http://bitbucket.org/DXist), GitHub: @DXist?**:

---

Yes. That fixes my problem. Thank you!
","",""
"issue_comment","25","pycqa","astroid","pylint-bot","2014-04-23 14:35:48","_Original comment by_ **David Shea (BitBucket: [davidshea](http://bitbucket.org/davidshea), GitHub: @davidshea?)**:

---

Issue #26 was marked as a duplicate of this issue.
","",""
