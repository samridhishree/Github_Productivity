"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","412","pycqa","astroid","cpennington","2017-03-08 19:12:38","For example:

```
class AccessResponse(object):
    def __init__(self, has_access):
        self.has_access = has_access

    def __nonzero__(self):
        return self.has_access

not AccessResponse(False)
```","start issue","Fix an infinite loop that could occur during inference of __nonzero__."
"issue_closed","412","pycqa","astroid","PCManticore","2017-03-11 13:17:40","","closed issue","Fix an infinite loop that could occur during inference of __nonzero__."
"pull_request_title","412","pycqa","astroid","cpennington","2017-03-08 19:12:38","For example:

```
class AccessResponse(object):
    def __init__(self, has_access):
        self.has_access = has_access

    def __nonzero__(self):
        return self.has_access

not AccessResponse(False)
```","50cad740924a2ba984a3b0dd7d02719f23a92981","Fix an infinite loop that could occur during inference of __nonzero__."
"pull_request_merged","412","pycqa","astroid","PCManticore","2017-03-11 13:17:40","Fix an infinite loop that could occur during inference of __nonzero__.","acae0ce721d63fce5c46fa81a5297af36f3cd04a","Pull request merge from cpennington/astroid:fix-bool-inference-infinite-loop to PyCQA/astroid:master"
"issue_comment","412","pycqa","astroid","ceridwen","2017-03-08 20:14:07","Could you add a test case for this issue that passes with your changes?  Same for the other pull requests.  This one should probably go in unittest_regrtest.py.","",""
"issue_comment","412","pycqa","astroid","cpennington","2017-03-08 20:18:32","@ceridwen: Yeah, I just added a test for the other PRs (and for this one, actually). I'm happy to move it to `regrtest.py` if that would be better than `unittest_inference.py` (which is where I just put it).","",""
"issue_comment","412","pycqa","astroid","ceridwen","2017-03-08 20:52:52","It's probably fine in `unittest_inference`.","",""
"issue_comment","412","pycqa","astroid","PCManticore","2017-03-11 13:17:24","Thanks for the pull request @cpennington !","",""
"pull_request_commit","412","pycqa","astroid","cpennington","2017-03-08 19:10:15","Fix an infinite loop that could occur during inference of __nonzero__.

For example:

class AccessResponse(object):
    def __init__(self, has_access):
        self.has_access = has_access

    def __nonzero__(self):
        return self.has_access

not AccessResponse(False)","50cad740924a2ba984a3b0dd7d02719f23a92981",""
"pull_request_commit","412","pycqa","astroid","cpennington","2017-03-08 20:17:36","Add a test for variable-value __nonzero__ methods","46e5ac18f1c6d6fc0f53f6eb19ec0c45c8aaca0d",""
