"rectype","issueid","project_owner","project_name","actor","time","text","action","title"
"issue_title","49","nilearn","nilearn","pgervais","2013-04-23 13:25:45","The ""detrend"" boolean argument in clean() is an easy way to add a trend as another confound to remove. Thus, it must be exactly equivalent to adding a trend in the ""confounds"" array. This was not the case before this commit. 

The fix was easy: it was just a matter of detrending the confounds as well as the signals.

A similar concern could exist with filtering: if a low-pass or high-pass filter is specified, the output result must not contain unfiltered frequencies, even if some confounds do contain those frequencies. This is not the case with the present implementation, because filtering is performed after everything else.
","start issue","Fixed a bug in signals.clean()"
"issue_closed","49","nilearn","nilearn","pgervais","2013-04-23 13:53:58","","closed issue","Fixed a bug in signals.clean()"
"pull_request_title","49","nilearn","nilearn","pgervais","2013-04-23 13:25:45","The ""detrend"" boolean argument in clean() is an easy way to add a trend as another confound to remove. Thus, it must be exactly equivalent to adding a trend in the ""confounds"" array. This was not the case before this commit. 

The fix was easy: it was just a matter of detrending the confounds as well as the signals.

A similar concern could exist with filtering: if a low-pass or high-pass filter is specified, the output result must not contain unfiltered frequencies, even if some confounds do contain those frequencies. This is not the case with the present implementation, because filtering is performed after everything else.
","372c392f06397f3b976bc7ec3ddb4c6bd97448dd","Fixed a bug in signals.clean()"
"pull_request_merged","49","nilearn","nilearn","pgervais","2013-04-23 13:53:58","Fixed a bug in signals.clean()","81374b399b89bbedf186d7ccc88cfef0c322d908","Pull request merge from pgervais/nilearn:clean_confounds_fix to nilearn/nilearn:master"
"issue_comment","49","nilearn","nilearn","GaelVaroquaux","2013-04-23 13:34:48","> The fix was easy: it was just a matter of detrending the confounds as well as
> the signals.

Excellent!

:+1: for merge.
","",""
"pull_request_commit","49","nilearn","nilearn","pgervais","2013-04-23 13:16:05","Fixed a bug in signals.clean()

The ""detrend"" boolean argument in clean() is an easy way to add a trend
as another confound to remove. It must be exactly equivalent to adding
a trend in the ""confounds"" array. This was not the case before this
commit.","372c392f06397f3b976bc7ec3ddb4c6bd97448dd",""
"pull_request_commit_comment","49","nilearn","nilearn","GaelVaroquaux","2013-04-23 13:33:15","I hadn't seen this so far, even though it is not new in your PR: 'nisignals'. I'd rather avoid 'import as'. You can do 'from nisl.signals import clean'.
","372c392f06397f3b976bc7ec3ddb4c6bd97448dd","(9, 216, u'nisl/tests/test_signals.py')"
"pull_request_commit_comment","49","nilearn","nilearn","GaelVaroquaux","2013-04-23 13:34:15","Good test! Thanks
","372c392f06397f3b976bc7ec3ddb4c6bd97448dd","(20, 227, u'nisl/tests/test_signals.py')"
"pull_request_commit_comment","49","nilearn","nilearn","pgervais","2013-04-23 13:53:05","I find it much easier to read code where functions are prefixed with their respective package, or a shortcut for it (like np for numpy), than having to scroll all the time to the top of the file to known where it comes from. And I don't like writing ""import"" anywhere in the file either.
","372c392f06397f3b976bc7ec3ddb4c6bd97448dd","(9, 216, u'nisl/tests/test_signals.py')"
"pull_request_commit_comment","49","nilearn","nilearn","GaelVaroquaux","2013-04-23 13:56:21","> I find it much easier to read code where functions are prefixed with their
> respective package, or a shortcut for it (like np for numpy), than having to
> scroll all the time to the top of the file to known where it comes from. And I
> don't like writing ""import"" anywhere in the file either.

OK, but then please use 'nisl.signal.clean'. 'import as' is strongly
frowned upon in general because it creates a vocabulary that is
coder-specific.
","372c392f06397f3b976bc7ec3ddb4c6bd97448dd","(9, 216, u'nisl/tests/test_signals.py')"
